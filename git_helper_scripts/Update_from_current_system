#!/bin/ash

# this script copies files from
# the running system into the local git repositoy dir
# was once run outside KarlGodt_ForkWoof.Push.d/
# now inside any subdirectory below top-level
# of local git repositoy dir, f.ex. woof2.git/utils/

MESSAGE0="Bulk Maintanance Replacement of today by ${0##*/} ."
MESSAGE=${MESSAGE:-"$*"}

case $MESSAGE in *help) echo "Batch Update Files from Current System
into this Git Branch. No Editor gets launched.
If any Parameters are given except 'help' , these
will be the Commit Message. The default message is
'$MESSAGE0'
"
exit 0
;;
esac
MESSAGE=${MESSAGE:-"$MESSAGE0"}

ME_PROG=`realpath "$0"`
ME_DIR=${ME_PROG%/*}
cd "$ME_DIR" || exit 3

#cd "$ME_DIR"/KarlGodt_ForkWoof.Push.d/woof-code/rootfs-skeleton || exit
cd "$ME_DIR"/../woof-code/rootfs-skeleton || exit 4

FIND=`find . |sort`

while read found
do


found="${found#*/}"
#echo "$found"  #DEBUG
[ "$found" ] || continue
[ -d "$found" ] && continue
#[ "${found##*/}" = '.gitignore' ] && continue
#[ "${found##*/}" = 'EMPTYDIRMARKER' ] && continue
#test "`echo "$found" | grep -iE '\.gz$|\.png$|\.xpm$|\.wav$|\.au$'`" && continue
case $found in
*.gitignore|*EMPTYDIRMARKER|*.gz|*.jpg|*.png|*.xpm|*.wav|*.au) continue;;
esac

# if file on system does not exist, install it from git
[ -e /"$found" ] || { mkdir -p /"${found%/*}"; cp -a ./"$found" /"$found"; continue; }

# Links
[ -L ./"$found" ] && { realpath /"$found" || continue; }

test -L ./"$found" && LINKT00=`readlink ./"$found"`
test -L /"$found"  && LINKT01=`readlink /"$found"`
if test "$LINKT00" -a "$LINKT01"; then
 if test "$LINKT00" != "$LINKT01"; then
  if test -d ./"$found"; then
   ln -v -snf "$LINKT01" ./"$found"
  elif test -e "$LINKT01"; then
   ln -v -sf "$LINKT01" ./"$found"
  fi
  LINKCHANGE=1
 fi
fi
#unset LINKT00 LINKT01

if test ! "$LINKCHANGE"; then
PERM00=`stat -c %a ./"$found"`
PERM01=`stat -c %a /"$found"`
 if test "$PERM00" = "$PERM01"; then
  if realpath ./"$found" >/dev/null && realpath /"$found" >/dev/null; then
   #SAME=-s
   diff -q $SAME ./"$found" /"$found" && continue # 0 is equal, 1 is different
   #echo "./$found and /$found differ"
  fi
 fi
#test -L ./"$found" && continue
fi
sleep 10
cd "$ME_DIR"/../ || exit 5

cp -a -v /"$found" "$ME_DIR"/../woof-code/rootfs-skeleton/"$found" || { cd "$ME_DIR"/../woof-code/rootfs-skeleton; continue; }
git add woof-code/rootfs-skeleton/"$found" || { cd "$ME_DIR"/../woof-code/rootfs-skeleton; continue; }
git commit -m "${found##*/} : $MESSAGE" || echo "Failure committing $found"

cd "$ME_DIR"/../woof-code/rootfs-skeleton

sleep 1
unset LINKT00 LINKT01 LINKCHANGE

done<<EOI
`echo "$FIND"`
EOI

