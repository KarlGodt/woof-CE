
# event=button power.*
# action=/usr/local/bin/power.sh "%e"

#event=ac_adapter action=/etc/acpi/ac.sh %e


#event=button/power PWRF 00000080 action=/etc/acpi/powerbtn.sh %e
#event=0x00000080 action=/etc/acpi/powerbtn.sh %e

#PWRF /etc/acpi/powerbtn.sh %e
#PWRB /etc/acpi/powerbtn.sh %e


#event=HKEY.* action=/etc/acpi/hotkey.pl %e

#event=button[ /]sleep action=/etc/acpi/actions/sleepbtn.sh %e


############################################################
#acpid.c

#ifndef EV_SW
# define EV_SW         0x05
#endif
#ifndef EV_KEY
# define EV_KEY        0x01
#endif
#ifndef SW_LID
# define SW_LID        0x00
#endif
#ifndef SW_RFKILL_ALL
# define SW_RFKILL_ALL 0x03
#endif
#ifndef KEY_POWER
# define KEY_POWER      116     /* SC System Power Down */
#endif
#ifndef KEY_SLEEP
# define KEY_SLEEP      142     /* SC System Sleep */
#endif

#static const struct acpi_event f_evt_tab[] = {
#   { "EV_KEY", 0x01, "KEY_POWER", 116, 1, "button/power PWRF 00000080" },
#   { "EV_KEY", 0x01, "KEY_POWER", 116, 1, "button/power PWRB 00000080" },
#};


#static void parse_conf_file(const char *filename)
#{
#   parser_t *parser;
#   char *tokens[2];
#
#   parser = config_open2(filename, fopen_for_read);
#
#   if (parser) {
#       while (config_read(parser, tokens, 2, 2, "# \t", PARSE_NORMAL)) {
#           act_tab = xrealloc_vector(act_tab, 1, n_act);
#           act_tab[n_act].key = xstrdup(tokens[0]);
#           act_tab[n_act].action = xstrdup(tokens[1]);
#           n_act++;
#       }
#       config_close(parser);
#   } else {
#       act_tab = (void*)f_act_tab;
#       n_act = ARRAY_SIZE(f_act_tab);
#   }
#}
#struct acpi_action {
#   const char *key;
#   const char *action;
#};
#
#static const struct acpi_action f_act_tab[] = {
#   { "PWRF", "PWRF/00000080" },
#   { "LID0", "LID/00000080" },
#};

#if (option_mask32 & OPT_e) {
#           event = NULL;
#           if (option_mask32 & OPT_e) {
#               char *buf;
#               int len;
#
#               buf = xmalloc_reads(pfd[i].fd, NULL);
#               /* buf = "button/power PWRB 00000080 00000000" */
#               len = strlen(buf) - 9;
#               if (len >= 0)
#                   buf[len] = '\0';
#               event = find_action(NULL, buf);
#               free(buf);

## bash-3.00# cat /proc/acpi/event
## button/power PWRF 00000080 00000005

#if (buf) {
#           if (strncmp(buf, evt_tab[i].desc, strlen(buf)) == 0) {
#               action = evt_tab[i].desc;
#               break;
#           }
#       }



PWRF     busybox/powerbutton
#PWRF PWRF/00000080

#} else {
#               struct input_event ev;
#
#               if (sizeof(ev) != full_read(pfd[i].fd, &ev, sizeof(ev)))
#                   continue;
#
#               if (ev.value != 1 && ev.value != 0)
#                   continue;
#
#               event = find_action(&ev, NULL);
