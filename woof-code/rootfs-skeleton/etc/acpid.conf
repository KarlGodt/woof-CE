#event=button[ /]lid action=/etc/acpi/actions/lm_lid.sh %e


#event=battery.* action=/etc/acpi/actions/lm_battery.sh %e


#event=ac_adapter.* action=/etc/acpi/actions/lm_ac_adapter.sh %e


# event=button power.*
# action=/usr/local/bin/power.sh "%e"

#event=ac_adapter action=/etc/acpi/ac.sh %e


#event=button/power PWRF 00000080 action=/etc/acpi/powerbtn.sh %e
#event=0x00000080 action=/etc/acpi/powerbtn.sh %e

#PWRF /etc/acpi/powerbtn.sh %e
#PWRB /etc/acpi/powerbtn.sh %e

#"button/sleep SBTN 00000080 00000000"
#SBTN /etc/acpi/powerbtn.sh %e
#PBTN /etc/acpi/powerbtn.sh %e

#event=HKEY.* action=/etc/acpi/hotkey.pl %e


#event=ac_adapter.* action=/etc/acpi/ac_adapt.pl %e


#event=button[ /]sleep action=/etc/acpi/actions/sleepbtn.sh %e

#static void parse_conf_file(const char *filename)
#{
#	parser_t *parser;
#	char *tokens[2];
#
#	parser = config_open2(filename, fopen_for_read);
#
#	if (parser) {
#		while (config_read(parser, tokens, 2, 2, "# \t", PARSE_NORMAL)) {
#			act_tab = xrealloc_vector(act_tab, 1, n_act);
#			act_tab[n_act].key = xstrdup(tokens[0]);
#			act_tab[n_act].action = xstrdup(tokens[1]);
#			n_act++;
#		}
#		config_close(parser);
#	} else {
#		act_tab = (void*)f_act_tab;
#		n_act = ARRAY_SIZE(f_act_tab);
#	}
#}
#struct acpi_action {
#	const char *key;
#	const char *action;
#};
#
#static const struct acpi_action f_act_tab[] = {
#	{ "PWRF", "PWRF/00000080" },
#	{ "LID0", "LID/00000080" },
#};

#error error error error error error error error error
