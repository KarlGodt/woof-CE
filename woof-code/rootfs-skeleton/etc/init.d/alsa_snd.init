#!/bin/ash
echo "$0:$@" >&2
#Barry Kauler april 2009, puppylinux.com
#called from /etc/rc.d/rc.services at bootup, with 'start' param.
#called from /etc/rc.d/rc.shutdown at shutdown, with 'stop' param.

########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.8-i486-Celeron2.2GHz-2.6.33.2-dpup005-rev2
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.8-i486-Celeron2.2GHz-2.6.33.2-dpup005-rev2·#3·SMP·Mon·Jan·10·22:34:00·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Wed·Oct·26·23:16:52·CEST·2011
#
#
#
#
#
########################################################################

#echo "SHLVL='$SHLVL'" # DEBUG

###KRG : changed order @start ; widened the loop @stop [ still leaves snd,soundcore,ac_97_bus ] ; added suport for retrovol
. /etc/rc.d/f4puppy5

ALSA_SETTINGS_FILE=/etc/asound.state
RETROVOL_OPTS="-hide"  # mixer by pizzasgood

SYSLOG=-s #-L  # modprobe option

###<KRG>
echo "PROG=$PROG"
PROG='/etc/init.d/alsa_snd.init'
echo "PROG=$PROG"
if [ ! -f "$PROG" ] ; then
PROG=''
[ -e "`which alsa`" ] && PROG='alsa'
#PROG=${PROG:-'puppyAlsaSoundInitalizer'}
fi
echo "PROG=$PROG"
PROG=${PROG:-'puppyAlsaSoundInitalizer'}
echo "PROG=$PROG"
ZERO="$0"
PROGPID="$$"
echo "$PROG" "$0" "$PROGPID" #DEBUG
if [ "$ZERO" = "$PROG" ] ; then
PROGPAT="$PROG"
EXIT='exit'
else
PROGPAT="$PROG called by $ZERO"
EXIT='return'
fi  ###</KRG>
echo "PROG=$PROG"

_say_help(){
RV=${1:-0}
shift

echo -e "
\\033[1;36m""Usage of $PROG : <version=Macpup_Foxy3-KRG>""\\033[0;39m
"  ##KRG
 echo "'$PROG start' to wait up to one minute at boot time
for kernel sound modules loaded , if no modules detected ,
force module loading by modprobe 'snd-card-0' ,
[ exit if still no sound modules found in '/proc/modules' and
skipping the following : ]
loading the modules 'snd_mixer_oss ,snd_seq_oss ,snd_pcm_oss' ,
recreates the sound device nodes in /dev and /dev/snd with the
Major and Minor numbers found in /sys/* ,
start and restore alsa settings if file '$ALSA_SETTINGS_FILE' exists
otherwise [ pfix=ram , live CD , PUPMODE=5 ] setting the alsa mixer defaults ,
and if running in X terminal , start retrovol if installed .
"  ##KRG
 echo "'$PROG stop' to store last alsa settings ,
killall sound users , mute everything and unload all sound modules .
"  ##KRG
 echo -e "\\033[1;35m""For additional help check 'man alsactl' , 'aconnect' , 'amixer' ,
'lsmod' , 'modprobe' , 'bootparam' on the internet .""\\033[0;39m
"  ##KRG

exit $RV
}

_say_version(){
echo "$PROG : $VERSION"
exit 0
}

_status(){
# DEBUG
  echo
  echo -n 'Soundmodules loaded ? '
  lsmod | grep $Q '^snd[-_].*' && echo "Yes." || { echo "No."; return 1; }
  echo
  echo -n 'Unused soundmodules loaded ? '
  lsmod | grep '^snd_' | grep $Q '\ 0\ $' && echo "Yes." || { echo "NO."; return 2; }
  echo
  return 0
}

_load_snd_card_0(){
modprobe $VERB $Q snd-card-0
}

_wait_modules_loaded(){
  local CNT=0
  while [ -z "`lsmod | grep -E -i '^snd|sound'`" ] ; do
  echo -e "\\033[0;31m""No Sound Modules found `date`""\\033[0;39m"
  #sleep 3
  CNT=$(( CNT + 1 ))
  if [ "$CNT" = "20" -o "$FORCE" ] ; then
  modprobe $VERB $Q snd-card-0
  break
  sleep 3
  fi
  done
}

__load_undetected_modules(){
   #sometimes these don't all load...
   [ -z "`lsmod | grep 'snd[-_]mixer[-_]oss'`" ] && modprobe $SYSLOG $VERB $Q snd-mixer-oss
   [ -z "`lsmod | grep 'snd[-_]seq[-_]oss'`" ] && modprobe $SYSLOG $VERB $Q snd-seq-oss
   [ -z "`lsmod | grep 'snd[-_]pcm[-_]oss'`" ] && modprobe $SYSLOG $VERB $Q snd-pcm-oss
}

_load_undetected_modules(){
 for m in mixer seq pcm
 do
 grep $Q "^snd[-_]${m}[-_]oss" /proc/modules || modprobe $SYSLOG $VERB $Q snd-${m}-oss
 sleep 0.1
 done
}

__create_sound_devices(){

   D=`find /sys -type d -name "*sound*"`
   POOL=''
    for i in $D ; do
     _debugx "$i"
     DEV=`find $i -type f -name "dev" -exec echo -n {}@ \; -exec cat {} \; | tr ':' '@' | tr ' ' '@' -exec echo \; ` ;
     POOL="$POOL $DEV"
    sleep 0.1
    done
   test -d /dev/snd || mkdir $VERB -p /dev/snd
   POOL=`echo $POOL | rev`
    for i in $POOL ; do
     NODE=`echo $i | cut -f 3 -d '@'`
     NODE=`echo $NODE | rev`
     case $NODE in */event*) continue;; esac  # /dev/input/event[0-9]*
     #NODE=`basename $(dirname $(echo $NODE) )`
     NODE=${NODE%/*}
     NODE=${NODE##*/}
     MAJ=`echo $i | cut -f 2 -d '@'`
     MAJ=`echo $MAJ | rev`
     Min=`echo $i | cut -f 1 -d '@'`
     Min=`echo $Min | rev`
     _debug "$NODE" "$MAJ" "$Min"
     rm -f /dev/$NODE
     mknod /dev/$NODE c $MAJ $Min
     #rm -f /dev/snd/$NODE
     #mknod /dev/snd/$NODE c $MAJ $Min
     #cp $VERB -af /dev/$NODE /dev/snd/
      ln $VERB -sf ../$NODE /dev/snd/$NODE
    sleep 0.1
    done
}

_create_sound_devices(){

   D=`find /sys -type d -name "*sound*"`
   POOL=''
    for i in $D ; do
     _debugx "$i"
     DEV=`find $i -type f -name "dev" -exec echo -n {}@ \; -exec cat {} \; | tr ':' '@' | tr ' ' '@' -exec echo \; ` ;
     POOL="$POOL
$DEV"
    sleep 0.1
    done
   test -d /dev/snd || mkdir $VERB -p /dev/snd
   _debugx "$POOL"
   POOL=`echo "$POOL" | sed 's%.*/card[0-9]*/%%;s%.*/sound/%%'`  # strip leading path
   _debugx "$POOL"
   POOL=`echo $POOL | rev`  # unformatted
   _debugx "$POOL"
    for i in $POOL ; do
     _debugx "$i"
     NODE=`echo $i | cut -f 3 -d '@'`
     _debugx "$NODE"
     NODE=`echo $NODE | rev`
     _debugx "$NODE"
     case $NODE in */event*) continue;; esac  # omitt /dev/input[''0-9]*/event[0-9]*
     #NODE=`basename $(dirname $(echo $NODE) )`
     NODE=${NODE%/*}
     _debugx "$NODE"
     #NODE=${NODE##*/}
     #_debugx "$NODE"
     MAJ=`echo $i | cut -f 2 -d '@'`
     MAJ=`echo $MAJ | rev`
     Min=`echo $i | cut -f 1 -d '@'`
     Min=`echo $Min | rev`
     _debug "$NODE" "$MAJ" "$Min"  # verbose ?
     rm -f /dev/$NODE
     mknod /dev/$NODE c $MAJ $Min
     #rm -f /dev/snd/$NODE
     #mknod /dev/snd/$NODE c $MAJ $Min
     #cp $VERB -af /dev/$NODE /dev/snd/
      ln $VERB -sf ../$NODE /dev/snd/$NODE
    sleep 0.1
    done
}

until test $# = 0;
do
case $1 in

-d|*debug)   DEBUG=$((DEBUG+1));;
-f|*force)   FORCE=$((FORCE+1));;
-h|*help)    _say_help 0;;
-V|*version) _say_version;;
-v|*verbose) VERBOSE=$((VERBOSE+1));;

*start)  unset DO_STATUS DO_STOP; DO_START=1;;
*stop)   unset DO_START DO_STOP;  DO_STOP=1;;
*status) unset DO_START DO_STOP;  DO_STATUS=1;;

*) _warn "Unrecognized '$1' .";;
esac
shift
sleep 0.1
done

set --

if test "$DO_STATUS"; then
 set - status
elif test "$DO_START"; then
 set - start
elif test "$DO_STOP"; then
 set - stop
else
 :
fi

_debug "$*"

case "$1" in
 *start)

  ###<KRG>
  echo "Starting now $PROGPAT ..."

 _wait_modules_loaded

  if [ "`lsmod | grep -E -i '^snd|sound'`" = "" ];then
  echo -e "\\033[0;31m""Still no Sound Modules found `date`""\\033[0;39m"
  $EXIT
  fi

  echo -e "\\033[0;32m""Sound Modules found : `lsmod | grep -i -E '^snd|sound' | tr -s ' ' | cut -f 1 -d ' ' | tr '\n' ' '`""\\033[0;39m"  #DEBUG

  rm -f /var/lock/subsys/alsasound  #or alsa will not start.

 _load_undetected_modules
 _create_sound_devices

   if [ -f "$ALSA_SETTINGS_FILE" ] ; then

    alsactl $DBG -f "$ALSA_SETTINGS_FILE" restore #from /etc/asound.state.

   else

    #try and set all levels workable...
    #set_mixers #in functions4puppy4
        amixer -s $Q <<EOF
set Master 75% unmute
set Master -12dB
set 'Master Mono' 75% unmute
set 'Master Mono' -12dB
set Front 75% unmute
set Front -12dB
set PCM 90% unmute
set PCM 0dB
set Synth 90% unmute
set Synth 0dB
set CD 90% unmute
set CD 0dB
set Mic 0% mute
set PCM,1 90% unmute
set PCM,1 0dB
set Wave 100% unmute
set Music 100% unmute
set AC97 100% unmute
set 'Master Digital' 75% unmute
set DAC 90% unmute
set DAC -12dB
set DAC,0 90% unmute
set DAC,0 -12dB
set DAC,1 90% unmute
set DAC,1 -12dB
set Headphone 75% unmute
set Headphone -12dB
set Playback 100% unmute
set "SB Live Analog/Digital Output Jack" off
set "Audigy Analog/Digital Output Jack" off
EOF

  alsactl $DBG -f "$ALSA_SETTINGS_FILE" store #saves to /etc/asound.state .

   fi

  cp -af "$ALSA_SETTINGS_FILE" /etc/asound-`uname -r`.state

  ###<KRG>
  if [ -n "$DISPLAY" ] ; then
   if [ -n "`which retrovol`" ] ; then
    [ -n "`pidof retrovol`" ] || exec retrovol $RETROVOL_OPTS &
   fi
  fi

 echo "... $PROGPAT $@ finished"   ###</KRG>
  ;;


 *stop)

 echo "stopping now $PROGPAT ..."

 if [ -n "$DISPLAY" ] ; then
 [ -n "`pidof retrovol`" ] && killall retrovol
 rm -f /var/run/retrovol.pid
 fi

  alsactl $DBG -f "$ALSA_SETTINGS_FILE" store #saves to /etc/asound.state .
  cp -af "$ALSA_SETTINGS_FILE" /etc/asound-`uname -r`.state

  # Kill processes holding open sound devices...
  fuser $VERB -k /dev/admmidi? /dev/adsp? /dev/amidi? /dev/audio* /dev/dmfm* /dev/dmmidi? /dev/dsp* /dev/dspW* /dev/midi0? /dev/mixer? /dev/music /dev/patmgr? /dev/sequencer* /dev/sndstat >>$OUT 2>>$ERR
  [ -d /proc/asound/dev ] && fuser $VERB -k /proc/asound/dev/* >>$OUT 2>>$ERR
  [ -d /dev/snd ] && fuser $VERB -k /dev/snd/* >>$OUT 2>>$ERR
  # remove all sequencer connections if any
  [ -f /proc/asound/seq/clients -a -x "`which aconnect`" ] && aconnect --removeall  ###KRG loads a bunch of modules###ORIG
  # mute master to avoid clicks at unload
  amixer $Q set Master mute   ###KRG loads a bunch of modules###ORIG
  # remove all sound modules
  CNT=0
  while : ; do

  ## DEBUG
  #echo
  #echo -n 'still soundmodules loaded ? '
  #lsmod | grep $Q '^snd[-_].*' && echo "Yes." || { echo "No."; break; }
  #echo -n 'still unused soundmodules loaded ? '
  #lsmod | grep '^snd_' | grep $Q '\ 0\ $' && echo "Yes." || { echo "NO."; break; }
  #echo

  _status || break

  lsmod | grep '^snd_' | grep '\ 0\ $' | tr -s ' ' | cut -f 1 -d ' ' |   ###KRGgrep -Ev "(snd-page-alloc|snd_page_alloc)" |
  while read line
  do
     test "$line" || continue
         echo -n "$line "  ###KRG
     ###KRGrmmod -f -w "$line"
     modprobe $VERB -r $line  ###KRG
     sleep 0.1
  done
  CNT=$(( CNT + 1 ))
  [ "$CNT" = "9" ] && echo -e "\\033[1;34m"'breaking now'"\\033[0;39m" && break  #precaution
  sleep 0.1
  done

  # remove the 2.2 soundcore module (if possible)
  (
  rmmod pcspkr
  rmmod soundcore
  rmmod gameport
  ) 2>>$ERR

  # remove lockfile if lockdir exists
  [ -d /var/lock/subsys ] && rm -f /var/lock/subsys/alsasound
  echo "... $PROGPAT $@ finished"  ###KRG
 ;;

 *status)
  unset Q
  _status
  true
 ;;

 *) _say_help 1;;
esac
