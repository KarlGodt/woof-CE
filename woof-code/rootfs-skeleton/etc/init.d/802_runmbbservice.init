#!/bin/bash

# Copyright (c) 2008 Huawei Technologies, C
# All rights reserved.
#
# Authors: Franko Fang <huananhu@huawei.com>
#

### BEGIN INIT INFO
# Provides:          runmbbservice
# Required-Start:    $syslog $local_fs
# Should-Start:
# Required-Stop:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: runmbbservice  daemon providing cx
# Description:       Start runmbbservice to allow XY and provide YZ
#   continued on second line by '#<TAB>'
#   should contain enough info for the runlevel editor
#   to give admin some idea what this service does and
#   what it's needed for ...
#   (The Short-Description should already be a good hint.)
### END INIT INFO

. /etc/rc.d/f4puppy5
DEBUG=1

HWAPP=/usr/local/MobileBrServ/mbbservice
IFACE=eth1
HWADDR='00:1E:10:1F:00:00'
HW_ADDR='00:1E:10:1F:00:00'
ETH_IFACE_DEF=eth1
KERNEL_DRIVER='cdc-ether'

USB_ID_VEND=12d1
USB_ID_PROD_MODE_STORAGE=157d
USB_ID_PROD_MODE_MODEM=14dc

_detect_network_interface(){
if test "$HWADDR"; then
if ifconfig -a | grep $Q "$HWADDR"; then
 IFACE=`ifconfig -a | grep "$HWADDR" | awk '{print $1}'`
else return 1
fi
fi

test "$IFACE" || {
echo "Warning:  Unable to determine ethernet interface for '$HWADDR' ."
echo "Showing available interfaces:"
ifconfig -a
echo
}
}

test -x $HWAPP || { echo "$HWAPP not installed";
    if [ "$1" = "stop" ]; then exit 0;
    else exit 5; fi; }


# Default: Assume SuSE patched sysvinit binaries exist
start_daemon() { /sbin/start_daemon ${1+"$@"}; }
#killproc()     { /sbin/killproc     ${1+"$@"}; }
killproc()     { /sbin/kill        -${2} ${1##*/}; }
pidofproc()    { /sbin/pidof        ${"$@"##*/}; }
checkproc()    { /sbin/checkproc    ${1+"$@"}; }

if test -e /etc/rc.status; then
    # SUSE rc script library
    . /etc/rc.status
else
    export LC_ALL=POSIX
    _cmd=$1
    declare -a _SMSG
    if test "${_cmd}" = "status"; then
    _SMSG=(running dead dead unused unknown reserved)
    _RC_UNUSED=3
    else
    _SMSG=(done failed failed missed failed skipped unused failed failed reserved)
    _RC_UNUSED=6
    fi
    if test -e /lib/lsb/init-functions; then
    # LSB
        . /lib/lsb/init-functions
    echo_rc()
    {
        if test ${_RC_RV} = 0; then
        log_success_msg "  [${_SMSG[${_RC_RV}]}] "
        else
        log_failure_msg "  [${_SMSG[${_RC_RV}]}] "
        fi
    }
    # TODO: Add checking for lockfiles
    checkproc() { return pidofproc ${1+"$@"} >/dev/null 2>&1; }
    elif test -e /etc/init.d/functions; then
    # RHAT
    . /etc/init.d/functions
    echo_rc()
    {
        #echo -n "  [${_SMSG[${_RC_RV}]}] "
        if test ${_RC_RV} = 0; then
        success "  [${_SMSG[${_RC_RV}]}] "
        else
        failure "  [${_SMSG[${_RC_RV}]}] "
        fi
    }
    checkproc() { return status ${1+"$@"}; }
    start_daemon() { return daemon ${1+"$@"}; }
    else
    # emulate it
    echo_rc() { echo "  [${_SMSG[${_RC_RV}]}] "; }
    fi
    rc_reset() { _RC_RV=0; }
    rc_failed()
    {
    if test -z "$1"; then
        _RC_RV=1;
    elif test "$1" != "0"; then
        _RC_RV=$1;
        fi
    return ${_RC_RV}
    }
    rc_check()
    {
    return rc_failed $?
    }
    rc_status()
    {
    rc_failed $?
    if test "$1" = "-r"; then _RC_RV=0; shift;
    elif test "$1" = "-s"; then rc_failed 5; echo_rc; rc_failed 3; shift;
    elif test "$1" = "-u"; then rc_failed ${_RC_UNUSED}; echo_rc; rc_failed 3; shift;
    elif test "$1" = "-v"; then echo_rc; shift;
    elif test "$1" = "-r"; then _RC_RV=0; shift; fi
    return ${_RC_RV}
    }
    rc_exit() { exit ${_RC_RV}; }
    rc_active()
    {
    if test -z "$RUNLEVEL"; then read RUNLEVEL REST < <(/sbin/runlevel); fi
    if test -e /etc/init.d/S[0-9][0-9]${1}; then return 0; fi
    return 1
    }
fi


 _load_driver(){
:
test -f /proc/modules || { _warn "/proc/modules does not exist";
_notice "Is /proc mounted ?"; return 4; }
grep $Q -w "$KERNEL_DRIVER" /proc/modules || modprobe $V "$KERNEL_DRIVER"
}

_test_modem(){
    :
lsusb | grep "$USB_ID_VEND" | grep $Q "$*"
}

_wait_for_modeswitch(){
:
_test_modem $USB_ID_PROD_MODE_MODEM && {
echo -n "modeswitch of the modem $USB_ID_VEND:$USB_ID_PROD_MODE_MODEM "; return 0; }

echo -n "Waiting for modeswitch of the modem $USB_ID_VEND:$USB_ID_PROD_MODE_STORAGE .. "
local c=0
while :;
do
_test_modem $USB_ID_PROD_MODE_MODEM && break
sleep 2
c=$((c+1))
test "$c" = 9 && return 3
done
}

_get_iface(){
:
ifconfig -a | grep "$HW_ADDR" | awk '{print $1}'
}

_bring_eth_up(){
    :
ETH=`_get_iface`
test "$ETH" || ETH=$ETH_IFACE_DEF
test "$ETH" || return 2
ifconfig | grep $Q $ETH && return 0
echo -n "bringing interface $ETH up .. "
ifconfig $ETH up
rc_status "-v"
}

_bring_eth_down(){
    :
ETH=`_get_iface`
test "$ETH" || ETH=$ETH_IFACE_DEF
test "$ETH" || return 2
ifconfig | grep $Q $ETH || return 0
echo -n "bringing interface $ETH down .. "
ifconfig $ETH down
rc_status "-v"
}

_dhcpcd_start(){
    :
ETH=`_get_iface`
test "$ETH" || ETH=$ETH_IFACE_DEF
test "$ETH" || return 2
echo -n "Starting dhcpcd $DBG $ETH .. "
if ps | grep dhcpcd | grep $Q $ETH ; then
 echo -n "dhcpcd for $ETH already running "
 _RC_RV=5
else
 dhcpcd $DBG $ETH
fi
rc_status "-v"
}

_dhcpcd_restart(){
    :
ETH=`_get_iface`
test "$ETH" || ETH=$ETH_IFACE_DEF
test "$ETH" || return 2
echo -n "Starting dhcpcd $DBG -n $ETH .. "
 dhcpcd $DBG -n $ETH
rc_status "-v"
}

_dhcpcd_term(){
    :
ETH=`_get_iface`
test "$ETH" || ETH=$ETH_IFACE_DEF
test "$ETH" || return 2
echo -n "Closing dhcpcd $DBG -x $ETH .. "
 if ps | grep dhcpcd | grep $Q $ETH ; then
 { dhcpcd $DEB -x $ETH; }
 else echo -n "dhcpcd not running for $ETH "
 _RC_RV=5
 fi
rc_status "-v"
}

_start_firewall(){

if test -x /etc/rc.d/rc.firewall; then
 /etc/rc.d/rc.firewall start
fi
rc_status -v
}

_log_traffic_bytes(){
 :
 mkdir -p /var/log/mbb || return 1
 DATE=`date +%F`
if test "$RX_BYTES"; then
 touch /var/log/mbb/rx_bytes.$DATE
 read RX_BYTES_DATE </var/log/mbb/rx_bytes.$DATE
 test "$RX_BYTES_DATE" || RX_BYTES_DATE=0
 RX_BYTES_DATE=$((RX_BYTES_DATE+RX_BYTES))
 echo $RX_BYTES_DATE >/var/log/mbb/rx_bytes.$DATE
fi

if test "$TX_BYTES"; then
 touch /var/log/mbb/tx_bytes.$DATE
 read TX_BYTES_DATE </var/log/mbb/tx_bytes.$DATE
 test "$TX_BYTES_DATE" || TX_BYTES_DATE=0
 TX_BYTES_DATE=$((TX_BYTES_DATE+TX_BYTES))
 echo $TX_BYTES_DATE >/var/log/mbb/tx_bytes.$DATE
fi
}

_count_rx_tx_bytes(){
 :

#STATS_DIR=`find /sys -path "*/$IFACE/statistics`
#test -d "$STATS_DIR" || return 2
#RX_BYTES_FILE=`find /sys -path "*/$IFACE/statistics/*" -name "rx_bytes"`
#TX_BYTES_FILE=`find /sys -path "*/$IFACE/statistics/*" -name "tx_bytes"`
#test "$RX_BYTES_FILE" -o "$TX_BYTES_FILE" || return 1
#test -f "$RX_BYTES_FILE" || unset RX_BYTES_FILE
#test -f "$TX_BYTES_FILE" || unset TX_BYTES_FILE
#test -r "$RX_BYTES_FILE" || unset RX_BYTES_FILE
#test -r "$TX_BYTES_FILE" || unset TX_BYTES_FILE
#test "$RX_BYTES_FILE" -o "$TX_BYTES_FILE" || return 1

#while :
#do
test "$RX_BYTES_FILE" && read RX_BYTES <"$RX_BYTES_FILE"
test "$TX_BYTES_FILE" && read TX_BYTES <"$TX_BYTES_FILE"
_debug "RX_BYTES='$RX_BYTES'"
_debug "TX_BYTES='$TX_BYTES'"

#sleep 1
#test -d "$STATS_DIR" || break
#done

#echo -n "Storing traffic ..."
#_log_traffic_bytes
#rc_status -v

}

_count_traffic(){
    :
sleep 5s
_debug "IFACE='$IFACE'"
_debug "ETH='$ETH'"
find /sys -path "*/$ETH/statistics"
STATS_DIR=`find /sys -path "*/$ETH/statistics"`
_debug "STATS_DIR='$STATS_DIR'"
test -d "$STATS_DIR" || return 2
RX_BYTES_FILE=`find /sys -path "*/$ETH/statistics/*" -name "rx_bytes"`
TX_BYTES_FILE=`find /sys -path "*/$ETH/statistics/*" -name "tx_bytes"`
#_debug "RX_BYTES_FILE='$RX_BYTES_FILE'"
#_debug "TX_BYTES_FILE='$TX_BYTES_FILE'"
test "$RX_BYTES_FILE" -o "$TX_BYTES_FILE" || return 1
test -f "$RX_BYTES_FILE" || unset RX_BYTES_FILE
test -f "$TX_BYTES_FILE" || unset TX_BYTES_FILE
#_debug "RX_BYTES_FILE='$RX_BYTES_FILE'"
#_debug "TX_BYTES_FILE='$TX_BYTES_FILE'"
test -r "$RX_BYTES_FILE" || unset RX_BYTES_FILE
test -r "$TX_BYTES_FILE" || unset TX_BYTES_FILE
_debug "RX_BYTES_FILE='$RX_BYTES_FILE'"
_debug "TX_BYTES_FILE='$TX_BYTES_FILE'"
test "$RX_BYTES_FILE" -o "$TX_BYTES_FILE" || return 1

OLD_DAY=`date +%j`
while :
do
DAY=`date +%j`
if test "$DAY" = "$OLD_DAY"; then
    _count_rx_tx_bytes || {
        echo -n "Storing traffic for day $DAY of year $OLD_DAY ... "
        _log_traffic_bytes
        rc_status -v
    }
else
 echo -n "Storing traffic for day $DAY of year $OLD_DAY ... "
        _log_traffic_bytes
        rc_status -v
fi
OLD_DAY=$DAY
sleep 1
test -d "$STATS_DIR" || break
done
echo -n "Storing traffic for day $DAY of year $OLD_DAY ... "
 _log_traffic_bytes
rc_status -v

}

# Reset status of this service
rc_reset

ARCHTEK=`uname -m`

case "$1" in
    -start|--start|start)

    case $ARCHTEK in
    i[0-9]86)
    :
    echo -n "Starting $HWAPP .. "
    #exec $HWAPP > /dev/null 2>&1
    if pidof ${HWAPP##*/} >$OUT; then :
    else
    $HWAPP
    rc_status -v
    fi
     case $? in 0) :;; *) :
     #start usb_modeswitch if available
     :
     ;;
     esac

    ;;

    *) #64bit
     #start usb_modeswitch if available
    :
    ;;
    esac

     _wait_for_modeswitch
     rc_status "-v"
     test "$?" = 0 && { _load_driver; } && { _bring_eth_up; } && { _dhcpcd_start; } && { _start_firewall; }
     #echo -n "Counting traffic ..."
     #_count_traffic
     #rc_status "-v"
     exec /sbin/pup_count_network_traffic.sh $ETH &

    __old__start_interface__(){
    sleep 2
     _detect_network_interface && {
     echo -n "Bringing $IFACE up.. "
     ifconfig $IFACE up
     rc_status -v
     if ! pidof dhcpcd; then
     echo -n "Starting dhcpcd .. "
     dhcpcd -d $IFACE
     rc_status -v
     fi
     }
    }

    ;; #start

    -*stop|stop)
    echo -n "Shutting down $HWAPP .. "
    if pidof ${HWAPP##*/} >$OUT; then
    #killproc -TERM $HWAPP
     killproc $HWAPP TERM
    else
     echo -n "Not running "
     _RC_RV=5
    fi
    rc_status -v

    _bring_eth_down
    _dhcpcd_term

    __old_stop_interface__(){
     _detect_network_interface && {
     echo -n "Bringing $IFACE down.. "
     ifconfig $IFACE down
     rc_status -v
     if pidof dhcpcd >$OUT; then
     echo -n "Terminating dhcpcd .. "
     ps | grep dhcpcd | grep -v grep | grep $IFACE | while read pid rest; do
     test "$pid" || continue; kill $pid; done
     rc_status -v
     fi
     }
    }

    _start_firewall
    ;; #stop

    -*restart|restart)
    $0 stop
    $0 start

    rc_status
    ;;

    -*force-reload|force-reload)
    echo -n "Reload of service ${HWAPP##*/} "
    if pidof ${HWAPP##*/} >$OUT; then
    #killproc -HUP $HWAPP
     killproc $HWAPP HUP
    else
     exec $0 start
    fi
     rc_status -v
    ;;

    -*reload|reload)
    echo -n "Reload of service ${HWAPP##*/} "
    if pidof ${HWAPP##*/} >$OUT; then
    #killproc -HUP $HWAPP
     killproc $HWAPP HUP
    else
    echo -n "Not running "
    _RC_RV=5
    fi
    rc_status -v
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|force-reload|reload}"
    exit 1
    ;;
esac
rc_exit
