#!/bin/bash
#Barry Kauler april 2009, puppylinux.com
#called from /etc/rc.d/rc.services at bootup, with 'start' param.
#called from /etc/rc.d/rc.shutdown at shutdown, with 'stop' param.
# bash for caller, since ash does not have that builtin function
. /etc/rc.d/f4puppy5

###KRG Fr 31. Aug 23:34:58 GMT+1 2012

trap "exit 1" HUP INT QUIT KILL TERM

OUT=/dev/null;ERR=$OUT
[ "$DEBUG" ] || DEBUG=`sed 's%[[:punct:]]%_%g;s% %\n%g' /proc/cmdline |grep -iw 'debug'`
[ "$DEBUG" ] && { OUT=/dev/stdout;ERR=/dev/stderr; }
[ "$DEBUG" = "2" ] && set -x
[[ "$1" =~ 'check' ]] && { set -n;shift; }

Version='1.5-Macpup_Foxy_3-KRG'

usage(){
USAGE_MSG="
$0 [ PARAMETERS ]

\$1 parameters :
-V|--version : Showing version information.
-H|--help    : Show this usage information.

check : Running in 'set -n' mode .
debug : Using /dev/sdtout and /dev/sdterr instead od /dev/null,
        adds '-v' to modprobe command.
        If invoked by 'DEBUG=2 /etc/init.d/alsa' run in 'set -x' mode .
force : Don't wait up to one minute to check if sound drivers have already been
        loaded, do modprobe snd-card-0 anyway .

\$1 or \$2 parameters :
start : Default at boot time to create hopefully functioning sound environment.
stop  : Default at shutdown to unload sound modules.
''|*  : Shows more detailed usage message .

*******  *******  *******  *******  *******  *******  *******  *******  *******
$2
"
echo "$USAGE_MSG"
exit $1
}

[ "`echo "$1" | grep -wiE "help|\-H"`" ] && usage 0
[ "`echo "$1" | grep -wiE "version|\-V"`" ] && { echo "$0 -version $Version";exit 0; }

###KRG Fr 31. Aug 23:34:58 GMT+1 2012

########################################################################
#
# Changes by Karl Reimer Godt :
# 01.0 : Added usage, trap, version macros.
# 02.0 : Experimenting with sourceing and executing (return||exit) . Still TODO !
# 03.0 : Added support for retrovol if $DISPLAY set.
# 04.0 : Added up to one minute delay for sound modules show up in lsmod output at boot .
# 05.0 : Added check if alsaconf (alsawizard) is running .
# 06.0 : Added recreation of sound devices with correct major/minors.
# 07.0 : Changed rmmod to modprobe -r in stop part.
# 08.0 : Added DEBUG output. $DEBUG here, in other scripts it might be DEBUG or VERBOSE or ME_VERB .
# 09.0 : Added more detailed usage message.
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.8-i486-Celeron2.2GHz-2.6.33.2-dpup005-rev2
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.8-i486-Celeron2.2GHz-2.6.33.2-dpup005-rev2·#3·SMP·Mon·Jan·10·22:34:00·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Wed·Oct·26·23:16:52·CEST·2011
#
#
#
#
#
########################################################################

OUT=/dev/null;ERR=$OUT;Q=-q
VERB='';DEBUG='';FORCE=''; #if ME_PROG constantly sourced
while [ "$1" = debug -o "$1" = force ];do
[ "$1" = 'debug' ] && { Q='';OUT=/dev/stdout;ERR=/dev/stderr;DEBUG=1;VERB='-v'; }  ##shift; }
[ "$1" = force ] && FORCE=1  ##{ FORCE=1;shift; }
shift
done

###<KRG>
ME_PROG='/etc/init.d/DRIVER/z99_alsa.init'
CA_PROG=`readlink -f $0`
[ -f "$ME_PROG" ] || { echo "$CA_PROG:WARNING: '$ME_PROG' probably renamed or moved elsewhere."; }
#if [ ! -f "$CA_PROG" ] ; then
PROG=''
[ "`which alsa`" ] || PROG='alsa'
[ "$PROG" ] || PROG='PuppyAlsaSoundInitalizer'
#fi
ZERO="$0"
PROGPID="$$"
[ "$DEBUG" ] && { echo "
    PWD='$PWD'
ME_PROG='$ME_PROG'
CA_PROG='$CA_PROG'
   PROG='$PROG'
     \$0='$0'
   ZERO='$ZERO'
PROGPID='$PROGPID'"
:; }

#if [ "$ZERO" = "$ME_PROG" ] ; then
jobs
caller
CALLER=`caller | grep -vw '^0' |awk '{print $2}'`
echo "'$CALLER'"
if [ "$CALLER" ]; then   ##+++2013-03-18
#PROGPAT="$ME_PROG"
#EXIT='exit'
PROGPAT="$CALLER"
[ "$PROGPAT" = 'NULL' ] && PROGPAT="$SHELL"
EXIT=return
else
#PROGPAT="'$ME_PROG' called by '$ZERO'"
#EXIT='return'
PROGPAT="`readlink -f $0`"
EXIT=exit
fi  ###</KRG>
_debug "CALLER='$CALLER' PROGPAT='$PROGPAT' EXIT='$EXIT'"

#alias modprobe='busybox modprobe -s' #seems not to work for busybox modprobe until v1.17 #works for CONFIG_FEATURE_2_4_MODULES

_kernel_version5

case "$1" in
 start)

 test -d /dev/snd || mkdir /dev/snd

  ###<KRG>
  echo "Starting now $PROGPAT ..."
  ##wait up to one minute for sound modules are loaded
if [ "$FORCE" ];then
  modprobe $Q $VERB snd-card-0
else
  pidof alsaconf && /sbin/modprobe $Q $VERB --first-time snd-card-0 || {  ##+-+2012-09-20 fix for alsaconf
  CNT=0
  #while [ -z "`lsmod | grep -E -i '^snd|sound'`" ] ; do
  until [ "`grep -Ei '^snd|sound' /proc/modules`" ] ; do
  echo -e "\\033[0;31m""No Sound Modules found `date`""\\033[0;39m"
  sleep 3
  CNT=$(( CNT + 1 ))
  if [ "$CNT" = "3" ] ; then #was20=1min, reduced to 3=9sec
   modprobe $Q $VERB snd-card-0  ##forcibly load something after one minute
   break
  fi #CNT=20
  done
  :;
}
fi #FORCE

  #if [ "`lsmod | grep -E -i '^snd|sound'`" = "" ];then
  if ! grep $Q -iE '^snd|sound' /proc/modules ;then
  echo -e "\\033[0;31m""Still no Sound Modules found `date`""\\033[0;39m"
  $EXIT ##exit if no sound modules could have been loaded
  fi

  echo -e "\\033[0;32m""Sound Modules found : `lsmod | grep -i -E '^snd|sound' | tr -s ' ' | cut -f 1 -d ' ' | tr '\n' ' '`""\\033[0;39m"  ###</KRG>

   rm $VERB -f /var/lock/subsys/alsasound #or alsa will not start.
   #sometimes these don't all load...
   #[ "`lsmod | grep 'snd[-_]mixer[-_]oss'`" ] || modprobe $VERB snd-mixer-oss
   #[ "`lsmod | grep 'snd[-_]seq[-_]oss'`" ] || modprobe $VERB snd-seq-oss
   #[ "`lsmod | grep 'snd[-_]pcm[-_]oss'`" ] || modprobe $VERB snd-pcm-oss
   modprobe $Q $VERB snd-mixer-oss
   modprobe $Q $VERB snd-seq-oss
   modprobe $Q $VERB snd-pcm-oss

   ###<KRG>
   D=`find /sys -type d -name "*sound*"`
   POOL=''
    for i in $D ; do
     ##echo $i ;
     DEV=`find $i -type f -name "dev" -exec echo -n {}@ \; -exec cat {} \; | tr ':' '@' | tr ' ' '@' -exec echo \;` ;
     POOL="$POOL $DEV"
    done
    [ "$DEBUG" ] && echo "$POOL"
    #echo "$POOL" |sed 's| |\n|g'
    #echo "$POOL" |sed 's| |\n|g;s|/dev@|@|g'
    #echo "$POOL" |sed 's| |\n|g;s|/dev@|@|;s|.*/|/|'
   #POOL=`echo "$POOL" |sed 's| |\n|g;s|/dev@|@|g;s|.*/|/|g;s|^/||'`
    POOL=`echo "$POOL" |tr ' ' '\n' |sed 's|/dev@|@|;s|.*/|/|;s|^/||'`
    [ "$DEBUG" ] && echo -e "\n${POOL}\n"
   ##POOL=`echo $POOL | rev`
    for i in $POOL ; do
     ##NODE=`echo $i | cut -f 3 -d '@'`
     ##NODE=`echo $NODE | rev`
     ## #NODE=`basename $(dirname $(echo $NODE) )`
     ##NODE=`basename ${NODE%/*}`
     ##MAJ=`echo $i | cut -f 2 -d '@'`
     ##MAJ=`echo $MAJ | rev`
     ##Min=`echo $i | cut -f 1 -d '@'`
     ##Min=`echo $Min | rev`
     NODE=${i%%\@*}
     Min=${i##*\@}
     MAJ=`echo $i |cut -f2 -d '@'`
     [ "$DEBUG" ] && echo "'$NODE' '$MAJ' '$Min'"
     [ "$NODE" -a "$MAJ" -a "$Min" ] || continue
     [ -e /dev/$NODE ] && rm $VERB /dev/$NODE
     mknod /dev/$NODE c $MAJ $Min
     chown $VERB root:adm /dev/$NODE
     chmod $VERB ug+rw /dev/$NODE
     [ -e /dev/snd/$NODE ] && rm $VERB /dev/snd/$NODE
     mknod /dev/snd/$NODE c $MAJ $Min
     chown $VERB root:adm /dev/snd/$NODE
     chmod $VERB ug+rw /dev/snd/$NODE
    done  ###</KRG>

   if [ -f /etc/asound.state ] ; then
     _notice "Restoring /etc/asound.state."
    alsactl $DBG $IGNORE $FORCE $PEDANTIC -f /etc/asound.state restore #from /etc/asound.state.

   else
     _notice "Using Puppy defaults."
    #try and set all levels workable...
    #set_mixers #in functions4puppy4
    amixer -s $Q <<EOF
set Master 75% unmute
set Master -12dB
set 'Master Mono' 75% unmute
set 'Master Mono' -12dB
set Front 75% unmute
set Front -12dB
set PCM 90% unmute
set PCM 0dB
set Synth 90% unmute
set Synth 0dB
set CD 90% unmute
set CD 0dB
set Mic 0% mute
set PCM,1 90% unmute
set PCM,1 0dB
set Wave 100% unmute
set Music 100% unmute
set AC97 100% unmute
set 'Master Digital' 75% unmute
set DAC 90% unmute
set DAC -12dB
set DAC,0 90% unmute
set DAC,0 -12dB
set DAC,1 90% unmute
set DAC,1 -12dB
set Headphone 75% unmute
set Headphone -12dB
set Playback 100% unmute
set "SB Live Analog/Digital Output Jack" off
set "Audigy Analog/Digital Output Jack" off
EOF

   fi
  ###<KRG>
  if [ -n "$DISPLAY" ] ; then
   if [ -n "`which retrovol`" ] ; then
    if [ -z "`pidof retrovol`" ] ; then
    retrovol -hide &
     if pidof alsaconf >>$OUT; then
       sleep 4
       pidof retrovol >>$OUT || RETROVOL_RV=1
     fi
    fi
   fi
  fi
 _info "... $PROGPAT with '$@' finished."   ###</KRG>
 $EXIT $RETROVOL_RV
  ;;
 stop)

 ###<KRG>
 _info "stopping now $PROGPAT ..."

 if [ -n "$DISPLAY" ] ; then
 [ -n "`pidof retrovol`" ] && killall retrovol
 rm $VERB -f /var/run/retrovol.pid
 fi  ###</KRG>

  alsactl $DBG $IGNORE -f /etc/asound.state store #saves to /etc/asound.state.
  amixer  $Q set Master mute >>$OUT 2>&1
  # Kill processes holding open sound devices...
  fuser $VERB -k /dev/admmidi? /dev/adsp? /dev/amidi? /dev/audio* /dev/dmfm* /dev/dmmidi? /dev/dsp* /dev/dspW* /dev/midi0? /dev/mixer? /dev/music /dev/patmgr? /dev/sequencer* /dev/sndstat >>$OUT 2>&1
  [ -d /proc/asound/dev ] && fuser $VERB -k /proc/asound/dev/* >>$OUT 2>&1
  [ -d /dev/snd ] && fuser $VERB -k /dev/snd/* >>$OUT 2>&1
  # remove all sequencer connections if any
  [ -f /proc/asound/seq/clients -a -x "`which aconnect`" ] && aconnect --removeall  ###KRG loads a bunch of modules###ORIG
  # mute master to avoid clicks at unload
  #amixer set Master mute >$OUT 2>&1  ###KRG loads a bunch of modules###ORIG
  # remove all sound modules
  CNT=0  ###KRG
  while [ -n "`lsmod | grep '^snd[-_].*'`" ] ; do
  if [ "$VERBOSE" -o "$DEBUG" ]; then
  echo
  echo 'still soundmodules loaded:'
  lsmod | grep '^snd[-_].*'
  fi
  lsmod | grep '^snd_' | grep '\ 0\ $' | tr -s ' ' | cut -f 1 -d ' ' |   ###KRGgrep -Ev "(snd-page-alloc|snd_page_alloc)" |
  while read line
  do
     echo -n "$line "  ###KRG
     ###KRGrmmod -f -w "$line"
     modprobe $Q $VERB -r $line  ###KRG
     sleep 0.1  ###KRG
  done
  CNT=$(( CNT + 1 ))  ###KRG
  [ "$CNT" = "9" ] && echo -e "\\033[1;34m"'breaking now'"\\033[0;39m" && break  ###KRG precaution###KRG
  done  ###KRG

  # remove the 2.2 soundcore module (if possible)
  case $KERNELVER in 2.2.*)
  (
  rmmod soundcore
  rmmod gameport
  ) 2>>$ERR
  ;; esac
  # remove lockfile if lockdir exists
  [ -d /var/lock/subsys ] && rm $VERB -f /var/lock/subsys/alsasound
  _info "... $PROGPAT with '$@' finished."  ###KRG
  _debug "`lsmod |grep -E 'snd|sound'`"
  $EXIT $?
 ;;
 *)
 echo -e "
\\033[1;36m""Usage of $PROGPAT : <version=$Version>""\\033[0;39m
"
 echo -e "'\\033[1;32m$PROG start\\033[0;39m' to wait up to one minute at boot time
for kernel sound modules loaded , if no modules detected ,
force module loading by modprobe 'snd-card-0' ,
[ exit if still no sound modules found in '/proc/modules' and
skipping the following : ]
loading the modules 'snd_mixer_oss ,snd_seq_oss ,snd_pcm_oss' ,
recreates the sound device nodes in /dev and /dev/snd with the
Major and Minor numbers found in /sys/* ,
start and restore alsa settings if file '/etc/asound.state' exists
otherwise [ pfix=ram , live CD , PUPMODE=5 ] setting the alsa mixer defaults ,
and if running in X terminal , start retrovol if installed .
"
 echo -e "'\\033[1;32m$PROG stop\\033[0;39m' to store last alsa settings ,
killall sound users , mute everything and unload all sound modules .
"
 echo -e "\\033[1;35m""For additional help check 'man' 'alsactl' , 'aconnect' , 'amixer' ,
'lsmod' , 'modprobe' , 'bootparam' manual pages on the internet .""\\033[0;39m
"
$EXIT $?
 ;;
esac

