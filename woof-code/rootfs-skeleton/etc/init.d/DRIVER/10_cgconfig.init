#!/bin/bash
#
# Start/Stop the workload manager
#
# Copyright IBM Corporation. 2008
#
# Authors:     Balbir Singh <balbir@linux.vnet.ibm.com>
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2.1 of the GNU Lesser General Public License
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# cgconfig Control Groups Configuration Startup
# chkconfig: - 5 95
# description: This script runs the cgconfigparser utility to parse and setup
#              the control group filesystem. It uses /etc/cgconfig.conf
#              and parses the configuration specified in there.

### BEGIN INIT INFO
# Provides:             cgconfig
# Required-Start:       $remote_fs $syslog
# Required-Stop:        $remote_fs $syslog
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    start and stop the WLM configuration
# Description:          This script allows us to create a default configuration
### END INIT INFO

# get correct location of binaries from configure
PATH="/usr/local/sbin:/usr/local/bin:$PATH"
prefix=/usr;exec_prefix=${prefix};sbindir=${exec_prefix}/sbin
CGCONFIGPARSER_BIN=$sbindir/cgconfigparser
#CONFIG_FILE=/etc/cgconfig.conf.5
#Starting cgconfig ..
#Starting cgconfig service: Loading configuration file /etc/cgconfig.conf.5 failed
#Cgroup mounting failed
#Failed to parse /etc/cgconfig.conf.5 ... failed!
#Starting cgconfig service: Loading configuration file /etc/cgconfig.conf.5 failed
#Cgroup mounting failed
#Failed to parse /etc/cgconfig.conf.5 ... failed!
#Starting cgconfig service: Loading configuration file /etc/cgconfig.conf.5 failed
#Cgroup mounting failed
#Failed to parse /etc/cgconfig.conf.5 ... failed!
#Starting cgconfig service: Loading configuration file /etc/cgconfig.conf.5 failed
#Cgroup mounting failed
#Failed to parse /etc/cgconfig.conf.5 ... failed!
#Error changing group of pid 3: Invalid argument
#Error changing group of pid 4: Invalid argument
#Error changing group of pid 5: Invalid argument
CONFIG_FILE=/etc/cgconfig.conf.4
servicename=cgconfig
lockfile=/var/lock/$servicename

#
# Source LSB routines
#
. /lib/lsb/init-functions

# read the config
CREATE_DEFAULT=yes
if [ -e /etc/default/cgconfig ]; then
        . /etc/default/cgconfig
fi

create_default_groups() {
    defaultcgroup=

        if [ -f /etc/cgrules.conf ]; then
        grep -m1 '^\*[[:space:]]\+' /etc/cgrules.conf | \
            read user ctrl defaultcgroup
            if [ -n "$defaultcgroup" -a "$defaultcgroup" = "*" ]; then
                log_warning_msg "/etc/cgrules.conf incorrect"
                log_warning_msg "Overriding it"
                defaultcgroup=
            fi
        fi

        if [ -z $defaultcgroup ]
        then
            defaultcgroup=sysdefault/
        fi

        #
        # Find all mounted subsystems and create comma-separated list
        # of controllers.
        #
        controllers=`lssubsys 2>/dev/null | tr '\n' ',' | sed s/.$//`

        #
        # Create the default group, ignore errors when the default group
        # already exists.
        #
        #cgcreate -f 664 -d 775 -g $controllers:$defaultcgroup #2>/dev/null

#cgcreate: invalid option -- f
#cgcreate: invalid command line option

        cgcreate -g $controllers:$defaultcgroup

        #
        # special rule for cpusets
        #
        if echo $controllers | grep -q -w cpuset; then
                cpus=`cgget -nv -r cpuset.cpus /`
                cgset -r cpuset.cpus=$cpus $defaultcgroup
               #cgset: the group can't be modified
                mems=`cgget -nv -r cpuset.mems /`
                cgset -r cpuset.mems=$mems $defaultcgroup
               #cgset: the group can't be modified
        fi

        #
        # Classify everything to default cgroup. Ignore errors, some processes
        # may exit after ps is run and before cgclassify moves them.
        #
        cgclassify -g $controllers:$defaultcgroup `ps --no-headers -eL o tid` \
                || :
                 #2>/dev/null || :
#Error changing group of pid 1: Cgroup does not exist
#Error changing group of pid 2: Cgroup does not exist
#
#Error changing group of pid 2397: Cgroup does not exist
#
#Error changing group of pid 30777: Cgroup does not exist
#Error changing group of pid 30784: Cgroup does not exist


}

start() {
        echo -n "Starting cgconfig service: "
    if [ -f "$lockfile" ]; then
        echo "Lockfile present"
            log_warning_msg "lock file already exists"
            return 0
        fi

        if [ $? -eq 0 ]; then
                if [ ! -s $CONFIG_FILE ]; then
                    log_failure_msg $CONFIG_FILE "is not configured"
                    return 6
                fi

                $CGCONFIGPARSER_BIN -l $CONFIG_FILE
                retval=$?
                if [ $retval -ne 0 ]; then
                    log_failure_msg "Failed to parse " $CONFIG_FILE

                    #return 1
___manual(){
clis=`grep '^#CLI ' $CONFIG_FILE |cut -f2-99 -d ' '`
if [ "$clis" ];then
while read line;do
comm=`echo $line |cut -f1 -d ' '`
parm=`echo $line |cut -f2-99 -d ' '`
echo $comm
echo $parm
$comm $parm
done << _EOI
$(echo "$clis")
_EOI
fi
}
                   count=$((count+1));
                   if [ "$count" -lt 4 ];then
                   count=$count start
                   else
                   return 1
                   fi
                fi
        fi

        if [ $CREATE_DEFAULT = "yes" ]; then
                create_default_groups
        fi

        touch "$lockfile"
        retval=$?
        if [ $retval -ne 0 ]; then
            log_failure_msg "Failed to touch $lockfile"
            return 1
        fi
        log_success_msg
        return 0
}

stop() {
    echo -n "Stopping cgconfig service: "
    cgclear
    if [ $? -eq 0 ];then
    rm -f "$lockfile"
    log_success_msg
    return 0
    else
       count=$((count+1))
if [ $count -lt 4 ];then
    count=$count stop #&
else
    :
fi
    fi
}

trapped() {
    #
    # Do nothing
    #
    #true
    echo "Exiting because of caught signal '$1' ."  ###+++2012-03-17 KRG
    exit $?
}

usage() {
    echo "$0 <start|stop|restart|condrestart|status|force-reload>"
    exit 2
}

common() {
    #
    # main script work done here
    #
    trap "trapped ABRT" ABRT
    trap "trapped QUIT" QUIT
    trap "trapped TERM" TERM
    trap "trapped INT"   INT
}

restart() {
    common
    stop
    start
}

RETVAL=0

case $1 in
    'stop')
        common
        stop
        RETVAL=$?
        ;;
    'start')
        common
        start
        RETVAL=$?
        ;;
    'restart'|'reload'|'force-reload')
    restart
        RETVAL=$?
        ;;
    'condrestart')
        if [ -f "$lockfile" ]; then
            restart
            RETVAL=$?
        fi
        ;;
    'status')
        if [ -f "$lockfile" ]; then
            echo "Running"
            exit 0
        else
            echo "Stopped"
            exit 3
        fi
    ;;
    *)
        usage
        ;;
esac
echo
exit $RETVAL

