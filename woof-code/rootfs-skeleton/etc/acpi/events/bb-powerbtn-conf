# /etc/acpi/events/powerbtn
# This is called when the user presses the power button and calls
# /etc/acpi/powerbtn.sh for further processing.

# Optionally you can specify the placeholder %e. It will pass
# through the whole kernel event message to the program you've
# specified.

# We need to react on "button power.*" and "button/power.*" because
# of kernel changes.

#event=button[ /]power
#event=/etc/acpi/powerbtn.sh
#action=/etc/acpi/powerbtn.sh
#button/power PWRF 00000080 /etc/acpi/powerbtn.sh

#struct acpi_event {
#	const char *s_type;
#	uint16_t n_type;
#	const char *s_code;
#	uint16_t n_code;
#	uint32_t value;
#	const char *desc;
#};
#static const struct acpi_event f_evt_tab[] = {
#	{ "EV_KEY", 0x01, "KEY_POWER", 116, 1, "button/power PWRF 00000080" },
#	{ "EV_KEY", 0x01, "KEY_POWER", 116, 1, "button/power PWRB 00000080" },
#};

#struct acpi_action {
#	const char *key;
#	const char *action;
#};
#static const struct acpi_action f_act_tab[] = {
#	{ "PWRF", "PWRF/00000080" },
#	{ "LID0", "LID/00000080" },


