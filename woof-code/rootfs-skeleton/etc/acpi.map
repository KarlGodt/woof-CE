
#static void parse_map_file(const char *filename)
#{
#   parser_t *parser;
#   char *tokens[6];
#
#   parser = config_open2(filename, fopen_for_read);
#
#   if (parser) {
#       while (config_read(parser, tokens, 6, 6, "# \t", PARSE_NORMAL)) {
#           evt_tab = xrealloc_vector(evt_tab, 1, n_evt);
#           evt_tab[n_evt].s_type = xstrdup(tokens[0]);
#           evt_tab[n_evt].n_type = xstrtou(tokens[1], 16);
#           evt_tab[n_evt].s_code = xstrdup(tokens[2]);
#           evt_tab[n_evt].n_code = xatou16(tokens[3]);
#           evt_tab[n_evt].value = xatoi_positive(tokens[4]);
#           evt_tab[n_evt].desc = xstrdup(tokens[5]);
#           n_evt++;
#       }
#       config_close(parser);
#   } else {
#       evt_tab = (void*)f_evt_tab;
#       n_evt = ARRAY_SIZE(f_evt_tab);
#   }
#}
#struct acpi_event {
#   const char *s_type;
#   uint16_t n_type;
#   const char *s_code;
#   uint16_t n_code;
#   uint32_t value;
#   const char *desc;
#};
#
#static const struct acpi_event f_evt_tab[] = {
#   { "EV_KEY", 0x01, "KEY_POWER", 116, 1, "button/power PWRF 00000080" },
#   { "EV_KEY", 0x01, "KEY_POWER", 116, 1, "button/power PWRB 00000080" },
#};
#   116     0xfe08 (ISO_Next_Group)


#static const char *find_action(struct input_event *ev, const char *buf)
#{
#   const char *action = NULL;
#   int i;
#
#   // map event
#   for (i = 0; i < n_evt; i++) {
#       if (ev) {
#           if (ev->type == evt_tab[i].n_type && ev->code == evt_tab[i].n_code && ev->value == evt_tab[i].value) {
#               action = evt_tab[i].desc;
#               break;
#           }
#       }
#
#       if (buf) {
#           if (strncmp(buf, evt_tab[i].desc, strlen(buf)) == 0) {
#               action = evt_tab[i].desc;
#               break;
#           }
#       }
#   }
#
#   // get action
#   if (action) {
#       for (i = 0; i < n_act; i++) {
#           if (strstr(action, act_tab[i].key)) {
#               action = act_tab[i].action;
#               break;
#           }
#       }
#   }
#
#   return action;
#}

#if (option_mask32 & OPT_e) {
#           event = NULL;
#           if (option_mask32 & OPT_e) {
#               char *buf;
#               int len;
#
#               buf = xmalloc_reads(pfd[i].fd, NULL);
#               /* buf = "button/power PWRB 00000080 00000000" */
#               len = strlen(buf) - 9;
#               if (len >= 0)
#                   buf[len] = '\0';
#               event = find_action(NULL, buf);
#               free(buf);

## bash-3.00# cat /proc/acpi/event
## button/power PWRF 00000080 00000005

EV_KEY 0x01 KEY_POWER 116 1 button/power PWRF 00000080

#} else {
#               struct input_event ev;
#
#               if (sizeof(ev) != full_read(pfd[i].fd, &ev, sizeof(ev)))
#                   continue;
#
#               if (ev.value != 1 && ev.value != 0)
#                   continue;
#
#               event = find_action(&ev, NULL);



