#!/bin/ash
#####
###
#####

########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.6-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.6-KRG-i486·#1·SMP·Sun·Jan·2·20:32:12·GMT-1·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Mon·Oct·24·22:46:22·CEST·2011
#
#
#
#
#
########################################################################


PROG='/etc/rc.d/rc.shutdown.local.end'
ROOT_RO=`mount |grep '/dev/root' |grep '(ro,'`
ROOT_RW=`mount |grep '/dev/root' |grep '(rw,'`


if [ "$0" != "/etc/rc.d/rc.shutdown" ] ; then
echo -e "\e[1;34m""STARTING '$PROG' from '$0'""\e[0;39m"
else
echo -e "\e[1;35m""STARTING '$0'"'.local.end'"\e[0;39m"
fi
#sleep 2
echo

if [ -z "$PUPMODE" ] ; then
echo "PUPMODE='$PUPMODE'"
[ -f /etc/rc.d/PUPSTATE ] && . /etc/rc.d/PUPSTATE
echo "PUPMODE='$PUPMODE'"
fi

create_fsckme_func(){
#PART=`busybox rdev | sed 's#\ .*## ; s#/dev/##'`

if [ -d /initrd ] && [ "$PUPMODE" != "2" ] ; then
PART=`basename $(df | grep '/initrd/mnt/dev_save' | tr -s ' ' | cut -f 1 -d ' ')`
FS=`mount | grep '/initrd/mnt/dev_save' | tr -s ' ' | cut -f 5 -d ' '`
#HOST=`mount | grep '/initrd/mnt/dev_save' | tr -s ' ' | cut -f 1 -d ' '`
                                                          if [ "$ROOT_RW" ];then
echo "$PART"','"$FS"',' > /initrd/pup_rw/etc/.fsckme.flg
echo "$PART"','"$FS"',' > /initrd/mnt/dev_save/fsckme.flg;fi

else
    if [ "$PUPMODE" = "2" ] ; then
                                           if [ "$ROOT_RW" ];then
PART=`basename $(busybox rdev | sed 's#\ .*##') |tr -d '/'`
FS=`mount | grep '/dev/root on / type .*' | tr -s ' ' | cut -f 5 -d ' '`
echo "$PART"','"$FS"',' > /etc/fsckme.flag;fi
    fi
fi

}
#create_fsckme_func

remove_fsckme_func(){
    if [ "$ROOT_RW" ];then
    echo -n "Removing fsckme flag file ... "
find / -maxdepth 3 -type f -iname "*fsckme*" -exec rm {} \;
    echo " ... DONE ";fi
}
remove_fsckme_func


unmount_func(){
echo 'Still mounted :'
mount
echo
if [ "$PUPMODE" = 2 ] ; then
#M=`mount | cut -f 1 -d ' ' | grep '/dev/' | grep -v 'root'`
M=`busybox mount`
SFS=`echo "$M" | grep '\.sfs' | grep -v '*sysfs*' | tr -s ' ' | cut -f 1 -d ' '`
    for i in $SFS ; do
echo "umounting $i"
busybox umount -l $i
ERR=$?
[ "$ERR" != "0" ] && { sleep 2;umount-FULL -v -d -r $i; }
    done
#sleep 2.5
ISO=`echo "$M" | grep '\.iso' | grep -v '\.sfs' | tr -s ' ' | cut -f 1 -d ' '`
    for i in $ISO ; do
echo "umounting $i"
busybox umount -l $i
ERR=$?
[ "$ERR" != "0" ] && { sleep 2;umount-FULL -v -d -r $i; }
    done
#sleep 2.5

FOFS=`echo "$M" | grep '\.4fs' | grep -v -E '/initrd/mnt/dev_rw|/initrd/pup_rw' | tr -s ' ' | cut -f 1 -d ' '`
    for i in $FOFS ; do
echo "umounting $i"
busybox umount -l $i
ERR=$?
[ "$ERR" != "0" ] && { sleep 2;umount-FULL -v -d -r $i; }
    done
#sleep 2.5

TRFS=`echo "$M" | grep '\.3fs' | grep -v -E '/initrd/mnt/dev_rw|/initrd/pup_rw' | tr -s ' ' | cut -f 1 -d ' '`
    for i in $TRFS ; do
echo "umounting $i"
busybox umount -l $i
ERR=$?
[ "$ERR" != "0" ] && { sleep 2;umount-FULL -v -d -r $i; }
    done
#sleep 2.5

TWFS=`echo "$M" | grep '\.2fs' | grep -v -E '/initrd/mnt/dev_rw|/initrd/pup_rw' | tr -s ' ' | cut -f 1 -d ' '`
    for i in $TWFS ; do
echo "umounting $i"
busybox umount -l $i
ERR=$?
[ "$ERR" != "0" ] && { sleep 2;umount-FULL -v -d -r $i; }
    done
#sleep 2.5

M=`busybox mount | cut -f 1 -d ' ' | grep '/dev/' | grep -v 'root'`
    for i in $M ; do
echo "umounting $i"
busybox umount -l $i
ERR=$?
[ "$ERR" != "0" ] && { sleep 2;umount-FULL -v -d -r $i; }
    done
#sleep 5
fi
echo "Unmounting finished , mounted now :"
mount
echo

}
#unmount_func


del_mnt_func(){
        if [ "$ROOT_RW" ];then
MNTD=`find /mnt -maxdepth 1 -type d \( -name "*+*" -o -name "*.*.[0-9]*" \)` #KRG
for i in $MNTD; do  #KRG
    if [ -z "`mount | grep $i`" ];then
echo "removing $i"
rmdir "$i"  #KRG
    fi
done
MNTD=`find /mnt -maxdepth 1 -type d -name "*.[0-9]*" |grep -e '\.[0-9]*$'`
for i in $MNTD; do
    if [ -z "`mount | grep $i`" ];then
echo "removing $i"
rmdir "$i"
    fi
done
        fi
}
#del_mnt_func


if [ "$0" != "/etc/rc.d/rc.shutdown" ] ; then
echo -e "\e[1;34m""ENDING '$PROG' from '$0'""\e[0;39m"
else
echo -e "\e[1;35m""ENDING '$0'"'.local.end'"\e[0;39m"

fi

echo
#sleep 5
#sleep 15s

### END ###
