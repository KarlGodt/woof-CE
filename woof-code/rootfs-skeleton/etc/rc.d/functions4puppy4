#!/bin/ash
# Some more functions called from boot scripts in Puppy4...
#v411 moved choosemousefunc() out of /usr/sbin/xorgwizard, want call from rc.sysinit.
#w468 not using set_mixers() anymore, it's done in /etc/init.d/alsa.
#w468 choosemousefunc() simplified.

########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.6-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.6-KRG-i486·#1·SMP·Sun·Jan·2·20:32:12·GMT-1·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Mon·Oct·24·22:43:00·CEST·2011
#
#
#
#
#
########################################################################

test "$HAVE_F4PUPPY4" && return 0

_get_home_var(){  #Before setting variables, want to get HOME variable
XUSER=`_who_is_X_user` && {
_info "XUSER='$XUSER'"
XUSER_HOME=`awk -F':' "{if (\\$1 == \"$XUSER\") print \\$6}" /etc/passwd`
_info "XUSER_HOME='$XUSER_HOME'"
}

if test -d "$XUSER_HOME"; then
home="$XUSER_HOME"
HOME="$XUSER_HOME"
else
home="$HOME"
[ "$home" = "/" ] && home="/root"
[ "$HOME" = '/' ] && HOME="/root"
fi
[ "$DEBUG" ] && echo "home='$home'"
[ "$DEBUG" ] && echo "HOME='$HOME'"
}
# REM: Only run _get_home_var if DISPLAY
#      Otherwise disturbing messages at bootup
[ "$DISPLAY" ] && _get_home_var

# *** VARIABLES *** #
 f4p4FN=/etc/rc.d/functions4puppy4
my_self=/etc/rc.d/functions4puppy4
. /etc/rc.d/f4puppy5

DRIVE_ICON_DIR="/usr/local/lib/X11/pixmaps/"
 PUP_EVENT_DIR="$HOME/Choices/Puppy/.pup_event"
#PUP_EVENT_DIR="$HOME/.pup_event"
 homeGLOBICONS="$HOME/.config/rox.sourceforge.net/ROX-Filer/globicons"
   globiconsFN="$HOME/.config/rox.sourceforge.net/ROX-Filer/globicons"
 USE_GLOBICONS=

# REM: Debug variables set while altering code
oldINFO=$INFO;oldDEBUG=$DEBUG;oldDEBUGX=$DEBUGX
#INFO=1;DEBUG=1;DEBUGX=1

#** DEBUG
LINENR=1
[ "`echo "$LINENO"`" ] || LINENR=''
_get_lineno_f4p4(){
#   if [ "$LINENR" ] ; then echo "$LINENO"
#   else
    if [ "$1" ] ; then
    #echo "$1" >&2
    echo `grep -n -w -m1 "$1" "$f4p4FN" |cut -f1 -d':'`
    else
    echo 'UNKNOWN'
    fi
#   fi
}
#LINEP=T001; echo "$DBG line `_get_lineno_f4p4 $LINEP`"
#**DEBUG

#v4.02 called from rc.modules, rc.modules2, pup_eventd... v403 only rc.modules2
firmware_module_func(){
 #global $MODULE is name of module, global $KERNVER.
    altMODULE="`echo -n "$MODULE" | tr '_' '-'`"
    FPATTERN='[:,]'"${MODULE}"'\.ko|[:,]'"${altMODULE}"'\.ko'
    FIRMPKG="`cat /etc/modules/firmware.dep.$KERNVER  | grep -v '^#' | grep ':' | grep -E "$FPATTERN" | cut -f 1 -d ':' | head -n 1`"
    if [ "$FIRMPKG" != "" ];then
     #v4.02 firmware pkg is a tarball...
     if [ -f /lib/modules/all-firmware/${FIRMPKG}.tar.gz ];then
      cp $VERB -af /lib/modules/all-firmware/${FIRMPKG}.tar.gz /tmp >>$OUT 2>&1
      cd /tmp
      tar $VERB -zxf ${FIRMPKG}.tar.gz >>$ERR 2>&1
     fi
     if [ -d /tmp/${FIRMPKG} ];then
      /bin/cp $VERB -a --remove-destination --backup=numbered /tmp/${FIRMPKG}/* / 2>>$ERR
      #comment-out the firmware pkg entry, so it only installs once...
      R1PATTERN="s/^${FIRMPKG}:/#${FIRMPKG}:/"
      DEPUPDATED="`sed -e "$R1PATTERN" /etc/modules/firmware.dep.$KERNVER`"
      echo "$DEPUPDATED" > /etc/modules/firmware.dep.$KERNVER
      #execute any post-install script...
      if [ -f /pinstall.${FIRMPKG}.sh ];then
       cd /
       /pinstall.${FIRMPKG}.sh >>$OUT 2>&1 #execute script.
       [ "$VERBOSE" ] || rm -f /pinstall.${FIRMPKG}.sh >>$OUT 2>&1
      fi
     fi
    fi
}

#v403 change desktop icon to unmounted status, called from pup_event_frontend_d, pmount...
icon_unmounted_func(){
 [ "$DISPLAY" ] || return
local INFO=1;
local DEBUG=1;
local DEBUGX=1
    _debug "icon_unmounted_func BEGIN"  #DBG
    _debug "\$1:'$1' \$2:'$2' \$3:'$3'"

local DRVICON GLOBLINES diPATTERN

#passed params: drivename category  ex: sda usbdrv
 DRVICON="drive48.png" #default.
  case $2 in
  "usbdrv")  DRVICON="usbdrv48.png" ;;
  "card")    DRVICON="card48.png"   ;;
  "floppy")  DRVICON="floppy48.png" ;;
  "optical") DRVICON="optical48.png";;
  esac

[ "$DEBUG" ] && { LINEP=D001; echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` DRVICON='$DRVICON'"; }
# Skip code for Macpup e17
local CURRENTWM_
 read CURRENTWM_ </etc/windowmanager
case $CURRENTWM_ in
*enlightenment*) return 0;;
esac

#find out if already done...
if [ "$USE_GLOBICONS" ] && [ -f "$homeGLOBICONS" ];then
 GLOBLINES=`cat "$homeGLOBICONS" | tr "\n" '|' | sed -e 's%</rule>|%\n%g'`

  [ "$DEBUG" ] && { LINEP=D002; echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` GLOBLINES :" >&2; }
  [ "$DEBUG" ] && echo "$GLOBLINES" | head -n 2 >&2

  diPATTERN="$PUP_EVENT_DIR/drive_${1}"'"'

 [ "$DEBUG" ] && { LINEP=D003; echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` dipattern='$diPATTERN'" >&2; }
 [ "$DEBUG" ] && GRepGLob=`echo "$GLOBLINES" | grep -w "$diPATTERN" | grep "$DRVICON"`
 [ "$DEBUG" ] && { LINEP=D004; echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` GRepGLob='$GRepGLob'" >&2; }

 [ "`echo "$GLOBLINES" | grep "$diPATTERN" | grep "$DRVICON"`" ] && { _debug "already there in '$homeGLOBICONS'"; return 0; }
fi

 echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <SetIcon>
   <Path>$PUP_EVENT_DIR/drive_${1}</Path>
   <Icon>$DRIVE_ICON_DIR/${DRVICON}</Icon>
  </SetIcon>
</env:Body>
</env:Envelope>"  | rox -R

_debug "icon_unmounted_func END"
}

icon_mounted_func(){
 local DEBUG=1
 _debug "icon_mounted_func BEGIN"   #DBG
 _debug "\$1:'$1' \$2:'$2' \$3:'$3'"

local DRVICON PART_ICON imPATTERN GLOBLINES diPATTERN
#passed params: drivename category  ex: sda usbdrv
 DRVICON="drive_mntd48.png" #default.
 case $2 in
 "drivero") DRVICON="drive_mntdro48.png"  ;;
 "usbdrv")  DRVICON="usbdrv_mntd48.png"   ;;
 "card")    DRVICON="card_mntd48.png"     ;;
 "floppy")  DRVICON="floppy_mntd48.png"   ;;
 "optical") DRVICON="optical_mntd48.png"  ;;
 usbdrvro)  DRVICON="usbdrv_mntdro48.png" ;;
 cardro)    DRVICON="card_mntdro48.png"   ;;
 floppyro)  DRVICON="floppy_mntdro48.png" ;;
 opticalro) DRVICON="optical_mntdro48.png";;
 esac

 local hasRO
 hasRO='';
 tac /proc/mounts | grep -w "^/dev/$1" | awk '{print $4}' | grep $Q -w ro && hasRO=1
 _debug "$0:$*"
 # security check for real ro/rw - passed param $2 may not be accurate
 case $2 in
 card*)       [ "$hasRO" ] && PART_ICON=card_mntdro48.png    || PART_ICON=card_mntd48.png   ;;
 floppy*)     [ "$hasRO" ] && PART_ICON=floppy_mntdro48.png  || PART_ICON=floppy_mntd48.png ;;
 optical*)    [ "$hasRO" ] && PART_ICON=optical_mntdro48.png || PART_ICON=optical_mntd48.png;;
 usbdrv*)     [ "$hasRO" ] && PART_ICON=usbdrv_mntdro48.png  || PART_ICON=usbdrv_mntd48.png ;;
 drive*|*|"") [ "$hasRO" ] && PART_ICON=drive_mntdro48.png   || PART_ICON=drive_mntd48.png  ;;
 esac

 DRVICON=${PART_ICON}
 [ "$DEBUG" ] && LINEP=D011 echo "Line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` DRVICON '$DRVICON'" >&2

 imPATTERN='^/dev/'"${1}" #important, no space on end.
 [ "$DEBUG" ] && LINEP=D012 echo "Line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` imPATTERN '$imPATTERN'" >&2
# if [ "`mount | cut -f 1,3 -d ' ' | grep "$imPATTERN" | grep -v ' /initrd/' | grep -v ' /$'`" = "" ];then
 [ "$DEBUG" ] && LINEP=D013 echo "Line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` now finding the boot partition" >&2

 if [ "`/bin/df | tr -s ' ' | cut -f 1,6 -d ' ' | grep "$imPATTERN" | grep -v ' /initrd/' | grep -v ' /$'`" = "" ];then
  #only partitions mntd on /initrd/* then must be mntd at boot. cannot unmount.
  #also, full hd install has partition mntd on '/'.
  DRVICON="drive_mntd_boot48.png" #default.
  case $2 in
  "usbdrv")  DRVICON="usbdrv_mntd_boot48.png" ;;
  "card")    DRVICON="card_mntd_boot48.png"   ;;
  "floppy")  DRVICON="floppy_mntd_boot48.png" ;;
  "optical") DRVICON="optical_mntd_boot48.png";;
  esac
 [ "$DEBUG" ] && LINEP=D014 echo "Line `[ $LINENO ] && echo $LINENO || _get_lineno $LINEP` DRVICON-boot : '$DRVICON'" >&2
 fi

# Skip code for Macpup e17
local CURRENTWM_
 read CURRENTWM_ </etc/windowmanager
case $CURRENTWM_ in
*enlightenment*) return 0;;
esac

 #find out if already done...
 if [ "$USE_GLOBICONS" ] && [ -f "$homeGLOBICONS" ];then
  GLOBLINES=`cat "$homeGLOBICONS" | tr "\n" '|' | sed -e 's%</rule>|%\n%g'`
  diPATTERN="$PUP_EVENT_DIR/drive_${1}"'"'
  [ "`echo "$GLOBLINES" | grep -w "$diPATTERN" | grep "$DRVICON"`" ] && { _debug "already there at $homeGLOBICONS"; return 0; }
 fi

 echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <SetIcon>
   <Path>$PUP_EVENT_DIR/drive_${1}</Path>
   <Icon>$DRIVE_ICON_DIR/${DRVICON}</Icon>
  </SetIcon>
 </env:Body>
</env:Envelope>"  | rox -R

_debug "icon_mounted_func END"
}

__icon_mounted_func__() {
 [ "$DISPLAY" ] || return
 _debug "icon_mounted_func BEGIN"   #DBG
 _debug "\$1:'$1' \$2:'$2' \$3:'$3'"
 #passed params: drivename category  ex: sda usbdrv

 DRVICON="drive_mntd48.png" #default.
 [ "$2" = "usbdrv" ]  && DRVICON="usbdrv_mntd48.png"
 [ "$2" = "card" ]    && DRVICON="card_mntd48.png"
 [ "$2" = "floppy" ]  && DRVICON="floppy_mntd48.png"
 [ "$2" = "optical" ] && DRVICON="optical_mntd48.png"
  [ "$DEBUG" ] && LINEP=D011 echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` DRVICON '$DRVICON'" >&2

 imPATTERN='^/dev/'"${1}" #important, no space on end.
  [ "$DEBUG" ] && LINEP=D012 echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` imPATTERN '$imPATTERN'" >&2
# if [ "`mount | cut -f 1,3 -d ' ' | grep "$imPATTERN" | grep -v ' /initrd/' | grep -v ' /$'`" = "" ];then
 [ "$DEBUG" ] && LINEP=D013 echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` now finding the boot partition" >&2

 if [ "`/bin/df | tr -s ' ' | cut -f 1,6 -d ' ' | grep "$imPATTERN" | grep -v ' /initrd/' | grep -v ' /$'`" = "" ];then
  #only partitions mntd on /initrd/* then must be mntd at boot. cannot unmount.
  #also, full hd install has partition mntd on '/'.
  DRVICON="drive_mntd_boot48.png" #default.
  [ "$2" = "usbdrv" ]  && DRVICON="usbdrv_mntd_boot48.png"
  [ "$2" = "card" ]    && DRVICON="card_mntd_boot48.png"
  [ "$2" = "floppy" ]  && DRVICON="floppy_mntd_boot48.png"
  [ "$2" = "optical" ] && DRVICON="optical_mntd_boot48.png"
   [ "$DEBUG" ] && LINEP=D014 echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` DRVICON-boot : '$DRVICON'" >&2
 fi

 #find out if already done...
 if [ "$USE_GLOBICONS" ] && [ -f "$globiconsFN" ];then
  GLOBLINES=`cat "$globiconsFN" | tr "\n" '|' | sed -e 's%</rule>|%\n%g'`
  diPATTERN="$PUP_EVENT_DIR/drive_${1}"'"'
  [ "`echo "$GLOBLINES" | grep -w "$diPATTERN" | grep "$DRVICON"`" ] && { _debug "already there at $globiconsFN";return; }
 fi

 echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <SetIcon>
   <Path>$PUP_EVENT_DIR/drive_${1}</Path>
   <Icon>$DRIVE_ICON_DIR/${DRVICON}</Icon>
  </SetIcon>
 </env:Body>
</env:Envelope>"  | rox -R

_debug "icon_mounted_func END"

}

icon_remove_func() {  # DRVICON not necessary
#passed param is partition icon to remove from desktop. ex: sda1
    _debug "icon_remove_func BEGIN"
    _debug "\$1:'$1' \$2:'$2' \$3:'$3'"
    [ "$DEBUG" ] && LINEP=0x021 echo "$DBG line `[ $LINENO ] && echo $LINENO || _get_lineno_f4p4 $LINEP` DRVICON='$DRVICON'" >&2

 echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <PinboardRemove>
   <Path>$PUP_EVENT_DIR/drive_${1}</Path>
   <Icon>$DRIVE_ICON_DIR/${DRVICON}</Icon>
  </PinboardRemove>
 </env:Body>
</env:Envelope>"  | rox -R
_debug "icon_remove_func END"
}

free_coord4() {   #bottom only
 #find a free place on desktop. v410 avoid exact overlapping icons...
 SCRNXY="`xwininfo -root    | grep -o '\-geometry .*' | tr -s ' ' | cut -f 2 -d ' ' | cut -f 1 -d '+'`"
 SCRN_X="`echo -n "$SCRNXY" | cut -f 1 -d 'x'`"
 SCRN_Y="`echo -n "$SCRNXY" | cut -f 2 -d 'x'`"

 COORDSGRID="`grep -o ' x="[0-9]*" y="[0-9]*" ' $home/Choices/ROX-Filer/PuppyPin | sed 's/[0-9]"/"/g'`"
 COORD_Y=$(( SCRN_Y - 64 ))
 COORD_X=32
 MAX_X=$(( SCRN_X - 96 ))
 xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
 while :;do
  xgPATTERN="`echo -n "$xPATTERN" |  sed 's/[0-9]"/"/g'`"
  [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" ] || break
  COORD_X=$(( COORD_X + 64 ))
  xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
  [[ $COORD_X -gt $MAX_X ]] && break
 done
}

add_pinboard_func4() { #needs ONEDRVNAME, DRV_CATEGORY, FSTYPE
 [ "$DISPLAY" ] || return
 _debug "add_pinboard_func BEGIN"
 #ppPATTERN=' label="'"$ONEDRVNAME"'"'
 #v411 rerwin: avoid icon getting duplicated if it is renamed...
 ppPATTERN="$PUP_EVENT_DIR/drive_${DRV_NAME}<"
 [ "`grep "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin`" ] && return #precaution.
 free_coord4
 echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <PinboardAdd>
   <Path>$PUP_EVENT_DIR/drive_${DRV_NAME}</Path>
   <X>${COORD_X}</X>
   <Y>${COORD_Y}</Y>
   <Label>${DRV_NAME}</Label>
   <Args>${DRV_CATEGORY} ${FSTYPE}</Args>
  </PinboardAdd>
 </env:Body>
</env:Envelope>"  | rox -R
}



choosemousefunc() { #w468 called from xorgwizard.
 MOUSEINTRO="Only very old PCs may have a serial mouse. These are recognised by the fairly large rectangular plug, technically known as a DB9 or the even larger DB25 (where the 9 or 25 refers to the number of pins in the plug). Press the UP and DOWN arrow keys to choose your mouse type, then press the ENTER key:"
 DETECTEDMOUSEDEV="`cat /etc/mousedevice`"
 case $DETECTEDMOUSEDEV in
  ttyS*)
   MOUSEMENU1a='serial';   MOUSEMENU1b='(mouse in very old computers)'
   MOUSEMENU2a='usb/ps-2'; MOUSEMENU2b='(mouse or touchpad in all modern computers)'
  ;;
  *)
   MOUSEMENU1a='usb/ps-2'; MOUSEMENU1b='(mouse or touchpad in all modern computers)'
   MOUSEMENU2a='serial';   MOUSEMENU2b='(mouse in very old computers)'
  ;;
 esac
 dialog --no-cancel --menu "${MOUSEINTRO}\n\n
Please choose mouse type..." 0 0 0 "$MOUSEMENU1a" "$MOUSEMENU1b" "$MOUSEMENU2a" "$MOUSEMENU2b" 2>/tmp/testmsx
 [ $? -ne 0 ] && return 1
 CHOSENMOUSETYPE="`cat /tmp/testmsx`"
 case $CHOSENMOUSETYPE in
 serial)
  dialog --no-cancel --menu "Serial port mouse plugged into...\nUse UP/DOWN ARROW keys, ENTER key to finish" 0 0 0 ttyS0 "COM1 (most likely)" ttyS1 COM2 ttyS2 COM3 ttyS3 COM4 2>/tmp/testmsx
  [ $? -ne 0 ] && return 1
  MOUSEDEV="`cat /tmp/testmsx`"
  modprobe sermouse
  ln $VERB -snf $MOUSEDEV /dev/mouse
  echo "$MOUSEDEV" > /etc/mousedevice
  cat /etc/X11/xorg.conf | sed -e 's/\W\+Option\W\+"Protocol"\W\+"\(\(\w\+\/\w\+\)\|\(\w\+\)\)\W\+#mouse0protocol/  Option      "Protocol" "Microsoft" #mouse0protocol/' >/tmp/xorg.conf.tmp2
 ;;
 *)
  echo "input/mice" > /etc/mousedevice
  ln $VERB -snf input/mice /dev/mouse
  cat /etc/X11/xorg.conf | sed -e 's/\W\+Option\W\+"Protocol"\W\+"\(\(\w\+\/\w\+\)\|\(\w\+\)\)\W\+#mouse0protocol/  Option      "Protocol" "IMPS\/2" #mouse0protocol/' >/tmp/xorg.conf.tmp2
 ;;
 esac
 _sync
 cp $VERB -f /tmp/xorg.conf.tmp2 /etc/X11/xorg.conf
 rm $VERB -f /tmp/xorg.conf.tmp2
} #choosemousefunc()

INFO=$oldINFO
DEBUG=$oldDEBUG
DEBUGX=$oldDEBUGX
###END###
  HAVE_F4PUPPY4=1
 _HAVE_F4PUPPY4_=1
###END###
