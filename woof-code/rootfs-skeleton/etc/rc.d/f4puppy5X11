#!/bin/ash

[ "$HAVE_F4PUPPY5X11" ] && return 0

# REM: X11 for X server environment - not Puppy version XXX or something like that
#

# REM:

#===== XMESSAGE or SPLASH ====================================================
_get_yaf_args()
{
    local exe
for exe in pupmessage gtkdialog-splash yaf-splash gxmessage xmessage; do
YAF=`which $exe`
test "$YAF" || continue
test -L "$YAF" && continue
case $YAF in

 pupmessage)yafFSIZE="-fontsize large"; yafICON="-icon /usr/share/doc/puppylogo96.png"
  yafBG="-bg orange"; yafFG="-fg black"; yafPL="-placement center"; yafFONT="-font '-*-*-*-*-*-*-*-*-*-*-*-*-*-*'"
  yafTXT="-text"
 ;;

#gtkdialog-splash

# an easy replacement for yaf-splash in Puppy (NOT Puppy <=4.x)
# mave 30.05.2010
# no warranty
# Thanks for Puppy!

# usage: gtkdialog-splash [OPTIONS] [-timeout SEC] -text TEXT | -kill [ PID ]

# -text EXPRESSION
# -timeout COUNT (in seconds)
# -icon GTK-XXX (for example: gtk-info all gtk-stock-symbols, default: none)
# OR path/to/pixmap.png|gif|jpeg
# -icon_width WIDTH in pixels
# -bg COLOR (background color red, blue, yellow..., default: grey)
# -bg_gradient true|false (default: true)
# -fg COLOR (font color, default: black)
# -placement center|mouse|top|bottom|top-left|bottom-left (default: center)
# -close never|mouseover|box (default is mouseover)
# -deco TITLE (shows windows decorations, with title)
# -font NAME
# -fontsize SIZE
# -align ALIGNMENT left, right or center -margin SIZE (default: 10)
# -border true|false (default: true)
# -kill [ PID ] ( When PID omitted, kills all GTKDIALOG_SPLASH found
# in ps output, PID must exist as /tmp/GTKDIALOG-SPLASHPID with PID content )

 gtkdialog-splash) yafFSIZE="-fontsize large"; yafICON="-icon /usr/share/doc/puppylogo96.png"
  yafBG="-bg orange"; yafFG="-fg black"; yafPL="-placement center"; yafFONT="-font '-*-*-*-*-*-*-*-*-*-*-*-*-*-*'"
  yafTXT="-text"
 ;;

#Usage: yaf-splash [ options ]
#Where options include:

#  -text                         Message to display.
#  -timeout                      How long to display the message before
#                                exiting. Default is 0, which means forever.
#  -clock                        Enable clock display.
#  -12                           Display twelve hour time (default).
#  -24                           Display twenty-four hour time.
#  -seconds                      Display seconds (default).
#  -noseconds                    Don't display seconds.
#  -countdown <date>             Display a countdown instead of a clock.
#                                Run `-countdown foo' to see date syntax.
#  -countdownquit                Quit after the countdown has reached
#                                zero (default).
#  -nocountdownquit              Keep counting after reaching zero.
#  -geometry <geometry>          Size and position of window.
#  -placement <placement name>   A screen location, one of center, top,
#                                bottom, right, left, top-right, top-left,
#                                bottom-left, bottom-right. Defaults to center.
#                                A specified placement will override -geometry.
#  -font <font>                  Name of an X font to use.
#  -transparent                  Make the window background be transparent,
#                                if possible.
#  -nontransparent               Don't (default).
#  -mirror                       Flip the text about the y axis. Useful for
#                                back projection.
#  -nomirror                     Don't (default).
#  -fg                           Set the forground text colour (default: black).
#  -bg                           Set the background colour (default: white).
#  -bd                           Set the border colour (default: black).
#  -bw                           Set the border width (default: 2).
#  -outline                      Set the text outline width (default: 1).
#  -margin                       Set the margin size (default: 0).

 yaf-splash) #yafFSIZE="-fontsize large"; yafICON="-icon /usr/share/doc/puppylogo96.png"
  yafBG="-bg black"; yafFG="-fg orange"; yafPL="-placement center"; yafFONT="-font -*-*-*-*-*-*-*-*-*-*-*-*-*-*"
  yafFONT="-font -misc-*-*-*-*-*-*-*-*-*-*-*-*-*"
  yafEXTRA="-transparent"
  #yaf-splash: couldn't load font "'*-*-*-*-*-*-*-*-*-*-*-*-*'"
  yafTXT="-text"
 ;;

 gxmessage)#yafFSIZE="-fontsize large"; yafICON="-icon /usr/share/doc/puppylogo96.png"
  yafBG="-bg orange"; yafFG="-fg black"; yafPL="-center"; yafFONT="-font '-*-*-*-*-*-*-*-*-*-*-*-*-*-*'"
 ;;

#gxmessage - a GTK-based xmessage clone

#Usage: gxmessage [OPTIONS] message ...
#       gxmessage [OPTIONS] -file FILENAME

#xmessage options:
#  -file FILENAME         Get message text from file, '-' for stdin
#  -buttons BUTTON_LIST   List of "LABEL:EXIT_CODE", comma separated
#  -default LABEL         Give keyboard focus to the specified button
#  -print                 Send the selected button's LABEL to stdout
#  -center                Try to open window in the centre of the screen
#  -nearmouse             Try to open window near the mouse pointer
#  -timeout SECONDS       Exit with code 0 after SECONDS seconds

#X-like options:
#  -display DISPLAY       X display to use
#  -fn FONT | -font FONT  Set message font (works with GTK font names)
#  -fg COLOUR             Set message font colour
#  -bg COLOUR             Set message background colour
#  -geometry GEOMETRY     Set window size (position will be ignored)
#  -iconic                Start iconified
#  -name NAME             Program name as used by the window manager
#  -title TITLE           Set window title to TITLE

#gxmessage options:
#  -borderless            Try to open window without border decoration
#  -nofocus               Don't focus the window when it opens
#  -encoding CHARSET      Expect CHARSET as the message encoding
#  -entry                 Prompt for text to be sent to stdout
#  -entrytext TEXT        Same as -entry, but with TEXT as default text
#  -wrap                  Wrap lines of text to fit window width
#  -help | -?             Show this usage information
#  -version               Show gxmessage version information

 xmessage) #yafFSIZE="-fontsize large"; yafICON="-icon /usr/share/doc/puppylogo96.png"
  yafBG="-bg orange"; yafFG="-fg black"; yafPL="-center"; yafFONT="-font '-*-*-*-*-*-*-*-*-*-*-*-*-*-*'"
 ;;
esac
break
done
_debug "Using '$YAF'"
}

#================== GTKDIALOG =========================

# REM: gtkdialog has xml/html like syntax, but no comment facillity
#      So remove_comments removes '#' shell comment parts at the beginning of line
#      '#' after last closing '>' bracket,
#      '<!-- --->' xml comment parts
#      and '<!--
#      comment lines here
#      -->' xml comment parts
_GTKdialog_remove_comments()
{

test "$*" || { _return 1 "No Input. Usage _GTKdialog_remove_comments DIALOG_GUI_CODE"; return 1; }
local sPATTERN1 sPATTERN2 sPATTERN3 sPATTERN4
sPATTERN1='s%<!--.*-->%%g'
sPATTERN2='/<!--/,/-->/d'
sPATTERN3='s%^#.*%%'
sPATTERN4='s%>.*#[^>]*$%%'

echo "$*" | sed -e "$sPATTERN1" -e "$sPATTERN2" -e "$sPATTERN3" -e "$sPATTERN4" || return 1
}

# REM: add line number to MAIN_DIALOG variable lines
#      and print the lines to stdout (does not do GUI)
_GTKdialog_debug_gui()
{
test "$*" || { _return 2 "_GTKdialog_debug_gui: Usage: debugGUI=\`_GTKdialog_debug_gui \"$MAIN_DIALOG\"\`"; return $?; }

local lNR
lNR=0
echo "$*" | while read -r aLINE; do lNR=$((lNR+1)); echo "$lNR: $aLINE";done

}

#=============== JWM ========================================================

_say_jwm_taskbar_tray_line(){

   test -f "$HOME"/.jwmrc-tray || { _return 4 "$HOME/.jwmrc-tray does not exist"; return $?; }

   jwmtaskbarTRAYLINE=`grep '<Tray .*>' "$HOME"/.jwmrc-tray | grep -vE '^#|^[[:blank:]]*#' | tail -n1`
   echo "$jwmtaskbarTRAYLINE"

}

_say_jwm_taskbar_autohide(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarAUTOHIDE=`echo "$jwmtaskbarTRAYLINE" | grep -o ' autohide="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarAUTOHIDE"

}

 _say_jwm_taskbar_border(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarBORDER=`echo "$jwmtaskbarTRAYLINE" | grep -o ' border="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarBORDER"

}

_say_jwm_taskbar_halign(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarHALIGN=`echo "$jwmtaskbarTRAYLINE" | grep -o ' halign="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarHALIGN"

}

_say_jwm_taskbar_height(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarHEIGHT=`echo "$jwmtaskbarTRAYLINE" | grep -o ' height="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarHEIGHT"

}

_say_jwm_taskbar_insert(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarINSERT=`echo "$jwmtaskbarTRAYLINE" | grep -o ' insert="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarINSERT"

}

_say_jwm_taskbar_layout(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarLAYOUT=`echo "$jwmtaskbarTRAYLINE" | grep -o ' layout="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarLAYOUT"

}

_say_jwm_taskbar_valign(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarVALIGN=`echo "$jwmtaskbarTRAYLINE" | grep -o ' valign="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarVALIGN"

}

_say_jwm_taskbar_width(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarWIDTH=`echo "$jwmtaskbarTRAYLINE" | grep -o ' width="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarWIDTH"

}

_say_jwm_taskbar_x(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarX=`echo "$jwmtaskbarTRAYLINE" | grep -o ' x="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarX"

}

_say_jwm_taskbar_y(){

  jwmtaskbarTRAYLINE=`_say_jwm_taskbar_tray_line`
  jwmtaskbarY=`echo "$jwmtaskbarTRAYLINE" | grep -o ' y="[^"]*"' | cut -f2 -d'"'`
  echo "$jwmtaskbarY"

}

#=============== JWM ========================================================

#============== ROOT SCREEN =================================================

# REM: various functions to tell XxY
#      or just X or Y
#
#      using different X11 diagnostic binaries (xwininfo,xrandr,xdpyinfo)
#      andor different filters (tac,grep,awk,sed)



_get_screen_resolution(){
 local RV
 ROOT_SCREEN_DIM_=`xwininfo -root`
 RV=$?
 ROOT_SCREEN_DIM_=`echo "$ROOT_SCREEN_DIM_" | tac | grep -vE '^[#!;]|^[[:blank:]]*[#!;]|^[/\*][/\*]|^[[:blank:]]*[/\*][/\*]' | grep -m1 '\-geometry'`
 RV=$((RV+$?))
_ROOT_SCREEN_DIM_=`echo "$ROOT_SCREEN_DIM_" | awk '{print $2}'`
 RV=$((RV+$?))
echo ${_ROOT_SCREEN_DIM_}
 return $RV
}

_get_screen_resolution2(){
 local RV
 ROOT_SCREEN_XY_=`xrandr`
 RV=$?
 ROOT_SCREEN_XY_=`echo "$ROOT_SCREEN_XY_" | grep -o -m 1 'current [0-9]* x [0-9]*,'`
 RV=$((RV+$?))
_ROOT_SCREEN_XY_=`echo "$ROOT_SCREEN_XY_" | grep -oe '[0-9]*'`
 RV=$((RV+$?))
echo ${_ROOT_SCREEN_XY_}
 return $RV
}

_get_screen_resolution3(){
 local RV
 ROOT_SCREEN_XY_=`xrandr`
 RV=$?
 ROOT_SCREEN_XY_=`echo "$ROOT_SCREEN_XY_" | grep -o -m 1 'current [0-9]* x [0-9]*,'`
 RV=$((RV+$?))
_ROOT_SCREEN_XY_=`echo "$ROOT_SCREEN_XY_" | sed 's%[^0-9x]%%g'`
 RV=$((RV+$?))
echo ${_ROOT_SCREEN_XY_}
 return $RV
}

_get_screen_resolution4(){
 local RV
 ROOT_SCREEN_XY_=`xrandr`
 RV=$?
_ROOT_SCREEN_XY_=`echo "$ROOT_SCREEN_XY_" | sed -n '/current/ s%.*current \(.*\), maximum.*%\1%p'`
 RV=$((RV+$?))
echo ${_ROOT_SCREEN_XY_}
 return $RV
}

_get_screen_resolution7(){
 local RV
#_ROOT_SCREEN_XY_=`xdpyinfo | grep -A1 -m 1 '^screen #0:' | tail -n1 | awk '{print $2}'`
 ROOT_SCREEN_XY_=`xdpyinfo`
 RV=$?
 ROOT_SCREEN_XY_=`echo "$ROOT_SCREEN_XY_" | grep -m 1 'dimensions:'`
 RV=$((RV+$?))
_ROOT_SCREEN_XY_=`echo "$ROOT_SCREEN_XY_" | awk '{print $2}'`
 RV=$((RV+$?))
echo ${_ROOT_SCREEN_XY_}
 return $RV
}

_get_screen_resolution8(){
 local RV
_ROOT_SCREEN_XY_=`xdpyinfo | awk '/dimensions:/ {print $2}'`
 RV=$?
echo ${_ROOT_SCREEN_XY_}
 return $RV
}

_get_screen_resolution9(){
 local RV
_ROOT_SCREEN_XY_=`xdpyinfo | sed -n '/dimensions:/ s%.*dimensions:[[:blank:]]*\([0-9x]*\) pixels.*%\1%p'`
 RV=$?
echo ${_ROOT_SCREEN_XY_}
 return $RV
}

_get_screen_x(){
 local RV
_ROOT_SCREEN_X_=`xwininfo -root | tac | grep -vE '^[#!;]|^[[:blank:]]*[#!;]|^[/\*][/\*]|^[[:blank:]]*[/\*][/\*]' | grep -m1 '\-geometry' | awk '{print $2}' | awk -F'x' '{print $1}'`
 RV=$?
echo ${_ROOT_SCREEN_X_}
 return $RV
}

_get_screen_x2(){
 local RV
_ROOT_SCREEN_X_=`xrandr | grep -o -m 1 'current [0-9]* x [0-9]*,' | cut -f2 -d' '`
 RV=$?
echo ${_ROOT_SCREEN_X_}
 return $RV
}

_get_screen_x8(){
 local RV
_ROOT_SCREEN_X_=`xdpyinfo | awk -F'[ x]' '/dimensions:/ {print $7}'`
 RV=$?
echo ${_ROOT_SCREEN_X_}
 return $RV
}

_get_screen_x8(){
 local RV
_ROOT_SCREEN_X_=`xdpyinfo | awk -F'[ x]' '/dimensions:/ {print $7}'`
 RV=$?
echo ${_ROOT_SCREEN_X_}
 return $RV
}

_get_screen_x81(){
 local RV
_ROOT_SCREEN_Y_=`xdpyinfo | awk '/dimensions:/ {print $2}' | cut -f1 -dx`
 RV=$?
echo ${_ROOT_SCREEN_Y_}
 return $RV
}

_get_screen_y(){
 local RV
_ROOT_SCREEN_Y_=`xwininfo -root | tac | grep -vE '^[#!;]|^[[:blank:]]*[#!;]|^[/\*][/\*]|^[[:blank:]]*[/\*][/\*]' | grep -m1 '\-geometry' | awk '{print $2}' | awk -F'[x+]' '{print $2}'`
 RV=$?
echo ${_ROOT_SCREEN_Y_}
 return $RV
}

_get_screen_y2(){
 local RV
_ROOT_SCREEN_Y_=`xrandr | grep -o -m 1 'current [0-9]* x [0-9]*,' | awk -F' ' '{print $NF}'`
 RV=$?
echo ${_ROOT_SCREEN_Y_/,/}
 return $RV
}

_get_screen_y3(){
 local RV
_ROOT_SCREEN_Y_=`xrandr | grep -o -m 1 'current [0-9]* x [0-9]*,' | sed -r 's%(.*) x ([0-9]*),%\2%'`
 RV=$?
echo ${_ROOT_SCREEN_Y_}
 return $RV
}

_get_screen_y8(){
 local RV
_ROOT_SCREEN_Y_=`xdpyinfo | awk -F'[ x]' '/dimensions:/ {print $8}'`
 RV=$?
echo ${_ROOT_SCREEN_Y_}
 return $RV
}

_get_screen_y81(){
 local RV
_ROOT_SCREEN_Y_=`xdpyinfo | awk '/dimensions:/ {print $2}' | cut -f2 -dx`
 RV=$?
echo ${_ROOT_SCREEN_Y_}
 return $RV
}

#=

###END###
_HAVE_F4PUPPY5X11_=1  ## WARN : DO NOT EXPORT !!
  HAVE_F4PUPPY5X11=1
###END###
