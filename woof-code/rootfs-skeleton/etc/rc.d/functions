#!/bin/sh
# From Slackware 11
# Standard functions for launching daemons

########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.6-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.6-KRG-i486·#1·SMP·Sun·Jan·2·20:32:12·GMT-1·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Mon·Oct·24·22:42:34·CEST·2011
#
#
#
#
#
########################################################################


COL_SUCCESS="echo -en \\033[70G"
COL_FAILURE="echo -en \\033[70G"
NORMAL="echo -en \\033[0;39m"
SUCCESS="echo -en \\033[1;32m"
FAILURE="echo -en \\033[1;31m"

echon ()
{
   echo -n $@
}


evaluate_retval()
{
    if [ $? = 0 ]
    then
            print_status success
    else
            print_status failure
    fi
}



print_status()
{

        if [ $# = 0 ]
        then
                echo "Usage: print_status {success|failure}"
                return 1
        fi

        case "$1" in
                success)
                        $COL_SUCCESS
                        echo -n "[  "
                        $SUCCESS
                        echo -n "OK"
                        $NORMAL
                        echo "  ]"
			true
                        ;;
                failure)
                        $COL_FAILURE
                        echo -n "["
                        $FAILURE
                        echo -n "FAILED"
                        $NORMAL
                        echo "]"
                        false
			;;
        esac
}


loadproc()
{



        if [ $# = 0 ]
        then
                echo "Usage: loadproc {program}"
                exit 1
        fi


        base=$(/usr/bin/basename $1)


        pidlist=$(/sbin/pidof -o $$ -o $PPID -o %PPID -x $base)

        pid=""

        for apid in $pidlist
        do
                if [ -d /proc/$apid ]
                then
                        pid="$pid $apid"
                fi
        done

        
	if [ ! -n "$pid" ]
        then

                $*
                evaluate_retval
        else

                print_status failure
        fi

}


killproc()
{



        if [ $# = 0 ]
        then
                echo "Usage: killproc {program} [signal]"
                exit 1
        fi



        base=$(/usr/bin/basename $1)



        if [ "$2" != "" ]
        then
                killlevel=-$2
        else
                nolevel=1
        fi



        pidlist=$(/sbin/pidof -o $$ -o $PPID -o %PPID -x $base)

        pid=""

        for apid in $pidlist
        do
                if [ -d /proc/$apid ]
                then
                        pid="$pid $apid"
                fi
        done


        if [ -n "$pid" ]
        then

                if [ "$nolevel" = 1 ]
                then
                        /bin/kill -TERM $pid


                        if /bin/ps h $pid >/dev/null 2>&1
                        then
                                /bin/sleep 2
                                if /bin/ps h $pid > /dev/null 2>&1
                                then
                                        /bin/kill -KILL $pid
                                        if /bin/ps h $pid > /dev/null 2>&1
                                        then
                                                /bin/sleep 2
                                        fi
                                fi
                        fi
                        /bin/ps h $pid >/dev/null 2>&1
                        if [ $? = 0 ]
                        then

                                print_status failure
                        else

                                /bin/rm -f /var/run/$base.pid
                                print_status success
                        fi
                else

                        /bin/kill $killlevel $pid
                        if /bin/ps h $pid > /dev/null 2>&1
                        then
                                /bin/sleep 2
                        fi
                        /bin/ps h $pid >/dev/null 2>&1
                        if [ $? = 0 ]
                        then

                                print_status failure
                        else

                                /bin/rm -f /var/run/$base.pid
                                print_status success
                        fi
                fi
        else

                print_status failure
        fi
}



reloadproc()
{



        if [ $# = 0 ]
        then
                echo "Usage: reloadproc {program} [signal]"
                exit 1
        fi



        base=$(/usr/bin/basename $1)




        if [ -n "$2" ]
        then
                killlevel=-$2
        else
                nolevel=1
        fi



        pidlist=$(/sbin/pidof -o $$ -o $PPID -o %PPID -x $base)

        pid=""

        for apid in $pidlist
        do
                if [ -d /proc/$apid ]
                then
                        pid="$pid $apid"
                fi
        done



        if [ -n "$pid" ]
        then



                if [ "$nolevel" = 1 ]
                then
                        /bin/kill -SIGHUP $pid
                        evaluate_retval
                else


                        /bin/kill $killlevel $pid
                        evaluate_retval
                fi
        else


                print_status failure
        fi
}




checkloadproc()
{


        if [ $# = 0 ]
        then
                echo "Usage: checkloadproc {program} [ param ..]"
                exit 1
        fi



        base=$(/usr/bin/basename $1)



        pidlist=$(/sbin/pidof -o $$ -o $PPID -o %PPID -x $base)

        pid=""

        for apid in $pidlist
        do
                if [ -d /proc/$apid ]
                then
                        pid="$pid $apid"
                fi
        done


        if [ -n "$pid" ]
        then
            print_status success
	else
# Start it
            loadproc $*
        fi
}



statusproc()
{



        if [ $# = 0 ]
        then
                echo "Usage: status {program}"
                return 1
        fi



        pid=$(/sbin/pidof -o $$ -o $PPID -o %PPID -x $1)
        if [ -n "$pid" ]
        then

                echo "$1 running with Process ID $pid"
                return 0
        fi



        if [ -f /var/run/$1.pid ]
        then
                pid=$(/usr/bin/head -1 /var/run/$1.pid)
                if [ -n "$pid" ]
                then
                        echo "$1 not running but /var/run/$1.pid exists"
                        return 1
                fi
        else
                echo "$1 is not running"
		return 1
        fi

}

# End /etc/init.d/functions
