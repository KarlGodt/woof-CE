#!/bin/ash
#(c) copyright Barry Kauler 2008, puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#v404 first release. Rewritten from scratch, aiming for simplicity and speed.

# 21 comments here. rerwin mentioned one time.

#v431 secondary uevent replay, fix for old kernels < 2.6.24

########################################################################
#
# CHANGES by Karl Reimer Godt
# 00.0 : added security fix if accidetially clicked at filemanager to return || exit
# 00.1 :
# 01.0 : support for more bootparameters
#        nodrivers
#        noalsa soundcards alsa
#        userdrivers kerneldrivers
#        IN failsafe_func
#        *** still BIG TODO ***
#
# 01.1 : added norcsysinit bootparam to dropout
#   .2 : added rm -rf /tmp/* in case of flag files still there after hard reset
#        TODO : put into /sbin/init
#
# 02   : functions:
#   .0 : mkmissing_tty_func
#   .1 : check_frugal_full_func
#   .2 : check_full_frugal_dev_func
#   .3 : mkmissing_blockdev_func
#   .4 : dev_maj_259_func        #first_func  #OUT??
#   .5 : device_nodes_fork_func  #first_func
#   .6 : mk_missing_var_dev_func
#   .7 : pupstate_prev_func
#   .8 : firmware_dep_func
#   .9 : modprobe_conf_func
#
# 03
#   .0 : fbcon_func
#
# 04
#   .0 : moved start of syslogd and klogd further up before module loading in case modprobe --syslog parameter (does it actually work??)
#   .1 : MODALIASES=`ls /sys/bus/*/devices/*/modalias | sort -d` added sort -d to make output in logfiles more similar ( <OUT>, CPU or kernel does not care )
#   .2 : renamed /tmp/pup_event_modprobe.conf to /tmp/pup_event_skiplist.conf
#        TODO: merge contents of modprobe.conf into this /tmp/pup_event_modprobe.conf <DONE??>
#   .3 : forced loading of uhci_hcd and ohci_hcd cause usb-keybord may need it
#   .4 : added rm -rf /dev/.udev/*/* before launchig udevd <DONE??>
#   .5 : added INITSTATE=`find /sys -name "initstate"`
#        to prevent to load modules if already 25 are loaded (by /sbin/init)
#   .6 : added warning if no modalias files are found
#        AND skip the loading of the main modules then <??>
#   .7 : implemented message to console about how many busses detected and modules loaded <DONE>
#
# 05.0
# 06.0
#
# 07.0 : cat /proc/cmdline | grep -i 'nox' added nox kernel parameter for PUPMODE=2 <DONE?>
#        special_mnt_func : for cgroups, debugfs an other pseudo-file-systems (educational)
#        fsckme_func TODO: rename to fsckme_flg_func <DONE??>
#        root_link_func  <DONE>
#        pup_eve_bac_mod_func sort logfile func <DONE>
#
# /dev/hda8:
# LABEL="MacPup431_O2"
# UUID="6d9a8e91-c301-4ff8-9875-97ec708cbee8"
# TYPE="ext3"
# DISTRO_NAME='Puppy'
# DISTRO_VERSION=431
# DISTRO_BINARY_COMPAT='puppy'
# DISTRO_FILE_PREFIX='pup'
# DISTRO_COMPAT_VERSION='4'
# PUPMODE=2
# KERNVER=2.6.30.9-i586-dpup005-Celeron2G
# PUP_HOME='/'
# SATADRIVES='·'
# USBDRIVES='·'
# Linux·puppypc·2.6.30.9-i586-dpup005-Celeron2G·#6·SMP·Sat·Jan·15·13:35:51·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Do·27.·Okt·22:45:42·GMT-1·2011
#
# TODO: ADDLIST_PRE and ADDLIST_POST in /sbin/bootmanager
#
#
#
########################################################################

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/X11R7/bin

Version='1.1-simple Macpup_O2-Puppy-Linux-431 KRG'
Version='2.0-Macpup_O2-Puppy-Linux-431 KRG'
#if have just done a switch_root, output a 'done' message...
#[ -d /initrd ] && status_func 0 #note, /initrd should not exist when a full-hd installation.

. /etc/rc.d/functions4puppy4
. /etc/DISTRO_SPECS
. /etc/rc.d/f4puppy5

Red0='\033[0;31m'
Red1='\033[1;31m'
Green0='\033[0;32m'
Green1='\033[1;32m'
Yellow0='\033[0;33m'
Yellow1='\033[1;33m'
Blue0='\033[0;34m'
Blue1='\033[1;34m'
Pink0='\033[0;35m'
Pink1='\033[1;35m'
Cyan0='\033[0;36m'
Cyan1='\033[1;36m'
White0='\033[0;37m'
White1='\033[1;37m'
Black0='\033[0;39m'

Inv_White0='\033[0;47m'
Inv_White1='\033[1;47m'

usage(){
    local usageMSG
usageMSG="`gettext \"
$0 [ --code-check ]
Script that gets automatically executed by busybox init
at boottime. Second program after /sbin/init at full
installations, third after /init of initrd.gz and /sbin/init
at frugal installations.
Responsible to load drivers, setup the network,
run setup scripts in /etc/init.d via rc.services,
do various hardwaresetup; ie mouse, dvd devices.
Only parameter accepted : --code-check (set's -n).\"`
"
[ "$2" ] && usageMSG="$usageMSG
`gettext \"$2\"`"
echo "$usageMSG"
[ "$DISPLAY" ] && xmessage -bg yellow3 "$usageMSG"
exit $1
}
__old_parameter_digesting__(){
[ "$1" -a "$1" != codecheck ] && usage 0
###<KRG 2011-11-02>
if [ -n "$DISPLAY" ] ; then
#return || exit
[ "$1" = codecheck ] || usage 1
:
fi
[ "$1" = codecheck ] && { set -x;set -n; } ##2012-05-22
}
 ##<KRG 2011-11-17>
case "$1" in
*code*check*|*check*|*check*code*)
 set -n
 ;;
"") :
  ;;
*) [ "$DISPLAY" ] && RV=5 || RV=4
           usage "$RV" "$1 (of $*) not recognized"
  ;;
esac
 [ "$DISPLAY" ] && { usage 7 "Refusing to run in X"; true; } || true
 ##</KRG 2011-11-17>
###</KRG 2011-11-02>

export LANG=C
alias modprobe="modprobe $Q $VERB -b"
#modprobeFIRST_TIME=--first-time
modprobeFIRST_TIME=
#modprobeCONFIG='--config /tmp/pup_event_skiplist.conf'
modprobeCONFIG=
#modprobeSYSLOG=--syslog
modprobeSYSLOG=-s

load_average(){
echo "$1: `uptime`"
}

eleventh_console(){  ##+++2012-06-01 was here changed into function, has to be called after remount,rw /
##+++2012-01-29
test -d /dev/vc || mkdir $VERB -p /dev/vc;
rm $VERB -f /dev/vc/11;mknod /dev/vc/11 c 4 11
#rm /dev/vc11; mknod /dev/vc11 c 4 11    # major 4 are tty[0-9]*
openvt -c 11 autologinroot
##+++2012-01-29
}

status_func(){
 _CHAR=${1//[[:digit:]]/}
 if [ "$_CHAR" ];then echo -e "\\033[32G\\033[1;36m${_CHAR}$Black0" >/dev/console
 set -- 0
 elif [ "$1" = 0 ];then
  /bin/echo -e "\\033[72G\\033[1;32mdone$Black0" >/dev/console #green [done] msg.
 else
  /bin/echo -e "\\033[70G\\033[1;31mfailed$Black0" >/dev/console #red [failed].
  STATUS=0
 fi
 return $1 #return with same status as entry param.
}

_find_swap_devices(){
    local device
    for device in /sys/class/block/*
    do
    # REM: variable would be like '/sys/class/block/sda1'
    #      so needs basename
    #      could use `ls -1d /sys/class/block/*` - which would be similar
    #      or `ls /sys/class/block`
    #      or `ls -1v /sys/class/block`
    #      or ..?
    device=${device##*/}
    [ -b /dev/$device ] || continue
    case $device in
    *ram*|*loop*|*mtd*|*fd*|*sr*|*scd*) continue;;
    esac
    # REM: guess_fsype has problems with device major 259
    #      for partition numbers >15 (SCSI)
    #          partition numbers >63 (IDE) <?? not tested>
    #guess_fstype /dev/$device | grep $Q -i swap >>$ERR || continue
    # REM: older busybox blkid had no /dev/<device> argument processing ...
    blkid /dev/$device | grep -w "$device" | grep $Q -i swap >>$ERR || continue
    echo "/dev/$device"
    done
}

loadswap_func(){
    #w481 made into a function.
 STATUS=0;SWAPON=no
 echo "LOAD SWAP"
 #load a swap partition...
 # REM: fdisk shows MBR partition tables but partitions may be reformatted later
 #      or even setup with wrong fs entries from the beginning ..
 __find_swap_fdisk__(){
 SWAPS=`fdisk -l | grep ' Linux swap' | cut -f 1 -d ' '`
 }
 SWAPS=`_find_swap_devices`
 [ "$SWAPS" ] && echo -n "Loading swap partition " >/dev/console
 for oneSWAP in $SWAPS
 do
  [ "`blkid $oneSWAP | grep -iE 'Resume|Hiber'`" ]               && continue
  [ "$W_SWAPS" ] && { [ "`echo "$W_SWAPS" | grep -w $oneSWAP`" ] || continue; }
  #echo -n "Loading swap partition $oneSWAP..." >/dev/console
  echo -ne "\\033[1;35m"" ${oneSWAP##*/}""$Black0"  >/dev/console
  swapon $oneSWAP
  STATUS=$((STATUS+$?))
  [ $STATUS -eq 0 ] && SWAPON="yes"
 done
 [ "$SWAPS" ] && status_func $STATUS
 #if no go, try for a swap file...
 if [ "$SWAPON" != "yes" ];then
  SWAPFILE="/pupswap.swp"
  [ "$PSWAPFILE" ] && SWAPFILE=`echo -n "$PSWAPFILE" | cut -f 3 -d ','`  #/etc/rc.d/PUPSTATE
  if [ -f /initrd${PUP_HOME}${SWAPFILE} ];then
   echo -n "Loading swap file ${SWAPFILE}..." >/dev/console
   swapon /initrd${PUP_HOME}${SWAPFILE}
   status_func $?
   [ $? -eq 0 ] && SWAPON="yes"
  fi
  if [ -f $SWAPFILE ];then
   echo -n "Loading swap file ${SWAPFILE}..." >/dev/console
   swapon $SWAPFILE
   status_func $?
   [ $? -eq 0 ] && SWAPON="yes"
  fi
 fi
 [ "$SWAPON" = 'no' ] && echo -e "\\033[1;5;31m\n\t\t"'WARNING : NO SWAP could be activated'"$Black0"
}


pfix_func(){
[ "$OUT" ] || OUT=/dev/null; [ "$ERR" ] || ERR=$OUT
for item1 in `cat /proc/cmdline`;
do
case $item1 in
pfix=*)
   ITEMS=${item#*=};ITEMS=${ITEMS//,/ }
   for item2 in $ITEMS;
   do
   case $item2 in
   nodrivers:*)     :;;
   noalsa:*)        :;;
   alsa:*)          :;;
   soundcards:*)    :;;
   userdrivers:*)   :;;
   kerneldrivers:*) :;;
   alldrivers:*)    :;;
   norcsysinit)     :;;
   swaps:*) W_SWAPS=${item2#*:};W_SWAPS=${W_SWAPS//:/ };W_SWAPS=${W_SWAPS//\/dev\//};         :;;
   noswap) NO_SWAP=1;          :;;
   verbose) VERBOSE=1;VERB=-v;L_VERB=--verbose;A_VERB=-verbose;OUT=/dev/stdout;ERR=/dev/stderr;;
   debug) DEBUG=1;set -x;;
   nofb:*)          :;;
   nofbcon) NO_FBCON=1;         :;;
   fbconfirst) FBCON_FIRST=1;;
   nox)        echo 'nox' > /var/lock/boot2X.status;;
   xorgwizard) mv /etc/X11/xorg.conf /etc/X11/xorg.conf-"`date`";;

   esac;done
  ;;
*) [ "`echo "$item1" | grep '='`" ] || item1="${item1}=1"
item=${item1//\./_};
kp=${item%=*};echo -n "${kp},"
eval $item
export $kp
;;
esac;done
echo
}
#pfix_func #needs call after mounting /proc
failsafe_func(){

safeBoot=''
if [ $nodrivers ] ; then
if [ "$nodrivers" = "all" ] ; then
safeBoot=0 ; echo "BOOTING with no DRIVERS" ; return 0
else
noDriversList=`echo "$nodrivers" | tr ',' '\n' | sed 's/^/blacklist /g'`
fi;fi
echo "$noDriversList" >/dev/console

if [ $noalsa ] ; then
 if [ -n "`echo "$noalsa" | grep -i -E '^1|^y'`" ] ; then
  safeBoot=$((safeBoot+16))
  echo 'noalsa' >/tmp/alsa.flg
  echo 'noalsa' >/tmp/pup_event_alsa_cnt
 fi
fi

if [ $soundcards ] || [ $alsa ] ; then
soundCards="$soundcards" ; [ -z "$soundCards" ] && soundCards="$alsa"
if [ "$soundCards" = "-1" -o "` echo $soundCards | grep -i -E 'n|no|none|nope'`" != "" ] ; then
safeBoot=$((safeBoot+16));echo 'noalsa' >/tmp/alsa.flg; echo 'noalsa' >/tmp/pup_event_alsa_cnt
elif [ "$soundCards" = "all" -o "$soundCards" = "ALL" -o "$soundCards" = "All" ] ; then
safeBoot=256 ; echo 'all' >/tmp/alsa.flg
else
soundCardNrs=`echo "$scoundCards" | tr -d '[a-zA-Z]' | tr '[[:punct:]]' ' '`
echo -n 'boot_sound_cards='"$soundCardsNrs" >/tmp/alsa.flg
safeBoot=256
fi
fi

if [ $userdrivers ] ; then
userDrivers=`echo "$userdrivers" | tr '[A-Z]' '[a-z]' | tr ',' ' '`
case $userdrivers in
only) safeBoot=64 ; return 0;;
*) USERDRIVERS_ADD=1
#for item in $userDrivers;do
#sed -i "s|^\(ADDLIST=\)\([\'\"]\)\(.*\)\([\'\"]\)|\1\2\3 $item \4|" /etc/rc.d/MODULESCONFIG
#done
;;
esac
fi

if [ $kerneldriversonly ];then
kernelDrivers=`echo "$kerneldriversonly" | tr '[[:upper:]]' '[[:lower:]]'`
case $kernelDrivers in
1|y|yes) safeBoot=128;return 0 ;;
0|n|no*) safeBoot=$((safeBoot+0)) ;;
*) :;; esac
fi

if [ $alldrivers ] ; then
allDrivers=`echo "$alldrivers" | tr '[[:upper:]]' '[[:lower:]]' | cut -b 1`
if [ "$allDrivers" = "y" -o "$allDrivers" = "1" ] ; then
safeBoot=256
else
safeBoot=0
fi
fi

[ $nographics ] && { safeBoot=$((safeBoot+1))  ; echo 'nographics' >/tmp/graphics.flg; }
[ $nofb ]       && { safeBoot=$((safeBoot+2))  ; echo 'nofb'      >/tmp/framebuffer.flg; }
[ $nofbcon ]    && { safeBoot=$((safeBoot+4))  ; echo 'nofbcon'  >/tmp/fbcon.flg; }

[ "$safeBoot" ] || safeBoot=256

}

############## MAKE FILESYSTEM USABLE ################
test -f /etc/rc.d/PUPSTATE && source /etc/rc.d/PUPSTATE || PUPMODE=2
STATUS=0
echo "Making the filesystem usable..." >/dev/console #need this redirection!

if test "$PUPMODE" = 2; then
 busybox mount $VERB $VERB -o remount,rw /dev/root /
 STATUS=$((STATUS+$?))

 ## reset older variables ( ie KERNEL_RELEASE )
 #VARIABLES=`awk -F'=' '{print $1}' /etc/rc.d/PUPSTATE`
 unset PUPMODE KERNEL_RELEASE PDEV1 DEV1FS PUP_HOME SATADRIVES USBDRIVES

 echo 'PUPMODE=2' > /etc/rc.d/PUPSTATE
 source /etc/rc.d/PUPSTATE
fi

[ -e /proc/mounts ] || busybox mount $VERB $VERB -t proc proc /proc ;STATUS=$((STATUS+$?))

#. /etc/rc.d/PUPSTATE

eleventh_console  ##+++2012-06-01

 ### boot params
 # debug
if [ "$VERBOSE" ];then
echo "\$@='$@'
pfix='$pfix'
safeBoot='$safeBoot'" #>/dev/console
fi
 # debug

#[ "$pfix" ] && pfix_func
[ -c /dev/null ] || { rm $VERB -rf /dev/null; mknod /dev/null c 1 3; }
pfix_func

[ $loglevel ]   && LOGLEVEL=$loglevel #boot param.
[ "$LOGLEVEL" ] || LOGLEVEL=2        ##+++2011-12-04 for UDEV_LOG
[ $pmedia ]     && PMEDIA=$pmedia  #boot parameter, broad category of boot media. ex: cd.
[ $pdev1 ]      && PDEV1=$pdev1    #boot parameter, partition have booted off. ex: hda3
failsafe_func

 #debug
if [ "$VERBOSE" ];then
echo "\$@='$@'
pfix='$pfix'
safeBoot='$safeBoot'" #>/dev/console
fi
 # debug
 ### boot params

 #permissions
if [ "$VERBOSE" ];then
ls -l /;ls -l /root;ls -l /tmp;ls -l /var
fi
 #permissions

 #mtab
#v409 mount/umount scripts no longer write to /etc/mtab, as gparted failed to create a
#ext3 partition -- dunno why. Instead, now have /etc/mtab a symlink to /proc/mounts...
rm $VERB -f /etc/mtab
ln $VERB -s /proc/mounts /etc/mtab
 #mtab
 #tmp
chmod $VERB 1777 /tmp
 #tmp

 #log
#redirect all output to a log file (must do after remount rw)...
##[ ! "$LOGLEVEL" ] && exec 1>/var/log/bootsysinit.log 2>&1
Ymd=`date +%F`
exec 1>/var/log/bootsysinit.log."$Ymd" 2>&1
 #log

load_average '0x00'

  #permissions
if [ "$VERBOSE" ];then
ls -l /;ls -l /root;ls -l /tmp;ls -l /var
fi
 #permissions

 #mount
mkdir $VERB -p /dev/pts
    echo "Mounting /dev/pts"
busybox mount $VERB $VERB -t devpts devpts /dev/pts ;STATUS=$(( STATUS + $? ))
    echo "STATUS='$STATUS'"
mkdir $VERB -p /sys
    echo "Mounting /sys"
busybox mount $VERB $VERB -t sysfs sysfs /sys ;STATUS=$(( STATUS + $? ))
    echo "STATUS='$STATUS'"

busybox mount $VERB $VERB -t debugfs debugfs /sys/kernel/debug/ ; STATUS=$(( STATUS + $? ))
    echo "STATUS='$STATUS'"
test -f /sys/kernel/debug/dynamic_debug/control && echo -n 'module usb_storage +p' >/sys/kernel/debug/dynamic_debug/control

##v2.20 some apps need shm (shared memory) (ex: xfdiff)...
FREERAM=`free | grep -o 'Mem:.*' | tr -s ' ' |awk '{print $4}'` #w481
if test "$PUPMODE" = 2; then #weird, only full-hd install needs this for xfdiff.
 QTRFREERAM=$((FREERAM / 4))
 test -d /dev/shm || mkdir $VERB -p /dev/shm
 mount $VERB $VERB -t tmpfs -o size=${QTRFREERAM}k shmfs /dev/shm ;STATUS=$((STATUS+$?))
fi
 #mount

mountpointDEV='';
haveMDEV=YES;
grep $Q ' /dev ' /proc/mounts 2>>$ERR && mountpointDEV=YES
mdev -s 2>>$ERR || haveMDEV='';

 #PUPSTATE
#w478 moved this code above call to rc.update...
[ "$KERNEL_RELEASE" ] ||          KERNEL_RELEASE=`uname -r`
[ "$KERNMAJ" ] || KERNMAJ=`echo "$KERNEL_RELEASE" | cut -f 3 -d '.' | cut -f 1 -d '-'` #v431
echo "KERNEL_RELEASE='$KERNEL_RELEASE'" >> /etc/rc.d/PUPSTATE

fsckme_func(){
if [ ! "$PDEV1" ];then
PDEV1=`basename $(rdev | cut -f 1 -d ' ' | sed 's#/dev/##')`

MAJh=`stat -c %t /dev/$PDEV1`
#MAJd=$(( 16#$MAJh ))  ##bash
#MAJh=`echo "$MAJh" | tr '[a-z]' '[A-Z]'`
#MAJd=`echo "ibase=16;$MAJh" | bc -l`
MAJd=`printf %d 0x$MAJh`

MINh=`stat -c %T /dev/$PDEV1`
#MINd=$(( 16#$MINh ))  ##bash
#MINh=`echo "$MINh" | tr '[a-z]' '[A-Z]'`
#MINd=`echo "ibase=16;$MINh" | bc -l`
MINd=`printf %d 0x$MINh`

POSSIBLE=`LANG=C ls -l /dev |awk '{print $5" "$6" "$10}' |grep "${MAJd},[[:blank:]]*${MINd} " |awk '{print $3}'`
for p in $POSSIBLE;do
[ "$DEBUG" ] && echo "POSSIBLE='$p'"
[ -e /sys/class/block/$p ] && {
    [ -r /sys/class/block/$p/uevent ] || continue
    unset MAJOR MINOR
    . /sys/class/block/$p/uevent        || continue
    test $MAJOR = $MAJd -a $MINOR = $MINd || continue
    PDEV1=$p ; break ; }
done

DEV1FS=`mount | grep ^[\ \'\"\/]*dev/root |tr -d '"' |cut -f 5 -d ' '`
else
: ##+++2012-05-07 TODO
fi
echo "$PDEV1"','"$DEV1FS"',' > /etc/.fsckme.flag
grep $Q 'PDEV1' /etc/rc.d/PUPSTATE || echo -e "PDEV1='$PDEV1'\nDEV1FS='$DEV1FS'" >> /etc/rc.d/PUPSTATE  ##2011-12-16
}
fsckme_func

rm $VERB -f /mnt/home  ###2011-10-29 TODO : observe
if [ ! -d /initrd ];then
 PUP_HOME='/'
 echo "PUP_HOME='/'" >> /etc/rc.d/PUPSTATE
 ln $VERB -s / /mnt/home
else
 if [ "$PUP_HOME" ];then #see /etc/rc.d/PUPSTATE
  if [ "$PUP_HOME" = "/pup_ro1" -o "$PUP_HOME" = "/pup_rw" ];then
   #note, PUPMODE=6 will have PUP_HOME=/pup_rw.
   #in the case of the persistent storage being the partition itself, this will be mounted
   #on /initrd/pup_ro1 (tmpfs on pup_rw for restricted writes) or directly on /initrd/pup_rw
   #and we do not really want users to access it as it is a unionfs layer. Instead, they are
   #already accessing it as "/".
   ln $VERB -s / /mnt/home
  else
   ln $VERB -s /initrd${PUP_HOME} /mnt/home
  fi
 fi
fi
. /etc/rc.d/PUPSTATE
 #PUPSTATE
load_average '0x0a'

###### PERSONAL #######################
echo "`date` KRG part starts of $0 ..."

#failsafe_func  ##+++2011-10-31 moved here would have been a BUG echo before everything got mounted
##due to typo faisafe_func -> ash: bad number ??
_norcsysinit_func(){
if [ -n "`cat /proc/cmdline | grep -i 'norcsysinit'`" ] ; then
echo "From rc.sysinit : exit to sh"
exec chroot . sh
fi
}
_norcsysinit_func

status_func $STATUS;STATUS=0

_make_block_dev(){
test "$haveMDEV" && return 0
echo -n "Updating Block Device Nodes " >/dev/console
test -f /proc/partitions || return 1
STATUS=0
#CATPROCPART=`cat /proc/partitions | sed 's#^\ *[[:alpha:]].*##g' | sed '/^$/d'`
#echo "$CATPROCPART" | while read MAJ MIN SIZE SDEV ; do
while read MAJ MIN SIZE SDEV ; do
[ "$SDEV" ] || continue
[ "$SDEV" = 'name' ] && continue
rm $VERB -f "$1"/dev/$SDEV
STATUS=$(( STATUS + $? ))
mknod "$1"/dev/$SDEV b $MAJ $MIN
STATUS=$(( STATUS + $? ))
echo -n '.' >/dev/console
done </proc/partitions
};_make_block_dev
status_func $STATUS;STATUS=0

echo -n "Sanity Checks " >/dev/console
echo "Sanity Checks "

_mkmissing_tty_func(){
test "$haveMDEV" && return 0
[ -c /dev/tty ] || mknod /dev/tty c 5 0

mkdir $VERB -p /dev/vc
 INITTAB=`cat /etc/inittab | grep -o -E 'tty[0-9*]|vc/[0-9*]' | grep -v -E '^#|^[[:blank:]*]#' | sort -u`
INITTABS=`echo "$INITTAB" | grep -o '[0-9*]$'`
for i in $INITTABS; do
[ -c /dev/tty$i ] || { rm $VERB -f /dev/tty$i;mknod /dev/tty$i c 4 $i; }
[ -c /dev/vc/$i ] || { rm $VERB -f /dev/vc/$i;mknod /dev/vc/$i c 4 $i; }
done

[ -c /dev/console ] || { rm $VERB -f /dev/console;mknod /dev/console c 5 1; }
[ -c /dev/null ]   || { rm $VERB -f /dev/null;mknod /dev/null c 1 3; }
[ -c /dev/zero ]  || { rm $VERB -f /dev/zero;mknod /dev/zero c 1 5; }
[ -c /dev/mem ]  || { rm $VERB -f /dev/mem; mknod /dev/mem c 1 1;  }

mkdir $VERB -p /dev/fb          #busybox fbset command needs this
for i in `seq 0 11` ; do
[ ! -L /dev/fb/$i ] && [ -c /dev/fb$i ] && ln $VERB -s ../fb$i /dev/fb/$i
done
mkdir $VERB -p /dev/loop
for i in `seq 0 15` ; do
[ -c /dev/loop$i ] && { [-h /dev/loop/$i ] || ln $VERB -s ../loop$i /dev/loop/$i; }
done
};_mkmissing_tty_func;STATUS=$((STATUS+$?));echo -n "0 STATUS=$STATUS "

_firmware_dep_func(){
if test ! -f /etc/modules/firmware.dep.$KERNEL_RELEASE; then
FWF=`find /etc/modules -type f -name "firmware.*" | head -n 1`
echo "copying firmware.dep"
cp $VERB "$FWF" /etc/modules/firmware.dep.$KERNEL_RELEASE
fi

fwf=`find /lib/modules/$KERNVER -maxdepth 2 -name "firmware*" | head -n1`
if test -d "$fwf" ; then
rm $VERB -r -f /lib/firmware
cp $VERB -r "$fwf" /lib/
fi

lfwd=`find /lib -maxdepth 1 -type d -name "firmware*"`
currlfw=`echo "$lfwd" | grep "$KERNVER"`
if test -n "$currlfw" ; then
mv $VERB "$currlfw" /lib/firmware
fi

if test ! -d /lib/firmware      ; then
if test -f /lib/firmware.tar.gz ; then
tar $VERB -C / -xzf /lib/firmware.tar.gz
fi
fi
pidof sync >$OUT || sync
};_firmware_dep_func;STATUS=$((STATUS+$?));echo -n "2 STATUS=$STATUS "

_modprobe_conf_func(){

mkdir $VERB -p /etc/mult_kernels
mkdir $VERB -p /etc/modprobe.d

if test -f /tmp/modprobe.conf ; then #1 #/sbin/init

cp $VERB -f /tmp/modprobe.conf /etc/modprobe.conf
cp $VERB -f /tmp/modprobe.conf /etc/modprobe.d/modprobe.conf
cp $VERB -f /tmp/modprobe.conf /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE
[ -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE ] && cp $VERB -f /tmp/modprobe.conf /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/modprobe.conf

elif test -f /tmp/modprobe.conf.setup_alsa_func ; then
cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/modprobe.conf
cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/modprobe.d/modprobe.conf
cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE
[ -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE ] && cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/modprobe.conf

fi

if test -f /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE ; then
cp $VERB -f /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE /etc/modprobe.conf
elif test -f /etc/modprobe.conf ; then
cp $VERB /etc/modprobe.conf /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE
fi


if test -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE; then
rm $VERB -f -r /etc/modprobe.d
cp $VERB -f -r /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE /etc/modprobe.d
elif test -d /etc/modprobe.d; then
cp $VERB -r /etc/modprobe.d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE
fi


#if test ! -d /etc/mult_kernels/rc.d ; then
mkdir $VERB -p /etc/mult_kernels/rc.d
#fi

if test ! -f /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE ; then
cp $VERB /etc/rc.d/MODULESCONFIG /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE
else
rm $VERB -f /etc/rc.d/MODULESCONFIG
cp $VERB /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE /etc/rc.d/MODULESCONFIG
fi

if [ "$USERDRIVERS_ADD" ];then
for item in $userDrivers;do
sed -i "s|^\(ADDLIST=\)\([\'\"]\)\(.*\)\([\'\"]\)|\1\2\3 $item \4|" /etc/rc.d/MODULESCONFIG
done;fi

if test -f /lib/modules/$KERNEL_RELEASE/DOTconfig* ; then
cp $VERB /lib/modules/$KERNEL_RELEASE/DOTconfig* /etc/modules/
fi

BOARD=`dmidecode -t1 | grep -E 'Manufacturer|Product Name'  |cut -f 2 -d ':' | tr ' ' '_' |tr -s '_' |tr '/' ':' |tr '\n' '-'`
 BIOS=`dmidecode -t0 | grep -E 'Vendor|Version|Release Date'|cut -f 2 -d ':' | tr ' ' '_' |tr -s '_' |tr '/' ':' |tr '\n' '-'`

if [ ! -f /etc/mult_kernels/rc.d/"MODULESCONFIG"-${BOARD}-${BIOS} ];then
cp $VERB /etc/rc.d/MODULESCONFIG /etc/mult_kernels/rc.d/"MODULESCONFIG"-${BOARD}-${BIOS};
fi

};_modprobe_conf_func;STATUS=$((STATUS+$?));echo -n "3 STATUS=$STATUS "
load_average '0x0e'

_fbcon_func(){
if [ -n "`modprobe -l | grep 'fbcon'`" ]; then
if [ "`cat /proc/cmdline | grep -E 'vga=ask|vga=0x3[0-9a-fA-F][0-9a-fA-F]|vga=[7-8][0-9][0-9]'`" != "" ]; then
if [ -z "`lsmod | grep 'fbcon'`" ] ; then  ##for /sbin/init
modinfo fbcon   > /dev/console
modprobe $modprobeSYSLOG fbcon
fi
fi
fi;NO_FBCON=1
};[ "$FBCON_FIRST" ] && { _fbcon_func;STATUS=$((STATUS+$?));echo -n "4 STATUS=$STATUS "; }

_update_fstab(){
if ! grep $Q -w "^/dev/$PDEV1" /etc/fstab; then
_DATE_=`date +%F`
_TAB_=`echo -e '\t'`
sed -i".$_DATE_" "1i\/dev/${PDEV1}${_TAB_}${_TAB_}/${_TAB_}${_TAB_}${DEV1FS}${_TAB_}${_TAB_}defaults${_TAB_}${_TAB_}0${_TAB_}1" /etc/fstab
fi; };_update_fstab;STATUS=$((STATUS+$?));echo -n "5 STATUS=$STATUS "

###########  DEMPOD  ##############################
_pupstate_prev_func(){
if test "`grep -w KERNEL_RELEASE /etc/rc.d/PUPSTATE.prev | cut -f2 -d=`" != "$KERNEL_RELEASE" ; then
if test ! -f /lib/modules/$KERNEL_RELEASE/modules.dep -o ! -f /lib/modules/$KERNEL_RELEASE/modules.symbols -o ! -f /lib/modules/$KERNEL_RELEASE/modules.alias ; then
echo "Detected booting other kernel than last time"    >> /dev/console
echo "Have to run depmod, please wait some 10 seconds" >> /dev/console
depmod
depmod-FULL
fi
fi
};_pupstate_prev_func;STATUS=$((STATUS+$?));echo -n "6 STATUS=$STATUS "
load_average '0xff'
echo "`date` KRG part ended ..."
####################### PERSONAL #######################


#w469 may need to run 'depmod'...
#live-cd may have been built without the modules.* files.
#initrd init script copied modules to /lib/modules/<kernver>/initrd/.
__test_depmod__(){
if [ ! -f /lib/modules/${KERNEL_RELEASE}/modules.dep ];then
 test -d  /lib/modules/$KERNEL_RELEASE || mkdir -p /lib/modules/$KERNEL_RELEASE
 touch    /lib/modules/${KERNEL_RELEASE}/modules.dep
 NEEDDEPMOD="yes" #w469 files may not be there to save space.
 #[ -d /lib/modules/${KERNEL_RELEASE}/initrd ] && NEEDGUNZIP="yes"
 [ -d /lib/modules/${KERNEL_RELEASE}/initrd ] && NEEDGUNZIP="gzip"
elif [ -d /lib/modules/${KERNEL_RELEASE}/initrd ];then
 #if ls -1 /lib/modules/${KERNEL_RELEASE}/initrd/*/* 2>>$ERR   | grep $Q '.ko.gz' || \
 #   ls -1 /lib/modules/${KERNEL_RELEASE}/initrd/*/*/* 2>>$ERR | grep $Q '.ko.gz'; then
  #if [ "`grep -E '^initrd/|/initrd/' /lib/modules/${KERNEL_RELEASE}/modules.dep`" = "" ];then
  FIND_KOGZ=`find /lib/modules/${KERNEL_RELEASE}/initrd/ -iname "*.ko*"`
  if [ "$FIND_KOGZ" ]; then
   for oneKO in $FIND_KOGZ
   do
    case $oneKO in
    *.gz)   case $NEEDGUNZIP in *gzip*):;;*)     NEEDGUNZIP="$NEEDGUNZIP gzip";;    esac;;
    *.bz2)  case $NEEDGUNZIP in *bzip2*):;;*)    NEEDGUNZIP="$NEEDGUNZIP bzip2";;   esac;;
    *.lzo)  case $NEEDGUNZIP in *lzo*):;;*)      NEEDGUNZIP="$NEEDGUNZIP lzo";;     esac;;
    *.lzma) case $NEEDGUNZIP in *lzma*):;;*)     NEEDGUNZIP="$NEEDGUNZIP lzma";;    esac;;
    *.xz)   case $NEEDGUNZIP in *xz*):;;*)       NEEDGUNZIP="$NEEDGUNZIP xz";;      esac;;
    *.Z)    case $NEEDGUNZIP in *compress*):;;*) NEEDGUNZIP="$NEEDGUNZIP compress";;esac;;
    *.ko)   case $NEEDGUNZIP in *no*):;;*)       NEEDGUNZIP="$NEEDGUNZIP no";;      esac;;
    *)      case $NEEDGUNZIP in *no*):;;*)       NEEDGUNZIP="$NEEDGUNZIP no";;      esac;;
    esac
   done
    if [ "`grep -E '^initrd/|/initrd/' /lib/modules/${KERNEL_RELEASE}/modules.dep`" = "" ];then
    NEEDDEPMOD="yes" #w469 files may not be there to save space.
    #NEEDGUNZIP="yes"
    fi
  fi
 #fi
fi
}

__run_gunzip__(){
#if [ "$NEEDGUNZIP" = "yes" ];then
for oneZIP in $NEEDGUNZIP; do
 #w001 ubuntu module-init-tools not configured to support gzipped modules...
 #for oneMOD in `find /lib/modules/${KERNVER}/initrd/* -type f -name *.gz | tr '\n' ' '`
 #do
 # gunzip $oneMOD
 #done
 #gunzip -f -r /lib/modules/${KERNEL_RELEASE}/initrd #w482 shinobar.
  #if test "$oneZIP" = no ; then continue; fi
  #test "$oneZIP" = no && continue
  case $oneZIP in no) continue;;
  gzip) $oneZIP -d -f -r /lib/modules/${KERNEL_RELEASE}/initrd ;; #w482 shinobar.
  *) FIND_KOGZ=`find /lib/modules/${KERNEL_RELEASE}/initrd/ -iname "*.ko*"`
    for oneKO in $FIND_KOGZ
     do
      $oneZIP -d $oneKO
     done
  ;;
  esac
 STATUS=$((STATUS+$?));echo -n "7 STATUS=$STATUS "
done
#fi
}


__run_depmod__(){
#w481 now building with busybox depmod, in module-init-tools have depmod-FULL, so comment out...
##w481 workaround for crappy depmod. First boot 64MB ram no swap, only 14660 free ram, due to
##tmpfs top layer (about 26MB). depmod gives 'out of memory'. so delay until after swap loaded...

if [ "$NEEDDEPMOD" = "yes" ];then
 echo -n ' depmod' >/dev/console
 depmod
 STATUS=$((STATUS+$?));echo -n "8 STATUS=$STATUS "
fi
}

[ -f /lib/modules/${KERNEL_RELEASE}/modules.dep ] || {
     test -d  /lib/modules/$KERNEL_RELEASE || mkdir -p /lib/modules/$KERNEL_RELEASE
     touch /lib/modules/${KERNEL_RELEASE}/modules.dep
}

[ -d /lib/modules/${KERNEL_RELEASE}/initrd ] && {
    find /lib/modules/${KERNEL_RELEASE}/initrd -iname "*.ko.*" |
    while read oneKO
    do
     case $oneKO in
     *.gz) gzip -d -r -f /lib/modules/${KERNEL_RELEASE}/initrd; break;;
     *.ko) continue;;
     *)    case $oneKO in
           *.bz2)  bzip2 -d $oneKO;;
           *.lzo)  lzop  -d $oneKO;;
           *.lzma) lzma  -d $oneKO;;
           *.xz)   xz    -d $oneKO;;
           *.Z) uncompress  $oneKO;;
           *) continue;;
           esac
      ;;
     esac
    done
    find /lib/modules/${KERNEL_RELEASE}/initrd -iname "*.ko.*" |
    while read oneKO
    do
     case $oneKO in
     #*.gz) gzip -d -r -f /lib/modules/${KERNEL_RELEASE}/initrd; break;;
     *.ko) continue;;
     *)    case $oneKO in
           *.bz2)  bzip2 -d $oneKO;;
           *.lzo)  lzop  -d $oneKO;;
           *.lzma) lzma  -d $oneKO;;
           *.xz)   xz    -d $oneKO;;
           *.Z) uncompress  $oneKO;;
           *) continue;;
           esac
      ;;
     esac
    done
}


#if test -d     /lib/modules/${KERNEL_RELEASE}/initrd; then
test -d /lib/modules/${KERNEL_RELEASE}/initrd || mkdir -p /lib/modules/${KERNEL_RELEASE}/initrd
if ls   /lib/modules/${KERNEL_RELEASE}/initrd/* 1>>$OUT 2>>$ERR; then
 rm $VERB -f   /lib/modules/${KERNEL_RELEASE}/initrd/modules.*
 gzip -d -r -f /lib/modules/${KERNEL_RELEASE}/initrd
 cp $VERB -au  /lib/modules/${KERNEL_RELEASE}/initrd/* /lib/modules/${KERNEL_RELEASE}/
 test $? = 0 && rm $VERB -rf                           /lib/modules/${KERNEL_RELEASE}/initrd
 depmod
 #mkdir -p      /lib/modules/${KERNEL_RELEASE}/initrd  # for /init
fi
[ -f /lib/modules/${KERNEL_RELEASE}/modules.dep ] || depmod

###########  DEMPOD  ##############################

__unneeded_layerfs__(){
 # boot params
[ $layerfs ] && LAYERFS=$layerfs #boot param.
[ $LAYERFS ] || LAYERFS=aufs #aufs or unionfs
[ "`modinfo aufs 2>/dev/null`" = "" ] && LAYERFS=unionfs #precaution.
}

_ass_layerfs(){ #from init
    local tLAYERFS fs
[ "$layerfs" ] && tLAYERFS=$layerfs
    for fs in $tLAYERFS aufs unionfs
    do
     grep $Q -w "$fs" /proc/filesystems && { LAYERFS=$fs; break; }
     [ "`modinfo $fs 2>/dev/null`" ] && { LAYERFS=$fs; break; }
    done
}

 # boot params
echo -e "\nSTATUS='$STATUS'"
status_func $STATUS;STATUS=0
############## MAKE FILESYSTEM USABLE #########################


#######################VERSION UPDATE##########################
echo "VERSION UPDATE"

#force update when new version of ${DISTRO_NAME}...
echo -n "Updating..." >/dev/console

/etc/rc.d/rc.update $PUPMODE
STATUS=$?
pidof sync >$OUT || sync
echo "STATUS='$STATUS'"
status_func $STATUS;STATUS=0
load_average '1xff'
#######################VERSION UPDATE##########################


################# LOAD KERNEL MODULES #########################
#if [ "$safeBoot" -ge "3" ] ; then
if [ "$safeBoot" -ge "4" ] ; then #0
echo "LOAD KERNEL MODULES"

#### log ###
# syslogd options :
# -m TIMESTAMP
# -S           Smaller output
# -s SIZE      before rotate
# -b NUMBER    rotated logs to keep
# -D           drop duplicates
# -l LOGLEVEL
# -O LOGFILE
syslogd -m 5 -S -s 1000 -b 99 -D -l 7 -O /var/log/syslog7

#define OPTION_STR "m:nO:l:S" \
#   IF_FEATURE_ROTATE_LOGFILE("s:" ) \
#   IF_FEATURE_ROTATE_LOGFILE("b:" ) \
#   IF_FEATURE_REMOTE_LOG(    "R:" ) \
#   IF_FEATURE_REMOTE_LOG(    "L"  ) \
#   IF_FEATURE_IPC_SYSLOG(    "C::") \
#   IF_FEATURE_SYSLOGD_DUP(   "D"  ) \
#   IF_FEATURE_SYSLOGD_CFG(   "f:" ) \
#   IF_FEATURE_KMSG_SYSLOG(   "K"  )

#       -n     Avoid auto-backgrounding.  This is needed especially if the sys-
#              logd is started and controlled by init(8).
#       -r     This option will enable the facility to receive message from the
#              network  using an internet domain socket with the syslog service
#              (see services(5)).  The default is to not receive  any  messages
#              from the network.
#       -l hostlist
#              Specify a hostname that should be logged only  with  its  simple
#              hostname  and  not  the  fqdn.   Multiple hosts may be specified
#              using the colon (``:'') separator.
#       -f config file
#              Specify an alternative configuration file instead  of  /etc/sys-
#              log.conf, which is the default.

#  -C <dir>, --chroot=<dir>         Chroot to directory

#   IF_FEATURE_REMOTE_LOG(
#     " -R HOST[:PORT]  Log to IP or hostname on PORT (default PORT=514/UDP)"
#     " -L      Log locally and via network (default is network only if -R)"
#   )
#   IF_FEATURE_SYSLOGD_DUP(
#     " -D      Drop duplicates"
#   )
#   IF_FEATURE_IPC_SYSLOG(
#/* NB: -Csize shouldn't have space (because size is optional) */
#     " -C[size_kb] Log to shared mem buffer (use logread to read it)"
#   )
#   IF_FEATURE_SYSLOGD_CFG(
#     " -f FILE     Use FILE as config (default:/etc/syslog.conf)"
#   )
#  "    -m MIN      Minutes between MARK lines (default:20, 0=off)" */
#   IF_FEATURE_KMSG_SYSLOG(
#     " -K      Log to kernel printk buffer (use dmesg to read it)"

#System logging utility
#
#   -n      Run in foreground
#   -O FILE     Log to FILE (default:/var/log/messages)
#   -l N        Log only messages more urgent than prio N (1-8)
#   -S      Smaller output
#   -s SIZE     Max size (KB) before rotation (default:200KB, 0=off)
#   -b N        N rotated logs to keep (default:1, max=99, 0=purge)
#   -R HOST[:PORT]  Log to HOST:PORT (default PORT:514)
#   -L      Log locally and via network (default is network only if -R)
#   -D      Drop duplicates
#   -C[size_kb] Log to shared mem buffer (use logread to read it)
#   -f FILE     Use FILE as config (default:/etc/syslog.conf)
#   -K      Log to kernel printk buffer (use dmesg to read it)


# klogd options :
# -c LOGLEVEL
klogd -c 5
#opt = getopt32(argv, "c:n", &opt_c);
#       -n     Avoid  auto-backgrounding.   This  is  needed  especially if the
#              klogd is started and controlled by init(8).

#### log ###


#### LOAD DRIVERS #######################################
#. /etc/rc.d/MODULESCONFIG #modules loading configuration.

#echo -n "    Loading kernel modules..." >/dev/console

#test -d /lib/modules/$KERNEL_RELEASE/ || mkdir -p /lib/modules/$KERNEL_RELEASE

_create_module_conf_from_cmdline(){
#Stub to care for cmdline parameters
# better a tmp one, but OK for now ..?
CMDL_MOD_P=`grep -o '[[:alnum:]_-]*\.[^[:blank:]]*' /proc/cmdline`
if test "$CMDL_MOD_P"; then
 for aENTRY in $CMDL_MOD_P
  do
   MODULE=${aENTRY%%.*}
   PARAMS=${aENTRY#*.}
   echo "#Entry created for $KERNEL_RELEASE `date +%F-%T`
options $MODULE $PARAMS" >>/etc/modprobe.d/${MODULE}.conf
  done
fi
}
_create_module_conf_from_cmdline

######### launch udev ############################
_launch_udev(){
if [ -x /sbin/photplug ];
then
 grep $Q 'photplug' /proc/sys/kernel/hotplug && return 0
 echo '/sbin/photplug' >/proc/sys/kernel/hotplug

#my intention is for puppy to work with either of these...
elif [ -x /sbin/udevd ];
then
pidof $Q udevd && return 0
#### prepare config files #############
#v405 udevd calls /sbin/pup_event_backend_modprobe, which needs this...
BLACKLISTVARS=`echo "$SKIPLIST" | tr '\-' '_' | tr ' ' '\n' | sed -e 's/^/blacklist /' | grep -v ' $'`
                        echo "$BLACKLISTVARS"  >/tmp/pup_event_skiplist.conf
[ "$noDriversList" ] && echo "$noDriversList" >>/tmp/pup_event_skiplist.conf

[ -f /etc/modprobe.conf ] &&     cat /etc/modprobe.conf           >/tmp/pup_event_modprobe.conf
[ -d /etc/modprobe.d ] && { for f in /etc/modprobe.d/*;do cat $f >>/tmp/pup_event_modprobe.conf;done; }

#...read in /sbin/pup_event_backend_d, and pup_event_backend_modprobe (for udevd).
touch /tmp/pup_event_module_devpath.log

  #alsa
[ -f /tmp/pup_event_alsa_cnt ] || echo '0' > /tmp/pup_event_alsa_cnt
  #alsa
#### prepare config files #############
 rm $VERB -rf /dev/.udev/*/*  ##krg
 [ -z "`pidof udevd`" ] && UDEV_LOG=$LOGLEVEL /sbin/udevd --daemon
elif [ -x "`which pup_event_backend_d`" ];
then
 [ -z "`pidof pup_event_backend_d`" ] && pup_event_backend_d >/tmp/pup_event_backend_errors 2>&1 & #hotplug daemon. my homebrew replacement for udevd.
else
 :
fi
sleep 0.1
}
######### launch udev ############################

_detect_and_load_drivers(){
#MODALIASES=`ls /sys/bus/*/devices/*/modalias | sort -d`  ##added sort -d to make output in logfiles more similar
MODALIASES=`ls -1v /sys/*/*/*/*/modalias`

######### force loading of pcmcia usb hid #################
if test "$PUPMODE" = 2; then #v423 full hd install.
                             #v423 have this in 'init', probably need here too...
 if [ "`echo "$MODALIASES" | grep 'bc0Csc03i10'`" != "" ];then
  [ -z "`lsmod | grep 'yenta_socket'`" ] && modprobe $modprobeSYSLOG $modprobeCONFIG yenta-socket
  [ $? -eq 0 ] && sleep 2
 fi
 #v423 k2.6.29.6 dmesg has warning that ehci-hcd should load before uhci-hcd and ohci-hid
 # this is contrary to my understanding all these years, but oh well, let's do it...
 ELSPCI=`elspci -l` #jesses great little utility.
 [ "`echo "$ELSPCI" | grep '0C0320' | grep '<>$'`" != "" ] && modprobe $modprobeSYSLOG $modprobeCONFIG ehci-hcd
 #...perhaps a udev rule could have done this?
 [ "`echo "$ELSPCI" | grep '0C0310' | grep '<>$'`" != "" ] && modprobe $modprobeSYSLOG $modprobeCONFIG ohci-hcd
 [ "`echo "$ELSPCI" | grep '0C0300' | grep '<>$'`" != "" ] && modprobe $modprobeSYSLOG $modprobeCONFIG uhci-hcd
fi
######### force loading of pcmcia usb hid #################

_launch_udev
load_average '2x0a'
######### check if already loaded by init or sbin/init #####
  #vars
INITSTATE=`find /sys -name "initstate"`
       WC=`echo "$INITSTATE" | wc -l`
echo 'WC INITSTATE='"$WC"
  #vars

  #sanity check
if [ -z "$MODALIASES" ] ; then #1 #no MODALIASES huh?

echo -e "\\033[1;5;31m"'WARNING : '"$Red0"'No modaliases found !'"$Black0" >/dev/console
echo -e "$Pink0"'Either the kernel detected no HW automatically'"$Black0" >/dev/console
echo -e "$Black0"'or something else went wrong'"$Black0" >/dev/console
  #sanity check

else #1 #MODALIASES normal

if [ "$WC" -lt 25 ]; then  #initrd.gz loads 10 modules plus some extra #2

echo "Running the modaliases add by rc.sysinit"
test -e /tmp/pup_event_module_devpath.log && echo "
Running the modaliases add by rc.sysinit" >> /tmp/pup_event_module_devpath.log

  #permissions check
if [ "$VERBOSE" ];then
echo "BEFORE loading main modules"
ls -l /;ls -l /root;ls -l /tmp;ls -l /var;echo "BEFORE loading main modules"
fi
  #permissions check

#
#  #prepare for pup_event_backend_modprobe , which tries to exit if already loaded
#touch /tmp/pup_event_module_devpath.log #do it here, not everytime in pup_event_backend_modprobe
#  #prepare for pup_event_backend_modprobe

### TRIGGER uevent #############
MODULECNT=0
MODALIAS=MODALIAS; MODALIAS1=MODALIAS1; MODALIAS2=''; oldMODALIAS=''

#while [ "$MODALIAS1" != "$MODALIAS2" ]
while [ "$MODALIAS" != "" ]
do

MODALIAS1=`ls -1v /sys/*/*/*/*/modalias`
#if test "$MODALIAS2"; then
if test "$oldMODALIAS"; then
 MODALIAS=`echo "$MODALIAS1" | /bin/grep -v "$oldMODALIAS"`
else
 MODALIAS="$MODALIAS1"
fi

#replay uevents from /sys...
#for oneMODALIAS in $MODALIAS1
for oneMODALIAS in $MODALIAS
do
 #onePATH=`dirname $oneMODALIAS`
 onePATH="${oneMODALIAS%/*}"
 #if [ -e "${onePATH}/uevent" ];then #3
  [ -e "${onePATH}/uevent" ] || continue
  echo add > "${onePATH}/uevent" #generates an 'add' uevent.
  sleep 0.02
  MODULECNT=$((MODULECNT+1))
  echo -en "\r\\033[1;36m${MODULECNT}$Black0" >/dev/console
 #fi #3
done
#MODALIAS2=`ls -1v /sys/*/*/*/*/modalias`
oldMODALIAS="$MODALIAS1"
[ "$MODULECNT" -gt 999 ] && break
done
### TRIGGER uevent #############

load_average '2x0c'
### show status message on screen ##################
#echo >/dev/console ##2011-12-27 added >/dev/console
echo -e '\nDetected '"$Blue1""$MODULECNT ""$Black0"'busses' >/dev/console
MODULECNT=0

sleep 3s
LSMODCNT=`wc -l /proc/modules | awk '{print $1}'`

  if [ ! "$LSMODCNT" ] || [ "$LSMODCNT" = 0 ];
  then #4
 lsmod | cut -f 1 -d ' ' | sort -g | tr '\n' ' ' >/dev/console
  else #4
 echo -e -n 'Loaded   '"$Pink1""$LSMODCNT ""$Black0"'drivers at least' >/dev/console
  fi   #4
### show status message on screen ##################

  #to distinguish first module loading part from usb/pcmcia/ssb part further down
  [ -f /tmp/pup_event_module_devpath.log ] && echo >> /tmp/pup_event_module_devpath.log
  #to distinguish

else #2
echo 'Skipping first uevent part , more than 25 modules already loaded ...'
fi #2

fi #1

}  ###_detect_and_load_drivers(){ #END


##+++2014-11-07/08
MACHINE=`_make_board_id`

. /etc/rc.d/MODULESCONFIG   #modules loading configuration.
echo -n "    Loading kernel modules..." >/dev/console

if test "$PUPMODE" = 5; then
    echo "PUPMODE is '$PUPMODE'"
_detect_and_load_drivers
else
 echo "PUPMODE is '$PUPMODE'"

# bootsysinit.log :
#/etc/rc.d/rc.update : PUPMODE='2' KERNVER='2.6.30.9-i586-dpup005-Celeron2G' XSTATUS=''
#'/etc/modules/2.6.31.14-KRG-i586-pae-300Hz-slub-flatmem-8cpu-dirty-modules@DellInc.-OptiPlex755-J8J844J.lst' is NOT regular file

############## USER SELECTED MODULES ##################

_load_user_selected_modules(){
  if [ "$safeBoot" = "2" ] || [ "$safeBoot" -ne "0" -a "$safeBoot" -ne "4" ] ; then
  echo "USER SELECTED MODULES"
  #the user can select extra modules to load in the BootManager...
  if [ "$ADDLIST" != "" ];then #variable is in /etc/rc.d/MODULESCONFIG
  echo -n "Loading user-selected modules..." >/dev/console
  for MODULE in $ADDLIST
  do
  #MPARAMS=""
  unset MPARAMS CML_MOD_P aENTRY PARAMS_
  if [ "`echo -n "$MODULE" | tr ':' ' ' | wc -w`" -gt 1 ];then
   MPARAMS=`echo -n "$MODULE" | cut -f 2-9 -d ':' | tr ':' ' '`
   MODULE=`echo -n "$MODULE" | cut -f 1 -d ':'`
  fi
  #2014-10-27 let cmdline parameters override ADDLIST
   CML_MOD_P=`grep -o "$MODULE\.[^[:blank:]]*" /proc/cmdline`
    if test "$CML_MOD_P"; then
     for aENTRY in $CML_MOD_P;
      do
       PARAMS_=${aENTRY#*$MODULE}
       PARAMS_=`echo "$PARAMS_" | sed 's%^\.*%%'`
       PARAMS_=${PARAMS_//,/ }
       MPARAMS="$MPARAMS $PARAMS_"
      done
    fi
    echo -en " \\033[1;36m$MODULE$Black0" >/dev/console
    echo "Loading module $MODULE $MPARAMS"
    firmware_module_func #install firmware tarball. see functions4puppy4.
    #w463 for mwave.ko (modem), do not load module, just the firmware, which has script that correctly loads mwave.ko.
    [ "$MODULE" != "mwave" ] && modprobe $VERB $modprobeSYSLOG $modprobeFIRST_TIME $MODULE $MPARAMS  ##+2011-10-31 added -v and --first-time
    done
    status_func 0
   fi
  fi
 }

 # REM: 2014-11-17
 #      Try to split loading of explicitely desired kernel driver modules
 #      into a pre and post part ( some modules might need to load before
 #      autodetected drivers are loaded and some afterwards ).
 #      Variables are ADDLIST_PRE and ADDLIST_POST
 if [ "$ADDLIST_PRE" ]; then
  unset ADDLIST
  ADDLIST="$ADDLIST_PRE"
  _launch_udev
  _load_user_selected_modules
  . /etc/rc.d/MODULESCONFIG  ## Need to source again in case ADDLIST has changed
                            ## to ADDLIST_PRE for backwards-compatibility using
                            ## ADDLIST as fallback in ADDLIST_POST part of this script ..
 fi

 if test -f "/etc/modules/${KERNEL_RELEASE}-modules@${MACHINE}.lst"; then
  echo "'/etc/modules/${KERNEL_RELEASE}-modules@${MACHINE}.lst' is regular file"

  _launch_udev
  c=0
  while read oneM modOPS;
  do
   [ "$oneM" ] || continue
    c=$((c+1))
    echo -en "\r\\033[1;36m${c}$Black0" >/dev/console
    modprobe -b $VERB $oneM $modOPS
  done <"/etc/modules/${KERNEL_RELEASE}-modules@${MACHINE}.lst"

 else
  echo "'/etc/modules/${KERNEL_RELEASE}-modules@${MACHINE}.lst' is NOT regular file"
 _detect_and_load_drivers
 fi
fi

unset c

###permissions
if [ "$VERBOSE" ];then
echo "
AFTER loading main modules"
ls -l /;ls -l /root
ls -l /tmp;ls -l /var
fi
###permissions

#we can determine ide/sata drives at this point (drivers builtin to kernel)...

###force usb-storage
if [ -z "`lsmod | grep 'usb_storage'`" ]; then
 echo "forcing usb-storage"
 modprobe $modprobeSYSLOG usb_storage
fi
###force usb-storage

###fbcon 2
[ "$NO_FBCON" ] || { [ -n "`lsmod | cut -f 1 -d ' ' | grep 'fb'`" ] && fbcon_func; }
###fbcon 2

### PUPMODE 2
if [ "$PUPMODE" = 2 ];then
 modprobe $modprobeSYSLOG nls_cp437 #these needed by vfat/ntfs/ext2 f.s.'s.
 modprobe $modprobeSYSLOG nls_iso8859-1 # "
 modprobe $modprobeSYSLOG fuse
 #modprobe $modprobeSYSLOG $LAYERFS #unionfs or aufs.
 modprobe $modprobeSYSLOG squashfs
fi

status_func 0
fi #0 #safeBoot -ge 4
load_average '2xff'
################# LOAD KERNEL MODULES #########################


###################### LOAD SWAP #####################

[ "$NO_SWAP" ] || loadswap_func

###################### LOAD SWAP #####################


################# MISC. SYSTEM SETUP #################
echo "MISC. SYSTEM SETUP"

echo -e "${DISTRO_NAME} Linux\n`uname -s` `uname -r` [`uname -m` arch]\n\n" > /etc/issue
echo "1" > /proc/sys/net/ipv4/ip_dynaddr
hostname -F /etc/hostname

#echo safeBoot=$safeBoot 1

################ WAIT MODULES LOADED ##################
if [ "$safeBoot" -ge "4" ] ; then
echo "WAIT MODULES LOADED"

 ################ pcmcia usb ######################
 #previous module loading may not have completed...
 echo -n "Waiting for modules to complete loading..." >/dev/console
 WAITCNT=0

 PCIPCMCIA=`elspci -l | grep -o  '060700'`
    PCIUSB=`elspci -l | grep -oE '0C0300|0C0310|0C0320'`

 ############ pcmcia ###############################
 if [ "$PCIPCMCIA" != "" ];then #this may be slow to respond.
 echo -n " pcmcia"  >/dev/console
 while [ $WAITCNT -lt 10 ];do
  [ "`lsmod | grep -E '^yenta_socket |^tcic |^i82092 |^i82365 |^pd6729 '`" != "" ] && break
  WAITCNT=$((WAITCNT + 1))
  sleep 1
  echo -n " $WAITCNT" >/dev/console
 done
 fi
 ############ pcmcia ###############################

 ############ usb ##################################
 #note, if initrd then usb-storage will have already loaded...
modprobe -l | grep '[eoux]hci_hcd' && {
 if [ "$PCIUSB" != "" ];then #this may be slow to respond.
 echo -n " usb"  >/dev/console
 PCIUSBNUM=`echo "$PCIUSB" | sort -u | wc -l`
  while [ $WAITCNT -lt 10 ];do
  [ "`lsmod | grep -w -E '^ehci_hcd|^ohci_hcd|^uhci_hcd|^xhci_hcd' | wc -l`" -ge $PCIUSBNUM ] && break
  WAITCNT=$((WAITCNT + 1 ))
  sleep 1
  echo -n " $WAITCNT" >/dev/console
  done
 fi
       : ;
    }
 ############ usb ##################################
 ################ pcmcia usb ######################


 ################ LOAD pcmcia usb ssb #############
 echo "LOAD PCMCIA USB (SSB) if not automatically detected"
 #echo safeBoot=$safeBoot 2
 #replay uevents from /sys (more interfaces as a consequence of above drivers loaded)...
 #note, this also a workaround for kernel 'bug' where entries appear in /sys but no uevent
 #gets generated (yes it happens in 2.6.25.x kernel!)

 echo 'Running the pcmcia-usb-ssb modaliases add by rc.sysinit '$0
 echo '##########'  >> /tmp/pup_event_module_devpath.log
 echo 'Running the pcmcia-usb-ssb modaliases add by rc.sysinit '$0 >> /tmp/pup_event_module_devpath.log
 #echo safeBoot=$safeBoot 3

 LSMOD=`cut -f 1 -d ' ' /proc/modules`
 MODULECNT2=0

 ###### kernel version ###########
 if [ $KERNMAJ -lt 24 ];then #v431
  echo 'Add loop for KERNMAJ -lt 24'
  [ -e /sys/bus/pcmcia/devices ] && NEWPCMCIA=`ls /sys/bus/pcmcia/devices/*/modalias | tr '\n' ' '`
  [ -e /sys/bus/usb/devices ]    && NEWUSB=`ls /sys/bus/usb/devices/*/modalias | tr '\n' ' '`
   for oneMODALIAS in ${NEWPCMCIA}${NEWUSB}
  do
  onePATH="${oneMODALIAS%/*}"
    if [ -e "${onePATH}/uevent" ];then
    echo add > "${onePATH}/uevent" #generates an 'add' uevent.
    sleep 0.02
    MODULECNT2=$((MODULECNT2+1))
    fi
  done

 else
 #v424 try it a different way, this also fixes ssb devices (such as b43.ko)...
 echo 'Add loop for KERNMAJ -ge 24'
 [ -e /sys/bus/pcmcia/devices ] && NEWPCMCIA=`ls /sys/bus/pcmcia/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 [ -e /sys/bus/usb/devices ]    && NEWUSB=`ls /sys/bus/usb/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 [ -e /sys/bus/ssb/devices ]    && NEWSSB=`ls /sys/bus/ssb/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 echo -e "${NEWPCMCIA}\n${NEWUSB}\n${NEWSSB}"
  for oneUEVENT in ${NEWPCMCIA}${NEWUSB}${NEWSSB}
   do
  onePATH=${oneUEVENT%/*}
  #the check for 'modalias' file is maybe needed for old kernel?...
  [ ! -e "${onePATH}/modalias" ] && [ "`grep 'MODALIAS' "$oneUEVENT"`" = "" ] && continue
  echo add > "$oneUEVENT"
  sleep 0.02
  MODULECNT2=$((MODULECNT2+1))
  done
 fi #kernelmaj

#echo safeBoot=$safeBoot 4

 if [ "$MODULECNT2" -gt 0 ] ; then
 echo >/dev/console
 echo -e -n 'Detected '"$Blue1""$MODULECNT2 ""$Black0"'pcmcia/usb/ssb busses' >/dev/console
 MODULECNT2=0
 fi
 sleep 3s
 #LSMOD2=`lsmod | sed "1 d" | cut -f 1 -d ' '`
 LSMOD2=`cut -f 1 -d ' ' /proc/modules`

 if [ "$LSMOD2" != "$LSMOD" ] ; then
 DIFF=`echo "$LSMOD2" | /bin/grep -v "$LSMOD"`
 DIFFCOUNT=`echo "$DIFF" | wc -l`
 echo >/dev/console
 echo -e -n 'Additionally loaded '"$Pink1""$DIFFCOUNT ""$Black0"'drivers' >/dev/console
 fi

 #echo safeBoot=$safeBoot 5
 [ -f  /tmp/pup_event_module_devpath.log ] && echo >> /tmp/pup_event_module_devpath.log
 ################ LOAD pcmcia usb ssb #############


 ################ WAIT MODULES LOADED 2 ##################
 echo "WAIT MODULES LOADED 2"
##modprobe -l | grep 'usb[\-_]storage' && {

 WAITCNT=0  ###+++2012-01-07
 WAITCNT1=0 ###+++2012-01-15
 # Wait for usb-storage drives to become available...(already done if initrd)
 #  Note, pup_event_backend_d and udevd both log to this file when load modules
 #  (the latter via udev handler script /sbin/pup_event_backend_modprobe)...
 if [ "`grep 'usb_storage' /tmp/pup_event_module_devpath.log`" != "" ];then #see pup_event_backend_d
  echo -n " usb-storage"  >/dev/console
  while [ $WAITCNT -lt 15 ];do
  [ "`dmesg | grep 'usb-storage: device scan complete'`" ] && break
  [ "`dmesg | grep 'usb-storage .*: scan complete'`" ]     && break
  sleep 1
  WAITCNT=$((WAITCNT + 1))
  echo -n " $WAITCNT" >/dev/console
  done
 #precaution, make sure have got them all... v412 need sort -u...
  #USBSTORAGES=`/bin/dmesg | grep "usb-storage: device found at" | sort -u | wc -l`
  USBSTORAGES=`/bin/dmesg | grep "scsi.* : usb\-storage" | sort -u | wc -l`
  while [ $WAITCNT1 -lt 15 ];do  ###+2011-10-31 changed WAITCNT to WAITCNT1
   #AVAILABLEUSBSTORAGES=`/bin/dmesg | grep "usb-storage: device scan complete" | wc -l`
   AVAILABLEUSBSTORAGES=`/bin/dmesg | grep "usb-storage .*: scan complete" | wc -l`
   [ $AVAILABLEUSBSTORAGES -ge $USBSTORAGES ] && break
   sleep 1
   WAITCNT1=$((WAITCNT1 + 1))  ###+2011-10-31 changed WAITCNT to WAITCNT1
   echo -n " $WAITCNT1" >/dev/console  ###+2011-10-31 changed WAITCNT to WAITCNT
  done
 fi
#echo safeBoot=$safeBoot 6
sleep 1 #v411 a bit extra. rerwin reports usb mouse detection problem some hardware.
        #(delay before usb mouse info appears in /proc/bus/input/devices)
#       : ;
#   }
################ WAIT MODULES LOADED 2 ##################

status_func 0
fi #safeBoot
load_average '3xff'
################ WAIT MODULES LOADED ##################


############## USER SELECTED MODULES ##################
__load_user_selected_modules__(){
if [ "$safeBoot" = "2" ] || [ "$safeBoot" -ne "0" -a "$safeBoot" -ne "4" ] ; then
echo "USER SELECTED MODULES"
 #the user can select extra modules to load in the BootManager...
 if [ "$ADDLIST" != "" ];then #variable is in /etc/rc.d/MODULESCONFIG
 echo -n "Loading user-selected modules..." >/dev/console
 for MODULE in $ADDLIST
 do
  #MPARAMS=""
  unset MPARAMS CML_MOD_P aENTRY PARAMS_
  if [ "`echo -n "$MODULE" | tr ':' ' ' | wc -w`" -gt 1 ];then
   MPARAMS=`echo -n "$MODULE" | cut -f 2-9 -d ':' | tr ':' ' '`
   MODULE=`echo -n "$MODULE" | cut -f 1 -d ':'`
  fi
  #2014-10-27 let cmdline parameters override ADDLIST
   CML_MOD_P=`grep -o "$MODULE\.[^[:blank:]]*" /proc/cmdline`
    if test "$CML_MOD_P"; then
     for aENTRY in $CML_MOD_P;
      do
       PARAMS_=${aENTRY#*$MODULE}
       PARAMS_=`echo "$PARAMS_" | sed 's%^\.*%%'`
       PARAMS_=${PARAMS_//,/ }
       MPARAMS="$MPARAMS $PARAMS_"
      done
    fi
  echo -en " \\033[1;36m$MODULE$Black0" >/dev/console
  echo "Loading module $MODULE $MPARAMS"
  firmware_module_func #install firmware tarball. see functions4puppy4.
  #w463 for mwave.ko (modem), do not load module, just the firmware, which has script that correctly loads mwave.ko.
  [ "$MODULE" != "mwave" ] && modprobe $VERB $modprobeSYSLOG $modprobeFIRST_TIME $MODULE $MPARAMS  ##+2011-10-31 added -v and --first-time
 done
 status_func 0
 fi
fi
}

# REM: 2014-11-17
#      Try to split loading of explicitely desired kernel driver modules
#      into a pre and post part ( some modules might need to load before
#      autodetected drivers are loaded and some afterwards ).
#      Variables are ADDLIST_PRE and ADDLIST_POST
. /etc/rc.d/MODULESCONFIG ## Need to source a second time for now
                          ## in case ADDLIST had changed to ADDLIST_PRE
if [ "$ADDLIST_POST" ]; then
 unset ADDLIST
 ADDLIST="$ADDLIST_POST"
 _load_user_selected_modules
elif [ "$ADDLIST" ]; then
 _load_user_selected_modules
fi

#echo safeBoot=$safeBoot 8
if [ "$safeBoot" -ge "4" ] ; then
[ -z "`lsmod | grep 'fbcon'`" ] && fbcon_func
############## USER SELECTED MODULES ##################
load_average '4xff'

############# mount /proc/bus/usb #################

#had hoped to retire this, but HardInfo needs it...
#if [ "`lsmod | grep '^usbcore'`"  ];then
case $KERNEL_RELEASE in
2.6.*|3.0.*|3.1.*|3.2.*|3.3.*|3.4.*)
 echo -n "MOUNT /proc/bus/usb "
 busybox mount $VERB $VERB -t usbfs usbfs /proc/bus/usb
 echo "<$?>"
esac
#else
#echo "[NONE]"
#fi
############# mount /proc/bus/usb #################


############ ACPI/APM ##################################################
echo "APM/ACPI"
[ -d /proc/acpi ] || modprobe $modprobeSYSLOG apm #v406

 #v408 only needed for 2.6.21.7,
 #                  as 2.6.25.x loads these automatically...
 #v408 kirk: Check for laptop battery...
  modprobe $modprobeSYSLOG battery
  #if [ -d /proc/acpi/battery ]; then
   results=`find /proc/acpi/battery -mindepth 1 -type d`
  # if [ ! -z "$results" ]; then
   modprobe $modprobeSYSLOG ac
  #  modprobe thermal
   modprobe $modprobeSYSLOG fan
 # else
 #  rmmod battery
 # fi
#fi

fi
#echo safeBoot=$safeBoot 9
############ ACPI/APM ##################################################
load_average '5xff'

################### SETUP SERVICES ################
echo "SETUP SERVICES"
echo -n "Setting up services (network, printing, etc.)..." >/dev/console
############## MODEM ########
if [ -h /dev/modem ];then
 DEVM=`readlink /dev/modem`
 case $DEVM in
  modem) #error, circular link.
   rm $VERB -f /dev/modem
   DEVM=""
  ;;
  /dev/*) #wrong format.
   DEVM=`echo -n "$DEVM" | cut -f 3,4 -d '/'`
   ln $VERB -snf $DEVM /dev/modem
  ;;
 esac
 case $DEVM in
  ttyS[0-9]) #apparently setserial can crash with other modems.
   setserial -v -b /dev/modem auto_irq skip_test autoconfig
  ;;
 esac
fi
############## MODEM ########

############## RC.NETWORK ###
#v411 can use old network wizard (from 403, based on 400)...
CHECKOLDWIZ=`ls -1 /etc/*[0-9]mode 2>>$ERR` #ex: eth0mode, wlan0mode.
if [ "$CHECKOLDWIZ" != "" -a -d /usr/local/net_setup ];then
 #note, old wizard is located in /usr/local/net_setup.
 /usr/local/net_setup/etc/rc.d/rc.network &
else
 /etc/rc.d/rc.network &
fi
############## RC.NETWORK ###

########## RC.SERVICES ##############
 #permissions
if [ "$DEBUG" ]          ;then
echo "BEFORE RC.SERVICES"
ls -l /;ls -l /root
ls -l /tmp;ls -l /var
echo "BEFORE RC.SERVICES";fi
 #permissions

Ymd="$Ymd" /etc/rc.d/rc.services start $safeBoot & #run scripts in /etc/rc.d/init.d

 #permissions
if [ "$DEBUG" ];then
echo "
AFTER RC.SERVICES"
ls -l /;ls -l /root
ls -l /tmp;ls -l /var;fi
 #permissions

echo -e "\\033[62G\\033[1;33m[backgrounded]$Black0" >/dev/console #column 62, yellow.
########## RC.SERVICES ##############
################### SETUP SERVICES ################
load_average '6xff'

############ RECOGNISE MEDIA DEVICES ################
echo "RECOGNISE MEDIA DEVICES"
echo -n "Recognising media devices..." >/dev/console
#recognise optical drives...
echo -n ' optical' >/dev/console
OPTCNT=1;CDTYPE="";DVDTYPE="";CDBURNERTYPE=""
OPTICALS=`grep '^drive name:' /proc/sys/dev/cdrom/info | grep -o -E 'sr.*|hd.*' | tr '\t' ' '`
[ -L /dev/cdrom ] && CDTYPE=`readlink /dev/cdrom | cut -f 3 -d '/'`
[ -L /dev/dvd ]   && DVDTYPE=`readlink /dev/dvd | cut -f 3 -d '/'`
[ -f /etc/cdburnerdevice ] && CDBURNERTYPE=`cat /etc/cdburnerdevice`
[ "`echo "$OPTICALS" | grep "$CDTYPE"`" = "" ]       && CDTYPE=""       #no longer exists.
[ "`echo "$OPTICALS" | grep "$DVDTYPE"`" = "" ]      && DVDTYPE=""      #no longer exists.
[ "`echo "$OPTICALS" | grep "$CDBURNERTYPE"`" = "" ] && CDBURNERTYPE="" #no longer exists.
for oneOPTICAL in $OPTICALS
do
 oneNUM=`echo -n "$oneOPTICAL" | cut -c 3`
 [ "$CDTYPE" = "" ]  && CDTYPE="$oneOPTICAL"
 [ "$DVDTYPE" = "" ] && [ "`grep '^Can read DVD' /proc/sys/dev/cdrom/info | head -n 1 | grep -o '[01]' | sed -e 's/[^01]//g' | cut -c $OPTCNT`" = "1" ]      && DVDTYPE="$oneOPTICAL"
 [ "$CDBURNERTYPE" = "" ] && [ "`grep '^Can write CD' /proc/sys/dev/cdrom/info | head -n 1 | grep -o '[01]' | sed -e 's/[^01]//g' | cut -c $OPTCNT`" = "1" ] && CDBURNERTYPE="$oneOPTICAL"
 OPTCNT=$((OPTCNT + 1))
done
rm $VERB -f /dev/cdrom; rm $VERB -f /dev/dvd; rm $VERB -f /etc/cdburnerdevice
[ "$CDTYPE" ]       && ln $VERB -sf /dev/$CDTYPE  /dev/cdrom
[ "$DVDTYPE" ]      && ln $VERB -sf /dev/$DVDTYPE /dev/dvd
[ "$CDBURNERTYPE" ] && echo -n "$CDBURNERTYPE"  >/etc/cdburnerdevice
[ "$DVDTYPE" ]      && hdparm $L_VERB -d1 /dev/$DVDTYPE >>$OUT 2>&1
 #optical

 #mouse
#w468  simplify...
##w463 I think time has come to dump the old 'psaux'.
##     Use /dev/input/mice for both usb and ps/2 mice...
##Recognise mouse... v411...
## Note, if wanted to detect serial mouse here,
## k2.6.25.16 has module 'sermouse' that must be loaded (currently in xwin).
echo ' , mouse' >/dev/console
if [ ! -f /etc/mousedevice ]; then
 echo "input/mice" > /etc/mousedevice
 #ln $VERB -snf input/mice /dev/mouse
elif [ "`cat /etc/mousedevice`" = "psaux" ]; then
 echo "input/mice" > /etc/mousedevice
fi
read MOUSE_DEVICE </etc/mousedevice || MOUSE_DEVICE="input/mice"
test -d /dev/input      || mkdir $VERB /dev/input
test -c /dev/input/mice || { rm $VERB -f /dev/input/mice; mknod /dev/input/mice c 13 63; }
ln $VERB -snf $MOUSE_DEVICE /dev/mouse
 #mouse

##### RC.COUNTRY ################
#recognise keyboard...
echo -n 'keyboard: ' >/dev/console
/etc/rc.d/rc.country;STATUS=$(( STATUS + $? )) #this asks for keyboard layout.

status_func $STATUS;STATUS=0
############ RECOGNISE MEDIA DEVICES ################
load_average '7xff'

############ MISC DESKTOP STUFF ##################
echo "MISC. DESKTOP STUFF"
if [ "$PUPMODE" = "77" ];then #77=multisession cd/dvd.
 if [ "`grep "savesession" /root/Choices/ROX-Filer/PuppyPin`" = "" ];then
  echo '<icon x="768" y="128" label="save">/usr/sbin/savesession-dvd</icon>' >> /root/Choices/ROX-Filer/PuppyPin
  grep -v '/pinboard' /root/Choices/ROX-Filer/PuppyPin >/tmp/PuppyPin-CPY
  pidof sync >$OUT || sync
  cp $VERB -f /tmp/PuppyPin-CPY /root/Choices/ROX-Filer/PuppyPin
  echo '</pinboard>'    >>/root/Choices/ROX-Filer/PuppyPin
 fi
fi

#save button on desktop when booted from flash drive...
if [ $PUPMODE -eq 3 -o $PUPMODE -eq 7 -o $PUPMODE -eq 13 ];then #pup_rw is tmpfs.
 if [ "`grep "save2flash" /root/Choices/ROX-Filer/PuppyPin`" = "" ];then
  echo '<icon x="768" y="128" label="save">/usr/sbin/save2flash</icon>' >> /root/Choices/ROX-Filer/PuppyPin
  grep -v '/pinboard' /root/Choices/ROX-Filer/PuppyPin >/tmp/PuppyPin-CPY
  pidof sync >$OUT || sync
  cp $VERB -f /tmp/PuppyPin-CPY /root/Choices/ROX-Filer/PuppyPin
  echo '</pinboard>'    >>/root/Choices/ROX-Filer/PuppyPin
 fi
fi
############ MISC DESKTOP STUFF ##################


################### PERSONAL BOOT SCRIPT ######################
echo "PERSONAL BOOT SCRIPT"
#personal boot script here...
if [ ! -f /etc/rc.d/rc.local ];then
 echo '#this file called from rc.sysinit' > /etc/rc.d/rc.local
 echo '#you can edit this file' >> /etc/rc.d/rc.local
 echo '#When firewall is installed, will append lines to this file...' >> /etc/rc.d/rc.local
fi
. /etc/rc.d/rc.local

################### VARIOUS ###################################
echo "VARIOUS"
[ -c /dev/ppp ]   || mknod /dev/ppp c 108 0
[ -L /dev/mouse ] || ln $VERB -s /dev/input/mice /dev/mouse
[ -c /dev/mem ]   || mknod /dev/mem c 1 1


 #/dev/root
_root_link_func(){

rm $VERB -f /dev/root

RD=`dmesg | grep -i 'Mounted root'`
 if [ -z "$RD" ] ; then
  rootdevice=`rdev | cut -d ' ' -f1 | cut -f3 -d '/'`
  [ -z "$rootdevice" ]    && return 0
  [ -b /dev/$rootdevice ] || return 1
  ln $VERB -s $rootdevice /dev/root

 else
  device=`echo "$RD" | grep -o -i 'device .*' | cut -f 2 -d ' '`
  MAJ=`echo $device | cut -f 1 -d ':'`
  Min=`echo $device | cut -f 2 -d ':' | sed 's#\.$##'`

CAT_PROC_PART=`cat /proc/partitions | sed "1,2 d" | sed 's#^[[:blank:]]*##g' | tr -s ' '`
rootdevice=`echo "$CAT_PROC_PART" | grep -w "^$MAJ $Min" | cut -f 4 -d ' '`  ##+2011-10-31 had to add -w to grep
# 259   655360   15390270 hda5
# 259   65536    15446466 hda8
  [ -z "$rootdevice" ]    && return 0
  [ -b /dev/$rootdevice ] || return 1
  ln $VERB -s $rootdevice /dev/root
fi
}
_root_link_func
 #/dev/root

 #mount

_special_mnt_func(){
mkdir $VERB -p /SPECIAL_MNT
#for i in `cat /proc/filesystems | tr '\t' ' ' | tr -s ' ' | grep '^nodev' | cut -f 2 -d ' '` ; do

validFS=`grep '^nodev' /proc/filesystems | grep -vEw 'bdev|sockfs|pipefs|anon_inodefs|aufs|fuse|nfs|nfs4|nfsd|inotifyfs|debugfs|exofs|coda|auofs|jffs2|ubifs|mtd_inodefs' | awk '{print $2}'`
for i in $validFS ; do

grep $Q -w "$i" /proc/mounts && continue
DIR=`echo "$i"` # | sed 's#fs$##'`

##2011-10-31 2.6.37.4-KRG-i486-StagingDrivers-2 : grep -v -E -w 'bdev|sockfs|pipefs|anon_inodefs'
##2011-11-09 2.6.37.4-KRG-i486-StagingDrivers-2 : grep -v -E -w 'aufs|fuse'

[ -d /SPECIAL_MNT/$DIR ] || mkdir $VERB -p /SPECIAL_MNT/$DIR
mount $VERB $VERB -t $i none /SPECIAL_MNT/$DIR

done
}
_special_mnt_func
 #mount

load_average '8xff'

_sort_pup_eve_bac_mod_func(){
#___________________________
  FILE='/tmp/pup_eve_bac_mod.log'
  [ -f "$FILE" ] || FILE='/tmp/pup_event_backend_modprobe.log'
  [ -f "$FILE" ] || return  ##+++2011-10-31
  sleep 12s #120s ##5s
  cat "$FILE" | sort -g -k 1,3 -t ' ' >"$FILE".sorted
  PIDS=`cat "$FILE".sorted | cut -f 1 -d ' ' | sort -u | sort -g`
   for i in $PIDS ; do
        _debugx PID "$i"
    Line=`grep -n -w "^$i" "$FILE".sorted | tail -n 1 | cut -f 1 -d ':'`
        _debugx Line "$Line"
    sed -i "$Line a\ " "$FILE".sorted
   done
#___________________________
};_sort_pup_eve_bac_mod_func &

 #permissions
if [ "$VERBOSE" ];then
ls -l /;ls -l /root
ls -l /tmp;ls -l /var
fi
 #permissions

 #who
WHO=`whoami`
_info "
WHOAMI='$WHO'
"
# echo -e "$Cyan1\nWHOAMI='$WHO'$Black0" >/dev/console
 #who

 #log
[ -e /dev/vcs1 ] || { mknod /dev/vcs1 c 7 1;sleep 1; }
 cat /dev/vcs1   >/tmp/vcs1.txt
 echo -e "\n\n" >>/tmp/vcs1.txt
 echo -e "`cat /tmp/vcs1.txt |sed -e 's,\(.\{80\}\),\1\\n,g'`" >>/tmp/vcs1.txt
 #log

 #X
if [ -z "`grep -i -w 'nox' /proc/cmdline`" ]; then  ##+2012-02-02 added -w
echo 'X'   > /var/lock/boot2X.status
touch /tmp/bootcnt.txt
else
echo 'nox' > /var/lock/boot2X.status
fi
 #X
################### PERSONAL BOOT SCRIPT ######################



dmesg          >/var/log/bootkernel.log
cp $VERB /var/log/messages   /tmp/boot.messages
cp $VERB /var/log/messages.0 /tmp/boot.messages.0
echo `uptime` >>/var/log/bootkernel.log



############ PUPSTATE ####################################

#sh-3.2# dmesg | grep -i scsi |grep CD\-ROM
#[    7.972081] scsi 1:0:0:0: CD-ROM            PLDS     DVD-ROM DH-16D3S SD11 PQ: 0 ANSI: 5
#[    7.978009] sr 1:0:0:0: Attached scsi CD-ROM sr0
#[   30.064555] scsi 8:0:0:0: CD-ROM            HUAWEI   Mass Storage     2.31 PQ: 0 ANSI: 2
#[   30.087102] sr 8:0:0:0: Attached scsi CD-ROM sr1

#sh-3.2# dmesg | grep -i scsi |grep sd
#[    7.967618] sd 0:0:0:0: Attached scsi generic sg0 type 0
#[    7.995632] sd 3:0:0:0: Attached scsi generic sg2 type 0
#[    8.055188] sd 0:0:0:0: [sda] Attached SCSI disk
#[    8.105784] sd 3:0:0:0: [sdb] Attached SCSI disk
#[   30.082807] sd 9:0:0:0: Attached scsi generic sg3 type 0
#[   30.117920] sd 9:0:0:0: [sdc] Attached SCSI removable disk

#dmesg | grep -i scsi |grep ATA
#[    7.967442] scsi 0:0:0:0: Direct-Access     ATA      ST3250310AS      4.AD PQ: 0 ANSI: 5
#[    7.995468] scsi 3:0:0:0: Direct-Access     ATA      Hitachi HDS72161 P22O PQ: 0 ANSI: 5

#dmesg | grep -i scsi |grep 'Attached SCSI removable disk'
#[   30.117920] sd 9:0:0:0: [sdc] Attached SCSI removable disk

#sh-3.2# dmesg | grep -i scsi |grep -i attached |grep -vi 'removable' |grep -oe '\[[[:alnum:]]*\]' |tr -d '\[\]'
#sda
#sdb


 #ATADRIVES=`ls -1 /sys/block | grep '^sd' | tr '\n' ' '`
 #ATADRIVES=`cat /proc/partitions | grep "sd[a-z]$" | tr -s " " | cut -f 5 -d " " | tr "\n" " "`
 SATADRIVES=`ls -1v /sys/block | grep '^sd'`
 unset USB_SATAD BLOCK_SATAD SATADRIVES USBDRIVES ATADRIVES
 for i in $SATADRIVES; do
  LinkTarget=`readlink -f /sys/block/$i`
 if test "`echo $LinkTarget | grep 'usb'`" != ""; then
  USB_SATAD="$USB_SATAD $i"
 else
  BLOCK_SATAD="$BLOCK_SATAD $i"
 fi
 done

 if [ -e /proc/ide ];then
  echo "SATADRIVES='${BLOCK_SATAD} '" >>/etc/rc.d/PUPSTATE #kernel supports /dev/hd*.
  echo "USBDRIVES='${USB_SATAD} '"    >>/etc/rc.d/PUPSTATE
 else
  echo "ATADRIVES='${BLOCK_SATAD} '" >>/etc/rc.d/PUPSTATE
  echo "USBDRIVES='${USB_SATAD} '"   >>/etc/rc.d/PUPSTATE
 fi

############ PUPSTATE ####################################

_make_fastmodules_list(){
if test "$PUPMODE" != 5; then
 if test ! -f "/etc/modules/${KERNEL_RELEASE}-modules@${MACHINE}.lst"; then
  awk '{print $1}' /proc/modules | tac >"/etc/modules/${KERNEL_RELEASE}-modules@${MACHINE}.lst"
 else
 echo "'/etc/modules/${KERNEL_RELEASE}-modules@${MACHINE}.lst' is regular file"
 fi
else
 echo "PUPMODE '$PUPMODE', skipping creation of modules@${MACHINE}.lst"
fi
}
[ -f /proc/modules ] && { _make_fastmodules_list; true; } || { echo "no /proc/modules"; false; }

load_average 'FxFF'

# REM: Force exitcode 0; otherwise rc.sysinit wrapper might
#      run rc.sysinit.emerg also.
#      If come here, everything should be almost setup fine.
#      Look into /var/log/bootsysinit.log for errors..
exit 0
# That's it. Next stop is /etc/profile... ( by login )
### END ###
