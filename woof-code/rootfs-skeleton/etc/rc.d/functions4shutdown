#!/bin/ash

#v2.02 dougal contributed this...
_choose_pupsave_size()
{
 local kFREE SIZELIST NUM CHOICES fLABEL sLABEL aCHOICE kSIZE
 kFREE=$1 ; SIZELIST="" ; NUM=1 ; CHOICES=""
 fLABEL="`expr $kFREE \/ 1024`MB"
 [ $kFREE -ge 1048576 ] && fLABEL="`dc $kFREE 1048576 \/ p`GB"
 for aCHOICE in 32 64 128 256 512 768 1024 1280
 do
  kSIZE=`expr $aCHOICE \* 1024`
  sLABEL="${aCHOICE}MB"
  [ $aCHOICE -ge 1024 ] && sLABEL="`dc $aCHOICE 1024 \/ p`GB"
  if [ $kSIZE -lt $kFREE ];then
   SIZELIST="$SIZELIST$NUM $sLABEL "
   CHOICES="$CHOICES$kSIZE "
  else
   SIZELIST="$SIZELIST$NUM fill_partition(${fLABEL}) "
   CHOICES="$CHOICES$kFREE "
   break
  fi
  NUM=`expr $NUM + 1`
 done
 dialog --no-collapse --no-cancel --default-item "5" --menu "Please choose the size you would like for the personal save file.\nNote, 512M is good choice, or highest if that not available.\nSelect choice, then press ENTER key..." 0 0 0 $SIZELIST >/dev/console 2>/tmp/sizetag.txt
 NUM=`cat /tmp/sizetag.txt`
 aCHOICE=`echo -n "$CHOICES" | cut -f $NUM -d ' '`
 #return $ACHOICE
 SIZEPFILE=$aCHOICE #global variable.
} # end of choosesizefunc()

#echo LINE 179 110  ###DBG

_mk_pupsave()
{
 #v2.02 ntfs uses /dev/fuse so '/dev/$SAVEPART' no good for grep...
 SMNTPT="`mount | grep "/dev/$SAVEPART" | tr -s " " | cut -f 3 -d " "`"
 #[ "$SMNTPT" = "" ] && SMNTPT="`mount | grep "/mnt/$SAVEPART" | tr -s " " | cut -f 3 -d " "`"
 [ "$SMNTPT" = "" ] && SMNTPT="`_command ps -e | grep -o 'ntfs\-3g.*' | grep "/dev/$SAVEPART" | tr '\t' ' ' | tr -s ' ' | tr ' ' "\n" | grep '^/mnt/'`"
#echo LINE 116  ###DBG
 if [ "$SMNTPT" = "" ];then
  #v2.02 was mntg on /tmp/savepup, but if error and not unmounted, contents
  #of /tmp gets deleted, wiping entire partition!!!
  mkdir -p /mnt/$SAVEPART                        #/tmp/savepup
  mount -t $SAVEFS /dev/$SAVEPART /mnt/$SAVEPART #/tmp/savepup
  SMNTPT="/mnt/$SAVEPART" #"/tmp/savepup"
 fi
#echo LINE 193 124  ###DBG
 #v2.15 after forum discussion, trying this. if SAVEFS is ext3 or reiserfs (journalled f.s.)
 # then make our ${DISTRO_FILE_PREFIX}save also an ext3 f.s...
 #v2.16exp3 now have writable compressed ext2, not work ext3, so always use ext2...
 #v2.16exp4 no, e2compr unreliable. only seems to work for usbflash, so allow ext3...
 #v2.17 quick hack, kirk reported if save-part is ext3 then save-file has ex3 while
 # still named ${DISTRO_FILE_PREFIX}save.2fs. so for now keep it all consistent ext2, comment-out...
 #SFEXT="3fs"
 #if [ "`echo -n "$SAVEFS" | grep --extended-regexp 'ext3|reiserfs'`" = "" ];then
  SAVEFILE="`echo -n "$SAVEFILE" | sed -e 's/3fs$/2fs/g'`"
  SFEXT="2fs"
  PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
 #fi
 NAMEONLY="`basename $SAVEFILE`"
#echo LINE 207 138  ###DBG
 #v2.21 customise the name of the ${DISTRO_FILE_PREFIX}save file...
 MYUSERNAME="`dialog --stdout --nocancel --inputbox "Would you like to customise the name
of the '${DISTRO_FILE_PREFIX}save.${SFEXT}' file?
This is optional, but it is convenient
if you have lots of '${DISTRO_FILE_PREFIX}save' files
and you want to choose the right one
at startup. For example, if you enter
'john' here, the file will become
'${DISTRO_FILE_PREFIX}save-john.${SFEXT}'.
Type any characters you wish,
then press ENTER key:" 0 0 ""`"
 if [ "$MYUSERNAME" != "" ];then
  MYUSERNAME="`echo -n "$MYUSERNAME" | tr ' ' '_' | tr '-' '_' | sed -e 's/[^a-zA-Z0-9_]//g'`"
  NAMEONLY="${DISTRO_FILE_PREFIX}save-${MYUSERNAME}.${SFEXT}"
  SAVEFILE="$PSUBDIR/$NAMEONLY"
  PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
 fi
#echo LINE 225 156  ###DBG
 CRYPTO=""
 dialog --extra-button --ok-label "NORMAL (no encryp.)" --cancel-label "Heavy encrypted" --extra-label "Light encrypted" --yesno "Do you want to encrypt the $NAMEONLY file?
If the '${DISTRO_FILE_PREFIX}save' is encrypted, then a password will have to be entered
at every bootup. The reason for doing this is security, as noone else
will be able to see what is inside the ${DISTRO_FILE_PREFIX}save. Encryption does slow
${DISTRO_NAME} down slightly, the 'heavy' encryption the most. Two scenarios:

1. If the ${DISTRO_FILE_PREFIX}save file is on a Flash drive, encryption is protection
   in case the drive is mislaid. Heavy encryption is recommended, as
   ${DISTRO_NAME} minimises writes to the save file (to prolong life of the
   Flash drive, but this also minimises encryption slowdown).
2. If the ${DISTRO_FILE_PREFIX}save file is on a hard drive, 'light' encryption is
   recommended to minimise slowdown, particularly on older PCs.

Encrypted ${DISTRO_FILE_PREFIX}save files have another advantage, they allow multiple
users. Recommended if spouse and kids are going to be using the same
${DISTRO_NAME} installation.

Unless you have a good reason to use encryption, it is recommended not
to, to avoid the overhead. Recommend choose <NORMAL>..." 0 0 >/dev/console
 RETVAL=$?
 if [ $RETVAL -eq 1 -o $RETVAL -eq 3 ];then
  while [ 1 ];do
  MYPASSWORD="`dialog --stdout --insecure --nocancel --passwordbox "Please choose a password.
This must be remembered and
entered at every bootup." 0 0`"
   [ "$MYPASSWORD" ] && break
  done
  modprobe cryptoloop
  if [ $RETVAL -eq 1 ];then
   DENSITY="a" #heavy aes encryption
   CRYPTO='-e aes'
   modprobe aes_generic #v407 aes name change.
   #v407 did not explicitly load these two before, but do so in init script...
   modprobe crypto_blkcipher #v407 blkcipher name change.
   modprobe cbc
  else
   DENSITY="x" #light xor encryption.
   CRYPTO='-E 1' #v2.16final '-e xor' --bug, loads xor.ko which is something else.
  fi
  if [ "$MYUSERNAME" != "" ];then
   NAMEONLY="${DISTRO_FILE_PREFIX}save_crypt${DENSITY}-${MYUSERNAME}.${SFEXT}"
  else
   NAMEONLY="${DISTRO_FILE_PREFIX}save_crypt${DENSITY}.${SFEXT}"
  fi
  SAVEFILE="$PSUBDIR/$NAMEONLY"
  PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
 fi
 MNAMEONLY="`basename $SAVEFILE .${SFEXT}`"
#echo LINE 206  ###DBG
 #fitzhugh found this problem...
 #v2.10 Dougal provided code to save with different name...
 if [ -f $SMNTPT$SAVEFILE ]; then
  dialog --yes-label "SAVE" --yesno "
There already exists a ${NAMEONLY} file on the partition you
chose. To create another one, with a slightly different name
(such as ${MNAMEONLY}-1.${SFEXT}), select <SAVE>...
To quit without saving, select <No>..." 0 0 >/dev/console
  [ ! $? -eq 0 ] && return 1
  local BLA=1 #; local SFFIX=`echo "$SAVEFILE" | tail -c 5`
  while [ -f $SMNTPT$SAVEFILE ]; do
   SAVEFILE="$PSUBDIR/${MNAMEONLY}-${BLA}.${SFEXT}"
   BLA=`expr $BLA + 1`
  done
  PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
  NAMEONLY="`basename $SAVEFILE`"
 fi
#echo LINE 293 224  ###DBG
 #we should check to see that there is enough space on the partition...
 PARTFREE=`df | grep "$SMNTPT" | tr -s " " | head -n 1 | cut -f 4 -d " "`
 [ ! $PARTFREE ] && PARTFREE=0
 [ $PARTFREE -lt 32768 ] && PARTFREE=`expr $PARTFREE - 1024` #leave some slack space.
 [ $PARTFREE -gt 32768 ] && PARTFREE=`expr $PARTFREE - 8192` #leave some slack space.
 SIZEPFILE=524288 #512M = 524288K
 [ $SIZEPFILE -gt  $PARTFREE ] && SIZEPFILE=$PARTFREE
 #v2.02 dougal has code to choose size of save file...
 [ $PARTFREE -gt 32768 ] && choosesizefunc $PARTFREE #sets SIZEPFILE
 if [ ! "`echo -n $SAVEFILE | grep '\.3fs'`" = "" ];then #ext3 f.s. needs minimum size.
  [ $SIZEPFILE -lt 5000 ] && return 1 #precaution. rerwin discovered this.
 fi
#echo LINE 306 237  ###DBG
 #v2.20
 SAVEPATH="`dirname $SAVEFILE`"
 if [ ! -d ${SMNTPT}${SAVEPATH} ];then
  SAVEFILE="/$NAMEONLY"
  PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
  SAVEPATH="/"
 fi
#echo LINE 314 245  ###DBG
 #v2.02,v2.13 final sanity check...
 AAAFS="ext3"
 [ "$SFEXT" = "2fs" ] && AAAFS="ext2"
 AAAMB=`expr $SIZEPFILE \/ 1024`
 while [ 1 ];do
  dialog --colors --no-collapse --extra-button --ok-label "YES, SAVE"  --extra-label "CHANGE FOLDER" --cancel-label "DO NOT SAVE" --yesno "\Z1FINAL SANITY CHECK:
 Partition you are saving to:      $SAVEPART
 The filesystem of $SAVEPART partition: $SAVEFS
 Name of the save file:            $NAMEONLY
 Path (folder) of the save file:   $SAVEPATH
 Size of save file:                ${SIZEPFILE}KB (${AAAMB}MB)
 Filesystem inside save file:      $AAAFS

 If they definitely look right, choose <YES, SAVE>...
 Looks ok, but you want to change the folder, <CHANGE FOLDER>...
 If anything looks wrong, choose <DO NOT SAVE>...\Zn" 0 0 >/dev/console
  SANITYRET=$?
  [ $SANITYRET -ne 0 -a $SANITYRET -ne 3 ] && return 1
  [ $SANITYRET -eq 0 ] && break
  if [ $SANITYRET -eq 3 ];then #change folder.
   NEWSAVEPATH="`dialog --stdout --no-cancel --inputbox "Edit path. '/' means top-level of partition. You are only allowed to save one-deep, for example: '/puppy300'. If folder does not exist, it will be created. Spaces are not allowed. If uncertain, just press the ENTER key." 0 0 "$SAVEPATH"`"
   [ "$NEWSAVEPATH" = "" ] && NEWSAVEPATH="$SAVEPATH"
   [ "`echo -n "$NEWSAVEPATH" | cut -b 1`" != "/" ] && NEWSAVEPATH="/${NEWSAVEPATH}"
   [ "$NEWSAVEPATH" != "/" ] && NEWSAVEPATH="`echo -n "$NEWSAVEPATH" | sed -e 's%/$%%'`"
   NEWSAVEPATH="`echo -n "$NEWSAVEPATH" | sed -e 's/ //g'`"
   SAVEPATH="$NEWSAVEPATH"
   SAVEPATHs="$SAVEPATH"
   [ "$SAVEPATH" != "/" ] && SAVEPATHs="${SAVEPATH}/"
   SAVEFILE="${SAVEPATHs}${NAMEONLY}"
   PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
  fi
 done
 [ -f ${SMNTPT}${SAVEPATH} ] && return 1 #abort. must be a directory.
 [ -d ${SMNTPT}${SAVEPATH} ] || mkdir ${SMNTPT}${SAVEPATH}
 [ -d ${SMNTPT}${SAVEPATH} ] || return 1 #some kind of error, abort.

 JOPT=""
 [ "$SAVEPART" = "fd0" ] && SIZEPFILE=`expr $SIZEPFILE - 16`
 [ "$SFEXT" = "3fs" ] && JOPT='-j'
 echo "Creating $NAMEONLY in /dev/$SAVEPART, please wait awhile..." >/dev/console
 dd if=/dev/zero of=${SMNTPT}$SAVEFILE bs=1k count=$SIZEPFILE
 pidof sync || sync
 echo "Creating a $AAAFS filesystem in $NAMEONLY..." >/dev/console
 if [ "$CRYPTO" = "" ];then
  mke2fs -q $JOPT -m 0 -F ${SMNTPT}$SAVEFILE
  #...default is f.s. auto checked every 26 mounts or 180 days. tune2fs to change.
 else
  #note: loop2 is kept available for scripts to use. but, find which is free...
  DEVLOOP="`losetup-FULL -f`"
  [ "$DEVLOOP" = "" ] && return 1
  #'-p 0' means read password from stdin...
  #v2.17 crap, '-p 0' works for aes, not for xor encryption....
  if [ "$CRYPTO" = '-E 1' ];then #light xor encr.
   echo "Note, a bug in one of the Linux utility programs requires you to reenter" >/dev/console
   echo "the password in the case of light encryption..." >/dev/console
  fi
  echo "$MYPASSWORD" | losetup-FULL -p 0 $CRYPTO $DEVLOOP ${SMNTPT}$SAVEFILE >/dev/console
  [ ! $? -eq 0 ] && return 1
  mke2fs -q $JOPT -m 0 $DEVLOOP #REMOVEDv3.98 added '-O none', fix mntg fail at boot.
  pidof sync || sync
  losetup -d $DEVLOOP
 fi
 pidof sync || sync
 return 0
} #end pupsavefunc

_choose_save_partition()
{
 #dialog to choose what partition to create ${DISTRO_FILE_PREFIX}save.2fs on...
 [ ! "$PMEDIA" ] && PCHOOSE="yes"
 [ "$PMEDIA" = "cd" ] && PCHOOSE="yes"
 [ "$PMEDIA" = "scsicd" ] && PCHOOSE="yes"
 [ "$PMEDIA" = "satacd" ] && PCHOOSE="yes"
 [ "$PMEDIA" = "idecd" ] && PCHOOSE="yes"
 [ "$PMEDIA" = "atacd" ] && PCHOOSE="yes" #v3.97
 [ "$PMEDIA" = "usbcd" ] && PCHOOSE="yes"
 [ "$DEV1FS" = "ntfs" ] && PCHOOSE="yes"
 [ "$DEV1FS" = "msdos" ] && DEV1FS="vfat" #v2.14
 [ "$DEV1FS" = "xxx" ] && PCHOOSE="yes" #v2.16.1

 if [ "$PSAVEMARK" != "" ];then #v3.97 see /etc/rc.d/PUPSTATE
  devnameonly="`echo -n "$PDEV1" | sed -e 's/[0-9]*$//'`"
  SAVEPART="${devnameonly}${PSAVEMARK}" #partition that will-have ${DISTRO_FILE_PREFIX}save.
  spPATTERN='/dev/'"$SAVEPART"'|'
  SAVEFS="`probepart -m | grep "$spPATTERN" | cut -f 2 -d '|'`"
  SAVEFILE="$PSUBDIR/${DISTRO_FILE_PREFIX}save.2fs"
  PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
  test "$devnameonly" -a "$SAVEFS" && return 0
 fi

 if [ "$PCHOOSE" != "yes" ];then
  SAVEFS="$DEV1FS"
  SAVEPART="$PDEV1"
  SAVEFILE="$PSUBDIR/${DISTRO_FILE_PREFIX}save.2fs" #v2.13 was .3fs
  PUPSAVE="$PDEV1,$DEV1FS,$SAVEFILE" #v2.13 was .3fs
  test "$PDEV1" -a "$DEV1FS" && return 0
 fi

 if [ ! "`lsmod | grep '^usb'`" = "" ];then
  FDMSG1="NOTE: cannot save to floppy disk on this PC, USB allowed."
 else
  FDMSG1="NOTE: no USB interface this PC, but can save to floppy disk."
 fi

 dialog --colors --msgbox "\Z1WARNING: If you want to create a save-file (${DISTRO_FILE_PREFIX}save.2fs) in a NTFS
partition (Windows XP), it is strongly recommended that you defragment
the partition first. Press ESC key to abort this save, start Windows
and choose Start->All Programs->Accessories->System Tools->Defragment.\Zn

\Z5Make sure any required USB, floppy, etc. is PLUGGED IN NOW!
$FDMSG1\Zn
Press ENTER key to continue..." 0 0 >/dev/console
 [ ! $? -eq 0 ] && return 1 #v2.02 abort.
 #v2.14 change msdos to vfat...
 PARTSLIST="`probepart -m 2> /dev/null | grep '^/dev/' | grep --extended-regexp 'ext2|ext3|reiserfs|msdos|vfat|minix|ntfs' | cut -f 1-3 -d '|' | sed -e 's/msdos/vfat/g'`"

 #only support save session to floppy if pc is non-usb...
 if [ "`lsmod | grep '^usb_storage'`" = "" ];then #k2.6 note the underscore.
  #problem using dmesg here as it is a fifo buffer, stuff at bootup gets deleted
  #while puppy is being used, prior to shutdown... so, use /var/log/messages...
  if [ ! "`cat /var/log/messages | grep "Floppy drive" | grep "fd0"`" = "" ];then
   if [ ! "`disktype /dev/fd0 | grep 'file system' | grep '^FAT'`" = "" ];then
    if [ "$PARTSLIST" = "" ];then
     PARTSLIST="/dev/fd0|vfat|1.4" #v2.14 change msdos to vfat.
    else #v2.14 ditto...
     PARTSLIST="${PARTSLIST}
/dev/fd0|vfat|1.4"
    fi
   fi
  fi
 fi

 #v2.02 nothing to save to...
 if [ "$PARTSLIST" = "" ];then
  #clear
  echo "No suitable partitions to save to." >/dev/console
  sleep 5
  return 1
 fi

 SCHOICES=""
 rm -f /tmp/schoices.txt
 DEFTAG=""
 echo "$PARTSLIST" |
 while read APART
 do
  ATAG="`echo -n "$APART" | cut -f 1 -d '|' | cut -f 3 -d '/'`"
  ASIZE="`echo -n "$APART" | cut -f 3 -d '|'`"
  AFS="`echo -n "$APART" | cut -f 2 -d '|'`"
  AFREE="`df -m | grep "/dev/$ATAG" | tr -s " " | cut -f 4 -d " "`"
  if [ ! "$AFREE" ];then
   mount -t $AFS /dev/$ATAG /mnt/data > /dev/null 2>&1
   #v2.10 need to put in a check that it is not mounted ro. the
   #mount script will fallback to ro for ntfs if rw mnt fails...
   RETMNTVAL=$?
   if [ $RETMNTVAL -eq 0 ];then
    if [ "`mount | grep '(rw' | grep '/mnt/data'`" = "" ];then
     umount /mnt/data
     RETMNTVAL=1
    else
     #v2.12 if the ntfs rw mount was forced (see /bin/mount script) it is unwise to use...
     ERRMSG1=""
     [ -s /tmp/ntfsmnterr.txt ] && ERRMSG1="`cat /tmp/ntfsmnterr.txt | grep 'Dirty volume mount'`"
     if [ ! "$ERRMSG1" = "" ];then
      dialog --colors --msgbox "\Z1WARNING:
The ntfs-3g driver has determined that the NTFS filesystem
in partition /dev/$ATAG is 'dirty'. It will display in the
next dialog box in the list of partitions to save to, but
it is recommended that you do not use it. Instead, you should
first run Windows -- most often this problem is due to Windows
not being shut down properly the last time it was used, leaving
the filesystem in a 'dirty' state.
\Zn
Press ENTER key to continue..." 0 0 >/dev/console
     fi
    fi
   fi
   [ -f /tmp/ntfsmnterr.txt ] && rm -f /tmp/ntfsmnterr.txt
   if [ $RETMNTVAL -eq 0 ];then
    if [ "$ATAG" = "fd0" ];then
     FFREE=`df -k | grep "/dev/$ATAG" | tr -s " " | cut -f 4 -d " "`
     AFREE="`dc $FFREE 1000 \/ p`"
    else
     #v2.02 for ntfs cannot use /dev/$ATAG, use mnt point in grep...
     AFREE="`df -m | grep "/mnt/data" | tr -s " " | cut -f 4 -d " "`"
    fi
    #umount /dev/$ATAG  v2.02 must use mnt point for ntfs...
    umount /mnt/data
   fi
  fi
  [ "$ATAG" = "$PDEV1" ] && DEFTAG=" --default-item $ATAG" #v2.13
  [ ! "$AFREE" = "0" ] && echo "${ATAG} \"Filesystem: $AFS  Size: ${ASIZE}M  Free: ${AFREE}M\" \\" >> /tmp/schoices.txt
 done

 SCHOICES="`cat /tmp/schoices.txt 2>/dev/null`"
 if [ "$SCHOICES" = "" ];then
  #clear
  echo "No suitable partitions to save to." >/dev/console
  sleep 5
  return 1
 fi

 echo '#!/bin/sh' > /tmp/savedlg
 echo -n 'dialog --no-collapse --no-cancel ${DEFTAG} --menu "Please choose a partition to create a pup_save.2fs file on.
It can be any of the partitions listed. It is recommended that you
choose a partition with over 512M free, but Puppy can create a
smaller save file if there is less space. The file will contain a
Linux ext2 filesystem.

Note, next time Puppy boots, this file, with all saved personal data,
will be automatically loaded.

UP/DOWN ARROW keys to highlight desired choice, then press ENTER key..." 0 0 0 ' >> /tmp/savedlg
 echo "$SCHOICES"  >> /tmp/savedlg
 echo ' 2>/tmp/tag.txt' >> /tmp/savedlg
 chmod 755 /tmp/savedlg

 #seems some people have problem, do not select anything...
 while [ 1 ];do
  /tmp/savedlg >/dev/console
  SAVEPART="`cat /tmp/tag.txt | head -n 1`" #head is in case of errs in output.
  if [ "`echo -n "$SAVEPART" | grep --extended-regexp '^hd|^sd|^sc|^fd'`" = "" ];then
   dialog --colors --msgbox "\Zb\Z1ERROR: you did not choose any partition.
   Press ENTER key to try again...
   Press ESC key to shutdown without saving...\Zn" 0 0 >/dev/console
   [ ! $? -eq 0 ] && return 1 #v2.02 abort.
   continue
  fi
  break
 done

 SAVEFS="`echo "$SCHOICES" | grep "^${SAVEPART} " | tr -s " " | cut -f 2 -d ':' | cut -f 2 -d " "`"
 SAVEFILE="$PSUBDIR/${DISTRO_FILE_PREFIX}save.2fs"  #v2.13 was .3fs
 [ "$SAVEPART" = "fd0" ] && SAVEFILE="/${DISTRO_FILE_PREFIX}save.2fs"
 PUPSAVE="$SAVEPART,$SAVEFS,$SAVEFILE"
 return 0
} #end choosepartfunc

_pupmode5()
{
#first time booted puppy, there may not have been any persistent storage.
if [ $PUPMODE -eq 5 ];then #ifpupmode5
 #v2.16.1 pxe boot, humongous initrd, have PDEV1='' DEV1FS=''...

 #3.97...
 xDEVFS="$DEV1FS"
 xPDEV="$PDEV1"
 if [ "$PSAVEMARK" != "" -a "$PDEV1" != "" ];then #v3.97 see /etc/rc.d/PUPSTATE
  devnameonly="`echo -n "$PDEV1" | sed -e 's/[0-9]*$//'`"
  SAVEPART="${devnameonly}${PSAVEMARK}" #partition that will-have ${DISTRO_FILE_PREFIX}save.
  spPATTERN='/dev/'"$SAVEPART"'|'
  SAVEFS="`probepart -m | grep "$spPATTERN" | cut -f 2 -d '|'`"
  xDEVFS="$SAVEFS"
  xPDEV="$SAVEPART"
 fi

 [ ! "$DEV1FS" ] && DEV1FS='xxx' #this will enable choice of create a save-file.
  #if it is a linux partition, can offer to save to PDEV1 or create a ${DISTRO_FILE_PREFIX}save.2fs file...
  #if vfat, create a ${DISTRO_FILE_PREFIX}save.2fs file...
  if [ "`echo -n "$xDEVFS" | grep --extended-regexp "ext2|ext3|reiserfs|minix"`" != "" ];then
   dialog --extra-button --ok-label "SAVE TO A FILE"  --extra-label "SAVE TO ${xPDEV}" --cancel-label "DO NOT SAVE" --yesno "You can now choose to save the personal session files to file, named ${DISTRO_FILE_PREFIX}save.2fs. Or, if $xPDEV partition is not being used by anything else (no other operating system) then you can choose to save the session files direct to the partition. Either way, your choice will be remembered at next bootup.

Which to choose? Partition: you immediately get the entire partition available for saving. File: having everything in a single file is convenient for archiving, but the file cannot be made bigger than 4GB (even if partition has more free space). If in doubt, just press ENTER to accept the default.

Select <SAVE TO A FILE> (just press ENTER key) to create a ${DISTRO_FILE_PREFIX}save.2fs file, select <SAVE TO ${PDEV1}> (TAB then ENTER) to save direct to partition, or <DO NOT SAVE> to shutdown with saving session..." 0 0 >/dev/console
   SAVECHOICE=$?
   if [ "$SAVECHOICE" = "0" ];then
    _choose_save_partition && { _mk_pupsave && PUPMODE=128 || return 1; } || return 1 #v2.02 128=yes, save it.
   else
    #dialog --yes-label "SAVE_TO_${PDEV1}" --no-label "QUIT" --yesno "Press ENTER key to save session files direct to $PDEV1 partition, else press TAB then ENTER to not save session..." 0 0
    #[ $? -eq 0 ] && PUPMODE=32
    [ "$SAVECHOICE" = "3" ] && PUPMODE=32 #v2.13 3=save to partition.
   fi
  fi
  #handle other f.s. types...
  case $xDEVFS in
   vfat|msdos|ntfs|xxx) #v2.02 ntfs allowed. v2.16.1
    dialog --yes-label "SAVE" --yesno "You can save the session (all of your personal data and settings) to a file, named ${DISTRO_FILE_PREFIX}save.2fs (that has a ext2 filesystem inside it). Note, your answer to this question will be remembered at next boot.

Do you want to create a ${DISTRO_FILE_PREFIX}save.2fs file?

Select <SAVE> (just press ENTER key) to create ${DISTRO_FILE_PREFIX}save.2fs and save to it, or select <No> (TAB then ENTER) to not save session..." 0 0 >/dev/console
    SAVECHOICE=$?
    if [ "$SAVECHOICE" = "0" ];then
     _choose_save_partition && { _mk_pupsave && PUPMODE=128 || return 1; } || return 1 #v2.02 128=yes, save it.
    fi
    ;;
#   ntfs) #v2.02 see above case.
#    dialog --yes-label "SAVE" --yesno "Partition $PDEV1 that ${DISTRO_NAME} booted off, is a ntfs filesystem, and ${DISTRO_NAME} can only save a session to it if there is a pre-existing ${DISTRO_FILE_PREFIX}save.3fs file. Alternatively, you can save to a different partition, including USB Flash drive, Zip drive, floppy disk, or any non-ntfs hard drive partition.
#
#Do you want to create a ${DISTRO_FILE_PREFIX}save.3fs file on a non-NTFS partition?
#
#Select <SAVE> (just press ENTER key) to chose where to save the session, else select <No> (TAB then ENTER) to not save session..." 0 0
#    SAVECHOICE=$?
#    if [ "$SAVECHOICE" = "0" ];then
#     choosepartfunc && pupsavefunc && PUPMODE=128 #v2.02 yes, save it.
#    fi
#    ;;
   iso9660)
    dialog --extra-button --ok-label "SAVE TO FILE"  --extra-label "SAVE TO CD" --cancel-label "DO NOT SAVE" --yesno "You have booted off a live-CD or DVD, and you can now save your personal settings and files to a USB Flash drive, Zip drive, floppy disk, or any hard drive partition (including NTFS). The session will be saved as a single file, named ${DISTRO_FILE_PREFIX}save.2fs, which has a ext2 filesystem inside it.

However, if you have burnt the CD/DVD as multisession (not closed), then sessions can be saved as additional tracks to the CD/DVD -- each saved session will appear on the CD/DVD as a directory with all the saved files in it, not as a single file. THIS IS STILL EXPERIMENTAL

Select <SAVE TO FILE> (just press ENTER key) to choose a partition to save the session as file ${DISTRO_FILE_PREFIX}save.2fs...
Select <SAVE TO CD> (TAB then ENTER) to save session to CD/DVD (multisession) (EXPERIMENTAL)...
Select <DO NOT SAVE> to shutdown without saving session..." 0 0 >/dev/console
    SAVECHOICE=$?
    if [ "$SAVECHOICE" = "0" ];then
     _choose_save_partition && { _mk_pupsave && PUPMODE=128 || return 1; } || return 1 #v2.02 yes, save it.
    else
     #dialog --no-label "NO_SAVE" --yes-label "SAVE_TO_CD" --yesno "Press ENTER key to save session back to multisession CD/DVD (the iso must have been burnt to CD/DVD in multisession mode), else press TAB then ENTER keys to shut down without saving session..." 0 0
     if [ "$SAVECHOICE" = "3" ];then #v2.13 3=save session to cd.
      PUPMODE=77
      SAVEPART="$PDEV1"
     else
      echo "Shutting down without saving..." >/dev/console
     fi
    fi
    ;;
  esac
fi #end if PUPMODE 5
}

_mk_swapfile()
{
 localSMNTPT="$1"
 localSAVEPART="$2"

 TOTALSWAP=`LC_NUMERIC=C free | grep -o 'Swap:.*' | tr -s ' ' | cut -f 3 -d ' '`
 [ $TOTALSWAP -eq 0 ] | return 0

 TOTALRAM=`LC_NUMERIC=C free | grep -o 'Mem:.*' | tr -s ' ' | cut -f 3 -d ' '`
 [ $TOTALRAM -lt 1048576 ] || return 0 #was 128000, bump up 256MB, bunp up 1GB.

 [ -f ${localSMNTPT}/pupswap.swp ] || return 0
 [ "$FASTPARTS" ] || return 0 #see /etc/rc.d/PUPSTATE

     spPATTERN="$localSAVEPART"'|'
     if [ "`echo "$FASTPARTS" | grep "$spPATTERN"`" != "" ];then
      smPATTERN=' '"$localSMNTPT"'$'
      FREESAVEM=`LC_NUMERIC=C df -m | grep "$smPATTERN" | tr -s ' ' | cut -f 4 -d ' '`
      FREESAVEM="${FREESAVEM//[[:alpha:][:punct:][:blank:]]/}"
      [ "$FREESAVEM" ] || FREESAVEM=0

      SWPSIZE=""
      LC_NUMERIC=C SWPSIZE=`echo "scale=0;$FREESAVEM / 1.048" | bc -l`
      SWPSIZE=$(((SWPSIZE/10)*10))
      [ $SWPSIZE -gt 1000 ] && SWPSIZE="1000"

      if [ "$SWPSIZE" ];then
       echo  >/dev/console
       echo "A swapfile named 'pupswap.swp' is being created in partition ${localSAVEPART}," >/dev/console
       echo "of size ${SWPSIZE}MB. This will be loaded at next boot, to ease the low-RAM" >/dev/console
       echo "situation of your PC. Creating now..." >/dev/console
       dd if=/dev/zero of=${localSMNTPT}/pupswap.swp bs=1048576 count=$SWPSIZE
       if [ $? -eq 0 ];then
        pidof sync || sync
        mkswap ${localSMNTPT}/pupswap.swp
       fi
       if [ $? -ne 0 ];then
        rm -f ${localSMNTPT}/pupswap.swp 2>/dev/null
        echo "...error, unable to create swapfile." >/dev/console
       fi
       pidof sync || sync
      fi
     fi
} #end swapfile_func

_save_session()
{
#save session...
case $PUPMODE in
 5) #v2.02 first boot. Saving session not chosen.
  echo "Session not saved" >/dev/console
  pidof sync || sync
  #ha ha, before had this, if aborted save after choosing save-partition, code
  #further down wiped all of the partition (it was mntd on /tmp/savepup)...
  [ ! "$SMNTPT" = "" ] && umount $SMNTPT 2>/dev/null
  #...well, fixed it, changed mntpt so not in /tmp. Leave above line here.
  ;;
 32) #first shutdown, save back to PDEV1. v3.97: xPDEV
  DEV1MNT="`mount | grep "/dev/$xPDEV" | tr -s " " | cut -f 3 -d " "`"
  if [ "$DEV1MNT" = "" ];then
   mkdir -p /mnt/$xPDEV
   mount -t $xDEVFS /dev/$xPDEV /mnt/$xPDEV
   if [ ! $? -eq 0 ];then
    echo "ERROR: unable to mount /dev/$xPDEV, cannot save." >/dev/console
    exit
   fi
   DEV1MNT="/mnt/$xPDEV"
  fi
  RDIRS="`find /initrd/pup_rw/ -maxdepth 1 -xdev -type d | grep -v "/$" |grep -v "/mnt"|grep -v "/tmp"|grep -v "/proc"|grep -v "/sys"|grep -v "/var"|grep -v "/dev" | grep -v "/lost" |tr "\n" " "`"
  for ONEDIR in $RDIRS
  do
   cp -a $ONEDIR ${DEV1MNT}/
  done
  #DISTRO_SPECS must be saved, init script looks for it to determine if
  #there is a saved session...
  cp -af /etc/DISTRO_SPECS ${DEV1MNT}/etc/
  pidof sync || sync

  #w481 if low-ram, save-file is on a fast media, and no swap file/partition, then create one...
  #swapfile_func $DEV1MNT $xPDEV
  _mk_swapfile $DEV1MNT $xPDEV
  umount $DEV1MNT
  ;;
 128) #1st shutdown, save to ${DISTRO_FILE_PREFIX}save.2fs.
  #partition already mounted on $SMNTPT.
  echo "Saving session to $SAVEFILE file on $SAVEPART partition..." >/dev/console
  mkdir /tmp/save1stpup
  echo -n "Mounting ${SAVEFILE}..."
  FILEFS="ext3"
  [ ! "`echo -n "$SAVEFILE" | grep "2fs"`" = "" ] && FILEFS="ext2"

  if [ "$CRYPTO" = "" ];then
   mount -t $FILEFS -o noatime,rw,loop $SMNTPT$SAVEFILE /tmp/save1stpup
  else
   #note: loop2 is kept available for scripts to use. but, do this to find free one...
   DEVLOOP="`losetup-FULL -f`"
   #'-p 0' means read password from stdin...
   #v2.17 crap, '-p 0' works for aes, not for xor encryption....
   if [ "$CRYPTO" = '-E 1' ];then #light xor encr.
    echo "Note, a bug in one of the Linux utility programs requires you to reenter" >/dev/console
    echo "the password in the case of light encryption..." >/dev/console
   fi
   echo "$MYPASSWORD" | losetup-FULL -p 0 $CRYPTO $DEVLOOP ${SMNTPT}$SAVEFILE >/dev/console
   [ ! $? -eq 0 ] && exit 1
   mount -t $FILEFS -o noatime,rw $DEVLOOP /tmp/save1stpup
  fi

  #floppy disk has little space. snapmergepuppy handles this for subsequent saves, but for now,
  #be radical, only save /etc...
  if [ "$SAVEPART" = "fd0" ];then
   RDIRS="/initrd/pup_rw/etc"
  else
   RDIRS="`find /initrd/pup_rw/ -maxdepth 1 -xdev -type d | grep -v "/$" | grep -v "/mnt"| grep -v "/tmp"|grep -v "/proc"|grep -v "/sys"| grep -v "/var"| grep -v "/dev" | grep -v "/lost" | tr "\n" " "`"
  fi
  for ONEDIR in $RDIRS
  do
   BASENAME="`basename $ONEDIR`" #v2.16exp3
   mkdir -p /tmp/save1stpup/${BASENAME} #v2.16exp3 likely already created above.
   cp -a $ONEDIR/* /tmp/save1stpup/${BASENAME}/ #v2.16exp3
   [ "$BASENAME" = "root" ] && cp -a $ONEDIR/.[0-9a-zA-Z]* /tmp/save1stpup/${BASENAME}/ #v2.16exp4
  done
  pidof sync || sync
  umount /tmp/save1stpup

  #v2.20b offer to copy ${DISTRO_FILE_PREFIX}-xxx.sfs and ${ZDRVSFS} off the cd...
  if [ "$DEV1FS" = "iso9660" ];then #test if booted off cd.
   if [ ! -f ${SMNTPT}/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}*.sfs ];then
    NAMEONLY="`basename $SAVEFILE`"
    dialog --yesno "The CD has '${DISTRO_FILE_PREFIX}-$DISTRO_VERSION.sfs' and maybe other .sfs files on it.
It will speed startup considerably if these are on the hard drive.
Also, for PCs with less than 256MB of RAM, ${DISTRO_NAME} does not copy the
${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs file to RAM so the CD drive remains mounted,
meaning that the drive cannot be used for other purposes -- however,
if you reply 'YES' here then it will be copied to the same place
as the '${DISTRO_FILE_PREFIX}save' file and loaded from there at startup,
thus freeing the CD drive for other uses.
Even if you have heaps of RAM, it is still good to answer 'YES'
to get the faster startup.

Note: if a CD has extra .sfs files on it, by copying them to the
same place as the '${DISTRO_FILE_PREFIX}save' file, they are then available to
be loaded at startup, which is configurable by the BootManager
(the BootManager is in the System menu)

If you answer 'Yes' here, please FIRST, RIGHT NOW, put the ${DISTRO_NAME}
CD into the $PDEV1 drive (the same one that the CD was in at
startup), if it isn't already, THEN select the 'Yes' button..." 0 0 >/dev/console
    RETVAL=$?
    #clear >/dev/console
    if [ $RETVAL -eq 0 ];then
     echo "Please wait, accessing CD drive..." >/dev/console
     APATTERN="/dev/$PDEV1 "
     CDMNTPT="`mount | grep "$APATTERN" | cut -f 3 -d ' '`"
     mkdir -p /mnt/$PDEV1
     if [ "$CDMNTPT" = "" ];then
      mount -t iso9660 /dev/$PDEV1 /mnt/$PDEV1
      CDMNTPT="/mnt/$PDEV1"
     fi
     for ONESFS in `find $CDMNTPT -maxdepth 1 -type f -name \*.sfs | grep -v ' ' | tr '\n' ' '`
     do
      BASESFS="`basename $ONESFS`"
      FILESIZEB=`stat --format=%s $ONESFS`
      FILESIZEK=`expr $FILESIZEB \/ 1024 + 2048` #2MB slack.
      BPATTERN=" $SMNTPT"'$'
      DRVFREEK=`df -k | tr -s ' ' | grep "$BPATTERN" | cut -f 4 -d ' '`
      if [ $DRVFREEK -gt $FILESIZEK ];then
       echo "Copying $BASESFS..." >/dev/console
       cp -f $ONESFS $SMNTPT/
       pidof sync || sync
      else
       echo "Insufficient space! Cannot copy $BASESFS" >/dev/console
       break
      fi
     done
     busybox umount $CDMNTPT
    fi
   fi
  fi

  #w481 if low-ram, save-file is on a fast media, and no swap file/partition, then create one...
  #swapfile_func $SMNTPT $SAVEPART
  _mk_swapfile $DEV1MNT $xPDEV
  umount "$SMNTPT"
  ;;
 2)
  echo "$PDEV1 mounted directly, session already saved." >/dev/console
  ;;
 6)
  echo "$PDEV1 mounted directly top layer, session already saved." >/dev/console
  ;;
 12)
 echo "`basename $SAVEFILE` mounted directly top layer, session already saved." >/dev/console
  ;;
 3) #PDEV1.
   echo "Saving session to $PDEV1..." >/dev/console
   /usr/sbin/snapmergepuppy /initrd/pup_ro1 /initrd/pup_rw
  ;;
 7) #PDEV1 and PUPSFS.
   echo "Saving session to $PDEV1..." >/dev/console
   /usr/sbin/snapmergepuppy /initrd/pup_ro1 /initrd/pup_rw
  ;;
 13) #PDEV1 and PUPSFS and PUPSAVE
  #/initrd/pup_rw has tmpfs, pup_ro1 has ${DISTRO_FILE_PREFIX}save.2fs file (PUPSAVE), pup_ro2 has PUPSFS file.
  #the above are in unionfs at /.
  echo "Saving session to $SAVEFILE (${SAVEPART})..." >/dev/console
  /usr/sbin/snapmergepuppy /initrd/pup_ro1 /initrd/pup_rw
  ;;
 69) #save to folder on multisession CD/DVD (including 1st shutdown). (5+64=69) NOT used
  multisavefunc
  ;;
 77) #save to folder on multisession CD/DVD (including 1st shutdown). (13+64=77)
  multisavefunc
  ;;
 *)
  echo "Session not saved" >/dev/console
  sleep 2
  ;;
esac
}
