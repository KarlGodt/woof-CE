#!/bin/ash


########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.6-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.6-KRG-i486·#1·SMP·Sun·Jan·2·20:32:12·GMT-1·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Mon·Oct·24·22:44:33·CEST·2011
#
#
#
#
#
########################################################################

echo "Starting '$0' rc.launchxwin..."

export PATH=$PATH:/usr/X11/bin

. /etc/rc.d/PUPSTATE
. /etc/profile
. /etc/rc.d/f4puppy5

[ "`grep -i 'nox' /proc/cmdline`" ] && exit 0

if [ ! -L /usr/bin/X ];then
#v2.00r1 now support a text-mode-only puppy...
 if [ -f /usr/local/bin/elinks ];then
   exec /usr/local/bin/elinks file:///usr/share/doc/index.html
 else #00.1.0
  echo
  echo -e "\\033[1;31m$0 : Sorry, cannot start X. Link /usr/bin/X missing."
  echo -n "(suggestion: type 'xorgwizard' to run the Xorg Video Wizard)"
  echo -e "\\033[0;39m"
 fi

else
echo "$0 : /usr/bin/X exists"

# REM: Problem now occurs when Xorg is new (1.7.+),
#      it needs kernel modesetting, otherwise fails to find devices
#      So if driver is loaded but did not manage the console,
#       try to reload the driver...
#      Note: Use bootmanager to enable loading it at boot with modeset=1 parameter
#       or add it manually to /etc/rc.d/MODULESCONFIG ADDLIST line
#      TODO: agpgart module handling, mouse nodes in /dev and drivers
# 2015-12-11 now set here before first xwin in case xwin calls xorgwizard
_say_xorg_version(){
_XORG_VERSION_=`Xorg -version 2>&1`

case $_XORG_VERSION_ in
#X.Org X Server 1.4.0.90
*X.Org*X*Server*)
VERSION=`echo "$_XORG_VERSION_" | grep '^X.Org X Server' | awk '{print $NF}'`
test  "$VERSION" || VERSION=UNKNOWN
echo "$VERSION"
;;
#X Window System Version 7.2.0
#X Window System Version 1.3.0
*X*Window*System*Version*)
VERSION=`echo "$_XORG_VERSION_" | grep '^X Window System Version' | awk '{print $NF}'`
test  "$VERSION" || VERSION=UNKNOWN
echo "$VERSION"
;;
*)
echo "Unhandled"
;;
esac
}

_old_or_new_xorg(){
case $* in
1.[5-9].*|1.[1-9][0-9].*)       return 0;;
[0-6].*|7.[0-2].*|1.3.*|1.4.*)  return 1;;
*) echo "UNHANDLED Xorg version '$*'"; return 2;;
esac
}

_do_modeset(){
    test "$*" || return 1
    case $* in UNKNOWN|NOKERNEL) return 0;; esac
    modprobe $VERB -r "$*"
    sleep 1
    grep $Q -w "^$*" /proc/modules && return 1
    /sbin/modprobe $Q $VERB "$*" modeset=1
    sleep 1
    grep $Q -w "^$*" /proc/modules
}

_define_driver(){
LSPCI_OUT=`/sbin/lspci`
#00:02.0 VGA compatible controller: Intel Corporation 82Q963/Q965 Integrated Graphics Controller (rev 02)
#00:02.1 Display controller: Intel Corporation 82Q963/Q965 Integrated Graphics Controller (rev 02)
case $LSPCI_OUT in
*VGA*compatible*controller:*Intel*Corporation*)
DRIVER=i915
;;
*VGA*compatible*controller*Matrox*Graphics,*Inc.*MGA*G400/G450*rev*85*)
echo MATROX card
DRIVER=NOKERNEL  #kernel/drivers/video/matrox/g450_pll.ko and a dozen matroxfb* with a huge amount of options, but no modeset option
;;
*PCI*bridge*Silicon*Integrated*Systems*SiS*SiS*AGP*Port*virtual*PCI-to-PCI*bridge*)
echo SiS chipset
DRIVER=UNKNOWN
;;
*)
echo UNKNOWN chipset
DRIVER=UNKNOWN
;;
esac
}

_check_if_loaded(){
    test -f /proc/modules || return 2
    test "$*" || return 2
    case $* in UNKNOWN|NOKERNEL) return 0;; esac
    grep $Q -w "^$*" /proc/modules
}

_check_if_in_use(){
    test -f /proc/modules || return 2
    test "$*" || return 2
    case $* in UNKNOWN|NOKERNEL) return 0;; esac
    read drv vms nr_users mod_users live addr <<EoI
`grep -w "^$*" /proc/modules`
EoI
test $nr_users = 0
}

main_modesetting(){
XORG_VERSION=`_say_xorg_version`
_old_or_new_xorg "$XORG_VERSION"
case $? in
0) _notice "main_modesetting:NEWer Xorg"
   _define_driver
   _check_if_loaded "$DRIVER"
    test $? = 0 && {
    _check_if_in_use "$DRIVER"
    test $? = 0 && { _do_modeset "$DRIVER"; MODESET_FAIL=$?; true; } || echo "$DRIVER already is in use"
MODESET_FAIL=0
true
} || { echo "$DRIVER not loaded"; _do_modeset "$DRIVER"; MODESET_FAIL=$?; true;  }

test "$MODESET_FAIL" && {
    test "$MODESET_FAIL" = 0 || exit 1
}

;;


1) _notice "main_modesetting:Older Xorg"  ;;
2) _warn "main_modesetting: UNKNOWN Xorg" ;;
esac
}
main_modesetting
# REM: End modesetting code


 #exec xwin &
 #xwin &
 #exec xwin
 xwin
 #echo "did xwin start ?" #DBG
 #DBGecho "did xwin start ?" >/dev/console #DBG

fi #00.0

##+++2013-10-22
[ "`pidof reboot`" ]   && exit 0
[ "`pidof poweroff`" ] && exit 0
/sbin/getty -n -l /bin/autologinroot 38400 tty1
##+++2013-10-22
