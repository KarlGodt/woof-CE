#!/bin/ash


########################################################################
#
#
#
#
#
# /dev/hda8:
# LABEL="MacPup431_O2"
# UUID="6d9a8e91-c301-4ff8-9875-97ec708cbee8"
# TYPE="ext3"
# DISTRO_NAME='Puppy'
# DISTRO_VERSION=431
# DISTRO_BINARY_COMPAT='puppy'
# DISTRO_FILE_PREFIX='pup'
# DISTRO_COMPAT_VERSION='4'
# PUPMODE=2
# KERNVER=2.6.30.9-i586-dpup005-Celeron2G
# PUP_HOME='/'
# SATADRIVES='·'
# USBDRIVES='·'
# Linux·puppypc·2.6.30.9-i586-dpup005-Celeron2G·#6·SMP·Sat·Jan·15·13:35:51·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Do·27.·Okt·22:45:37·GMT-1·2011
#
# TODO1 : add echo "`history`" >> .bash_history and close all terminals
#
#
#
########################################################################

PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin"

. /etc/rc.d/f4puppy5

[ -f /etc/rc.d/apm_power_off ] && . /etc/rc.d/apm_power_off
modprobe $Q $VERB -b button


###+++2012-01-17
currentCONSOLE=`tty`
_debug "currentCONSOLE='$currentCONSOLE'"

__some_code__(){
curr="$currentconsole"  #;c=0
if [ "$curr" != '/dev/tty1' ];then chvt 1;fi
cons=`grep -o '^tty[0-9]*' /etc/inittab`
CONS=`echo "$cons" | grep -o '[0-9]'`
maxcons=`echo $CONS|rev|sed 's/^[[:blank:]]*//'|cut -f 2-99 -d ' '|rev`
`ps -A -H -f | grep '\-sh'`
}

curr="${currentCONSOLE//\/dev\//}"
CONS=`/bin/ps -f -C sh |grep tty|grep -vw "$curr" |awk '{print $2}'`
for pid in $CONS;do
kill -1 $pid
sleep 1s;
pidof sync >>$OUT || sync
echo -n "killed '$pid' "
done

__some_code2__(){ #BEGIN
for con in $maxcons ; do c=$((con+1));chvt $c
#echo "`history|awk '{print $2}'`" >> .bash_history
#echo "`history|awk '{print $2}'`" >> .ash_history
echo -en "\r" >/dev/tty$c
echo -e "\n" >/dev/tty$c
echo -n `tty` >>/dev/tty$c
echo $c >>/dev/tty$c
echo >>/dev/tty$c
read -e -n1 -p "History Rescue, hit [2x] any key " k 1>/dev/tty$c 2>&1 </dev/tty$c
echo "`history|awk '{print $2}'`" >> .history
echo $k
echo $k >>/dev/tty$c
#history -w
history -a
sleep 1s;
echo >>/dev/tty$c
read -e -n1 -p "Console Switch, hit [2x] any key " l 1>/dev/tty$c 2>&1 </dev/tty$c
echo $l
echo $l >>/dev/tty$c
echo "Sleeping now 5 seconds....." >>/dev/tty$c
sleep 5s
[ "$c" -gt '2' ] && deallocvt $((c-1));
done
deallocvt $c
chvt 1
} ###__some_code2__(){ #END

__some_code3__(){
echo "`history|awk '{print $2}'`" >> .bash_history
echo "`history|awk '{print $2}'`" >> .ash_history
echo "`history|awk '{print $2}'`" >> .history
#history -w
}

_debugt
history -a
_debugt

which datum >>$OUT || datum(){ P="$1"; [ -z "$P" ] && P='s'; case $P in s) date +%Y_%m_%d ;; o) date +%d%b%Y ;; esac; }

test -f /.history && { cp $VERB /.history /root/my-documents/SHELL/.TOPhistory
mv $VERB /root/my-documents/SHELL/.TOPhistory /root/my-documents/SHELL/"dotTOPhistory`datum`"
}

test -f /.bash_history && { cp $VERB /.bash_history /root/my-documents/SHELL/.TOPbash_history
mv $VERB  /root/my-documents/SHELL/.TOPbash_history /root/my-documents/SHELL/"dotTOPbash_history`datum`"
}

test -f /.ash_history && { cp $VERB /.ash_history /root/my-documents/SHELL/.TOPash_history
mv $VERB /root/my-documents/SHELL/.TOPash_history /root/my-documents/SHELL/"dotTOPash_history`datum`"
}

test -f /root/.history && { cp $VERB /root/.history /root/my-documents/SHELL/
mv $VERB /root/my-documents/SHELL/.history /root/my-documents/SHELL/"DOThistory`datum`"
}

test -f /root/.bash_history && { cp $VERB /root/.bash_history /root/my-documents/SHELL/
mv $VERB /root/my-documents/SHELL/.bash_history /root/my-documents/SHELL/"DOTbash_history`datum`"
}

test -f /root/.ash_history && { cp $VERB /root/.ash_history /root/my-documents/SHELL/
mv $VERB /root/my-documents/SHELL/.ash_history /root/my-documents/SHELL/"DOTash_history`datum`"
}

_debugt

backupDIR="/root/my-documents/ROLLOUT"
[ -d "$backupDIR" ] || mkdir $VERB -p "$backupDIR"
KERNEL_RELEASE=`uname -r`
D=`date +%d%b%Y`
D=`date +%Y_%m_%d`
[ -d "$backupDIR/$KERNEL_RELEASE/$D" ] || mkdir $VERB -p "$backupDIR/$KERNEL_RELEASE/$D"

__old_backup_tmp_files__(){
cp $VERB -f /tmp/bootkernel* $backupDIR/$KERNEL_RELEASE/$D/
cp $VERB -f /tmp/bootsysinit* $backupDIR/$KERNEL_RELEASE/$D/
cp $VERB -f /tmp/xerrs* $backupDIR/$KERNEL_RELEASE/$D/
}

cp $VERB -f /var/log/messages $backupDIR/$KERNEL_RELEASE/$D/

test -f /etc/X11/xorg.conf && cp $VERB /etc/X11/xorg.conf $backupDIR/$KERNEL_RELEASE/$D/
_debugt

_make_dev_nodes_database() {
kv=`uname -r`
DDB=`find /dev -type c`
[ -d /var/db/boot ] || mkdir $VERB -p /var/db/boot
#[ -f /var/db/boot/dev_nodes.txt ] && rm /var/db/boot/dev_nodes.txt
#[ -f /var/db/boot/dev_nodes.lst ] && rm /var/db/boot/dev_nodes.lst

echo "$DDB" > /var/db/boot/dev_nodes.$kv.txt
for i in $DDB; do
LC_ALL=C ls -l $i >> /var/db/boot/dev_nodes.$kv.lst
done

if test ! -f /var/db/boot/dev.$kv.tar.gz; then
cp $VERB -ar /dev /tmp
tar $VERB -czf /tmp/dev.$kv.tar.gz /tmp/dev
mv $VERB /tmp/dev.$kv.tar.gz /var/db/boot/
rm $VERB -r /tmp/dev
fi

}
#mountpoint /dev || dev_nodes_db_func
grep $Q ' /dev ' /proc/mounts || _make_dev_nodes_database
_debugt

__private_unmount__(){
##private unmount##
LOOPM=`mount | grep 'loop' | grep -vE '/initrd| on / type | on "/" type ' | cut -f 4 -d '"' |tr ' ' '\`'`
echo "$LOOPM"
echo "----------"
for i in $LOOPM ; do
i=`echo "$i" |tr '\`' ' ' |sed 's|^"||;s|"$||'`
echo "Unmounting $i"
umount -r -d "$i"
mountDirs="$mountDirs $i"
done
sleep 2s
[ -d "$mountDirs" ] && rmdir $VERB $mountDirs

LOOPD=`mount | grep 'loop' | grep -vE '/initrd| on / type | on "/" type ' | cut -f 2 -d'"'` #cut -f 1 -d ' '`
echo "$LOOPD"
echo "-------------"
for i in $LOOPD ; do
echo "Unmounting $i"
umount -r -d "$i"
sleep 2s
done


RD=`rdev | cut -f 1 -d ' '`
#PARTD=`mount | grep 'ext[2-4]' | grep -v '^/dev/root' | cut -f 1 -d ' '`
#PARTS=`mount | grep 'ext[2-4]' | grep -v '^/dev/root' | cut -f 3 -d ' '`

PARTM=`mount | grep -E 'ext[2-4]|reiser|xfs|jfs|hfs|hsfs|vfat|ntfs' | grep -v -E '^/dev/root|/initrd| on / type | on "/" type' | cut -f 4 -d '"' |tr ' ' '\`'`

for i in $PARTM ; do
i=`echo "$i" |tr '\`' ' '`
echo "Unmounting $i"
umount -r "$i"
sleep 2s
done
##private unmount##
}


##fsckme part##

create_fsckme_func(){
DRVP=`rdev | cut -f 1 -d ' ' | sed 's%/dev/%%'`
FS=`mount | grep '^/dev/' | grep -Fw '/' | cut -f 5 -d ' '`
if [ -n "$DRVP" -a -n "$FS" ] ; then
echo "$DRVP"','"$FS"',' > /etc/.fsckme.flag
fi
}
#create_fsckme_func

delete_fsckme_func(){
#find / -maxdepth 3 -type f -iname "*fsckme*" -exec rm $VERB {} \;
find / -maxdepth 3 -type f -iname "*fsckme*" -delete
}
delete_fsckme_func

##fsckme part##

#/root/my-applications/bin/MkMissingDev.sh
