#!/bin/ash

[ "$HAVE_F4PUPPY5PRETTY" ] && return 0

# REM: some unuseful functions,
#      often duplicates with "human" readable output
#      "human" seems to mean "noobie" (new to computing or linux) user most of the times ...

# REM:

#advanced functions:
# simple functions with p postchar and or echo -n -e options as first parameter
_print_pretty(){
                # $1=LABEL ie ERROR, $2=Color for Label, $3=Color for EXE, $4 fg color for :, $5 bg color for :, $* MESSAGE
    if test "$PRETTY"; then
 echo -en "$3""$0""$4""$5"":""${Normal0}""$2""$1""$4""$5"":""${Normal0}"
    for i in `seq 1 1 5`; do shift; done
 echo -e "$*"

    else
 echo -n "$1:"
    for i in `seq 1 1 5`; do shift; done
 echo $echoOPT "$*"
    fi
   unset PRETTY echoOPT
}

_test_echo_opt(){
    unset echoOPT
    #DEBUG=1
    _debug "_test_echo_opt: \$1='$1' \$*='$*'"
    DO_SHIFT=0
    _debug "_test_echo_opt: \$1='$1' \$*='$*'"
        while test $# -gt 1 ; do
        _debugx "\$1='$1' \$#='$#'"

        {
        case $1 in -ne|-en|-n|-e) echoOPT="$echoOPT $1";DO_SHIFT=$((DO_SHIFT+1));; -p) PRETTY=1;DO_SHIFT=$((DO_SHIFT+1));; *) PRETTY=1;; esac; shift
        };                 done
}

_emergp(){
test "$EMERGENCY" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT
 _debug "PRETTY='$PRETTY'"

_print_pretty "0* EMERGENCY" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

_alertp(){
test "$ALERT" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT
 _debug "PRETTY='$PRETTY'"

_print_pretty    "1*     ALERT" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"
}

_critp(){
test "$CRIT" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT
 _debug "PRETTY='$PRETTY'"

_print_pretty    "2*  CRITICAL" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

_errp(){
test "$ERROR" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT
 _debug "PRETTY='$PRETTY'"

_print_pretty "3*        ERROR" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

_warnp(){
test "$WARN" || return 0

  DO_SHIFT=0
 _debug "_warn:\$#=$# \$*='$*'"
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT
 _debug "PRETTY='$PRETTY'"

_print_pretty    "4*   WARNING" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

_noticep(){
test "$NOTICE" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT
 _debug "PRETTY='$PRETTY'"

_print_pretty    "5*    NOTICE" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

_notice2p(){
test "$NOTICE2" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT
 _debug "PRETTY='$PRETTY'"

_print_pretty    "**   NOTICE2" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

_infop(){
test "$INFO" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT;
 _debug "PRETTY='$PRETTY'"

_print_pretty    "6*      INFO" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

_info2p(){
test "$INFO2" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT;
 _debug "PRETTY='$PRETTY'"

_print_pretty    "**     INFO2" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

_debugp(){
test "$DEBUG" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT;
 _debug "PRETTY='$PRETTY'"

_print_pretty    "7*     DEBUG" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

#[ "$DEBUGX" ] || DEBUGX=
#_debugx(){
#test "$DEBUGX" || return 0
#echo "$0:DEBUGX:$@"
#}

[ "$DEBUGE" ] || DEBUGE=
[ "$DEBUGX" ] && DEBUGE=$DEBUGX
[ "$DEBUG2" ] && DEBUGE=$DEBUG2
[ "$DEBUGA" ] && DEBUGE=$DEBUGA
_debugep()
{
[ "$DEBUGX" ] && DEBUGE=$DEBUGX
[ "$DEBUG2" ] && DEBUGE=$DEBUG2
[ "$DEBUGA" ] && DEBUGE=$DEBUGA
test "$DEBUGE" || return 0

  DO_SHIFT=0
 _test_echo_opt $*; for i in `seq 1 1 $DO_SHIFT`; do shift; done; unset DO_SHIFT;
 _debug "PRETTY='$PRETTY'"

_print_pretty    "**   EXTREME" "$Black1" "$Black0" "$White0" "$BackBlack0" "$*"

}

alias _debugap=_debugep
alias _debug2p=_debugep
alias _debugxp=_debugep
alias -p >>$OUT 2>>$ERR


###END###
_HAVE_F4PUPPY5PRETTY_=1  ## WARN : DO NOT EXPORT !!
  HAVE_F4PUPPY5PRETTY=1
###END###
