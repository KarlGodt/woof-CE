#!/bin/ash
#(c) copyright Barry Kauler 2008, puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#v404 first release. rewritten from scratch, aiming for simplicity and speed.
#v405 fix for alsa.
#v406 load apm.ko if no acpi.
#v408 explicitly load battery, ac, thermal, fan modules.
#v409 gparted create ext3 part. failed, fixed by making /etc/mtab a symlink.
#v411 fix mouse detection logic.
#v411 can use old network wizard (from 403, based on 400)
#v411 return of 'puppyserialdetect', for usb/ps2 mouse detection only. now 'puppyinputdetect'.
#v411 extra 'sleep 1' as rerwin reports usb mouse may need it some hardware.
#v411 choosemousefunc().
#v412 /etc/DISTRO_SPECS, renamed pup_xxx.sfs, pup_save.2fs etc.
#v412 bugfix usb-storage wait loop.
#w001 ubuntu module-init-tools not configured to support gzipped modules.
#w004 LANG=C, faster. /bin/ash, even faster.
#w463 rerwin: special mwave modem handling.
#w463 mouse scrollwheel fix.
#w468 full-hd-install, write to PUPSTATE after remount r/w.
#w478 moved depmod code up above call to rc.update.
#w481 fix crappy depmod, 'out of memory' in first boot 64MB RAM (no swap).
#v423 k2.6.29.6 dmesg has warning that ehci-hcd should load before uhci-hcd and ohci-hid.
#v424 fix LAYERFS variable.
#v424 fix secondary uevent replay. now finds ssb devices.
#v431 secondary uevent replay, fix for old kernels < 2.6.24

########################################################################
#
# CHANGES by Karl Reimer Godt
# 00.0 : added security fix if accidetially clicked at filemanager to return || exit
# 00.1 :
# 01.0 : support for more bootparameters
#        nodrivers
#        noalsa soundcards alsa
#        userdrivers kerneldrivers
#        IN failsafe_func still BIG TODO
#
# 01.1 : added norcsysinit bootparam to dropout
#   .2 : added rm -rf /tmp/* in case of flag files still there after hard reset
#        TODO : put into /sbin/init
#
# 02.0 : mkmissing_tty_func
#   .1 : check_frugal_full_func
#   .2 : check_full_frugal_dev_func
#   .3 : mkmissing_blockdev_func
#   .4 : dev_maj_259_func  #first_func
#   .5 : device_nodes_fork_func #first_func
#   .6 : mk_missing_var_dev_func
#   .7 : pupstate_prev_func
#   .8 : firmware_dep_func
#   .9 : modprobe_conf_func
#
# 03.0 : fbcon_func
# 04.0 : moved start of klogd and syslogd further up
#   .1 : MODALIASES="`ls /sys/bus/*/devices/*/modalias | sort -d`"  ##added sort -d to make output in logfiles more similar
#   .2 : renamed /tmp/pup_event_modprobe.conf to /tmp/pup_event_skiplist.conf
#        TODO: merge contents of modprobe.conf into this /tmp/pup_event_modprobe.conf
#   .3 : forced loading of uhci_hcd and ohci_hcd
#   .4 : added rm -rf /dev/.udev/*/* before launchig udevd
#   .5 : added INITSTATE=`find /sys -name "initstate"`
#        to prevent to load modules if already 25 are loaded (by /sbin/init)
#   .6 : added warning if no modalias files are found
#        AND skip the loading of the main modules
#   .7 : implemented message to console about how many busses detected and modules loaded
#
# 05.0
#
# 07.  : cat /proc/cmdline | grep -i 'nox' added nox kernel parameter for PUPMODE=2
#        special_mnt_func : for cgroups debugfs an others
#        fsckme_func TODO: rename to fsckme_flg_func
#        root_link_func
#        pup_eve_bac_mod_func sort logfile func
#
# /dev/hda8:
# LABEL="MacPup431_O2"
# UUID="6d9a8e91-c301-4ff8-9875-97ec708cbee8"
# TYPE="ext3"
# DISTRO_NAME='Puppy'
# DISTRO_VERSION=431
# DISTRO_BINARY_COMPAT='puppy'
# DISTRO_FILE_PREFIX='pup'
# DISTRO_COMPAT_VERSION='4'
# PUPMODE=2
# KERNVER=2.6.30.9-i586-dpup005-Celeron2G
# PUP_HOME='/'
# SATADRIVES='·'
# USBDRIVES='·'
# Linux·puppypc·2.6.30.9-i586-dpup005-Celeron2G·#6·SMP·Sat·Jan·15·13:35:51·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Do·27.·Okt·22:45:42·GMT-1·2011
# TODO1 : ln: target `/dev/root' is not a directory ~FIXED
# TODO2 : rm tmp file especially for alsa_cnt and udevdevicepath.log
#         ~FIXED just before loading kernel modules
#
#
#
########################################################################

###<KRG 2011-11-02>
if [ -n "$DISPLAY" ]; then
return || exit
fi
###</KRG 2011-11-02>

export LANG=C

. /etc/rc.d/f4puppy5

status_func() {
 if [ $1 -eq 0 ]; then
  /bin/echo -e "\\033[72G\\033[1;32mdone\\033[0;39m" >/dev/console #green [done] msg.
 else
  /bin/echo -e "\\033[70G\\033[1;31mfailed\\033[0;39m" >/dev/console #red [failed].
  STATUS=0
 fi
 return $1 #return with same status as entry param.
}

loadswap_func() { #w481 made into a function.
 echo "LOAD SWAP"
 #load a swap partition...
 for ONESWAP in `fdisk -l | grep ' Linux swap' | cut -f 1 -d ' ' | tr '\n' ' '`
 do
  echo -n "Loading swap partition $ONESWAP..." >/dev/console
  swapon $ONESWAP
  status_func $?
  [ $? -eq 0 ] && SWAPON="yes"
 done
 #if no go, try for a swap file...
 if [ "$SWAPON" != "yes" ]; then
  SWAPFILE="/pupswap.swp"
  [ "$PSWAPFILE" ] && SWAPFILE="`echo -n "$PSWAPFILE" | cut -f 3 -d ','`"  #/etc/rc.d/PUPSTATE
  if [ -f /initrd${PUP_HOME}${SWAPFILE} ]; then
   echo -n "Loading swap file ${SWAPFILE}..." >/dev/console
   swapon /initrd${PUP_HOME}${SWAPFILE}
   status_func $?
   [ $? -eq 0 ] && SWAPON="yes"
  fi
  if [ -f $SWAPFILE ]; then
   echo -n "Loading swap file ${SWAPFILE}..." >/dev/console
   swapon $SWAPFILE
   status_func $?
   [ $? -eq 0 ] && SWAPON="yes"
  fi
 fi
}

#if have just done a switch_root, output a 'done' message...
[ -d /initrd ] && status_func 0 #note, /initrd does not exist when a full-hd installation.

. /etc/rc.d/functions4puppy4
. /etc/DISTRO_SPECS
. /etc/rc.d/MODULESCONFIG #modules loading configuration.

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
[ "$LOGLEVEL" ] || LOGLEVEL=2  ##+++2011-12-04 for UDEV_LOG
[ "$loglevel" ] && LOGLEVEL=$loglevel #boot param.
[ $pmedia ] && PMEDIA=$pmedia #boot parameter, broad category of boot media. ex: cd.
[ $pdev1 ]  && PDEV1=$pdev1    #boot parameter, partition have booted off. ex: hda3


failsafe_func(){

safeBoot=0
if [ $nodrivers ]; then
if [ "$nodrivers" = "all" ]; then
safeBoot=0; echo H; return
else
noDriversList=`echo "$nodrivers" | tr ',' '\n' | sed 's/^/blacklist /g'`
fi
fi
echo "$noDriversList" >/dev/console

if [ $noalsa ]; then
 if [ -n "`echo "$noalsa" | grep -i -E '^1|^y'`" ]; then
  safeBoot=$((safeBoot+32))
  echo 'noalsa' >/tmp/alsa.flg
 fi
fi

if [ $soundcards ] || [ $alsa ]; then
soundCards="$soundcards"; [ -z "$soundCards" ] && soundCards="$alsa"
if [ "$soundCards" = "-1" -o "` echo $soundCards | grep -i -E 'n|no|none|nope'`" ]; then
safeBoot=$((safeBoot+32)); echo 'noalsa' >/tmp/alsa.flg
elif [ "$soundCards" = "all" -o "$soundCards" = "ALL" ]; then
safeBoot=4; echo 'all' >/tmp/alsa.flg
else
soundCardNrs=`echo "$scoundCards" | tr -d '[a-zA-Z]' | tr '[[:punct:]]' ' '`
echo -n 'boot_sound_cards='"$soundCardsNrs" >/tmp/alsa.flg
safeBoot=$((safeBoot+4))
fi
fi

if [ $userdrivers ]; then
userDrivers=`echo "$userdrivers" | tr '[A-Z]' '[a-z]' | tr ',' ' '`
if [ "$userDrivers" = "only" ]; then
safeBoot=2; return
elif [ "$userDrivers" = "yes" ]; then
safeBoot=$((safeBoot+2))
else #Y or 1
safeBoot=$((safeBoot+3)) ## 2 or 34
fi
fi

if [ $kerneldrivers ]; then
#kernelDrivers=${kerneldrivers/[A-Z]/[a-z]}
kernelDrivers=`echo "$kerneldrivers" | tr '[[:upper:]]' '[[:lower:]]'`
if [ "$kernelDrivers" = "only" ]; then
safeBoot=4; return
elif [ "$kernelDrivers" = "no" ]; then
safeboot=$((safeBoot+1))  ##useronly =2 ; 3 or 35
else
safeboot=$((safeBoot+4))
fi
fi


if [ $alldrivers ]; then
allDrivers=`echo "$alldrivers" | tr '[[:upper:]]' '[[:lower:]]' | cut -b 1`
if [ "$allDrivers" = "y" -o "$allDrivers" = "1" ]; then
safeBoot=256; return
else
safeBoot=$((safeBoot+1))
fi
fi
[ $safeBoot ] || safeBoot=256
[ "$safeBoot" = "0" ] && safeBoot=256
}
#failsafe_func  ##---2011-10-31 mved down to top of my own part

STATUS=0

echo '$@='"$@" >/dev/console
echo 'safeBoot='"$safeBoot" >/dev/console
##############MAKE FILESYSTEM USABLE################
#echo "MAKE FILESYSTEM USABLE"
echo -n "Making the filesystem usable..." >/dev/console #need this redirection!

    #echo "Mounting /proc"
test -e /proc/mounts || busybox mount $VERB $VERB -t proc proc /proc ;STATUS=$(( STATUS + $? ))
    #echo 'STATUS='"$STATUS"

test -f /etc/rc.rd/PUPSTATE && . /etc/rc.d/PUPSTATE || PUPMODE=2
test "$PUPMODE" = 2 -a -d /initrd && rm -rf /initrd

if [ ! -d /initrd ]; then #w468
    #echo ' Mounting rw / and others'
 busybox mount $VERB $VERB -o remount,rw /
 STATUS=$(( STATUS + $? ))
    #echo 'STATUS='"$STATUS"
 echo 'PUPMODE=2' > /etc/rc.d/PUPSTATE
fi

. /etc/rc.d/PUPSTATE #variables created at bootup by init script in initrd.

#v409 mount/umount scripts no longer write to /etc/mtab, as gparted failed to create a
#ext3 partition -- dunno why. Instead, now have /etc/mtab a symlink to /proc/mounts...
rm -f /etc/mtab
ln $VERB -s /proc/mounts /etc/mtab

#redirect all output to a log file (must do after remount rw)...
##[ ! "$LOGLEVEL" ] && exec 1>/tmp/bootsysinit.log 2>&1
#Ybd=`date +%Y%b%d`
_DATE_=`date +%F`

chmod 1777 /tmp

#exec 1>/tmp/bootsysinit.log."$Ybd" 2>&1
exec 1>/tmp/bootsysinit.log."$_DATE_" 2>&1

[ -d /dev/pts ] || mkdir $VERB -p /dev/pts
    echo "Mounting /dev/pts"
busybox mount $VERB $VERB /dev/pts ;STATUS=$(( STATUS + $? ))
    echo 'STATUS='"$STATUS"
[ -d /sys ] || mkdir $VERB /sys
    echo "Mounting /sys"
busybox mount $VERB $VERB -t sysfs sysfs /sys ;STATUS=$(( STATUS + $? ))
    echo 'STATUS='"$STATUS"

##v2.20 some apps need shm (shared memory) (ex: xfdiff)...
FREERAM=`free | grep -o 'Mem:.*' | tr -s ' ' | cut -f 4 -d ' '` #w481  ##2011-10-20 TODO:-f4 instead of -f5
if [ ! -d /initrd ]; then #weird, only full-hd install needs this for xfdiff.
 QTRFREERAM=$((FREERAM / 4))
 [ -d /dev/shm ] || mkdir $VERB -p /dev/shm
 busybox mount $VERB $VERB -t tmpfs -o size=${QTRFREERAM}k shmfs /dev/shm ;STATUS=$(( STATUS + $? ))
fi

#w478 moved this code above call to rc.update...
KERNVER=`uname -r`
KERNMAJ=`echo -n "$KERNVER" | cut -f 3 -d '.' | cut -f 1 -d '-'` #v431
echo "KERNVER='$KERNVER'" >> /etc/rc.d/PUPSTATE

echo "`date` KRG part starts ... from $0"

failsafe_func  ##+++2011-10-31 moved here would have been a BUG echo before everything got mounted
##due to typo faisafe_func -> ash: bad number ??
norcsysinit_func(){
if [ -n "`cat /proc/cmdline | grep -i 'norcsysinit'`" ]; then
echo "From rc.sysinit : exit to sh"
exec chroot . sh
fi
}
norcsysinit_func

mkmissing_tty_func() {
[ -c /dev/tty ] || mknod /dev/tty c 5 0

[ ! -d /dev/vc ] && rm -f -r /dev/vc && mkdir $VERB -p /dev/vc
INITTAB=`cat /etc/inittab | grep -o -E 'tty[0-9*]|vc/[0-9*]' | grep -v -E '^#|^[[:blank:]*]#' | sort -u`
INITTABS=`echo "$INITTAB" | grep -o '[0-9*]$'`
for i in $INITTABS; do
[ -c /dev/tty$i ]  || { rm -f /dev/tty$i && mknod /dev/tty$i c 4 $i; }
[ -c /dev/vcs$i ]  || { rm -f /dev/vcs$i && mknod /dev/vcs$i c 7 $i; }
[ -c /dev/vcsa$i ] || { rm -f dev/vcsa$i && mknod /dev/vcsa$i c 7 $((128+i)); }
[ ! -c /dev/vc/$i ] && rm -f /dev/vc/$i && mknod /dev/vc/$i c 4 $i
done
[ -c /dev/tty0 ] || { rm -f /dev/tty0 && mknod /dev/tty0 c 4 0; }
[ -c /dev/console ] || { rm -f /dev/console;mknod /dev/console c 5 1; }
[ -c /dev/null ] || { rm -f /dev/null;mknod /dev/null c 1 3; }
[ ! -c /dev/zero ] && rm -f /dev/zero && mknod /dev/zero c 1 5

[ -d /dev/fb ] || mkdir $VERB -p /dev/fb  #busybox fbset command needs this
for i in `seq 0 11`; do
[ ! -L /dev/fb/$i ] && [ -c /dev/fb$i ] && ln $VERB -s ../fb$i /dev/fb/$i
done
[ ! -d /dev/loop ] && mkdir $VERB -p /dev/loop
for i in `seq 0 15`; do
[ -h /dev/loop/$i ] || ln $VERB -s ../loop$i /dev/loop/$i
done

}
mkmissing_tty_func


check_frugal_full_func() {
CatProcPart=`cat /proc/partitions | tr -s ' ' | sed '1,2 d'`

RootDiskFreeFrugal=`/bin/df | grep -Fw '/' | grep -E 'rootfs|uniounfs' | head -n 1`
MountFrugal=`mount | grep '/initrd/mnt/dev_save' | cut -f 1 -d ' '`

RootDiskReadlinkDevRoot=`readlink /dev/root`

RootDiskFreeFull=`/bin/df | grep -Fw '/' | grep -v -E 'rootfs|uniounfs' | tr -s ' ' | cut -f 1 -d ' '`
MountFull=`mount | grep -Fw '/' | grep '/dev/' | cut -f 1 -d ' '`

echo "'$RootDiskFreeFrugal' '$MountFrugal' '$RootDiskReadlinkDevRoot' '$RootDiskFreeFull' '$MountFull'"
}
check_frugal_full_func

check_full_frugal_dev_func() {

if test -n "$RootDiskFreeFrugal" -a -n "$MountFrugal"; then ## frugal install
#SimpleDeviceName=`echo $MountFrugal | sed 's#/dev/##'`
SimpleDeviceName=${MountFrugal##*/}
MainDriveName=${SimpleDeviceName:0:3}
RootDevice=`echo "$CatProcPart" | grep -w $SimpleDeviceName`
MainDevice=`echo "$CatProcPart" | grep -w $MainDriveName`
elif test -n "$RootDiskFreeFull" -a -n "$MountFull"; then ## full install
##krg this would get root and later roo :SimpleDeviceName=`echo $MountFull | sed 's#/dev/##'`
SimpleDeviceName=`basename $(rdev | cut -f 1 -d ' ')`
MainDriveName=${SimpleDeviceName:0:3}
RootDevice=`echo "$CatProcPart" | grep -w $SimpleDeviceName`
MainDevice=`echo "$CatProcPart" | grep -w $MainDriveName`
fi
echo "'$SimpleDeviceName' '$MainDriveName' '$RootDevice' '$MainDevice'"
}
check_full_frugal_dev_func

mkmissing_blockdev_func() {
rootdrv=`/bin/df | grep -Fw '/' | grep -v -E 'rootfs|unionfs'`
if test "$rootdrv"; then
simple_drv=`echo $rootdrv | cut -f 1 -d ' ' | sed 's#/dev/##'`
else
rootdrv=`mount | grep '/initrd/mnt/dev_save'`
simple_drv=`echo $rootdrv | cut -f 1 -d ' ' | sed 's#/dev/##'`
fi
main_drv=${simple_drv:0:3}

if test ! -b /dev/$main_drv -o ! -b /dev/$simple_drv; then
if test "`cat /proc/partitions | grep $simple_drv | tr -s ' ' | cut -f 2 -d ' ' | grep -E '8|3|22'`"; then

echo "no blockdevices found, creating now" #> /dev/console

  while read maj min siz dev
  do
    test "$maj" || continue
    test "${maj//[[:digit:]]/}" && continue
    test "`LC_ALL=C ls -l /dev/$dev | tr -s ' ' | cut -f 5,6 -d ' '`" = "${maj}, $min" && continue
    rm -f /dev/$dev
    mknod /dev/$dev b $maj $min
    done</proc/partitions
echo "finished ..." #> /dev/console
fi
fi
echo "'$rootdrv' '$simple_drv' '$main_drv'"
}
#mkmissing_blockdev_func

dev_maj_259_func() {

while read maj min siz dev
do
test "$maj" || continue
test "${maj//[[:digit:]]/}" && continue
#test "`LC_ALL=C ls -l /dev/$dev | tr -s ' ' | cut -f 5 -d ' ' | tr -d ','`" = "$maj" && continue
test "`LC_ALL=C ls -l /dev/$dev | tr -s ' ' | cut -f 5,6 -d ' '`" = "${maj}, $min" && continue
rm -f /dev/$dev
mknod /dev/$dev b $maj $min
done</proc/partitions

}
#dev_maj_259_func

device_nodes_fork_func() {

 check_full_frugal_dev_func

 dev_maj_259_func

 mkmissing_blockdev_func

}
device_nodes_fork_func

mk_missing_var_dev_func() {
TarGzDevDbF="/var/db/boot/dev.$KERNVER.tar.gz"
StandardTarGzDevDbFile="/var/db/boot/dev.tar.gz"
if test -f $TarGzDevDbF -o -f $StandardTarGzDevDbFile; then #1
if [ ! -f $TarGzDevDbF ]; then #1.1
if test -f $StandardTarGzDevDbFile; then #1.1.1
tgdbf="$StandardTarGzDevDbFile"
echo "using tgdbf=$StandardTarGzDevDbFile"
fi #1.1.1
elif [ -f $TarGzDevDbF ]; then #1.1
tgdbf="$TarGzDevDbF"
echo "using tgdbf=$TarGzDevDbF"
else
echo "Nothing to do for mk_missing_var_dev_func"
return #1.1
fi #1.1
shortfilename="${tgdbf##*/}"
echo "'$shortfilename'"
if test `ls -l /dev | wc -l` -lt 250; then #1.2
echo "applying $tgdbf for /dev contains lesser than 250 devices"
cp $VERB $tgdbf /tmp
startdir=`pwd`
cd /tmp
tar -xzf /tmp/$shortfilename
TDevF=`find /tmp -name "dev"`
cp $VERB -ar $TDevF / #2>/dev/null
_sync
rm -f $TDevF
cd "$startdir"
return
fi #1.2

else # 1
echo "$TarGzDevDbF and $StandardTarGzDevDbFile do not exists"
kernversdbf="/var/db/boot/dev_nodes.$KERNVER.lst"
standarddbf="/var/db/boot/dev_nodes.lst"
if test -f $kernversdbf; then #1.3
#DDB="`cat /var/db/boot/dev_nodes.$KERNVER.lst`"
dbf="$kernversdbf"
echo "using $kernversdbf"
elif test -f $standarddbf; then #1.3
dbf="$standarddbf"
echo "using $standarddbf"
else #1.3
echo "nothing to be done ..."
return
fi #1.3
    #cat /var/db/boot/dev_nodes.$KERNVER.lst| while read PERM N O G MAY Min M D T DEV; do
cat $dbf | while read PERM N O G MAY Min M D T DEV; do
[ -z "$DEV" ] && DEV=$T
KIND=${PERM:0:1}
MAJ=`echo $MAY | tr -d ','`
DN=${DEV%/*}
[ -d $DN ] || mkdir $VERB -p $DN
[ ! -$KIND $DEV ] && echo "creating $DEV" && mknod $DEV $KIND $MAJ $Min
done
fi #1
}
#mk_missing_var_dev_func

pupstate_prev_func() {
if test "`grep -Fw KERNVER /etc/rc.d/PUPSTATE.prev | cut -f2 -d=`" != "$KERNVER"; then
if test ! -f /lib/modules/$KERNVER/modules.dep -o ! -f /lib/modules/$KERNVER/modules.symbols -o ! -f /lib/modules/$KERNVER/modules.alias; then
echo "Detected booting other kernel than last time" >> /dev/console
echo "Have to run depmod, please wait some 10 seconds" >> /dev/console
mkdir $VERB -p /lib/modules/$KERNVER
touch /lib/modules/$KERNVER/modules.dep
depmod
depmod-FULL
fi
fi
}
pupstate_prev_func

firmware_dep_func() {
if test ! -f /etc/modules/firmware.dep.$KERNVER; then
FWF=`find /etc/modules -type f -name "firmware.*" | head -n 1`
echo "copying firmware.dep"  #> /dev/console
cp $VERB "$FWF" /etc/modules/firmware.dep.$KERNVER
fi

fwf=`find /lib/modules/$KERNVER -maxdepth 2 -type d -name "firmware*" | head -n1`
if test -d "$fwf"; then
rm /lib/firmware/firmware*
cp $VERB -r "$fwf"/* /lib/firmware/
fi

if test ! -d /lib/firmware; then
if test -f /lib/firmware.tar.gz; then
tar -C / -xzf /lib/firmware.tar.gz
fi
fi
_sync
}
firmware_dep_func

modprobe_conf_func() {

test -d /etc/mult_kernels || mkdir $VERB -p /etc/mult_kernels

[ -d /etc/modprobe.d ] || mkdir $VERB -p /etc/modprobe.d

if test -f /tmp/modprobe.conf; then #1

cp $VERB -f /tmp/modprobe.conf /etc/modprobe.conf
cp $VERB -f /tmp/modprobe.conf /etc/modprobe.d/modprobe.conf
cp $VERB -f /tmp/modprobe.conf /etc/mult_kernels/modprobe.conf.$KERNVER
[ -d /etc/mult_kernels/modprobe.d.$KERNVER ] && cp $VERB -f /tmp/modprobe.conf /etc/mult_kernels/modprobe.d.$KERNVER/

elif test -f /tmp/modprobe.conf.setup_alsa_func; then
cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/modprobe.conf
cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/modprobe.d/modprobe.conf
cp $VERB -f /tmp/modprobe.conf .setup_alsa_func/etc/mult_kernels/modprobe.conf.$KERNVER
[ -d /etc/mult_kernels/modprobe.d.$KERNVER ] && cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/mult_kernels/modprobe.d.$KERNVER/modprobe.conf

fi

if test -f /etc/mult_kernels/modprobe.conf.$KERNVER; then #1.1
cp $VERB -f /etc/mult_kernels/modprobe.conf.$KERNVER /etc/modprobe.conf
elif test -f /etc/modprobe.conf; then #1.2
cp $VERB /etc/modprobe.conf /etc/mult_kernels/modprobe.conf.$KERNVER
fi


if test -d /etc/mult_kernels/modprobe.d.$KERNVER; then #2
rm -f -r /etc/modprobe.d
cp $VERB -f -r /etc/mult_kernels/modprobe.d.$KERNVER /etc/modprobe.d
elif test -d /etc/modprobe.d; then #2.1
cp $VERB -r /etc/modprobe.d /etc/mult_kernels/modprobe.d.$KERNVER
fi #2.1


test -d /etc/mult_kernels/rc.d || mkdir $VERB -p /etc/mult_kernels/rc.d


if test ! -f /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNVER; then
cp $VERB /etc/rc.d/MODULESCONFIG /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNVER
else
rm -f /etc/rc.d/MODULESCONFIG
cp $VERB /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNVER /etc/rc.d/MODULESCONFIG
fi

if test -f /lib/modules/$KERNVER/DOTconfig*; then
cp $VERB /lib/modules/$KERNVER/DOTconfig* /etc/modules/
fi
}
modprobe_conf_func

fbcon_func() {
if [ -n "`modprobe -l | grep 'fbcon'`" ]; then
if [ "`cat /proc/cmdline | grep -E 'vga=ask|vga=0x3[0-9a-fA-F][0-9a-fA-F]|vga=[7-8][0-9][0-9]'`" ]; then
if [ -z "`lsmod | grep 'fbcon'`" ]; then  ##for /sbin/init
[ "$DEBUG" -o "$VERBOSE" ] && modinfo fbcon  > /dev/console
modprobe -s fbcon
fi
fi
fi
}
##fbcon_func
echo "`date` KRG part ended ..."
#####################

#w469 may need to run 'depmod'...
#live-cd may have been built without the modules.* files.
#initrd init script copied modules to /lib/modules/<kernver>/initrd/.
if [ ! -f /lib/modules/${KERNVER}/modules.dep ]; then
 NEEDDEPMOD="yes" #w469 files may not be there to save space.
 [ -d /lib/modules/${KERNVER}/initrd ] && NEEDGUNZIP="yes"
elif [ -d /lib/modules/${KERNVER}/initrd ]; then
  if [ "`grep '/initrd/' /lib/modules/${KERNVER}/modules.dep`" = "" ]; then
   NEEDDEPMOD="yes" #w469 files may not be there to save space.
   NEEDGUNZIP="yes"
  fi
else true
fi
STATUS=$((STATUS+$?))
if [ "$NEEDGUNZIP" = "yes" ]; then
 #w001 ubuntu module-init-tools not configured to support gzipped modules...
 /bin/gunzip -f -r /lib/modules/${KERNVER}/initrd #w482 shinobar.
else true
fi
STATUS=$((STATUS+$?))
#w481 now building with busybox depmod, in module-init-tools have depmod-FULL, so comment out...
##w481 workaround for crappy depmod. First boot 64MB ram no swap, only 14660 free ram, due to
##tmpfs top layer (about 26MB). depmod gives 'out of memory'. so delay until after swap loaded...

if [ "$NEEDDEPMOD" = "yes" ]; then
 echo -n ' depmod' >/dev/console
 mkdir $VERB -p /lib/modules/$KERNVER
 touch /lib/modules/$KERNVER/modules.dep
 depmod
else true
fi
STATUS=$((STATUS+$?))

[ $layerfs ] && LAYERFS=$layerfs #boot param.
[ $LAYERFS ] || LAYERFS=aufs     #aufs or unionfs
[ "`modinfo aufs 2>/dev/null`" ] || LAYERFS=unionfs #precaution.

status_func $STATUS

#######################VERSION UPDATE##########################
echo "VERSION UPDATE"

#force update when new version of ${DISTRO_NAME}...
echo -n "Updating..." >/dev/console

/etc/rc.d/rc.update $PUPMODE
_sync
status_func $STATUS

#################LOAD KERNEL MODULES################

if [ "$safeBoot" -ge "4" ]; then
echo "LOAD KERNEL MODULES"

syslogd -m 0
klogd

echo -n "    Loading kernel modules..." >/dev/console

MODALIASES=`ls /sys/bus/*/devices/*/modalias | sort -d`  ##added sort -d to make output in logfiles more similar

BLACKLISTVARS=`echo "$SKIPLIST" | tr '\-' '_' | tr ' ' '\n' | sed -e 's/^/blacklist /' | grep -v ' $'`
echo "$BLACKLISTVARS" > /tmp/pup_event_skiplist.conf
#...read in /sbin/pup_event_backend_d, and pup_event_backend_modprobe (for udevd).
[ "$noDriversList" ] && echo "$noDriversList" >>/tmp/pup_event_skiplist.conf

if [ ! -d /initrd ]; then #v423 full hd install.
 #v423 have this in 'init', probably need here too...
 if [ "`echo "$MODALIASES" | grep 'bc0Csc03i10'`" ]; then
  [ -z "`lsmod | grep 'yenta_socket'`" ] && /sbin/modprobe -s --config /tmp/pup_event_skiplist.conf yenta-socket
  [ $? -eq 0 ] && sleep 2
 fi
 #v423 k2.6.29.6 dmesg has warning that ehci-hcd should load before uhci-hcd and ohci-hid
 # this is contrary to my understanding all these years, but oh well, let's do it...
 ELSPCI=`elspci -l` #jesses great little utility.
 [ "`echo "$ELSPCI" | grep '0C0320' | grep '<>$'`" ] && /sbin/modprobe -s --config /tmp/pup_event_skiplist.conf ehci-hcd
 #...perhaps a udev rule could have done this?
 [ "`echo "$ELSPCI" | grep '0C0310' | grep '<>$'`" ] && /sbin/modprobe -s --config /tmp/pup_event_skiplist.conf ohci-hcd
 [ "`echo "$ELSPCI" | grep '0C0300' | grep '<>$'`" ] && /sbin/modprobe -s --config /tmp/pup_event_skiplist.conf uhci-hcd
fi

if [ -x /sbin/photplug ]; then

#[ -f /tmp/hotplug.modules ] || { /sbin/modprobe -c | sed 's%\*%\.\*%g' >/tmp/hotplug.modules.sed
##awk '{print $2}' /tmp/hotplug.modules.sed >/tmp/hotplug.modules ; }
#grep '^alias' /tmp/hotplug.modules.sed | awk '{print $2}' >/tmp/hotplug.modules ;
#}
echo '/sbin/photplug' >/proc/sys/kernel/hotplug

#v405 udevd calls /sbin/pup_event_backend_modprobe, which needs this...
#my intention is for puppy to work with either of these...
elif [ -x /sbin/udevd ]; then
rm -rf /dev/.udev/*/*  ##krg
[ -z "`pidof udevd`" ] && UDEV_LOG=$LOGLEVEL /sbin/udevd --daemon
else
[ -z "`pidof pup_event_backend_d`" ] &&  pup_event_backend_d >/tmp/pup_event_backend_errors 2>&1 & #hotplug daemon. my homebrew replacement for udevd.
fi
sleep 0.1

INITSTATE=`find /sys -name "initstate"`
WC=`echo "$INITSTATE" | wc -l`
echo 'WC INITSTATE='"$WC"

if [ -z "$MODALIASES" ]; then #1

echo -e "\e[1;5;31m"'WARNING : '"\e[0;31m"'No modaliases found !'"\e[39m" >/dev/console
echo -e "\e[39m"'Either the kernel detected no HW automatically'"\e[39m" >/dev/console
echo -e "\e[39m"'or something else went wrong'"\e[39m" >/dev/console

else #1

if [ "$WC" -lt 25 ]; then  #initrd.gz loads 10 modules plus some extra #2
echo 'Running the modaliases add by rc.sysinit '$0
echo >> /tmp/pup_event_module_devpath_log
echo 'Running the modaliases add by rc.sysinit '$0 >> /tmp/pup_event_module_devpath_log

[ -f /tmp/pup_event_alsa_cnt ] || echo '0' > /tmp/pup_event_alsa_cnt

MODULECNT=0
#replay uevents from /sys...
#for ONEMODALIAS in $MODALIASES
while read ONEMODALIAS
do
 ONEPATH="${ONEMODALIAS%/*}"
 if [ -e "${ONEPATH}"/uevent ]; then #3
  echo add > "${ONEPATH}"/uevent #generates an 'add' uevent.
  sleep 0.02
  MODULECNT=$((MODULECNT+1))
  echo -en "\r$MODULECNT" >/dev/console
  fi #3
done<<EoL
`echo "$MODALIASES"`
EoL

echo
echo -e "\n"'Detected '"\e[1;34m""$MODULECNT ""\e[0;39m"'busses' >/dev/console
MODULECNT=0

sleep 3s
LSMODCNT=`lsmod | sed "1 d" | wc -l`

if [ "$LSMODCNT" = 0 ]; then #4
lsmod | cut -f 1 -d ' ' | sort -g | tr '\n' ' ' >/dev/console
else #4
echo -e -n 'Loaded   '"\e[1;35m""$LSMODCNT ""\e[0;39m"'drivers at least' >/dev/console
fi #4

echo >> /tmp/pup_event_module_devpath_log

else #2
echo 'Skipping uevent part , more than 25 modules already loaded ...'
fi #2

fi #1
##wait until uevent queue is empty...


[ -d /proc/acpi ] || modprobe -s apm #v406

[ -z "`lsmod | grep 'usb_storage'`" ] && modprobe -s usb_storage

[ -n "`lsmod | cut -f 1 -d ' ' | grep 'fb$'`" ] && fbcon_func

if [ ! -d /initrd ]; then #full hd installation.
[ -z "`lsmod | grep 'nls_cp437'`" ] && modprobe -s nls_cp437 #these needed by vfat/ntfs/ext2 f.s.'s.
[ -z "`lsmod | grep 'nls_iso8859_1'`" ] && modprobe -s nls_iso8859-1 # "
[ -z "`lsmod | grep 'fusemodprobe'`" ]  && modprobe -s fuse
[ -z "`lsmod | grep "$LAYERFS"`" ] && modprobe -s $LAYERFS #unionfs or aufs.
[ -z "`lsmod | grep 'squashfs'`" ] && modprobe -s squashfs
 #we can determine ide/sata drives at this point (drivers builtin to kernel)...
fi

status_func 0
fi

######################LOAD SWAP#####################

[ "$SWAPON" = "yes" ] || loadswap_func

#################MISC. SYSTEM SETUP#################
echo "MISC. SYSTEM SETUP"
##syslogd -m 0
##klogd


echo -e "${DISTRO_NAME} Linux\n`uname -s` `uname -r` [`uname -m` arch]\n\n" > /etc/issue
echo "1" > /proc/sys/net/ipv4/ip_dynaddr
hostname -F /etc/hostname

rm -f /mnt/home  ###2011-10-29 TODO : observe
if [ ! -d /initrd ]; then
 PUP_HOME='/'
 echo "PUP_HOME='/'" >> /etc/rc.d/PUPSTATE
 ln $VERB -s / /mnt/home
elif [ "$PUP_HOME" ]; then #see /etc/rc.d/PUPSTATE
  if [ "$PUP_HOME" = "/pup_ro1" -o "$PUP_HOME" = "/pup_rw" ]; then
   #note, PUPMODE=6 will have PUP_HOME=/pup_rw.
   #in the case of the persistent storage being the partition itself, this will be mounted
   #on /initrd/pup_ro1 (tmpfs on pup_rw for restricted writes) or directly on /initrd/pup_rw
   #and we do not really want users to access it as it is a unionfs layer. Instead, they are
   #already accessing it as "/".
   ln $VERB -s / /mnt/home
  else
   ln $VERB -s /initrd${PUP_HOME} /mnt/home
  fi
fi
echo safeBoot=$safeBoot 1
################WAIT MODULES LOADED##################
if [ "$safeBoot" -ge "4" ]; then
echo "WAIT MODULES LOADED"
#previous module loading may not have completed...
echo -n "Waiting for modules to complete loading..." >/dev/console
echo -n "Waiting for modules to complete loading..."

special_mnt_func(){
[ -d /SPECIAL_MNT ] || mkdir $VERB /SPECIAL_MNT

validFS=`grep '^nodev' /proc/filesystems | grep -v -E -w 'bdev|sockfs|pipefs|anon_inodefs|aufs|fuse|nfs|nfs4|nfsd|inotifyfs|autofs|exofs|mtd_inodefs|ubifs|jffs2' | awk '{print $2}'`
for fs in $validFS; do
[ "`grep -w "$fs" /proc/mounts`" ] && continue

DIR="$fs"

case $fs in
debugfs)
[ -d /sys/kernel/debug ] || mkdir $VERB -p /sys/kernel/debug;
busybox mount $VERB $VERB -t debugfs debugfs /sys/kernel/debug;
echo 'module usb_storage +p' >/sys/kernel/debug/dynamic_debug/control;
;;
*)
[ -d /SPECIAL_MNT/$DIR ] || mkdir $VERB -p /SPECIAL_MNT/$DIR
mount $VERB $VERB -t $fs none /SPECIAL_MNT/$DIR
;;
esac

done
}
special_mnt_func

WAITCNT=0
PCIPCMCIA=`elspci -l | grep '060700' | grep '<>' | cut -f2 -d' '`
if [ "$PCIPCMCIA" ]; then #this may be slow to respond.
 echo -n " pcmcia"  >/dev/console
 echo -n " pcmcia"
 while [ $WAITCNT -lt 10 ]; do
  [ "`lsmod | grep -E '^yenta_socket |^tcic |^i82092 |^i82365 |^pd6729 '`" ] && break
  WAITCNT=$((WAITCNT + 1))
  sleep 1
  echo -n " $WAITCNT" >/dev/console
  echo -n " $WAITCNT"
 done
 echo
fi

PCIUSB=`elspci -l | grep -E '0C0300|0C0310|0C0320' | grep '<>' | cut -f2 -d' '`
 for aBUS in `echo "$PCIUSB" | sort -u`; do
 DRIVER='';
 case $aBUS in
 0C0320) DRIVER=ehci-hcd;;
 0C0310) DRIVER=ohci-hcd;;
 0C0300) DRIVER=uhci-hcd;;
 *) continue;;
 esac
 modprobe $DRIVER
 done
#note, if initrd then usb-storage will have already loaded...
if [ "$PCIUSB" ]; then #this may be slow to respond.
 echo -n " usb"  >/dev/console
 echo -n " usb"
 PCIUSBNUM=`echo "$PCIUSB" | sort -u | wc -l`
 while [ $WAITCNT -lt 10 ]; do
  [ "`lsmod | grep -w -E '^uhci_hcd|^ohci_hcd|^ehci_hcd|^xhci_hcd' | wc -l`" -ge $PCIUSBNUM ] && break
  WAITCNT=$((WAITCNT + 1))
  sleep 1
  echo -n " $WAITCNT" >/dev/console
  echo -n " $WAITCNT"
 done
echo
fi
echo safeBoot=$safeBoot 2
#replay uevents from /sys (more interfaces as a consequence of above drivers loaded)...
#note, this also a workaround for kernel 'bug' where entries appear in /sys but no uevent
#gets generated (yes it happens in 2.6.25.x kernel!)

echo 'Running the pcmcia-usb-ssb modaliases add by rc.sysinit '$0
echo '##########'  >> /tmp/pup_event_module_devpath_log
echo 'Running the pcmcia-usb-ssb modaliases add by rc.sysinit '$0 >> /tmp/pup_event_module_devpath_log
echo safeBoot=$safeBoot 3
LSMOD=`lsmod | sed "1 d" | cut -f 1 -d ' '`
MODULECNT2=0
if [ $KERNMAJ -lt 24 ]; then #v431
 echo 'Add loop for KERNMAJ -th 24'
 [ -e /sys/bus/pcmcia/devices ] && NEWPCMCIA=`ls /sys/bus/pcmcia/devices/*/modalias | tr '\n' ' '`
 [ -e /sys/bus/usb/devices ] && NEWUSB=`ls /sys/bus/usb/devices/*/modalias | tr '\n' ' '`
 for ONEMODALIAS in ${NEWPCMCIA}${NEWUSB}
 do
  ONEPATH=${ONEMODALIAS%/*}
  if [ -e ${ONEPATH}/uevent ]; then
   echo add > ${ONEPATH}/uevent #generates an 'add' uevent.
   sleep 0.02
   MODULECNT2=$((MODULECNT2+1))
  fi
 done
else
 #v424 try it a different way, this also fixes ssb devices (such as b43.ko)...
 echo 'Add loop for KERNMAJ -ge 24'
 [ -e /sys/bus/pcmcia/devices ] && NEWPCMCIA=`ls /sys/bus/pcmcia/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 [ -e /sys/bus/usb/devices ] && NEWUSB=`ls /sys/bus/usb/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 [ -e /sys/bus/ssb/devices ] && NEWSSB=`ls /sys/bus/ssb/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 echo -e "${NEWPCMCIA}\n${NEWUSB}\n${NEWSSB}"
 for ONEUEVENT in ${NEWPCMCIA}${NEWUSB}${NEWSSB}
 do
  ONEPATH=${ONEUEVENT%/*}
  MODULECNT2=$((MODULECNT2+1))
  #the check for 'modalias' file is maybe needed for old kernel?...
  [ -e ${ONEPATH}/modalias -a "`grep 'MODALIAS' $ONEUEVENT`" ] || continue
  echo add > $ONEUEVENT
  sleep 0.02
 done
fi
echo safeBoot=$safeBoot 4

if [ "$MODULECNT2" -gt 0 ]; then
echo >/dev/console
echo -e -n 'Detected '"\e[1;34m""$MODULECNT2 ""\e[0;39m"'pcmcia/usb/ssb busses' >/dev/console
MODULECNT2=0
fi

sleep 3s
LSMOD2=`lsmod | sed "1 d" | cut -f 1 -d ' '`

if [ "$LSMOD2" != "$LSMOD" ]; then
DIFF=`echo "$LSMOD2" | grep -v "$LSMOD"`
DIFFCOUNT=`echo "$DIFF" | wc -l`
echo >/dev/console
echo -e -n 'Additionally loaded '"\e[1;35m""$DIFFCOUNT ""\e[0;39m"'drivers' >/dev/console
fi
echo safeBoot=$safeBoot 5
echo >> /tmp/pup_event_module_devpath_log

#wait for usb-storage drives to become available...(already done if initrd)
#note, pup_event_backend_d and udevd both log to this file when load modules
# (the latter via udev handler script /sbin/pup_event_backend_modprobe)...
if [ "`grep 'usb_storage' /tmp/pup_event_module_devpath_log`" ]; then #see pup_event_backend_d
 echo -n " usb-storage"  >/dev/console
 echo -n " usb-storage"
 while [ $WAITCNT -lt 15 ]; do
  [ "`dmesg | grep 'usb\-storage.*scan complete'`" ] && break
  sleep 1
  WAITCNT=$((WAITCNT + 1))
  echo -n " $WAITCNT" >/dev/console
  echo -n " $WAITCNT"
 done
 #precaution, make sure have got them all... v412 need sort -u...
 #USBSTORAGES=`/bin/dmesg | grep "usb-storage: device found at" | sort -u | wc -l`
 USBSTORAGES=`/bin/dmesg | grep -o "usb\-storage.*starting scan.*" | sort -u | wc -l`
 while [ $WAITCNT1 -lt 15 ]; do  ###+2011-10-31 changed WAITCNT to WAITCNT1
  AVAILABLEUSBSTORAGES=`/bin/dmesg | grep -o "usb\-storage.*scan complete.*" | wc -l`
  [ $AVAILABLEUSBSTORAGES -ge $USBSTORAGES ] && break
  sleep 1
  WAITCNT1=$((WAITCNT1 + 1))  ###+2011-10-31 changed WAITCNT to WAITCNT1
  echo -n " $WAITCNT1" >/dev/console  ###+2011-10-31 changed WAITCNT to WAITCNT
  echo -n " $WAITCNT1"
 done
 echo
fi
echo safeBoot=$safeBoot 6
sleep 1 #v411 a bit extra. rerwin reports usb mouse detection problem some hardware.
        #(delay before usb mouse info appears in /proc/bus/input/devices)

fi

 SATADRIVES=`ls -1 /sys/block | grep '^sd' | tr '\n' ' '`
 for i in $SATADRIVES; do
 LinkTarget=`readlink -f /sys/block/$i`
 if test "`echo $LinkTarget | grep 'usb'`"; then
 USB_SATAD="$USB_SATAD $i"
 else
 BLOCK_SATAD="$BLOCK_SATAD $i"
 fi
 done
 if [ -e /proc/ide ]; then
  echo "SATADRIVES='${BLOCK_SATAD} '" >> /etc/rc.d/PUPSTATE #kernel supports /dev/hd*.
  echo "USBDRIVES='${USB_SATAD} '" >> /etc/rc.d/PUPSTATE
 else
  echo "ATADRIVES='${BLOCK_SATAD} '" >> /etc/rc.d/PUPSTATE
  echo "USBDRIVES='${USB_SATAD} '" >> /etc/rc.d/PUPSTATE
 fi
echo safeBoot=$safeBoot 7


status_func 0

##############USER SELECTED MODULES##################
if [ "$safeBoot" = "2" ] || [ "$safeBoot" -ne "0" -a "$safeBoot" -ne "4" ]; then
echo "USER SELECTED MODULES"
#the user can select extra modules to load in the BootManager...
if [ "$ADDLIST" ]; then #variable is in /etc/rc.d/MODULESCONFIG
 echo -n "Loading user-selected modules..." >/dev/console
 for MODULE in $ADDLIST
 do
  MPARAMS=""
  if [ "`echo -n "$MODULE" | tr ':' ' ' | wc -w`" -gt 1 ]; then
   MPARAMS=`echo -n "$MODULE" | cut -f 2-9 -d ':' | tr ':' ' '`
   MODULE=`echo -n "$MODULE" | cut -f 1 -d ':'`
  fi
  echo -n " $MODULE" >/dev/console
  echo "Loading module $MODULE $MPARAMS"
  firmware_module_func #install firmware tarball. see functions4puppy4.
  #w463 for mwave.ko (modem), do not load module, just the firmware, which has script that correctly loads mwave.ko.
  [ "$MODULE" = "mwave" ] || /sbin/modprobe -v -s --first-time $MODULE $MPARAMS  ##+2011-10-31 added -v and --first-time
 done
 status_func 0
fi
fi
echo safeBoot=$safeBoot 8
if [ "$safeBoot" -ge "4" ]; then
[ -z "`lsmod | grep 'fbcon'`" ] && fbcon_func

#had hoped to retire this, but HardInfo needs it...
#[ "`lsmod | grep '^usbcore'`" ] && busybox mount -t usbfs usbfs /proc/bus/usb
[ -d /proc/bus/usb ] && busybox mount $VERB $VERB -t usbfs usbfs /proc/bus/usb

#v408 only needed for 2.6.21.7, as 2.6.25.x loads these automatically...
#v408 kirk: Check for laptop battery...
modprobe -s battery
#if [ -d /proc/acpi/battery ]; then
 #results="`find /proc/acpi/battery -mindepth 1 -type d`"
# if [ ! -z "$results" ]; then
  modprobe -s ac
#  modprobe thermal
  modprobe -s fan
# else
#  rmmod battery
# fi
#fi
fi
echo safeBoot=$safeBoot 9

###################SETUP SERVICES################
echo "SETUP SERVICES"
echo -n "Setting up services (network, printing, etc.)..." >/dev/console
if [ -h /dev/modem ]; then
 DEVM=`readlink /dev/modem`
 case $DEVM in
  modem) #error, circular link.
   rm -f /dev/modem
   DEVM=""
  ;;
  /dev/*) #wrong format.
   DEVM=`echo -n "$DEVM" | cut -f 3,4 -d '/'`
   ln $VERB -snf $DEVM /dev/modem
  ;;
 esac
 case $DEVM in
  ttyS[0-9]) #apparently setserial can crash with other modems.
   setserial -v -b /dev/modem auto_irq skip_test autoconfig
  ;;
 esac
fi

#v411 can use old network wizard (from 403, based on 400)...
CHECKOLDWIZ=`ls -1 /etc/*[0-9]mode 2>/dev/null` #ex: eth0mode, wlan0mode.
if [ "$CHECKOLDWIZ" -a -d /usr/local/net_setup ]; then
 #note, old wizard is located in /usr/local/net_setup.
 /usr/local/net_setup/etc/rc.d/rc.network &
else
 /etc/rc.d/rc.network &
fi

#Ybd="$Ybd" /etc/rc.d/rc.services $safeBoot & #run scripts in /etc/rc.d/init.d
_DATE_="$_DATE_" /etc/rc.d/rc.services $safeBoot &

echo -e "\\033[62G\\033[1;33m[backgrounded]\\033[0;39m" >/dev/console #column 62, yellow.

############RECOGNISE MEDIA DEVICES################
echo "RECOGNISE MEDIA DEVICES"
echo -n "Recognising media devices..." >/dev/console
#recognise optical drives...
echo -n ' optical' >/dev/console
OPTCNT=1;CDTYPE="";DVDTYPE="";CDBURNERTYPE=""
OPTICALS=`grep '^drive name:' /proc/sys/dev/cdrom/info | grep -o -E 'sr.*|hd.*' | tr '\t' ' '`
[ -L /dev/cdrom ] && CDTYPE=`readlink /dev/cdrom | cut -f 3 -d '/'`
[ -L /dev/dvd ] && DVDTYPE="`readlink /dev/dvd | cut -f 3 -d '/'`"
[ -f /etc/cdburnerdevice ] && CDBURNERTYPE="`cat /etc/cdburnerdevice`"
[ "`echo "$OPTICALS" | grep "$CDTYPE"`" ] || CDTYPE="" #no longer exists.
[ "`echo "$OPTICALS" | grep "$DVDTYPE"`" ] || DVDTYPE="" #no longer exists.
[ "`echo "$OPTICALS" | grep "$CDBURNERTYPE"`" ] || CDBURNERTYPE="" #no longer exists.
for ONEOPTICAL in $OPTICALS
do
 ONENUM=`echo -n "$ONEOPTICAL" | cut -c 3`
 [ "$CDTYPE" = "" ] && CDTYPE="$ONEOPTICAL"
 [ "$DVDTYPE" = "" ] && [ "`grep '^Can read DVD' /proc/sys/dev/cdrom/info | head -n 1 | grep -o '[01]' | sed -e 's/[^01]//g' | cut -c $OPTCNT`" = "1" ] && DVDTYPE="$ONEOPTICAL"
 [ ! "$CDBURNERTYPE" -a "`grep '^Can write CD' /proc/sys/dev/cdrom/info | head -n 1 | grep -o '[01]' | sed -e 's/[^01]//g' | cut -c $OPTCNT`" = "1" ] && CDBURNERTYPE="$ONEOPTICAL"
 OPTCNT=$((OPTCNT + 1))
done
rm -f /dev/cdrom; rm -f /dev/dvd; rm -f /etc/cdburnerdevice
[ "$CDTYPE" ] && ln $VERB -sf /dev/$CDTYPE /dev/cdrom
[ "$DVDTYPE" ] && ln $VERB -sf /dev/$DVDTYPE /dev/dvd
[ "$CDBURNERTYPE" ] && echo -n "$CDBURNERTYPE" > /etc/cdburnerdevice
#[ "$DVDTYPE" ] && hdparm -d1 /dev/$DVDTYPE
case $DVDTYE in hd*) hdparm -d1 /dev/$DVDTYPE;; esac

#w468 simplify...
##w463 i think time has come to dump the old 'psaux'. use /dev/input/mice for both usb
##and ps/2 mice...
##recognise mouse... v411...
##note, if wanted to detect serial mouse here, k2.6.25.16 has module 'sermouse' that must be loaded (currently in xwin).
#TODO: simplify above, use 'input/mice' for ps2 mouse also, but may need to modify Xorg/Xvesa/Input Wizards.
#      (may also have to remove builtin psaux driver from kernel).
if [ ! -f /etc/mousedevice ]; then
 echo -n "input/mice" > /etc/mousedevice
fi
[ "`cat /etc/mousedevice`" = "psaux" ] && echo -n "input/mice" > /etc/mousedevice
test -e /dev/input/mice || { mkdir -p /dev/input; mknod /dev/input/mice c 13 63; }
read MOUSE_DEV_NODE </etc/mousedevice
ln $VERB -snf $MOUSE_DEV_NODE /dev/mouse

#recognise keyboard...
#echo -n ' keyboard' >/dev/console
/etc/rc.d/rc.country ;STATUS=$(( STATUS + $? )) #this asks for keyboard layout.

status_func $STATUS

############MISC DESKTOP STUFF##################
echo "MISC. DESKTOP STUFF"
if [ "$PUPMODE" = "77" ]; then #77=multisession cd/dvd.
 if [ "`cat /root/Choices/ROX-Filer/PuppyPin | grep "savesession"`" = "" ]; then
  echo '<icon x="768" y="128" label="save">/usr/sbin/savesession-dvd</icon>' >> /root/Choices/ROX-Filer/PuppyPin
  cat /root/Choices/ROX-Filer/PuppyPin | grep -v '/pinboard' > /tmp/PuppyPin-CPY
  _sync
  cp $VERB -f /tmp/PuppyPin-CPY /root/Choices/ROX-Filer/PuppyPin
  echo '</pinboard>' >> /root/Choices/ROX-Filer/PuppyPin
 fi
fi

#save button on desktop when booted from flash drive...
if [ $PUPMODE -eq 3 -o $PUPMODE -eq 7 -o $PUPMODE -eq 13 ]; then #pup_rw is tmpfs.
 if [ "`cat /root/Choices/ROX-Filer/PuppyPin | grep "save2flash"`" = "" ]; then
  echo '<icon x="768" y="128" label="save">/usr/sbin/save2flash</icon>' >> /root/Choices/ROX-Filer/PuppyPin
  cat /root/Choices/ROX-Filer/PuppyPin | grep -v '/pinboard' > /tmp/PuppyPin-CPY
  _sync
  cp $VERB -f /tmp/PuppyPin-CPY /root/Choices/ROX-Filer/PuppyPin
  echo '</pinboard>' >> /root/Choices/ROX-Filer/PuppyPin
 fi
fi


###################PERSONAL BOOT SCRIPT######################
echo "PERSONAL BOOT SCRIPT"
#personal boot script here...
if [ ! -f /etc/rc.d/rc.local ]; then
 echo '#this file called from rc.sysinit' > /etc/rc.d/rc.local
 echo '#you can edit this file' >> /etc/rc.d/rc.local
 echo '#When firewall is installed, will append lines to this file...' >> /etc/rc.d/rc.local
fi
. /etc/rc.d/rc.local

dmesg > /tmp/bootkernel.log
cp $VERB /var/log/messages /tmp/boot.messages
cp $VERB /var/log/messages.0 /tmp/boot.messages.0
echo `uptime` >>/tmp/bootkernel.log

if [ -z "`cat /proc/cmdline | grep -i 'nox'`" ]; then
echo 'X' > /tmp/X.status
else
echo 'nox' > /tmp/X.status
fi

[ -c /dev/ppp ]   || mknod /dev/ppp c 108 0
[ -L /dev/mouse ] || ln $VERB -s /dev/input/mice /dev/mouse
[ -c /dev/mem ]   || mknod /dev/mem c 1 1

root_link_func(){
#if test ! -L /dev/root ; then
rm -f /dev/root
RD=`dmesg | grep -i 'Mounted root'`
if [ -z "$RD" ]; then #&&
rootdevice=`rdev | cut -d ' ' -f1 | cut -f3 -d '/'`
[ -z "$rootdevice" ] && return
ln $VERB -s $rootdevice /dev/root
else
device=`echo "$RD" | grep -o -i 'device .*' | cut -f 2 -d ' '`
MAJ=`echo $device | cut -f 1 -d ':'`
Min=`echo $device | cut -f 2 -d ':' | sed 's#\.$##'`
#does not work for MAJ=Min rootdevice=`grep -w $MAJ /proc/partitions | grep -w $Min | tr -s [[:blank:]] | cut -f 5 -d ' '`
CATPROCPART=`cat /proc/partitions | sed "1,2 d" | sed 's#^[[:blank:]]*##g' | tr -s ' '`
rootdevice=`echo "$CATPROCPART" | grep -w "^$MAJ $Min" | cut -f 4 -d ' '`  ##+2011-10-31 had to add -w to grep
# 259   655360   15390270 hda5
# 259   65536    15446466 hda8
[ -z "$rootdevice" ] && return
ln $VERB -s $rootdevice /dev/root
fi
}
root_link_func

fsckme_func(){
PDEV1=`basename $(rdev | cut -f 1 -d ' ' | sed 's#/dev/##')`
DEV1FS=`mount | grep '^/dev/root' | cut -f 5 -d ' '`
echo "$PDEV1"','"$DEV1FS"',' > /etc/.fsckme.flag
[ "$PUPMODE" == '2' ] && echo "PDEV1='$PDEV1'" >> /etc/rc.d/PUPSTATE  ##2011-12-16
}
fsckme_func

special_mnt_func2(){
[ -d /SPECIAL_MNT ] || mkdir $VERB /SPECIAL_MNT
#for i in `cat /proc/filesystems | tr '\t' ' ' | tr -s ' ' | grep '^nodev' | cut -f 2 -d ' '` ; do

#validFS=`cat /proc/filesystems | tr '\t' ' ' | tr -s ' ' | grep '^nodev' | grep -v -E -w 'bdev|sockfs|pipefs|anon_inodefs|aufs|fuse|nfs|nfs4|nfsd|inotifyfs|autofs|exofs|mtd_inodefs|ubifs' | cut -f 2 -d ' '`
validFS=`grep '^nodev' /proc/filesystems | grep -v -E -w 'bdev|sockfs|pipefs|anon_inodefs|aufs|fuse|nfs|nfs4|nfsd|inotifyfs|autofs|exofs|mtd_inodefs|ubifs' | awk '{print $2}'`
for fs in $validFS; do

#[ -n "`busybox mount | grep "$i"`" ] && continue
[ "`grep "$fs" /proc/mounts`" ] && continue

#DIR=`echo "$i"` # | sed 's#fs$##'`
DIR="$fs"

##2011-10-31 2.6.37.4-KRG-i486-StagingDrivers-2 : grep -v -E -w 'bdev|sockfs|pipefs|anon_inodefs'
##2011-11-09 2.6.37.4-KRG-i486-StagingDrivers-2 : grep -v -E -w 'aufs|fuse'

[ -d /SPECIAL_MNT/$DIR ] || mkdir $VERB -p /SPECIAL_MNT/$DIR
mount $VERB $VERB -t $fs none /SPECIAL_MNT/$DIR
#if [ "$?" -ne 0 ]; then
#mount -t $i nodev /SPECIAL_MNT/$DIR
#fi
done
}
#special_mnt_func

sort_pup_eve_bac_mod_func(){
FILE='/tmp/pup_eve_bac_mod.log'
[ -f "$FILE" ] || FILE='/tmp/pup_event_backend_modprobe.log'
[ -f "$FILE" ] || return  ##+++2011-10-31
sleep 120s ##5s
cat "$FILE" | sort -g -k 1,3 -t ' ' >"$FILE".sorted
PIDS=`cat "$FILE".sorted | cut -f 1 -d ' ' | sort -u | sort -g`
for i in $PIDS; do
echo PID  "$i"
Line=`grep -n -w "^$i" "$FILE".sorted | tail -n 1 | cut -f 1 -d ':'`
echo Line "$Line"
sed -i "$Line a\ " "$FILE".sorted
done
}
sort_pup_eve_bac_mod_func &

#that's it. next stop is /etc/profile...
###END###
