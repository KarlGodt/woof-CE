#!/bin/ash
#(c) copyright Barry Kauler 2008, puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#v404 first release. rewritten from scratch, aiming for simplicity and speed.
#v405 fix for alsa.
#v406 load apm.ko if no acpi.
#v408 explicitly load battery, ac, thermal, fan modules.
#v409 gparted create ext3 part. failed, fixed by making /etc/mtab a symlink.
#v411 fix mouse detection logic.
#v411 can use old network wizard (from 403, based on 400)
#v411 return of 'puppyserialdetect', for usb/ps2 mouse detection only. now 'puppyinputdetect'.
#v411 extra 'sleep 1' as rerwin reports usb mouse may need it some hardware.
#v411 choosemousefunc().
#v412 /etc/DISTRO_SPECS, renamed pup_xxx.sfs, pup_save.2fs etc.
#v412 bugfix usb-storage wait loop.
#w001 ubuntu module-init-tools not configured to support gzipped modules.
#w004 LANG=C, faster. /bin/ash, even faster.
#w463 rerwin: special mwave modem handling.
#w463 mouse scrollwheel fix.
#w468 full-hd-install, write to PUPSTATE after remount r/w.
#w478 moved depmod code up above call to rc.update.
#w481 fix crappy depmod, 'out of memory' in first boot 64MB RAM (no swap).
#v423 k2.6.29.6 dmesg has warning that ehci-hcd should load before uhci-hcd and ohci-hid.
#v424 fix LAYERFS variable.
#v424 fix secondary uevent replay. now finds ssb devices.
#v431 secondary uevent replay, fix for old kernels < 2.6.24

########################################################################
#
# CHANGES by Karl Reimer Godt
# 00.0 : added security fix if accidetially clicked at filemanager to return || exit
# 00.1 :
# 01.0 : support for more bootparameters
#        nodrivers
#        noalsa soundcards alsa
#        userdrivers kerneldrivers
#        IN failsafe_func still BIG TODO
#
# 01.1 : added norcsysinit bootparam to dropout
#   .2 : added rm -rf /tmp/* in case of flag files still there after hard reset
#        TODO : put into /sbin/init
#
# 02.0 : mkmissing_tty_func
#   .1 : check_frugal_full_func # removed
#   .2 : check_full_frugal_dev_func
#   .3 : mkmissing_blockdev_func
#   .4 : dev_maj_259_func  #first_func
#   .5 : device_nodes_fork_func #first_func
#   .6 : mk_missing_var_dev_func
#   .7 : pupstate_prev_func
#   .8 : firmware_dep_func
#   .9 : modprobe_conf_func
#
# 03.0 : fbcon_func
# 04.0 : moved start of klogd and syslogd further up
#   .1 : MODALIASES="`ls /sys/bus/*/devices/*/modalias | sort -d`"  ##added sort -d to make output in logfiles more similar
#   .2 : renamed /tmp/pup_event_modprobe.conf to /tmp/pup_event_skiplist.conf
#        TODO: merge contents of modprobe.conf into this /tmp/pup_event_modprobe.conf
#   .3 : forced loading of uhci_hcd and ohci_hcd
#   .4 : added rm -rf /dev/.udev/*/* before launchig udevd
#   .5 : added INITSTATE=`find /sys -name "initstate"`
#        to prevent to load modules if already 25 are loaded (by /sbin/init)
#   .6 : added warning if no modalias files are found
#        AND skip the loading of the main modules
#   .7 : implemented message to console about how many busses detected and modules loaded
#
# 05.0
#
# 07.  : cat /proc/cmdline | grep -i 'nox' added nox kernel parameter for PUPMODE=2
#        special_mnt_func : for cgroups debugfs an others
#        fsckme_func TODO: rename to fsckme_flg_func
#        root_link_func
#        pup_eve_bac_mod_func sort logfile func
#
# /dev/hda8:
# LABEL="MacPup431_O2"
# UUID="6d9a8e91-c301-4ff8-9875-97ec708cbee8"
# TYPE="ext3"
# DISTRO_NAME='Puppy'
# DISTRO_VERSION=431
# DISTRO_BINARY_COMPAT='puppy'
# DISTRO_FILE_PREFIX='pup'
# DISTRO_COMPAT_VERSION='4'
# PUPMODE=2
# KERNVER=2.6.30.9-i586-dpup005-Celeron2G
# PUP_HOME='/'
# SATADRIVES='·'
# USBDRIVES='·'
# Linux·puppypc·2.6.30.9-i586-dpup005-Celeron2G·#6·SMP·Sat·Jan·15·13:35:51·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Do·27.·Okt·22:45:42·GMT-1·2011
# TODO1 : ln: target `/dev/root' is not a directory ~FIXED
# TODO2 : rm tmp file especially for alsa_cnt and udevdevicepath.log
#         ~FIXED just before loading kernel modules
#
#
#
########################################################################
case $1 in check) shift; set -n;; esac

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

###<KRG 2011-11-02>
if [ -n "$DISPLAY" ]; then
return || exit
fi
###</KRG 2011-11-02>

export LANG=C
TTY=`tty` || TTY=/dev/console

. /etc/rc.d/f4puppy5

status_func() {
 if [ $1 -eq 0 ]; then
  /bin/echo -e "\\033[72G\\033[1;32mdone\\033[0;39m" >$TTY #green [done] msg.
 else
  /bin/echo -e "\\033[70G\\033[1;31mfailed\\033[0;39m" >$TTY #red [failed].
  STATUS=0
 fi
 return $1 #return with same status as entry param.
}

loadswap_func() { #w481 made into a function.
 echo "LOAD SWAP"
 #load a swap partition...
 for oneSWAP in `fdisk -l | grep ' Linux swap' | cut -f 1 -d ' '`
 do
 test -b "$oneSWAP" || continue
  echo -en "\rLoading swap partition $SWAPS ${oneSWAP##*/}..." >$TTY
  swapon $oneSWAP
  status_func $?
  SWAPS="${SWAPS}${oneSWAP##*/} "
  [ $? -eq 0 ] && SWAPON="done"
 done
 #if no go, try for a swap file...
 [ "$SWAPON" = "yes" ] && return 0
  SWAPFILE="/pupswap.swp"
  [ "$PSWAPFILE" ] && SWAPFILE="`echo -n "$PSWAPFILE" | cut -f 3 -d ','`"  #/etc/rc.d/PUPSTATE
  if [ -f /initrd${PUP_HOME}${SWAPFILE} ]; then
   echo -n "Loading swap file ${SWAPFILE}..." >$TTY
   swapon /initrd${PUP_HOME}${SWAPFILE}
   status_func $?
   [ $? -eq 0 ] && SWAPON="done"
  fi
  if [ -f "$SWAPFILE" ]; then
   echo -n "Loading swap file ${SWAPFILE}..." >$TTY
   swapon $SWAPFILE
   status_func $?
   [ $? -eq 0 ] && SWAPON="done"
  fi
}

test -f /etc/rc.rd/PUPSTATE && . /etc/rc.d/PUPSTATE || PUPMODE=2

#if have just done a switch_root, output a 'done' message...
test -L /sbin/init && {
[ $PUPMODE = 2 ] || status_func 0 #note, /initrd does not exist when a full-hd installation.
}

. /etc/rc.d/functions4puppy4
. /etc/DISTRO_SPECS
. /etc/rc.d/MODULESCONFIG #modules loading configuration.

failsafe_func(){

safeBoot=0
if [ $nodrivers ]; then
if [ "$nodrivers" = "all" ]; then
safeBoot=0; echo H; return
else
noDriversList=`echo "$nodrivers" | tr ',' '\n' | sed 's/^/blacklist /g'`
fi
fi
echo "$noDriversList" >$TTY

if [ $noalsa ]; then
 if [ -n "`echo "$noalsa" | grep -i -E '^1|^y'`" ]; then
  safeBoot=$((safeBoot+32))
  echo 'noalsa' >/tmp/alsa.flg
 fi
fi

if [ $soundcards ] || [ $alsa ]; then
soundCards="$soundcards"; [ -z "$soundCards" ] && soundCards="$alsa"
if [ "$soundCards" = "-1" -o "` echo $soundCards | grep -i -E 'n|no|none|nope'`" ]; then
safeBoot=$((safeBoot+32)); echo 'noalsa' >/tmp/alsa.flg
elif [ "$soundCards" = "all" -o "$soundCards" = "ALL" ]; then
safeBoot=4; echo 'all' >/tmp/alsa.flg
else
soundCardNrs=`echo "$scoundCards" | tr -d '[a-zA-Z]' | tr '[[:punct:]]' ' '`
echo -n 'boot_sound_cards='"$soundCardsNrs" >/tmp/alsa.flg
safeBoot=$((safeBoot+4))
fi
fi

if [ $userdrivers ]; then
userDrivers=`echo "$userdrivers" | tr '[A-Z]' '[a-z]' | tr ',' ' '`
if [ "$userDrivers" = "only" ]; then
safeBoot=2; return
elif [ "$userDrivers" = "yes" ]; then
safeBoot=$((safeBoot+2))
else #Y or 1
safeBoot=$((safeBoot+3)) ## 2 or 34
fi
fi

if [ $kerneldrivers ]; then
#kernelDrivers=${kerneldrivers/[A-Z]/[a-z]}
kernelDrivers=`echo "$kerneldrivers" | tr '[[:upper:]]' '[[:lower:]]'`
if [ "$kernelDrivers" = "only" ]; then
safeBoot=4; return
elif [ "$kernelDrivers" = "no" ]; then
safeboot=$((safeBoot+1))  ##useronly =2 ; 3 or 35
else
safeboot=$((safeBoot+4))
fi
fi


if [ $alldrivers ]; then
allDrivers=`echo "$alldrivers" | tr '[[:upper:]]' '[[:lower:]]' | cut -b 1`
if [ "$allDrivers" = "y" -o "$allDrivers" = "1" ]; then
safeBoot=256; return
else
safeBoot=$((safeBoot+1))
fi
fi
[ $safeBoot ] || safeBoot=256
[ "$safeBoot" = "0" ] && safeBoot=256
}
#failsafe_func  ##---2011-10-31 mved down to top of my own part

STATUS=0

echo '$@='"$@" >$TTY
echo 'safeBoot='"$safeBoot" >$TTY
##############MAKE FILESYSTEM USABLE################
#echo "MAKE FILESYSTEM USABLE"
echo -n "Making the filesystem usable..." >$TTY #need this redirection!

test -e /proc/mounts || busybox mount $VERB $VERB -t proc proc /proc ;STATUS=$(( STATUS + $? ))
if [ "$PUPMODE" = 2 ]; then #w468
 busybox mount $VERB $VERB -o remount,rw /
 STATUS=$(( STATUS + $? ))
 echo 'PUPMODE=2' > /etc/rc.d/PUPSTATE
. /etc/rc.d/PUPSTATE #variables created at bootup by init script in initrd.
fi

#v409 mount/umount scripts no longer write to /etc/mtab, as gparted failed to create a
#ext3 partition -- dunno why. Instead, now have /etc/mtab a symlink to /proc/mounts...
rm $VERB -f /etc/mtab
ln $VERB -s ../proc/mounts /etc/mtab

#redirect all output to a log file (must do after remount rw)...
##[ ! "$LOGLEVEL" ] && exec 1>/tmp/bootsysinit.log 2>&1
#Ybd=`date +%Y%b%d`
_DATE_=`date +%F`

chmod $VERB 1777 /tmp

#exec 1>/tmp/bootsysinit.log."$Ybd" 2>&1
exec 1>/tmp/bootsysinit.log."$_DATE_" 2>&1

[ -d /dev/pts ] || mkdir $VERB -p /dev/pts
#chgrp tty /dev/pts ## 2015-12-27 rb4linux http://murga-linux.com/puppy/viewtopic.php?p=878804#878804
_debug "Mounting /dev/pts"
busybox mount $VERB $VERB /dev/pts ;STATUS=$(( STATUS + $? ))
#mount -t devpts -o rw,nosuid,noexec,gid=2,mode=620,ptmxmode=000 devpts /dev/pts ## 2015-12-27 rb4linux
_debug "STATUS='$STATUS'"
[ -d /sys ] || mkdir $VERB /sys
_debug "Mounting /sys"
busybox mount $VERB $VERB -t sysfs sysfs /sys ;STATUS=$(( STATUS + $? ))
_debug "STATUS='$STATUS'"

##v2.20 some apps need shm (shared memory) (ex: xfdiff)...
FREERAM=`free | grep -o 'Mem:.*' | tr -s ' ' | cut -f 4 -d ' '` #w481  ##2011-10-20 TODO:-f4 instead of -f5
if [ "$PUPMODE" = 2 ]; then #weird, only full-hd install needs this for xfdiff.
 QTRFREERAM=$((FREERAM / 4))
 [ -d /dev/shm ] || mkdir $VERB -p /dev/shm
 busybox mount $VERB $VERB -t tmpfs -o size=${QTRFREERAM}k shmfs /dev/shm ;STATUS=$(( STATUS + $? ))
fi

[ "$LOGLEVEL" ] || { LOGLEVEL=`grep -o -E ' loglevel=[0-9]+' /proc/cmdline`; eval "$LOGLEVEL"; }
[ "$LOGLEVEL" ] || LOGLEVEL=2         ##+++2011-12-04 for UDEV_LOG
[ "$loglevel" ] && LOGLEVEL=$loglevel #boot param.
[ $pmedia ] && PMEDIA=$pmedia         #boot parameter, broad category of boot media. ex: cd.
[ $pdev1 ]  && PDEV1=$pdev1           #boot parameter, partition have booted off. ex: hda3

origLOGLVL=`sysctl kernel.printk | cut -f2 -d'=' | awk '{print $1}'`
test "$LOGLEVEL" || sysctl $Q -w kernel.printk=2

#w478 moved this code above call to rc.update...
KERNVER=`uname -r`
KERNMAJ=`echo -n "$KERNVER" | cut -f 3 -d '.' | cut -f 1 -d '-'` #v431
echo "KERNVER='$KERNVER'" >> /etc/rc.d/PUPSTATE

echo "`date` KRG part starts ... from $0"

failsafe_func  ##+++2011-10-31 moved here would have been a BUG echo before everything got mounted
##due to typo faisafe_func -> ash: bad number ??
norcsysinit_func(){
if [ -n "`grep -i 'norcsysinit' /proc/cmdline`" ]; then
echo "From rc.sysinit : exit to sh"
exec chroot . sh
fi
}
norcsysinit_func

mkmissing_tty_func() {
[ -c /dev/tty ] || mknod /dev/tty c 5 0

[ -d /dev/vc ] || { rm $VERB -f -r /dev/vc && mkdir $VERB -p /dev/vc; }
INITTAB=`cat /etc/inittab | grep -o -E 'tty[0-9*]|vc/[0-9*]' | grep -v -E '^#|^[[:blank:]*]#' | sort -u`
INITTABS=`echo "$INITTAB" | grep -o '[0-9*]$'`
for i in $INITTABS; do
[ -c /dev/tty$i ]  || { rm $VERB -f /dev/tty$i && mknod /dev/tty$i c 4 $i; }
[ -c /dev/vcs$i ]  || { rm $VERB -f /dev/vcs$i && mknod /dev/vcs$i c 7 $i; }
[ -c /dev/vcsa$i ] || { rm $VERB -f dev/vcsa$i && mknod /dev/vcsa$i c 7 $((128+i)); }
[ ! -c /dev/vc/$i ] && rm $VERB -f /dev/vc/$i && mknod /dev/vc/$i c 4 $i
done
[ -c /dev/tty0 ]    || { rm $VERB -f /dev/tty0 && mknod /dev/tty0 c 4 0; }
[ -c /dev/tty1 ]    || { rm $VERB -f /dev/tty1 && mknod /dev/tty1 c 4 1; }
[ -c /dev/console ] || { rm $VERB -f /dev/console;mknod /dev/console c 5 1; }
[ -c /dev/null ]    || { rm $VERB -f /dev/null;mknod /dev/null c 1 3; }
[ ! -c /dev/zero ]  && { rm $VERB -f /dev/zero;mknod /dev/zero c 1 5; }

[ -d /dev/fb ] || mkdir $VERB -p /dev/fb  #busybox fbset command needs this
for i in `seq 0 11`; do
[ ! -L /dev/fb/$i ] && [ -c /dev/fb$i ] && ln $VERB -s ../fb$i /dev/fb/$i
done
[ -d /dev/loop ] || mkdir $VERB -p /dev/loop
for i in `seq 0 15`; do
[ -L /dev/loop/$i ] || ln $VERB -s ../loop$i /dev/loop/$i
done

}
mkmissing_tty_func

pupstate_prev_func() {
if test "`grep -Fw KERNVER /etc/rc.d/PUPSTATE.prev | cut -f2 -d=`" != "$KERNVER"; then
if test ! -f /lib/modules/$KERNVER/modules.dep -o ! -f /lib/modules/$KERNVER/modules.symbols -o ! -f /lib/modules/$KERNVER/modules.alias; then
echo "Detected booting other kernel than last time" >> /dev/console
echo "Have to run depmod, please wait some 10 seconds" >> /dev/console
mkdir $VERB -p /lib/modules/$KERNVER
touch /lib/modules/$KERNVER/modules.dep
depmod
depmod-FULL
fi
fi
}
pupstate_prev_func

firmware_dep_func() {

if test ! -f /etc/modules/firmware.dep.$KERNVER; then
FWF=`find /etc/modules -type f -name "firmware.*" | head -n 1`
echo "copying firmware.dep"  #> /dev/console
cp $VERB "$FWF" /etc/modules/firmware.dep.$KERNVER
fi

fwf=`find /lib/modules/$KERNVER -maxdepth 2 -type d -name "firmware*" | head -n1`
if test -d "$fwf"; then
rm $VERB -r /lib/firmware/*
cp $VERB -r "$fwf"/* /lib/firmware/
fi

if test ! -d /lib/firmware; then
if test -f /lib/firmware.tar.gz; then
tar $VERB -C / -xzf /lib/firmware.tar.gz
fi
fi
_sync
}
firmware_dep_func

modprobe_conf_func() {

test -d /etc/mult_kernels || mkdir $VERB -p /etc/mult_kernels

[ -d /etc/modprobe.d ] || mkdir $VERB -p /etc/modprobe.d

if test -f /tmp/modprobe.conf; then #1

cp $VERB -f /tmp/modprobe.conf /etc/modprobe.conf
cp $VERB -f /tmp/modprobe.conf /etc/modprobe.d/modprobe.conf
cp $VERB -f /tmp/modprobe.conf /etc/mult_kernels/modprobe.conf.$KERNVER
[ -d /etc/mult_kernels/modprobe.d.$KERNVER ] && cp $VERB -f /tmp/modprobe.conf /etc/mult_kernels/modprobe.d.$KERNVER/

elif test -f /tmp/modprobe.conf.setup_alsa_func; then
cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/modprobe.conf
cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/modprobe.d/modprobe.conf
cp $VERB -f /tmp/modprobe.conf .setup_alsa_func/etc/mult_kernels/modprobe.conf.$KERNVER
[ -d /etc/mult_kernels/modprobe.d.$KERNVER ] && cp $VERB -f /tmp/modprobe.conf.setup_alsa_func /etc/mult_kernels/modprobe.d.$KERNVER/modprobe.conf

fi

if test -f /etc/mult_kernels/modprobe.conf.$KERNVER; then #1.1
cp $VERB -f /etc/mult_kernels/modprobe.conf.$KERNVER /etc/modprobe.conf
elif test -f /etc/modprobe.conf; then #1.2
cp $VERB /etc/modprobe.conf /etc/mult_kernels/modprobe.conf.$KERNVER
fi


if test -d /etc/mult_kernels/modprobe.d.$KERNVER; then #2
rm $VERB -f -r /etc/modprobe.d
cp $VERB -f -r /etc/mult_kernels/modprobe.d.$KERNVER /etc/modprobe.d
elif test -d /etc/modprobe.d; then #2.1
cp $VERB -r /etc/modprobe.d /etc/mult_kernels/modprobe.d.$KERNVER
fi #2.1


test -d /etc/mult_kernels/rc.d || mkdir $VERB -p /etc/mult_kernels/rc.d


if test ! -f /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNVER; then
cp $VERB /etc/rc.d/MODULESCONFIG /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNVER
else
rm $VERB -f /etc/rc.d/MODULESCONFIG
cp $VERB /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNVER /etc/rc.d/MODULESCONFIG
fi

if test -f /lib/modules/$KERNVER/DOTconfig*; then
cp $VERB /lib/modules/$KERNVER/DOTconfig* /etc/modules/
fi
}
modprobe_conf_func

fbcon_func() {
if [ -n "`modprobe -l | grep 'fbcon'`" ]; then
if [ "`grep -E 'vga=ask|vga=0x3[0-9a-fA-F][0-9a-fA-F]|vga=[7-8][0-9][0-9]' /proc/cmdline`" ]; then
if [ -z "`lsmod | grep 'fbcon'`" ]; then  ##for /sbin/init
[ "$DEBUG" -o "$VERBOSE" ] && modinfo fbcon  > /dev/console
modprobe $Q $VERB -s fbcon
fi
fi
fi
}
##fbcon_func
echo "`date` KRG part ended ..."
#####################

#w469 may need to run 'depmod'...
#live-cd may have been built without the modules.* files.
#initrd init script copied modules to /lib/modules/<kernver>/initrd/.
if [ ! -f /lib/modules/${KERNVER}/modules.dep ]; then
 NEEDDEPMOD="yes" #w469 files may not be there to save space.
 [ -d /lib/modules/${KERNVER}/initrd ] && NEEDGUNZIP="yes"
elif [ -d /lib/modules/${KERNVER}/initrd ]; then
  if [ "`grep '/initrd/' /lib/modules/${KERNVER}/modules.dep`" = "" ]; then
   NEEDDEPMOD="yes" #w469 files may not be there to save space.
   NEEDGUNZIP="yes"
  fi
else true
fi
STATUS=$((STATUS+$?))
if [ "$NEEDGUNZIP" = "yes" ]; then
 #w001 ubuntu module-init-tools not configured to support gzipped modules...
 /bin/gunzip -f -r /lib/modules/${KERNVER}/initrd #w482 shinobar.
else true
fi
STATUS=$((STATUS+$?))
#w481 now building with busybox depmod, in module-init-tools have depmod-FULL, so comment out...
##w481 workaround for crappy depmod. First boot 64MB ram no swap, only 14660 free ram, due to
##tmpfs top layer (about 26MB). depmod gives 'out of memory'. so delay until after swap loaded...

if [ "$NEEDDEPMOD" = "yes" ]; then
 echo -n ' depmod' >$TTY
 mkdir $VERB -p /lib/modules/$KERNVER
 touch /lib/modules/$KERNVER/modules.dep
 depmod
else true
fi
STATUS=$((STATUS+$?))

[ $layerfs ] && LAYERFS=$layerfs #boot param.
[ $LAYERFS ] || LAYERFS=aufs     #aufs or unionfs
[ "`modinfo aufs 2>/dev/null`" ] || LAYERFS=unionfs #precaution.

status_func $STATUS

#######################VERSION UPDATE##########################
echo "VERSION UPDATE"

#force update when new version of ${DISTRO_NAME}...
echo -n "Updating..." >$TTY

/etc/rc.d/rc.update $PUPMODE
_sync
status_func $STATUS

#################LOAD KERNEL MODULES################

if [ "$safeBoot" -ge "4" ]; then
echo "LOAD KERNEL MODULES"

syslogd -m 0
klogd

echo -n "    Loading kernel modules..." >$TTY

MODALIASES=`ls /sys/bus/*/devices/*/modalias | sort -d`  ##added sort -d to make output in logfiles more similar

BLACKLISTVARS=`echo "$SKIPLIST" | tr '\-' '_' | tr ' ' '\n' | sed -e 's/^/blacklist /' | grep -v ' $'`
echo "$BLACKLISTVARS" > /tmp/pup_event_skiplist.conf
#...read in /sbin/pup_event_backend_d, and pup_event_backend_modprobe (for udevd).
[ "$noDriversList" ] && echo "$noDriversList" >>/tmp/pup_event_skiplist.conf

if [ "$PUPMODE" = 2 ]; then #v423 full hd install.
 #v423 have this in 'init', probably need here too...
 if [ "`echo "$MODALIASES" | grep 'bc0Csc03i10'`" ]; then
  [ -z "`lsmod | grep 'yenta_socket'`" ] && /sbin/modprobe $Q $VERB -s --config /tmp/pup_event_skiplist.conf yenta-socket
  [ $? -eq 0 ] && sleep 2
 fi
 #v423 k2.6.29.6 dmesg has warning that ehci-hcd should load before uhci-hcd and ohci-hid
 # this is contrary to my understanding all these years, but oh well, let's do it...
 ELSPCI=`elspci -l` #jesses great little utility.
 [ "`echo "$ELSPCI" | grep '0C0320' | grep '<>$'`" ] && /sbin/modprobe $Q $VERB -s --config /tmp/pup_event_skiplist.conf ehci-hcd
 #...perhaps a udev rule could have done this?
 [ "`echo "$ELSPCI" | grep '0C0310' | grep '<>$'`" ] && /sbin/modprobe $Q $VERB -s --config /tmp/pup_event_skiplist.conf ohci-hcd
 [ "`echo "$ELSPCI" | grep '0C0300' | grep '<>$'`" ] && /sbin/modprobe $Q $VERB -s --config /tmp/pup_event_skiplist.conf uhci-hcd
fi

if [ -x /sbin/photplug ]; then
echo '/sbin/photplug' >/proc/sys/kernel/hotplug

#v405 udevd calls /sbin/pup_event_backend_modprobe, which needs this...
#my intention is for puppy to work with either of these...
elif [ -x /sbin/udevd ]; then
rm $VERB -rf /dev/.udev/*/*  ##krg
[ -z "`pidof udevd`" ] && UDEV_LOG=$LOGLEVEL /sbin/udevd --daemon
else
[ -z "`pidof pup_event_backend_d`" ] &&  pup_event_backend_d >/tmp/pup_event_backend_errors 2>&1 & #hotplug daemon. my homebrew replacement for udevd.
fi
sleep 0.1

INITSTATE=`find /sys -name "initstate"`
WC=`echo "$INITSTATE" | wc -l`
echo "WC INITSTATE='$WC'"

if [ -z "$MODALIASES" ]; then #1

echo -e "\e[1;5;31m"'WARNING : '"\e[0;31m"'No modaliases found !'"\e[39m" >$TTY
echo -e "\e[39m"'Either the kernel detected no HW automatically'"\e[39m" >$TTY
echo -e "\e[39m"'or something else went wrong'"\e[39m" >$TTY

else #1

if [ "$WC" -lt 25 ]; then  #initrd.gz loads 10 modules plus some extra #2
echo 'Running the modaliases add by rc.sysinit '$0
echo >> /tmp/pup_event_module_devpath_log
echo 'Running the modaliases add by rc.sysinit '$0 >> /tmp/pup_event_module_devpath_log

[ -f /tmp/pup_event_alsa_cnt ] || echo '0' > /tmp/pup_event_alsa_cnt

MODULECNT=0
#replay uevents from /sys...
#for oneMODALIAS in $MODALIASES
while read oneMODALIAS
do
 onePATH="${oneMODALIAS%/*}"
 if [ -e "${onePATH}"/uevent ]; then #3
  echo add > "${onePATH}"/uevent #generates an 'add' uevent.
  sleep 0.02
  MODULECNT=$((MODULECNT+1))
  echo -en "\r$MODULECNT" >$TTY
  fi #3
done<<EoL
`echo "$MODALIASES"`
EoL

echo
echo -e "\n"'Detected '"\e[1;34m""$MODULECNT ""\e[0;39m"'busses' >$TTY
MODULECNT=0

sleep 3s
LSMODCNT=`wc -l /proc/modules | awk '{print $1}'`

if [ "$LSMODCNT" = 0 ]; then #4
lsmod | cut -f 1 -d ' ' | sort -g | tr '\n' ' ' >$TTY
else #4
echo -e -n 'Loaded   '"\e[1;35m""$LSMODCNT ""\e[0;39m"'drivers at least' >$TTY
fi #4

echo >> /tmp/pup_event_module_devpath_log

else #2
echo 'Skipping uevent part , more than 25 modules already loaded ...'
fi #2

fi #1
##wait until uevent queue is empty...


[ -d /proc/acpi ] || modprobe $Q $VERB -s apm #v406

#we can determine ide/sata drives at this point (drivers builtin to kernel)...
#[ -z "`lsmod | grep 'usb_storage'`" ] && modprobe $Q $VERB -s usb_storage

[ -n "`lsmod | cut -f 1 -d ' ' | grep 'fb$'`" ] && fbcon_func

if [ "$PUPMODE" = 2 ]; then #full hd installation.

_load_var_drivers(){
[ -z "`lsmod | grep 'nls_cp437'`" ]     && modprobe $Q $VERB -s nls_cp437 #these needed by vfat/ntfs/ext2 f.s.'s.
[ -z "`lsmod | grep 'nls_iso8859_1'`" ] && modprobe $Q $VERB -s nls_iso8859-1 # "
[ -z "`lsmod | grep 'fuse'`" ]          && modprobe $Q $VERB -s fuse
[ -z "`lsmod | grep "$LAYERFS"`" ]      && modprobe $Q $VERB -s $LAYERFS #unionfs or aufs.
[ -z "`lsmod | grep 'squashfs'`" ]      && modprobe $Q $VERb -s squashfs
}

MODULES_ALL=`busybox modprobe -l | sed 's%.*/%%'`
for d in nls-cp437 nls-iso8859-1 usb-storage fuse squashfs $LAYERFS
do
[ "$d" ] || continue
echo "$MODULES_ALL" | grep $Q -w "$d" || continue
m=${d//-/_}
grep $Q -w "^$m" /proc/modules && continue
modprobe $Q $VERb -s $d
done
fi

status_func 0
fi

######################LOAD SWAP#####################

[ "$SWAPON" = "done" ] || loadswap_func

#################MISC. SYSTEM SETUP#################
echo "MISC. SYSTEM SETUP"

echo -e "${DISTRO_NAME} Linux\n`uname -s` `uname -r` [`uname -m` arch]\n\n" > /etc/issue
echo "1" > /proc/sys/net/ipv4/ip_dynaddr
hostname -F /etc/hostname

rm $VERB -f /mnt/home  ###2011-10-29 TODO : observe
if [ "$PUPMODE" = 2 ]; then
 PUP_HOME='/'
 echo "PUP_HOME='/'" >> /etc/rc.d/PUPSTATE
 ln $VERB -s / /mnt/home
elif [ "$PUP_HOME" ]; then #see /etc/rc.d/PUPSTATE
  if [ "$PUP_HOME" = "/pup_ro1" -o "$PUP_HOME" = "/pup_rw" ]; then
   #note, PUPMODE=6 will have PUP_HOME=/pup_rw.
   #in the case of the persistent storage being the partition itself, this will be mounted
   #on /initrd/pup_ro1 (tmpfs on pup_rw for restricted writes) or directly on /initrd/pup_rw
   #and we do not really want users to access it as it is a unionfs layer. Instead, they are
   #already accessing it as "/".
   ln $VERB -s / /mnt/home
  else
   ln $VERB -s /initrd${PUP_HOME} /mnt/home
  fi
fi
echo safeBoot=$safeBoot 1
################WAIT MODULES LOADED##################
if [ "$safeBoot" -ge "4" ]; then
echo "WAIT MODULES LOADED"
#previous module loading may not have completed...
echo -n "Waiting for modules to complete loading..." >$TTY
echo -n "Waiting for modules to complete loading..."

special_mnt_func(){
[ -d /SPECIAL_MNT ] || mkdir $VERB /SPECIAL_MNT

nodevFS=`grep '^nodev' /proc/filesystems | awk '{print $2}'`
for fs in $nodevFS; do
[ "`grep -w "$fs" /proc/mounts`" ] && continue

case $fs in
hugetlbfs|*ramfs|*tmpfs) continue;;
configfs|efivarfs|proc|sysfs)     continue;;
bdev|sockfs|pipefs|anon_inodefs) continue;;
aufs|fuse*|overlayfs|unionfs) continue;;
autofs*|nfs|nfs4|nfsd)       continue;;
inotifyfs)               continue;;
exofs)            continue;;
# flash
mtd_inodefs|ubifs|jffs2) continue;;
esac

DIR="$fs"

case $fs in
debugfs)
#[ -d /sys/kernel/debug ] || mkdir $VERB -p /sys/kernel/debug;
#grep $Q ' /sys/kernel/debug ' /proc/mounts || {
busybox mount $VERB $VERB -t debugfs debugfs /sys/kernel/debug;
echo 'module usb_storage +p' >/sys/kernel/debug/dynamic_debug/control;
#}
;;
*)
[ -d /SPECIAL_MNT/$DIR ] || mkdir $VERB -p /SPECIAL_MNT/$DIR
mount $VERB $VERB -t $fs none /SPECIAL_MNT/$DIR
;;
esac

done
}
special_mnt_func

WAITCNT=0
PCIPCMCIA=`elspci -l | grep '060700' | grep '<>' | cut -f2 -d' '`
if [ "$PCIPCMCIA" ]; then #this may be slow to respond.
 echo -n " pcmcia"  >$TTY
 echo -n " pcmcia"
 while [ $WAITCNT -lt 10 ]; do
  [ "`lsmod | grep -E '^yenta_socket |^tcic |^i82092 |^i82365 |^pd6729 '`" ] && break
  WAITCNT=$((WAITCNT + 1))
  sleep 1
  echo -n " $WAITCNT" >$TTY
  echo -n " $WAITCNT"
 done
 echo
fi

PCIUSB=`elspci -l | grep -E '0C0300|0C0310|0C0320' | grep '<>' | cut -f2 -d' '`
 for aBUS in `echo "$PCIUSB" | sort -u`; do
 DRIVER='';
 case $aBUS in
 0C0320) DRIVER=ehci-hcd;;
 0C0310) DRIVER=ohci-hcd;;
 0C0300) DRIVER=uhci-hcd;;
 *) continue;;
 esac
 modprobe $Q $VERB $DRIVER
 done
#note, if initrd then usb-storage will have already loaded...
if [ "$PCIUSB" ]; then #this may be slow to respond.
 echo -n " usb"  >$TTY
 echo -n " usb"
 PCIUSBNUM=`echo "$PCIUSB" | sort -u | wc -l`
 while [ $WAITCNT -lt 10 ]; do
  [ "`lsmod | grep -w -E '^[eoux]hci[_-]hcd' | wc -l`" -ge $PCIUSBNUM ] && break
  WAITCNT=$((WAITCNT + 1))
  sleep 1
  echo -n " $WAITCNT" >$TTY
  echo -n " $WAITCNT"
 done
echo
fi
echo safeBoot=$safeBoot 2
#replay uevents from /sys (more interfaces as a consequence of above drivers loaded)...
#note, this also a workaround for kernel 'bug' where entries appear in /sys but no uevent
#gets generated (yes it happens in 2.6.25.x kernel!)

echo 'Running the pcmcia-usb-ssb modaliases add by rc.sysinit '$0
echo '##########'  >> /tmp/pup_event_module_devpath_log
echo 'Running the pcmcia-usb-ssb modaliases add by rc.sysinit '$0 >> /tmp/pup_event_module_devpath_log
echo safeBoot=$safeBoot 3
LSMOD=`cut -f 1 -d ' ' /proc/modules`
MODULECNT2=0
if [ $KERNMAJ -lt 24 ]; then #v431
 echo 'Add loop for KERNMAJ -th 24'
 [ -e /sys/bus/pcmcia/devices ] && NEWPCMCIA=`ls /sys/bus/pcmcia/devices/*/modalias | tr '\n' ' '`
 [ -e /sys/bus/usb/devices ] && NEWUSB=`ls /sys/bus/usb/devices/*/modalias | tr '\n' ' '`
 for oneMODALIAS in ${NEWPCMCIA}${NEWUSB}
 do
  onePATH=${oneMODALIAS%/*}
  if [ -e "${onePATH}"/uevent ]; then
   echo add > "${onePATH}"/uevent #generates an 'add' uevent.
   sleep 0.02
   MODULECNT2=$((MODULECNT2+1))
  fi
 done
else
 #v424 try it a different way, this also fixes ssb devices (such as b43.ko)...
 echo 'Add loop for KERNMAJ -ge 24'
 [ -e /sys/bus/pcmcia/devices ] && NEWPCMCIA=`ls /sys/bus/pcmcia/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 [ -e /sys/bus/usb/devices ] && NEWUSB=`ls /sys/bus/usb/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 [ -e /sys/bus/ssb/devices ] && NEWSSB=`ls /sys/bus/ssb/devices/*/uevent 2>/dev/null | tr '\n' ' '`
 echo -e "${NEWPCMCIA}\n${NEWUSB}\n${NEWSSB}"
 for oneUEVENT in ${NEWPCMCIA}${NEWUSB}${NEWSSB}
 do
  onePATH=${oneUEVENT%/*}
  MODULECNT2=$((MODULECNT2+1))
  #the check for 'modalias' file is maybe needed for old kernel?...
  [ -e "${onePATH}"/modalias -a "`grep 'MODALIAS' $oneUEVENT`" ] || continue
  echo add > "$oneUEVENT"
  sleep 0.02
 done
fi
echo safeBoot=$safeBoot 4

if [ "$MODULECNT2" -gt 0 ]; then
echo >$TTY
echo -e -n 'Detected '"\e[1;34m""$MODULECNT2 ""\e[0;39m"'pcmcia/usb/ssb busses' >$TTY
MODULECNT2=0
fi

sleep 3s
LSMOD2=`cut -f 1 -d ' ' /proc/modules`

if [ "$LSMOD2" != "$LSMOD" ]; then
DIFF=`echo "$LSMOD2" | grep -v "$LSMOD"`
DIFFCOUNT=`echo "$DIFF" | wc -l`
echo >$TTY
echo -e -n 'Additionally loaded '"\e[1;35m""$DIFFCOUNT ""\e[0;39m"'drivers' >$TTY
fi
echo safeBoot=$safeBoot 5
echo >> /tmp/pup_event_module_devpath_log

#wait for usb-storage drives to become available...(already done if initrd)
#note, pup_event_backend_d and udevd both log to this file when load modules
# (the latter via udev handler script /sbin/pup_event_backend_modprobe)...
if [ "`grep 'usb[_-]storage' /tmp/pup_event_module_devpath_log`" ]; then #see pup_event_backend_d
 echo -n " usb-storage"  >$TTY
 echo -n " usb-storage"
 while [ $WAITCNT -lt 15 ]; do
  [ "`dmesg | grep 'usb\-storage.*scan complete'`" ] && break
  sleep 1
  WAITCNT=$((WAITCNT + 1))
  echo -n " $WAITCNT" >$TTY
  echo -n " $WAITCNT"
 done
 #precaution, make sure have got them all... v412 need sort -u...
 #USBSTORAGES=`/bin/dmesg | grep "usb-storage: device found at" | sort -u | wc -l`
 USBSTORAGES=`/bin/dmesg | grep -o "usb\-storage.*starting scan.*" | sort -u | wc -l`
 while [ $WAITCNT1 -lt 15 ]; do  ###+2011-10-31 changed WAITCNT to WAITCNT1
  AVAILABLEUSBSTORAGES=`/bin/dmesg | grep -o "usb\-storage.*scan complete.*" | wc -l`
  [ $AVAILABLEUSBSTORAGES -ge $USBSTORAGES ] && break
  sleep 1
  WAITCNT1=$((WAITCNT1 + 1))  ###+2011-10-31 changed WAITCNT to WAITCNT1
  echo -n " $WAITCNT1" >$TTY  ###+2011-10-31 changed WAITCNT to WAITCNT
  echo -n " $WAITCNT1"
 done
 echo
fi
echo safeBoot=$safeBoot 6
sleep 1 #v411 a bit extra. rerwin reports usb mouse detection problem some hardware.
        #(delay before usb mouse info appears in /proc/bus/input/devices)

fi

 SATADRIVES=`ls -1 /sys/block | grep '^sd'`
 for i in $SATADRIVES; do
 if readlink -f /sys/block/$i | grep $Q 'usb'; then
  USB_SATAD="$USB_SATAD $i"
 else
  BLOCK_SATAD="$BLOCK_SATAD $i"
 fi
 done
 if [ -e /proc/ide ]; then
  echo "SATADRIVES='${BLOCK_SATAD} '" >> /etc/rc.d/PUPSTATE #kernel supports /dev/hd*.
  echo "USBDRIVES='${USB_SATAD} '" >> /etc/rc.d/PUPSTATE
 else
  echo "ATADRIVES='${BLOCK_SATAD} '" >> /etc/rc.d/PUPSTATE
  echo "USBDRIVES='${USB_SATAD} '" >> /etc/rc.d/PUPSTATE
 fi
echo safeBoot=$safeBoot 7


status_func 0

##############USER SELECTED MODULES##################
if [ "$safeBoot" = "2" ] || [ "$safeBoot" -ne "0" -a "$safeBoot" -ne "4" ]; then
echo "USER SELECTED MODULES"
#the user can select extra modules to load in the BootManager...
if [ "$ADDLIST" ]; then #variable is in /etc/rc.d/MODULESCONFIG
 echo -n "Loading user-selected modules..." >$TTY
 for MODULE in $ADDLIST
 do
  MPARAMS=""
  if [ "`echo -n "$MODULE" | tr ':' ' ' | wc -w`" -gt 1 ]; then
   MPARAMS=`echo "$MODULE" | cut -f 2- -d ':' | tr ':' ' '`
    MODULE=`echo "$MODULE" | cut -f 1  -d ':'`
  fi
  echo -n " $MODULE" >$TTY
  echo "Loading module $MODULE $MPARAMS"
  firmware_module_func #install firmware tarball. see functions4puppy4.
  #w463 for mwave.ko (modem), do not load module, just the firmware, which has script that correctly loads mwave.ko.
  [ "$MODULE" = "mwave" ] || /sbin/modprobe $Q $VERB -s --first-time $MODULE $MPARAMS  ##+2011-10-31 added -v and --first-time
 done
 status_func 0
fi
fi
echo safeBoot=$safeBoot 8

if [ "$safeBoot" -ge "4" ]; then
 [ -z "`lsmod | grep 'fbcon'`" ] && fbcon_func

 #had hoped to retire this, but HardInfo needs it...
 #[ "`lsmod | grep '^usbcore'`" ] && busybox mount -t usbfs usbfs /proc/bus/usb
 [ -d /proc/bus/usb ] && busybox mount $VERB $VERB -t usbfs usbfs /proc/bus/usb

 #v408 only needed for 2.6.21.7, as 2.6.25.x loads these automatically...
 #v408 kirk: Check for laptop battery...
 modprobe $Q $VERB -s battery
 if [ -d /proc/acpi/battery ]; then
  results="`find /proc/acpi/battery -mindepth 1 -type d`"
   if [ -n "$results" ]; then
    modprobe $Q $VERB -s ac
    modprobe $Q $VERB -s thermal
    modprobe $Q $VERB -s fan
   else
    rmmod battery
   fi
  else true
 fi
fi
echo safeBoot=$safeBoot 9

###################SETUP SERVICES################
echo "SETUP SERVICES"
echo -n "Setting up services (network, printing, etc.)..." >$TTY
if [ -L /dev/modem ]; then
 DEVM=`readlink /dev/modem`
 case $DEVM in
  modem) #error, circular link.
   rm $VERB -f /dev/modem
   DEVM=""
  ;;
  /dev/*) #wrong format.
   DEVM=${DEVM#*/dev/}
   ln $VERB -sf $DEVM /dev/modem
  ;;
 esac
 case $DEVM in
  ttyS[0-9]*) #apparently setserial can crash with other modems.
   setserial $VERB -b /dev/modem auto_irq skip_test autoconfig
  ;;
 esac
fi

#v411 can use old network wizard (from 403, based on 400)...
CHECKOLDWIZ=`ls -1 /etc/*[0-9]mode 2>/dev/null` #ex: eth0mode, wlan0mode.
if [ "$CHECKOLDWIZ" -a -d /usr/local/net_setup ]; then
 #note, old wizard is located in /usr/local/net_setup.
 /usr/local/net_setup/etc/rc.d/rc.network &
else
 /etc/rc.d/rc.network &
fi

#Ybd="$Ybd" /etc/rc.d/rc.services $safeBoot & #run scripts in /etc/rc.d/init.d
_DATE_="$_DATE_" /etc/rc.d/rc.services $safeBoot &

echo -e "\\033[62G\\033[1;33m[backgrounded]\\033[0;39m" >$TTY #column 62, yellow.


############RECOGNISE MEDIA DEVICES################
echo "RECOGNISE MEDIA DEVICES"
echo -n "Recognising media devices..." >$TTY
#recognise optical drives...
echo -n ' optical' >$TTY
OPTCNT=1;CDTYPE="";DVDTYPE="";CDBURNERTYPE=""
OPTICALS=`grep '^drive name:' /proc/sys/dev/cdrom/info | grep -o -E 'sr.*|hd.*' | tr '\t' ' '`
[ -L /dev/cdrom ] && CDTYPE=`readlink /dev/cdrom | cut -f 3 -d '/'`
[ -L /dev/dvd ]   && DVDTYPE="`readlink /dev/dvd | cut -f 3 -d '/'`"
[ -f /etc/cdburnerdevice ] && read CDBURNERTYPE </etc/cdburnerdevice
[ "`echo "$OPTICALS" | grep "$CDTYPE"`" ]       || CDTYPE="" #no longer exists.
[ "`echo "$OPTICALS" | grep "$DVDTYPE"`" ]      || DVDTYPE="" #no longer exists.
[ "`echo "$OPTICALS" | grep "$CDBURNERTYPE"`" ] || CDBURNERTYPE="" #no longer exists.
for oneOPTICAL in $OPTICALS
do
 oneNUM=`echo -n "$oneOPTICAL" | cut -c 3`
 [ "$CDTYPE" = "" ]  && CDTYPE="$oneOPTICAL"
 [ "$DVDTYPE" = "" ] && [ "`grep '^Can read DVD' /proc/sys/dev/cdrom/info | head -n 1 | grep -o '[01]' | sed -e 's/[^01]//g' | cut -c $OPTCNT`" = "1" ] && DVDTYPE="$oneOPTICAL"
 [ ! "$CDBURNERTYPE" -a "`grep '^Can write CD' /proc/sys/dev/cdrom/info | head -n 1 | grep -o '[01]' | sed -e 's/[^01]//g' | cut -c $OPTCNT`" = "1" ] && CDBURNERTYPE="$oneOPTICAL"
 OPTCNT=$((OPTCNT + 1))
done
rm $VERB -f /dev/cdrom /dev/dvd /etc/cdburnerdevice
[ "$CDTYPE" ]  && ln $VERB -sf /dev/$CDTYPE /dev/cdrom
[ "$DVDTYPE" ] && ln $VERB -sf /dev/$DVDTYPE /dev/dvd
[ "$CDBURNERTYPE" ] && echo "$CDBURNERTYPE" > /etc/cdburnerdevice
#[ "$DVDTYPE" ] && hdparm -d1 /dev/$DVDTYPE
case $DVDTYE in hd*) hdparm -d1 /dev/$DVDTYPE;; esac

#w468 simplify...
##w463 i think time has come to dump the old 'psaux'. use /dev/input/mice for both usb
##and ps/2 mice...
##recognise mouse... v411...
##note, if wanted to detect serial mouse here, k2.6.25.16 has module 'sermouse' that must be loaded (currently in xwin).
#TODO: simplify above, use 'input/mice' for ps2 mouse also, but may need to modify Xorg/Xvesa/Input Wizards.
#      (may also have to remove builtin psaux driver from kernel).
if [ ! -f /etc/mousedevice ]; then
 echo "input/mice" > /etc/mousedevice
fi
[ "`cat /etc/mousedevice`" = "psaux" ] && echo "input/mice" > /etc/mousedevice
test -e /dev/input/mice || { mkdir $VERB -p /dev/input; mknod /dev/input/mice c 13 63; }
read MOUSE_DEV_NODE </etc/mousedevice
ln $VERB -snf $MOUSE_DEV_NODE /dev/mouse

#recognise keyboard...
#echo -n ' keyboard' >$TTY
/etc/rc.d/rc.country ;STATUS=$(( STATUS + $? )) #this asks for keyboard layout.

status_func $STATUS

############MISC DESKTOP STUFF##################
echo "MISC. DESKTOP STUFF"
case "$PUPMODE" in "77") #77=multisession cd/dvd.
 if [ "`grep "savesession" /root/Choices/ROX-Filer/PuppyPin`" = "" ]; then
  echo '<icon x="768" y="128" label="save">/usr/sbin/savesession-dvd</icon>' >> /root/Choices/ROX-Filer/PuppyPin
  grep -v '/pinboard' /root/Choices/ROX-Filer/PuppyPin > /tmp/PuppyPin-CPY
  _sync
  cp $VERB -f /tmp/PuppyPin-CPY /root/Choices/ROX-Filer/PuppyPin
  echo '</pinboard>' >> /root/Choices/ROX-Filer/PuppyPin
 fi
;;
3|7|13)
#save button on desktop when booted from flash drive...
 if [ "`grep "save2flash" /root/Choices/ROX-Filer/PuppyPin`" = "" ]; then
  echo '<icon x="768" y="128" label="save">/usr/sbin/save2flash</icon>' >> /root/Choices/ROX-Filer/PuppyPin
  grep -v '/pinboard' /root/Choices/ROX-Filer/PuppyPin > /tmp/PuppyPin-CPY
  _sync
  cp $VERB -f /tmp/PuppyPin-CPY /root/Choices/ROX-Filer/PuppyPin
  echo '</pinboard>' >> /root/Choices/ROX-Filer/PuppyPin
 fi
;;
esac


###################PERSONAL BOOT SCRIPT######################
echo "PERSONAL BOOT SCRIPT"
#personal boot script here...
if [ ! -f /etc/rc.d/rc.local ]; then
 echo '#this file called from rc.sysinit' > /etc/rc.d/rc.local
 echo '#you can edit this file' >> /etc/rc.d/rc.local
 echo '#When firewall is installed, will append lines to this file...' >> /etc/rc.d/rc.local
fi
. /etc/rc.d/rc.local

dmesg > /tmp/bootkernel.log
cp $VERB /var/log/messages /tmp/boot.messages
cp $VERB /var/log/messages.0 /tmp/boot.messages.0
echo `uptime` >>/tmp/bootkernel.log

if [ -z "`grep -i 'nox' /proc/cmdline`" ]; then
echo 'X' > /tmp/X.status
else
echo 'nox' > /tmp/X.status
fi

[ -c /dev/ppp ]   || mknod /dev/ppp c 108 0
[ -L /dev/mouse ] || ln $VERB -sf /dev/input/mice /dev/mouse
[ -c /dev/mem ]   || mknod /dev/mem c 1 1

root_link_func(){
#if test ! -L /dev/root ; then
rm $VERB -f /dev/root
RD=`dmesg | grep -i 'Mounted root'`
if [ -z "$RD" ]; then #&&
rootdevice=`rdev | cut -d ' ' -f1 | cut -f3 -d '/'`
[ -z "$rootdevice" ] && return
ln $VERB -sf $rootdevice /dev/root
else
device=`echo "$RD" | grep -o -i 'device .*' | cut -f 2 -d ' '`
MAJ=`echo $device | cut -f 1 -d ':'`
Min=`echo $device | cut -f 2 -d ':' | sed 's#\.$##'`
#does not work for MAJ=Min rootdevice=`grep -w $MAJ /proc/partitions | grep -w $Min | tr -s [[:blank:]] | cut -f 5 -d ' '`
CATPROCPART=`cat /proc/partitions | sed "1,2 d" | sed 's#^[[:blank:]]*##g' | tr -s ' '`
rootdevice=`echo "$CATPROCPART" | grep -w "^$MAJ $Min" | cut -f 4 -d ' '`  ##+2011-10-31 had to add -w to grep
# 259   655360   15390270 hda5
# 259   65536    15446466 hda8
[ -z "$rootdevice" ] && return
ln $VERB -sf $rootdevice /dev/root
fi
}
root_link_func

fsckme_func(){
PDEV1=`basename $(rdev | cut -f 1 -d ' ' | sed 's#/dev/##')`
DEV1FS=`mount | grep '^/dev/root' | cut -f 5 -d ' '`
echo "$PDEV1"','"$DEV1FS"',' > /etc/.fsckme.flag
[ "$PUPMODE" = '2' ] && echo "PDEV1='$PDEV1'" >> /etc/rc.d/PUPSTATE  ##2011-12-16
}
fsckme_func

sort_pup_eve_bac_mod_func(){
FILE='/tmp/pup_eve_bac_mod.log'
[ -f "$FILE" ] || FILE='/tmp/pup_event_backend_modprobe.log'
[ -f "$FILE" ] || return  ##+++2011-10-31
sleep 12s ##5s
cat "$FILE" | sort -g -k 1,3 -t ' ' >"$FILE".sorted
PIDS=`cut -f 1 -d ' ' "$FILE".sorted | sort -u | sort -g`
for i in $PIDS; do
echo PID  "$i"
Line=`grep -n -w "^$i" "$FILE".sorted | tail -n 1 | cut -f 1 -d ':'`
echo Line "$Line"
sed -i "$Line a\ " "$FILE".sorted #insert an empty line
done
}
sort_pup_eve_bac_mod_func &

test "$origLOGLVL" && sysctl $Q -w kernel.printk=$origLOGLVL
#that's it. next stop is /etc/profile...
###END###
