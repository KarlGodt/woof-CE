#!/bin/bash

test -f /etc/rc.d/f4puppy5 && . /etc/rc.d/f4puppy5
test "$DEBUG" || DEBUG=;
test "$OUT" || OUT=/dev/null
test "$ERR" || ERR=/dev/null

[ "`tty`" = 'not a tty' ] && exit $?

crossfire_client_dir=$HOME/.crossfire
crossfire_client_log_dir="$crossfire_client_dir"/logs
crossfire_client_data_dir=/usr/local/share/crossfire-client
mkdir $VERB -p "$crossfire_client_log_dir"
crossfire_server_dir=/usr/games/crossfire
crossfire_server_config_dir="$crossfire_server_dir"/etc/crossfire
crossfire_server_tmp_dir="$crossfire_server_dir"/tmp
mkdir $VERB -p "$crossfire_server_config_dir" "$crossfire_server_tmp_dir" ##+++2013-07-07

if test -f "$crossfire_client_dir"/crossfire_gtkrc-2.0; then
 export GTK2_RC_FILES="$crossfire_client_dir"/crossfire_gtkrc-2.0
fi

trap "echo ${client_[@]}; exit" 0 1 2

## generate possible database in my case from 1.9.1 upwards; adjust accordingly to your namings
for version in 1.9.1 1.10.0 1.11.0 1.12.0 1.12.svn 1.50.0 1.60.0 1.70.0 ;
do

short_version="${version//[[:punct:]]/}"

[ "$DEBUG" ] && echo "short_version='$short_version'"
[[ "$short_version" =~ '[[:alpha:]]' ]] && {
short_version_nr="${short_version//[[:alpha:]]/}"
short_version_chars="${short_version//[[:digit:]]/}"
short_version="${short_version_chars}${short_version_nr}"
[ "$DEBUG" ] && echo "short_version='$short_version'"
}

if [[ "$short_version" =~ '191' ]] || [[ "$short_version" =~ '110' ]] || [[ "$short_version" =~ '111' ]] ; then
client_[$short_version]=cfclient-${version}
client_x_[$short_version]=xcfclient-${version}
client_x11_[$short_version]=cfclient-x11-${version}
client_gtk_[$short_version]=gcfclient-${version}
client_gtk1_[$short_version]=gcfclient1-${version}
client_gtk1v2_[$short_version]=gcfclient1v2-${version}
client_gtk2_[$short_version]=gcfclient2-${version}

elif [[ "$short_version" =~ '112' ]] ; then

client_[$short_version]=crossfire-client-${version}
client_x_[$short_version]=crossfire-client-x-${version}
client_x11_[$short_version]=crossfire-client-x11-${version}
client_gtk_[$short_version]=crossfire-client-gtk-${version}
client_gtk1_[$short_version]=crossfire-client1-gtk1-${version}
client_gtk1v2_[$short_version]=crossfire-client-gtk1v2-${version}
client_gtk2_[$short_version]=crossfire-client-gtk2-${version}

else

client_[$short_version]=crossfire-client-${version}
#client_x_[$short_version]=crossfire-client-x-${version}
#client_x11_[$short_version]=crossfire-client-x11-${version}
#client_gtk_[$short_version]=crossfire-client-gtk-${version}
#client_gtk1_[$short_version]=crossfire-client1-gtk1-${version}
#client_gtk1v2_[$short_version]=crossfire-client-gtk1v2-${version}
client_gtk2_[$short_version]=crossfire-client-gtk2-${version}

fi
done

[ "$DEBUG" ] && echo "${client_[@]}

${client_x_[@]}

${client_x11_[@]}

${client_gtk_[@]}

${client_gtk1_[@]}

${client_gtk1v2_[@]}

${client_gtk2_[@]}
"
for client in ${client_[@]} ${client_x_[@]} ${client_x11_[@]} ${client_gtk_[@]} ${client_gtk1_[@]} ${client_gtk1v2_[@]} ${client_gtk2_[@]} ; do
[ "`which $client`" ] || continue
CLIENTS_ALL="${CLIENTS_ALL}
`echo $client`"
done

[ "$DEBUG" ] && echo "CLIENTS_ALL='$CLIENTS_ALL'"

CLIENTS_ALL=`echo "$CLIENTS_ALL" |sort -d`

[ "$DEBUG" ] && echo "CLIENTS_ALL='$CLIENTS_ALL'"

echo "$0 : '`readlink -e $0`' ::
Wrapper to choose the installed crossfire client
if several are defined in this script .
"

while [ 1 ] ; do
select client_choose in $CLIENTS_ALL ; do echo "
$client_choose chosen"; break ; done ;
[ "$client_choose" ] && break ;
sleep 1s
done

#assigned_client=`echo "$CLIENTS" | grep -w ^$client_choose | cut -f2 -d=`
assigned_client="$client_choose"

which "$assigned_client" || { echo "'$client_choose' = '$assigned_client' not in PATH ?" >&2;exit $?; }

function_start_server(){

pidof crossfire >$OUT &&        { echo "OK, crossfire (server) already running"; return 0; }
pidof crossfire-server >$OUT && { echo "OK, crossfire-server already running";return 0; }
ps | grep crossfire | grep server || {

crossfire_server="$crossfire_server_dir"/bin/crossfire
[ -f "$crossfire_server" ] ||  crossfire_server="$crossfire_server_dir"/bin/crossfire-server

[ -x "$crossfire_server" ] && {

echo starting crossfire server ... >&2

[ -f "$crossfire_server_tmp_dir"/crossfire_server.log ] && mv $VERB "$crossfire_server_tmp_dir"/crossfire_server.log "$crossfire_server_tmp_dir"/crossfire_server.log.0

ME_IP_ADDRESS=`ifconfig |grep 'inet addr:' |tail -n1 |awk '{print $2}' |cut -f2 -d:`  #need to filter 'inet6 addr' ?
case $ME_IP_ADDRESS in
127.0*)
cd /tmp
  rm $VERB -f icanhazip.txt
wget -O icanhazip.txt icanhazip.com && {
read ME_IP_2 <icanhazip.txt
}

test "$ME_IP_2" && ME_IP_ADDRESS="$ME_IP_2"
;;
esac

echo "ME_IP_ADDRESS='$ME_IP_ADDRESS'"
test -e "$crossfire_server_config_dir"/settings ||         touch "$crossfire_server_config_dir"/settings
sed -i "s,^metaserver_host .*,metaserver_host ${ME_IP_ADDRESS}," "$crossfire_server_config_dir"/settings
test -e "$crossfire_server_config_dir"/metaserver2 ||  touch "$crossfire_server_config_dir"/metaserver2
sed -i "s,^localhostname .*,localhostname ${ME_IP_ADDRESS}," "$crossfire_server_config_dir"/metaserver2

"$crossfire_server" +d -detach -log "$crossfire_server_tmp_dir"/crossfire_server.log
#"$crossfire_server" +d -log "$crossfire_server_tmp_dir"/crossfire_server.log &


sleep 5
_sync

echo ... done ...
  }
 }
return $?
}
function_start_server

function_link_glade_dir(){

IS_GLADE=`echo "${assigned_client}" | grep -o 'gtk2.*' |cut -f2 -d'-'`
[ "$DEBUG" ] && echo "IS_GLADE='$IS_GLADE'"
if [ "$IS_GLADE" ] ; then
 if [ -d "$crossfire_client_data_dir"/glade-gtk2 ] ; then
 local REALPATH=`realpath "$crossfire_client_data_dir"/glade-gtk2`
 case $REALPATH in
 */glade-gtk2.backup):;;
 *)
 rm $VERB -rf "$crossfire_client_data_dir"/glade-gtk2.backup
 [ "$DEBUG" ] && echo "REALPATH='$REALPATH'"
#mv $VERB -f "$REALPATH" "$crossfire_client_data_dir"/glade-gtk2.backup
test "$REALPATH" && cp -a $VERB -f "$REALPATH" "$crossfire_client_data_dir"/glade-gtk2.backup
 ;;
 esac
 fi
 if [ -d "$crossfire_client_data_dir"/glade-gtk2-${IS_GLADE} ] ; then
  ln $VERB -snf glade-gtk2-${IS_GLADE} "$crossfire_client_data_dir"/glade-gtk2
 else
  ln $VERB -snf glade-gtk2.backup "$crossfire_client_data_dir"/glade-gtk2
 fi
fi
[ "$DEBUG" ] && { rox -D "$crossfire_client_data_dir"; rox -x -d "$crossfire_client_data_dir"; }
}

function_link_glade_dir

function_link_sound_serv(){
VERSION="${assigned_client##*\-}"
[ "$DEBUG" ] && echo "VERSION='$VERSION'"
if [ -f /usr/local/bin/cfsndserv ] && [ ! -L /usr/local/bin/cfsndserv ] ; then
 mv $VERB /usr/local/bin/cfsndserv /usr/local/bin/cfsndserv.backup
fi
if [ -f /usr/local/bin/cfsndserv_alsa9 ] && [ ! -L /usr/local/bin/cfsndserv_alsa9 ] ; then
 mv $VERB /usr/local/bin/cfsndserv_alsa9 /usr/local/bin/cfsndserv_alsa9.backup
fi

#ln -sf cfsndserv-${VERSION} /usr/local/bin/cfsndserv
ln $VERB -sf cfsndserv_alsa9-${VERSION} /usr/local/bin/cfsndserv
ln $VERB -sf cfsndserv_alsa9-${VERSION} /usr/local/bin/cfsndserv_alsa9

}

function_link_sound_serv

echo "
[ INFO/ ]
Some clients tend to occupy one CPU core
when no local server is running
or no internet access available at startup
if not configured with --disable-metaserver2 .
Others startup ok but will behave similar if disconnected.
The X11 and GTK frontends are unusable then.
This is a *BUG* .
Please kill the program manually if neccessary:
Example macro for the terminal:
ps | grep client ; kill -9 \`pidof cfclient\`)
where [cf]client has to be adjusted to the naming like
gcfclient or crossfire-client-gtk .
[ /INFO ]
" >&2

function_kill_unresponding_client(){

me_name=`echo "${assigned_client:0:15}" | /bin/tr -d ' '`

already_running=`/bin/ps -o %C%p%P%a | /bin/grep "$me_name" | /bin/grep -vE -w "grep|ldd|$$"`
echo "
already_running='
$already_running
'" >&2
ALREDY_RUN_PID=`echo "$already_running" | /bin/awk '{print $2}' | tr '\n' '|' | sed 's%^|*%%;s%|*$%%'`
test "$ALREDY_RUN_PID" || ALREDY_RUN_PID=NONE
echo "ALREDY_RUN_PID='$ALREDY_RUN_PID'" >&2

/bin/sleep 9s


while :; do

other_running=`/bin/ps -o %C%p%P%a | /bin/grep "$me_name" | /bin/grep -vE -w "grep|ldd|$$"`
echo "
other_running='
$other_running
'" >&2
OTHER_RUN_PID=`echo "$other_running" | /bin/awk '{print $2}' | tr '\n' '|' | sed 's%^|*%%;s%|*$%%'`
test "$OTHER_RUN_PID" || OTHER_RUN_PID=NONE
echo "OTHER_RUN_PID='$OTHER_RUN_PID'"   >&2
echo -n "This program : " >&2
#/bin/ps -o %c%p%C%P | /bin/grep "^$me_name" >&2
#/bin/ps -o %C%p%a | /bin/grep "$me_name" | /bin/grep -v 'grep' >&2
/bin/ps -o %C%p%a | /bin/grep "$me_name" | /bin/grep -v 'grep' | /bin/grep -E -v -w "$OTHER_RUN_PID" >&2

#CHECK=`/bin/ps -o %c%p%C | /bin/grep -m1 "^$me_name"`
CHECK=`/bin/ps -o %C%p%a | /bin/grep "$me_name" | /bin/grep -v 'grep'`
CPU_US=`echo "$CHECK" | /bin/grep -v -E -w "$OTHER_RUN_PID" | /bin/awk '{print $1}' | /bin/cut -f1 -d'.'`
ME_PID=`echo "$CHECK" | /bin/awk '{print $2}' | /bin/grep -E -v -w "$OTHER_RUN_PID"`

[ "$DEBUG" ] && echo "CHECK='$CHECK'
CPU_US='$CPU_US' ME_PID='$ME_PID'
" >&2
[ "$CPU_US" ] || break

if [ "$CPU_US" -gt 40 ] ; then
/usr/bin/xmessage -buttons "Yes:100,No:101" -bg red "WARNING:
'$CHECK'
is running high.
Do you want to kill the program ?
"
 if [ "$?" -eq 100 ] ; then
 /bin/kill -9 $ME_PID
 fi;
 break;
fi
/bin/sleep 2s
done
return $?
}

function_kill_unresponding_client & fkPID=$!

trap "kill $fkPID;exit" INT TERM KILL ABRT QUIT STOP

dn_assigned_client=`dirname $(which "$assigned_client")`

if test "`which xlsfonts`"; then
FONTS=`xlsfonts`
NR_OF=`echo "$FONTS" |wc -l`
RANDOM_FONT=`echo $((${RANDOM}%$NR_OF))`
[ "$DEBUG" ] && echo "RANDOM_FONT='$RANDOM_FONT'"
FONT=`echo "$FONTS" | sed -n "$RANDOM_FONT p"`
[ "$DEBUG" ] && echo "FONT='$FONT'"
fi

ldd `which $assigned_client` | sort > "$crossfire_client_log_dir"/crossfire_client."$assigned_client".ldd

export PATH="${dn_assigned_client}:${dn_assigned_client}/../games/crossfire/bin:${dn_assigned_client}/../games/crossfire/scripts:${dn_assigned_client}/../games/crossfire/crossfire-client/scripts:${dn_assigned_client}/../share/crossfire-client/scripts:${crossfire_server_dir}/crossfire-client/scripts:$HOME/.crossfire/scripts"
[ "$DEBUG" ] && echo "PATH='$PATH'"
for p in `echo $PATH |tr ':' ' '`; do [ -d "$P" ] || /bin/mkdir -p "$p" ; done

err_log="$crossfire_client_log_dir"/crossfire_client."$assigned_client".$$.err.log
nor_log="$crossfire_client_log_dir"/crossfire_client."$assigned_client".$$.log

echo "
`date`
'$assigned_client' '$@'" >> "$err_log"
echo "'
`date`
$assigned_client' '$@'" >> "$nor_log"

echo "Starting '$assigned_client' and hoping for the best ..." >&2

if [ "`echo "$assigned_client" | /bin/grep -i 'X'`" -o "`echo "$assigned_client" | /bin/grep '^cfclient'`" ] ; then
 if [ "$*" ] ; then
 "$assigned_client" "$@" 2>>"$err_log" 1>>"$nor_log"
 else
 "$assigned_client" -font "$FONT" -split -scrolllines 40 -updatekeycodes 2>>"$err_log" 1>>"$nor_log"
 fi
else
"$assigned_client" "$@" 2>>"$err_log" 1>>"$nor_log"
fi


test "$fkPID" && /bin/ps -p $fkPID >$OUT && kill $fkPID
