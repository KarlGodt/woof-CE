#!/bin/ash
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_pup_event_backend_modprobe"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/sbin/pup_event_backend_modprobe"
MY_PID=$$

#test -f /etc/rc.d/f4puppy5 && {
#[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5
#
#ADD_PARAMETER_LIST=""
#ADD_PARAMETERS=""
#_provide_basic_parameters
#
#TWO_HELP=1
#ADD_HELP_MSG="$_COMMENT_"
#_parse_basic_parameters "$@"
#[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
#  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }
#
#_trap
#
#}
# End new header
#
#(c) Copyright 2008 Barry Kauler puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
# Called via udev rule /etc/udev/rules.d/50-udev-puppy-basic.rules
# I pulled this code out of /sbin/pup_event_backend_d, see 4.1alpha3.
# All of the uevent variables (exs: MODALIAS, SUBSYSTEM) are available here.
#v408 hack for madwifi ath_pci in 4.1retro. Alsa fix.
#w004 LANG=C, faster. /bin/ash, even faster.
#w463 rerwin: Correct override extraction of module name. Add use of optional first argument as MODULE, to support special udev rules added for hardware (modems) not automatically detected by the kernel.
#w478 support firmware in dirs, not .tar.gz tarballs.
#v424 For hybrid modem devices, select modem driver instead of storage driver when both are found by modprobe. (replaced in v432)
#v432 Remove reentrancy vulnerabiliies for 3 files, to prevent erratic preference substitution and potential multiple-ALSA setup errors.
#v432 For preferences, ensure preference found regardless of the number and order of matching modaliases.
#v432 For HSF/ALSA and hybrid modems, append appropriate preferences to ensure correct driver selected; a substitution flag is set by HSF init script.
#433 Consolidate usbserial modem scripts, using modules.dep for associations; track preference-replaced module.

#NOTICE: If the full 'udev' package, with utility 'udevd' is installed, rc.sysinit
#   will run 'udevd' instead of 'pup_event_backend_d' and this script will be used.


########################################################################
#
# CHANGES by Karl Reimer Godt
# 01.0 : logging to file LocalLOG='/tmp/pup_event_backend_modmodprobe.log'
# 02.0 : support for multiple modprobe.conf AND alsa.conf files
# 03.0 : leaving a note in .conf if alsa-card-nr had changed
# 04.0 : if module not found in --show-depends , try again with
#        modalias without pci:|platform:|etc:
#        example modalias 'platform:it87' becomes 'it87'
#        2.6.34-KRG-i486-compiled-AcerLaptop-rev5 with 5 modules.* files in
#        /lib/modules/`uname -r` without depmod-FULL [ bustbox depmod , too?? ]
#        does not load the it87 driver automatically @boot
#        modprobe -c | grep it87 = ''
#
# 06.0 : finally checking lsmod before modprobing
#        because updates in /tmp/pup_event_module_devpath.log
#        can be too slow (older Puppy4 series)
#
# 07.0 : added usage and debug func
#
# /dev/hda7
# /dev/hda7:
# LABEL="/"
# UUID="429ee1ed-70a4-43a5-89f8-33496c489260"
# TYPE="ext4"
# DISTRO_NAME='LucidÂPuppy'
# DISTRO_VERSION=218
# DISTRO_MINOR_VERSION=00
# DISTRO_BINARY_COMPAT='ubuntu'
# DISTRO_FILE_PREFIX='luci'
# DISTRO_COMPAT_VERSION='lucid'
# DISTRO_KERNEL_PET='linux_kernel-2.6.33.2-tickless_smp_patched-L3.pet'
# PUPMODE=2
# SATADRIVES=''
# PUP_HOME='/'
# PDEV1='hda7'
# DEV1FS='ext4'
# LinuxÂpuppypcÂ2.6.31.14Â#1ÂMonÂJanÂ24Â21:03:21ÂGMT-8Â2011Âi686ÂGNU/Linux
# Xserver=/usr/bin/Xorg
# $LANG=en_US
# today=TueÂOctÂ25Â15:38:22ÂGMT+1Â2011
# TODO1 : usleep $(( $$ * 10 ))
# TODO2 : $2 = -V|--verbose --stdout --xcon ~FIXED by changing
#         LocalLOG= from '/filename' to '>>/filename'
# TODO3 : filter "builtin $MODULE"
# TODO4 : add check for load >=2.0 ~FIXED
#
########################################################################

PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin"

LocalLOG='/tmp/pup_event_backend_modprobe.log'
OUT="$LocalLOG";ERR="$LocalLOG"
. /etc/rc.d/PUPSTATE
. /etc/rc.d/MODULESCONFIG
KERNVER=`uname -r` #NO, not Now in PUPSTATE

CONFFILE='/etc/modprobe.conf'
[ -f /etc/modprobe.d/modprobe.conf ] && CONFFILE='/etc/modprobe.d/modprobe.conf'
[ -f /etc/modprobe.d/puppy.conf ]    && CONFFILE='/etc/modprobe.d/puppy.conf'
ALSACONF="$CONFFILE"
[ -f /etc/modprobe.d/alsa-base.conf ] && ALSACONF='/etc/modprobe.d/alsa-base.conf'
export LANG=C #w004


TIME="date +%M.%S.%N" #command passed to debug
DEBUG=NO #YES or anything else
debug(){
test "$DEBUG" = "YES" || return 0
echo "$@" >> $OUT
[ "$do" ] && echo "$@"
[ "$dx" ] && echo "$@" >>/dev/console
return 0  ##force returnvalue in case of following && [ TEST ]
}

usage(){
echo "
$0 [KERNEL-MODULE] [--stdout|--xcon|--help]

PROGRAM gets passed MODALIAS by udevd at boottime .
Alternatively KERNEL_MODULE to load from CLI .

--stdout log to terminal
--xcon   log to xconsole
--help   this usage message
"
exit 1
}

#w463 optional $1 supplied by triggered udev rule, see /etc/udev/rules.d/60-udev-modem.rules
#RULEMODULE=""
#[ $1 ] && RULEMODULE="$1"
[ "$RULEMODULE" ] || RULEMODULE=''

for content in $@ ; do
case $content in
*stdout) do='yes' ;shift;;
*xcon)   dx='yes' ;shift;;
*help) usage;shift;;
-*|--*) usage;shift;;
*) RULEMODULE="$content"
[ "$RULEMODULE" ] || usage;;
esac
done
[ -z "`echo "$*"`" -a "$MODALIAS" == "" ] && usage
#echo "RULEMODULE='$RULEMODULE'"
#[ "$FASTBOOTMODULESLIST" ] && exit 1 #fastboot, see /etc/rc.d/MODULESCONFIG.

debug "$(echo $$ 0.0.0 `$TIME` `cat /proc/loadavg` )"
until [ "`cat /proc/loadavg | cut -f 1 -d '.'`" -lt '3' ] ; do sleep 2s;done  ###+++2011-11-30
debug "$(echo $$ 0.0.1 `$TIME` `cat /proc/loadavg` )"

debug "$(echo $$ 2.0 `$TIME` "MODALIAS='$MODALIAS'")"

#v432 Provide for optional preferences for internal use...
PREFEXTRAS=""

touch /tmp/pup_event_modprobe.conf  ##+++2011-11-09
#find a matching module... (/etc/pup_event_modprobe.conf created in rc.sysinit)
MODULE="`/sbin/modprobe --config /tmp/pup_event_modprobe.conf --show-depends $MODALIAS 2>/dev/null | tail -n 1 | rev | cut -f 1 -d '/' | rev | cut -f 1 -d '.' | tr '\-' '_'`"
debug "$(echo $$ 3.0 `$TIME` "MODULE='$MODULE'")"

if [ "$MODULE" = "" ] ; then
 if [ "$MODALIAS" ] ; then
 MODALIAS="${MODALIAS#*:}"
 MODULE="`/sbin/modprobe --config /tmp/pup_event_modprobe.conf --show-depends $MODALIAS 2>/dev/null | tail -n 1 | rev | cut -f 1 -d '/' | rev | cut -f 1 -d '.' | tr '\-' '_'`"
 debug "$(echo $$ 3.1 `$TIME` "MODULE='$MODULE'")" #+++changed here 2011-11-09
 ###+++2011-11-27
  if [ -n "`echo "$MODULE" | grep -w '^builtin'`" ] ; then  ##2012-06-21 grep -w does not work with 'builtin ' (space)
  debug "$(echo $$ 3.2 `$TIME` Module built into the kernel .. exit 1 ..)"  ##-2011-11-30 was 'MODULE
  exit 1
  fi
 ###+++2011-11-27
 fi
fi

[ "$RULEMODULE" ] && [ "$MODULE" = "" -o "$MODULE" = "usb_storage" ] && MODULE="$RULEMODULE" #w463 Use module from argument
debug "$(echo $$ 3.2 `$TIME` "MODULE='$MODULE'")"

###+++2011-11-09
if [ -n "`echo "$FASTBOOTMODULESLIST" | grep "$MODULE"`" ] ; then
debug "$(echo $$ 3.3 `$TIME` $MODULE in FASTBOOTMODULESLIST .. exit 1 ..)"
exit 1
fi
###+++2011-11-09

[ "$MODULE" ] || { debug "$(echo $$ 3.5 `$TIME` 'Still no MODULE .. exit 1 ..')";exit 1; }
#[ "$MODULE" = "usb_storage" ] && exit 1 #loaded explicitly in boot scripts.

touch /tmp/pup_event_module_devpath.log
if [ "`grep -e 'pup_event_backend_modprobe_protect --module' "$0"`" ]; then
 ps -o pid,args | grep pup_event_backend_modprobe_protect | grep $Q -e '--daemon' || {
  exec pup_event_backend_modprobe_protect --daemon >>$OUT 2>>$ERR & dPID=$!
  echo "NEED to trigger pup_event_backend_modprobe_protect --daemon with $dPID" >>$LocalLOG
  sleep 2
  START_PROTECT_DAEMON=1 #FLAG to stop it again at the end
 }
fi


#v432 Ensure module procesing done only once, except for usb-storage (needed to find hybrid-device co-driver).
#[ "$MODULE" != "usb_storage" ] \
 #&& ! pup_event_backend_modprobe_protect --module=$MODULE \
 #|| echo $$ 3.5 `$TIME` "pup_event_backend_modprobe_protect --module='$MODULE' returned ERRornoise" $LocalLOG && exit 0
 ##|| echo $$ 3.5 `$TIME` "pup_event_backend_modprobe_protect --module='$MODULE' returned ERRornoise" $LocalLOG \
 ##&& exit 0
 ##&& echo $$ 3.5 `$TIME` "pup_event_backend_modprobe_protect --module='$MODULE' returned ERRornoise" $LocalLOG #\#

if [ "$MODULE" != "usb_storage" ] ; then
 timeout -t10 /sbin/pup_event_backend_modprobe_protect --module=$MODULE >>$OUT 2>>$ERR
 retVal=$?
 if [ "$retVal" -ne 0 ] ; then
  debug "$(echo $$ 3.5 `$TIME` "pup_event_backend_modprobe_protect --module='$MODULE' returned $retVal")"
  exit 0
 fi
fi


setup_alsa_func() { #uses MODULE.
 #if a sound module, preconfigure alsa (/etc/init.d/alsa will start it)...

 case $MODULE in snd_*) :;; *) return 0;; esac

  CNTSND=0 #v432 Reserve first available card number
  while ! timeout -t10 /sbin/pup_event_backend_modprobe_protect --snd_card_number=$CNTSND >>$OUT 2>>$ERR;do
   CNTSND=$(( CNTSND + 1 ))
   [ "$CNTSND" -gt 10 ] && return 1
  done
  echo "CNTSND='$CNTSND'"

  timeout -t10 /sbin/pup_event_backend_modprobe_protect --lock=modprobeconf >>$OUT 2>>$ERR #v432 end

  DPATTERN="alias snd\\-card\\-$CNTSND"
  dMODULE="`echo -n "$MODULE" | tr '_' '-'`" #v407
  grpdMOD="`echo "$dMODULE" |sed 's#-#\\\\\\\-#g'`"  ###+++2012-01-28
  echo "grpdMOD='$grpdMOD'"

  if [ "`grep "^$DPATTERN" "$ALSACONF"`" = "" ];then
   (
   echo
   echo '##### Added by /sbin/pup_event_backend_modprobe #####'
   echo '### Running kernel '"$KERNVER"
   echo '### Because alias entry is missing in this'
   echo '### Configuration-file '"$CONFFILE"
   echo "alias snd-card-$CNTSND $dMODULE"
   echo "alias sound-slot-$CNTSND $dMODULE"
   echo '##### '`date`' #####'
   )    >> "$ALSACONF"
  else
   #for portability, check if correct sound card...
   BPATTERN="alias snd\\-card\\-$CNTSND $grpdMOD" #v408
   if [ "`grep -w "^$BPATTERN" $CONFFILE`" = "" ];then
    echo "Adjustment of $CONFFILE"
    DateS=`date`
    (
    echo '##### Changed by /sbin/pup_event_backend_modprobe #####'
    echo '### Running kernel '"$KERNVER"
    echo '### Because modulename or harware had changed'
    echo '### Configuration-file is '"$CONFFILE"
    #echo '##### '`date`' #####' >> $CONFFILE
    )   >> "$CONFFILE"

    SEDSCRIPT3="s/^\\(alias\\ snd\\-card\\-$CNTSND\\ .*\\)/\#${DateS}\\1/"
    SEDSCRIPT4="s/^\\(alias\\ sound\\-slot\\-$CNTSND\\ .*\\)/\#${DateS}\\1/"
    sed -e "$SEDSCRIPT3" -e "$SEDSCRIPT4" "$CONFFILE" >/tmp/${CONFFILE##*/}.2.txt

    SEDSCRIPT1="s/^\\(alias\\ snd\\-card\\-$CNTSND\\ \\).*/\\1${dMODULE}/" #v432
    SEDSCRIPT2="s/^\\(alias\\ sound\\-slot\\-$CNTSND\\ \\).*/\\1${dMODULE}/" #v432
    #sed -i -e "$SEDSCRIPT1" -e "$SEDSCRIPT2" $CONFFILE #v432
    sed -i -e "$SEDSCRIPT1" -e "$SEDSCRIPT2" /tmp/${CONFFILE##*/}.2.txt ##+++2012/01/28 added basename

    echo "alias snd-card-$CNTSND ${dMODULE}" >> /tmp/${CONFFILE##*/}.2.txt ##+++2012/01/28
    echo "alias sound-slot-$CNTSND ${dMODULE}" >> /tmp/${CONFFILE##*/}.2.txt ##+++2012/01/28
    cat /tmp/${CONFFILE##*/}.2.txt > "$CONFFILE" ##+++2012/01/28 added basename
    #rm /tmp/$CONFFILE.2.txt
    echo '##### '"$DateS"' #####' >> "$CONFFILE"
   fi
  fi
  timeout -t10 /sbin/pup_event_backend_modprobe_protect --unlock=modprobeconf >>$OUT 2>>$ERR #v432
 #fi
} #setup_alsa_func(){ #END

pci_fixup_func() { #w463 needs MODALIAS, MODULE, RULEMODULE
 #returns 0 if ok to load module, changes MODULE if required.

 VENDOR='0x'"`echo -n "$MODALIAS" | cut -f 2 -d 'v' | cut -b 1-8 | tr [A-Z] [a-z]`"
 DEVICE='0x'"`echo -n "$MODALIAS" | cut -f 2 -d 'v' | cut -b 10-17 | tr [A-Z] [a-z]`"

 #######/etc/rc.d/MODULESCONFIG overrides######
 #may need to do substitution for specific pci interface...
 APATTERN="$VENDOR $DEVICE"
 REPLACEMENT="`echo "$PCI_OVERRIDES" | grep "$APATTERN"`"

 #w463 replace only if not already forced by udev rule...
 #v432 add blacklist of drivers for specific hardware.
 if [ "$REPLACEMENT" != "" ] && [ "$RULEMODULE" = "" ];then
  REPLACEMENT="`echo "$REPLACEMENT" | cut -f 1 -d ' '`"
  if [ "$REPLACEMENT" != "(none)" ];then
   MODULE="$REPLACEMENT"
  else return 1
  fi
 fi #v432 end
 #######END MODULESCONFIG OVERRIDES#######

 ######HACKS SECTION#######

 #in some cases a special hack is required, hardcoded in here...
 #8139cp is buggy...
 if [ "$MODULE" = "8139cp" ];then
  MODULE="8139too"
  if ! pup_event_backend_modprobe_protect --module=$MODULE >>$OUT 2>>$ERR;then
  return 1 #v432
  fi
 fi

 #v2.17 another hack, mwave.ko (modem), do not load module, just the firmware,
 #as /etc/init.d/ in firmware has script that correctly loads mwave.ko...
 if [ "$MODULE" = "mwave" ];then
  firmware_module_func #modprobe -n mwave #pretend load.
  return 1
 fi

 #v2.17 intel pci numbering is peculiar, need this hack....
 if [ "$MODULE" = "ipw2200" ];then
  if [ "`lspci -m -n -d 8086:1043 | cut -f 10 -d '"' | cut -b 1,2`" = "25" ];then #'geany #v432
  MODULE="ipw2100"
   if ! pup_event_backend_modprobe_protect --module=$MODULE >>$OUT 2>>$ERR ;then
    return 1
   fi
  fi
 fi

 #v408 pup 4.1retro, k2.6.21.7, madwifi wireless, ath_pci.ko loads then
 #my pcmcia and sd-card no longer work -- no uevents from kernel. yet, if
 #I blacklist ath_pci then load it later, all is ok. So, perhaps ath_pci
 #is grabbing control of too much hardware? try a delay...
 [ "$MODULE" = "ath_pci" ] && sleep 5
 #######END HACKS SECTION#######

 #v432 Override AC97 modem module to use alternate if modem not supported by default driver.
 [ -e /etc/hsfmodem/.substitute_alternate_module ] && PREFEXTRAS="${PREFEXTRAS} ${PREFHSFALSA}"
 return 0
} #pci_fixup_func(){ #END

firmware_module_func() {
 #global MODULE is name of module, global KERNVER.
 altMODULE="`echo -n "$MODULE" | tr '_' '-'`"
 FPATTERN='[:,]'"${MODULE}"'\.ko|[:,]'"${altMODULE}"'\.ko'
 #FIRMPKG="`cat /etc/modules/firmware.dep.$KERNVER  | grep -v '^#' | grep ':' | grep -E "$FPATTERN" | cut -f 1 -d ':' | head -n 1`"
 FIRMPKG=`grep -v '^#' /etc/modules/firmware.dep.$KERNVER  | grep ':' | grep -E "$FPATTERN" | cut -f 1 -d ':' | head -n 1`
 #v433 If module is front end for usbserial, use common firmware.
 if [ "$FIRMPKG" = "" ];then
  FPATTERN='/'"${MODULE}"'\.ko|/'"${altMODULE}"'\.ko'
  grep -E "$FPATTERN" /lib/modules/$KERNVER/modules.dep | grep '/usbserial\.ko' | cut -f 1 -d : | grep $Q -E "$FPATTERN" \
   && FIRMPKG="usbserial"
 fi #v433 end
 if [ "$FIRMPKG" != "" ];then
  #v432 Ensure firmware installed only once.
  timeout -t10 /sbin/pup_event_backend_modprobe_protect --firmware=$FIRMPKG || return 0

  if [ -f /lib/modules/all-firmware/${FIRMPKG}.tar.gz ];then
   cp $VERB -af /lib/modules/all-firmware/${FIRMPKG}.tar.gz /tmp >>$OUT 2>&1
   cd /tmp
   tar -zxf ${FIRMPKG}.tar.gz >>$OUT 2>&1
  fi

  if [ -d /tmp/"${FIRMPKG}" ];then
   /bin/cp $VERB -a --remove-destination /tmp/${FIRMPKG}/* / 2>>$ERR
  fi
  #in case firmware is not a .tar.gz tarball...

  if [ -d /lib/modules/all-firmware/"${FIRMPKG}" ];then #w478
   /bin/cp $VEBR -a --remove-destination /lib/modules/all-firmware/${FIRMPKG}/* / 2>>$ERR
  fi

  if [ -f /pinstall."${FIRMPKG}".sh ];then
   cd /
   /pinstall.${FIRMPKG}.sh >>$OUT 2>&1 #execute script.
   #rm -f /pinstall.${FIRMPKG}.sh >>$OUT 2>&1
   chmod $VERB 0444 /pinstall.${FIRMPKG}.sh
  fi
  timeout -t10 /sbin/pup_event_backend_modprobe_protect --fwdone

 fi
}  #firmware_module_func(){ #END

case "$MODALIAS" in
 pci:*)
  pci_fixup_func #w463 needs MODALIAS, MODULE, RULEMODULE
  [ $? = 0 ] || { debug "$(echo -e $$ 5.0 `$TIME` "\e[33m"'Error in pci_fixup_func .. exit ..'"\e[39m")";exit 1; }
 ;;
 usb:*) #v432
  #v432 For USB hybrid storage/modem devices, ensure storage driver loaded, then modem driver (on repeated event, if necessary).
  if [ "$MODULE" = "usb_storage" ] && [ "`lsmod | grep '^usb_storage `" ];then #v433
   PREFUSBSTG=" usb_storage:cdc_acm|`grep -Fw 'usbserial.ko' /lib/modules/$KERNVER/modules.dep | grep -o '^[^:]*' | rev | cut -f 1 -d / | rev | tr '\n' '|'`hso" #v433
   PREFEXTRAS="${PREFEXTRAS} ${PREFUSBSTG}"
  fi
 ;;
esac

#v404 preferences list, ex rt2500usb and rt73usb both hits, then choose latter...
modPATTERN='^'"$MODULE"':'

debug "$(echo $$ 6.0 `$TIME` "modPATTERN 2 ='$modPATTERN'")"

PREFHIT="`echo -n "${PREFLIST}${PREFEXTRAS}" | tr -s ' ' | tr ' ' '\n' | grep "$modPATTERN"`" #v432

debug "$(echo $$ 7.0 `$TIME` "PREFHIT='$PREFHIT'")"

if [ "$PREFHIT" != "" ];then
 debug "$(echo $$ 8.0 `$TIME` "PREFHIT='$PREFHIT'")"
 prefMODULES="`echo -e -n "$PREFHIT" | cut -f 2 -d ':' | tr '|' '\n'`"
 debug "$(echo $$ 8.0 `$TIME` "prefMODULES='$prefMODULES'")"
 echo "blacklist $MODULE" > /tmp/pup_event_prefhit_blacklist-$$ #v432 begin

 RETRIES=0
 while [ "$RETRIES" -le 10 ];do
  xMODULE="`/sbin/modprobe --config /tmp/pup_event_prefhit_blacklist-$$ --show-depends $MODALIAS 2>/dev/null | tail -n 1 | rev | cut -f 1 -d '/' | rev | cut -f 1 -d '.' | tr '\-' '_'`"
  debug "$(echo $$ 8.1 `$TIME` "xMODULE='$xMODULE'")"
  debug "$(echo $$ 8.1 `$TIME` "RETIES='$RETRIES'")"
  [ "$xMODULE" = "" ] && { debug "$(echo $$ 8.1.5 `$TIME` 'no xMODULE')";break; }

  echo "blacklist $xMODULE" >> /tmp/pup_event_prefhit_blacklist-$$
  RETRIES=$(( RETRIES + 1 ))
 done

 modPATTERN="`cat /tmp/pup_event_prefhit_blacklist-$$ | sed -e s/blacklist\ /\^/ -e s/$/\$/ | tr '\n' '|' | sed -e s/\|$//`"
 debug "$(echo $$ 8.2 `$TIME` "modPATTERN='$modPATTERN'")"

 xMODULE="`echo "$prefMODULES" | grep -m 1 -E "$modPATTERN"`"
 debug "$(echo $$ 8.2 `$TIME` "xMODULE='$xMODULE'")"
 #rm /tmp/pup_event_prefhit_blacklist-$$

  if [ "$xMODULE" != "" -a "$xMODULE" != "$MODULE" ] ; then

 timeout -t10 /sbin/pup_event_backend_modprobe_protect --replacedmod=$MODULE >>$OUT 2>>$ERR
 MODULE="$xMODULE"
   debug "$(echo $$ 8.3 `$TIME` "MODULE='$MODULE'")"
    if timeout -t10 /sbin/pup_event_backend_modprobe_protect --module=$MODULE ; then
    #echo $$ 8.3.5 `$TIME` "pup_event_backend_modprobe_protect returned errornoise '0?'" $LocalLOG
    #exit 0 #v433 v432 end
    debug "$(echo $$ 8.3.5 `$TIME` "pup_event_backend_modprobe_protect --module='$MODULE'")"
    else
    #echo $$ 8.4 `$TIME` 'pup_event_backend_modprobe_protect --module='$MODULE $LocalLOG
    debug "$(echo $$ 8.4 `$TIME` "pup_event_backend_modprobe_protect returned errornoise '0?'")"
    exit 0
    fi
  fi
else
 debug "$(echo $$ 8.0 `$TIME` 'no preflist defined')"
fi

#installs a firmware tarball (once only. loading firmware is something else)...
firmware_module_func

setup_alsa_func #MODULE and CNTSND are used in this func.

[ "$START_PROTECT_DAEMON" ] && ( sleep 11; timeout -t10 /sbin/pup_event_backend_modprobe_protect --stop >>$OUT 2>>$ERR ) &

sed -i'.sed' "s|^\(DBG .*\)|$$ 8\.9 \1|" $LocalLOG

if [ -z "`lsmod | grep "$MODULE"`" ] ; then
#log to file. rc.modules2 needs this info to find out if any modaliases missed (also above)...
echo "MODULE=$MODULE DEVPATH=$DEVPATH" >> /tmp/pup_event_module_devpath.log
debug "$(echo -e $$ 9.0 `$TIME` "\e[32m"'Finally modprobing '"$MODULE""\e[39m")"
debug "$(echo $$ 0.0.8 `$TIME` `cat /proc/loadavg` )"
debug "$(echo $$ 9.1 `$TIME` `cat /proc/loadavg` )"
cd /sbin #v408 rerwin thinks this is needed for slamr module.
 #exec /sbin/modprobe -v $MODULE 1>>$OUT 2>&1
 /sbin/modprobe $Q $VERB -b $MODULE 1>>$OUT 2>&1
  sed -i'.sed' "s|^\(insmod .*\)|$$ 9\.9 \1|" $LocalLOG
  sed -i'.sed' "s|^\(install .*\)|$$ 9\.9 \1|" $LocalLOG
  exit 0
else

debug "$(echo -e $$ 9.0 `$TIME` "\e[31m"'Module '"$MODULE"' already inserted'"\e[39m")"
exit 1
fi
###END###
#[ "$START_PROTECT_DAEMON" ] && pup_event_backend_modprobe_protect --daemon &
