#!/bin/ash
#(c) Copyright 2008 Barry Kauler puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#called via udev rule /etc/udev/rules.d/50-udev-puppy-basic.rules
#i pulled this code out of /sbin/pup_event_backend_d, see 4.1alpha3.
#all of the uevent variables (exs: MODALIAS, SUBSYSTEM) are available here.
#v408 hack for madwifi ath_pci in 4.1retro. Alsa fix.
#w004 LANG=C, faster. /bin/ash, even faster.
#w463 rerwin: Correct override extraction of module name. Add use of optional first argument as MODULE, to support special udev rules added for hardware (modems) not automatically detected by the kernel.
#w478 support firmware in dirs, not .tar.gz tarballs.
#v424 For hybrid modem devices, select modem driver instead of storage driver when both are found by modprobe.

export LANG=C #w004

#NOTICE: If the full 'udev' package, with utility 'udevd' is installed, rc.sysinit
#   will run 'udevd' instead of 'pup_event_backend_d' and this script will be used.

. /etc/rc.d/PUPSTATE
. /etc/rc.d/MODULESCONFIG
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/X11R7/bin"
KERNVER="`uname -r`"
CNTSND=0 #v405
#w463 optional $1 supplied by triggered udev rule, see /etc/udev/rules.d/60-udev-modem.rules
RULEMODULE=""
[ $1 ] && RULEMODULE="$1"
touch /tmp/pup_event_module_devpath_log

[ "$FASTBOOTMODULESLIST" != "" ] && exit 1 #fastboot, see /etc/rc.d/MODULESCONFIG.

setup_alsa_func() { #uses MODULE.
 #if a sound module, preconfigure alsa (/etc/init.d/alsa will start it)...
 if [ "`echo -n "$MODULE" | grep '^snd_'`" != "" ];then
  CNTSND="`cat /tmp/pup_event_alsa_cnt`"
  DPATTERN="alias snd\\-card\\-$CNTSND"
  dMODULE="`echo -n "$MODULE" | tr '_' '-'`" #v407
  if [ "`grep "$DPATTERN" /etc/modprobe.conf`" = "" ];then
   echo "alias snd-card-$CNTSND $dMODULE" >> /etc/modprobe.conf
   echo "alias sound-slot-$CNTSND $dMODULE" >> /etc/modprobe.conf
  else
   #for portability, check if correct sound card...
   BPATTERN="alias snd\\-card\\-$CNTSND $dMODULE" #v408
   if [ "`grep "$BPATTERN" /etc/modprobe.conf`" = "" ];then
    grep -v "$DPATTERN" /etc/modprobe.conf > /tmp/modprobe.conf
    cp -f /tmp/modprobe.conf /etc/modprobe.conf
    echo "alias snd-card-$CNTSND $dMODULE" >> /etc/modprobe.conf
    echo "alias sound-slot-$CNTSND $dMODULE" >> /etc/modprobe.conf
   fi
  fi
  CNTSND=`expr $CNTSND + 1`
  echo -n "$CNTSND" > /tmp/pup_event_alsa_cnt
 fi
}

pci_fixup_func() { #w463 needs MODALIAS, MODULE, RULEMODULE
 #returns 0 if ok to load module, changes MODULE if required.
 VENDOR='0x'"`echo -n "$MODALIAS" | cut -f 2 -d 'v' | cut -b 1-8 | tr [A-Z] [a-z]`"
 DEVICE='0x'"`echo -n "$MODALIAS" | cut -f 2 -d 'v' | cut -b 10-17 | tr [A-Z] [a-z]`"
 #######/etc/rc.d/MODULESCONFIG overrides######
 #may need to do substitution for specific pci interface...
 APATTERN="$VENDOR $DEVICE"
 REPLACEMENT="`echo "$PCI_OVERRIDES" | grep "$APATTERN"`"
 #w463 replace only if not already forced by udev rule...
 #[ "$REPLACEMENT" != "" ] && MODULE="$REPLACEMENT"
 [ "$REPLACEMENT" != "" ] && [ "$RULEMODULE" = "" ] && MODULE="`echo "$REPLACEMENT" | cut -f 1 -d ' '`"
 #######END MODULESCONFIG OVERRIDES#######
 ######HACKS SECTION#######
 #in some cases a special hack is required, hardcoded in here...
 #8139cp is buggy...
 [ "$MODULE" = "8139cp" ] && MODULE="8139too"
 #v2.17 another hack, mwave.ko (modem), do not load module, just the firmware,
 #as /etc/init.d/ in firmware has script that correctly loads mwave.ko...
 if [ "$MODULE" = "mwave" ];then
  firmware_module_func #modprobe -n mwave #pretend load.
  return 1
 fi
 #v2.17 intel pci numbering is peculiar, need this hack....
 if [ "$MODULE" = "ipw2200" ];then
  [ "`lspci -m -n -d 8086:1043 | cut -f 10 -d '"' | cut -b 1,2`" = "25" ] && MODULE="ipw2100" #'geany
 fi
 #v408 pup 4.1retro, k2.6.21.7, madwifi wireless, ath_pci.ko loads then
 #my pcmcia and sd-card no longer work -- no uevents from kernel. yet, if
 #I blacklist ath_pci then load it later, all is ok. So, perhaps ath_pci
 #is grabbing control of too much hardware? try a delay...
 [ "$MODULE" = "ath_pci" ] && sleep 5
 #######END HACKS SECTION#######
 return 0
}

firmware_module_func() {
 #global MODULE is name of module, global KERNVER.
 altMODULE="`echo -n "$MODULE" | tr '_' '-'`"
 FPATTERN='[:,]'"${MODULE}"'\.ko|[:,]'"${altMODULE}"'\.ko'
 FIRMPKG="`cat /etc/modules/firmware.dep.$KERNVER  | grep -v '^#' | grep ':' | grep -E "$FPATTERN" | cut -f 1 -d ':' | head -n 1`"
 if [ "$FIRMPKG" != "" ];then
  if [ -f /lib/modules/all-firmware/${FIRMPKG}.tar.gz ];then
   cp -af /lib/modules/all-firmware/${FIRMPKG}.tar.gz /tmp >/dev/null 2>&1
   cd /tmp
   tar -zxf ${FIRMPKG}.tar.gz >/dev/null 2>&1
  fi
  if [ -d /tmp/${FIRMPKG} ];then
   cp -a --remove-destination /tmp/${FIRMPKG}/* / 2>/dev/null
  fi
  #in case firmware is not a .tar.gz tarball...
  if [ -d /lib/modules/all-firmware/${FIRMPKG} ];then #w478
   cp -a --remove-destination /lib/modules/all-firmware/${FIRMPKG}/* / 2>/dev/null
  fi
  #comment-out the firmware pkg entry, so it only installs once...
  R1PATTERN="s/^${FIRMPKG}:/#${FIRMPKG}:/"
  DEPUPDATED="`sed -e "$R1PATTERN" /etc/modules/firmware.dep.$KERNVER`"
  echo "$DEPUPDATED" > /etc/modules/firmware.dep.$KERNVER
  #execute any post-install script...
  if [ -f /pinstall.${FIRMPKG}.sh ];then
   cd /
   /pinstall.${FIRMPKG}.sh >/dev/null 2>&1 #execute script.
   rm -f /pinstall.${FIRMPKG}.sh >/dev/null 2>&1
  fi
 fi
}

#find a matching module... (/etc/pup_event_modprobe.conf created in rc.sysinit)
MODULES="`/sbin/modprobe --config /tmp/pup_event_modprobe.conf --show-depends $MODALIAS 2>/dev/null | rev | cut -f 1 -d '/' | rev | cut -f 1 -d '.' | tr '\-' '_'`" #v424
MODULE="`echo "$MODULES" | tail -n 1`" #v424
[ "$MODULE" = "usb_storage" ] && [ "`echo "$MODULES" | grep '^usbserial$'`" != "" ] && MODULE="`echo "$MODULES" | grep -v -E '^usb_storage$|^usbcore$' | tail -n 1`" #v424
[ "$MODULE" = "" ] && [ "$RULEMODULE" != "" ] && MODULE="$RULEMODULE" #w463 Use module from argument

[ "$MODULE" = "" ] && exit 1
#[ "$MODULE" = "usb_storage" ] && exit 1 #loaded explicitly in boot scripts.
modPATTERN='^'"${MODULE}"'$'
[ "`cat /tmp/pup_event_module_devpath_log | cut -f 1 -d ' ' | cut -f 2 -d '=' | grep "$modPATTERN"`" != "" ] && exit 0 #duplicate module.

case $MODALIAS in
 pci:*)
  pci_fixup_func #w463 needs MODALIAS, MODULE, RULEMODULE
  [ $? -ne 0 ] && exit 1
 ;;
esac

#v404 preferences list, ex rt2500usb and rt73usb both hits, then choose latter...
modPATTERN='^'"$MODULE"':'
PREFHIT="`echo -n "$PREFLIST" | tr ' ' '\n' | grep "$modPATTERN"`"
if [ "$PREFHIT" != "" ];then
 PREFMOD="`echo -n "$PREFHIT" | cut -f 2 -d ':'`"
 echo "blacklist $MODULE" > /tmp/pup_event_prefhit_blacklist
 xMODULE="`/sbin/modprobe --config /tmp/pup_event_prefhit_blacklist --show-depends $MODALIAS 2>/dev/null | tail -n 1 | rev | cut -f 1 -d '/' | rev | cut -f 1 -d '.' | tr '\-' '_'`"
 [ "$xMODULE" != "" ] && [ "$xMODULE" != "$MODULE" ] && MODULE="$xMODULE"
fi

#installs a firmware tarball (once only. loading firmware is something else)...
firmware_module_func

setup_alsa_func #MODULE and CNTSND are used in this func.

#log to file. rc.modules2 needs this info to find out if any modaliases missed (also above)...
echo "MODULE=$MODULE DEVPATH=$DEVPATH" >> /tmp/pup_event_module_devpath_log

cd /sbin #v408 rerwin thinks this is needed for slamr module.
exec /sbin/modprobe $MODULE

###END###
