#!/bin/ash
#KRG ash instead sh
#(c) Copyright Barry Kauler 2010, bkhome.org
#Lesser GPL license v2 (/usr/share/doc/legal/lgpl-2.1.txt
#perform a f.s. check if file /fsckme.err exits, otherwise normal startup.
#/etc/rc.d/rc.sysinit creates /fsckme.err at bootup, rc.shutdown deletes it.
#this script is /sbin/init in the main Puppy f.s., which is the very first to run.
#in the case of not a full hd install, this script just passes execution to busybox init.

########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.6-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.6-KRG-i486·#1·SMP·Sun·Jan·2·20:32:12·GMT-1·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Mon·Oct·24·22:54:36·CEST·2011
#
# TODO1: ash:bad number FIXED was missing nextcY=
# TODO2: /etc/modprobe.d in mult_kernels
# TODO3: \e instead of \\033 for echo : does not work with busybox 1.15.0 ash but works with 1.18.3
#
########################################################################

test -f /etc/rc.d/f4puppy5 && . /etc/rc.d/f4puppy5
Version='2.1-module_loading-mount_interval_check-use_alternate_repo_sfs Puppy-Linux-4.3.0 KRG'
Version='2.5-module_loading-mount_interval_check-use_alternate_repo_sfs Puppy-Linux-4.3.0 KRG' #2016-01-22
usage (){
echo "
$0
Sript to check for inproper previous shutdown if
marker file *fsckme.flg|err* found. The content of the
fsckme.flg file needs to look like this : 'sda2,ext3,' .
Former it was done by '/usr/bin/xwin' code by
Pizzasgood.
If fsckme file exists, check the partition read-only,
and if found clean, boot anyway.
If the mount interval date or mounts have reached their
specified numbers, do an interval e2fsck .
Obeys the 'pfix=fsck' kernel parameter
to force file system checking.
Special feature : FSCK Interactive Mode
Keyboard is not necessarily needed, any questions have
a timeout of 20 seconds and would fall back into
non-interactive mode.
"
RV=$1;shift
echo "$@"
exit $RV
}
[ "`echo "$@" |grep -Ei '\-v|version'`" ] && { echo -e "\n$0: Version '$Version'\n";exit $?; }
[ "$*" ] && usage 1 "$*"

PATH='/bin:/sbin:/usr/bin:/usr/sbin'
export PATH  ##+++2012-02-06 hwclock command not found in /etc/rc.d/rc.country is in /sbin
export LANG=C
alias modprobe='modprobe -b'  ##+++2012-01-30

ERR=/proc/self/fd/2
OUT=/proc/self/fd/1

Red='\033[0;31m'
RED='\033[1;31m'
Gre='\033[0;32m'
GRE='\033[1;32m'
Ora='\033[0;33m'
YEL='\033[1;33m'
Blu='\033[0;34m'
BLU='\033[1;34m'
Pin='\033[0;35m'
PUR='\033[1;35m'
Cya='\033[0;36m'
CYA='\033[1;36m'
Res='\033[0;39m'

status_func(){
 test "$*" || return 0
 if [ $1 -eq 0 ];then
  /bin/echo -e "\\033[72G$GRE"done"$Res"   >/dev/console #green [done] msg.
 else
  /bin/echo -e "\\033[70G$RED"failed"$Res" >/dev/console #red [failed].
  STATUS=0
 fi
 return $1 #return with same status as entry param.
}

[ -f /etc/rc.d/PUPSTATE ] && . /etc/rc.d/PUPSTATE || PUPMODE=2
if [ "$PUPMODE" = 2 ] ; then
 busybox mount $VERB $VERB -o remount,rw /dev/root /
 #DEBUG
 #mount
 #sleep 1s
 #mount
 #DEBUG
 [ -d /proc ] || mkdir $VERB /proc
 mountpoint $Q /proc  || busybox mount $VERB $VERB -t proc proc /proc
 [ "`ls -A /proc/`" ] || busybox mount $VERB $VERB -t proc proc /proc
 #mount -o remount,rw /dev/root /
 #mount #DEBUG 2013-09-29
 sleep 1s
 #mount #DEBUG
 [ -d /proc ] || mkdir $VERB /proc
 mountpoint $Q /proc || busybox mount $VERB $VERB -t proc proc /proc
 ps -o pid,args | grep init | grep busybox | grep -v "$0" | grep -w '1' && usage 1 "Already run."
 [ -d /sys ] || mkdir $VERB /sys
 mountpoint $Q /sys || busybox mount $VERB $VERB -t sysfs sysfs /sys

###+++2011-11-10
  if [ -d /tmp ] ; then
  rm $VERB -rf   /var/tmp  ##2012-02-08
  mkdir $VERB -p /var/tmp  ##2012-02-06
  mv $VERB -f /tmp/[[:alnum:]]*  /var/tmp/ 2>>$ERR ##2012-01-08
  mv $VERB -f /tmp/.[[:alnum:]]* /var/tmp/ 2>>$ERR ##+++2013-10-03
  else
  mkdir $VERB /tmp
  fi

 chmod $VERB 1777 /tmp
###+++2011-11-10
else
STATUS=0
status_func $STATUS
fi #frugal or full

test -e /dev || mkdir $VERB  /dev
test -L /dev && rm $VERB     /dev
test -d /dev || rm $VERB -rf /dev
test -d /dev || mkdir $VERB  /dev
mountpoint $Q /dev || {
mount $VERB $VERB -t ramfs devramfs /dev
}

test -e /dev/pts || mkdir $VERB -p /dev/pts
grep $Q ' /dev/pts ' /proc/mounts || mount $VERB $VERB -t devpts devpts /dev/pts

  test -e /dev/fd     || ln $VERB -snf ../proc/self/fd /dev/fd
  test -e /dev/stdin  || ln $VERB -sf  fd/0 /dev/stdin
  test -e /dev/stdout || ln $VERB -sf  fd/1 /dev/stdout
  test -e /dev/stderr || ln $VERB -sf  fd/2 /dev/stderr

  test -c /dev/null || { rm $VERB -rf /dev/null; mknod /dev/null c 1 3; }
  test -c /dev/console || { rm $VERB -rf /dev/console; mknod /dev/console c 5 1; }

test "`which mdev`" && mdev -s || {
   _devFILES_=`find /sys -type f -name uevent -perm 644`
  oldIFS="$IFS"
  IFS=$'\n'
  for oneFILE in $_devFILES_
  do
  unset MAJOR MINOR DEVNAME DEVTYPE DEVMODE
  test -r "$oneFILE" || continue
  source "$oneFILE" 2>/dev/null || continue
  test "$MAJOR" -a "$MINOR" || continue
  test "$DEVNAME" && { test -e /dev/$DEVNAME && continue; } || { DEVNAME=${oneFILE%/uevent*}; DEVNAME=${DEVNAME##*/}; test -e /dev/$DEVNAME && continue; }
  test "$DEVMODE" && DEVMODE="-m $DEVMODE"
  test "$DEVTYPE" && {
      mknod $DEVMODE /dev/$DEVNAME b $MAJOR $MINOR; } || {
      mknod $DEVMODE /dev/$DEVNAME c $MAJOR $MINOR; }
  sleep 0.01
  done
  IFS="$oldIFS"
 }

_do_init(){  ###KRG
umount /sys
umount /proc
test "$PFIX" && export PFIX
export loglevel pmedia pdev1 psubdir root
exec busybox init
}

[ "$PUPMODE" = 2 ] || _do_init

_get_rootdev(){
PDEV1=`basename $(rdev | cut -f 1 -d ' ')`
ROOTDRIVE="$PDEV1"
DEVPDEV1=`rdev | cut -f 1 -d ' '`
DEVROOTDRIVE="$DEVPDEV1"
DEV1FS=`mount | grep '^/dev/root' | cut -f 5 -d ' '`
echo -e "$PUR""PDEV1='$PDEV1'""$Res"  ##+++2011-11-10
}
_get_rootdev

_check4fsck() {  ###KRG
echo -e "$BLU"'Checking for unpropper previous shutdown  ... '"$Res"
echo -ne "$YEL"'Searching for *fsckme* file 3 levels deep ... '"$Res"
ErrFlag=`find / -maxdepth 3 -type f -iname '*fsckme*' | head -n1`  ###KRG 3 deep for fsckme.file@etc @boot @$HOME ..etc..
if [ -z "$ErrFlag" ] ; then  ##1
echo -e "\\033[56G\\033[1;5;32m"'Hurray , not found !'"$Res"
echo -e "$YEL"'Checking for filesystem check intervals using'"$Res"
LANG=C
VARS=`dumpe2fs $DEVROOTDRIVE | grep -E 'Maximum mount count|Mount count|Next check after|Check interval'`
###+++2011-11-15 had logically removed this ; would have been a bug due interN used further down
interC=`echo "$VARS" | grep 'Check interval' | tr '\n' ' '`
interN=`echo "$interC" | tr -s ' ' | cut -f 3 -d ' ' | grep -o -e '[[:digit:]]*'`
interN=$((interN/60/60/24))
 ###+++2011-11-15
nextch=`echo "$VARS" | grep 'Next check after' | tr '\n' ' '`
nextcM=`echo "$nextch" | tr -s ' ' | cut -f 5 -d ' '`
nextcD=`echo "$nextch" | tr -s ' ' | cut -f 6 -d ' '`
#echo "$nextch" ##+++2012-01-11
nextcY=`echo "$nextch" | tr -s ' ' | cut -f 8 -d ' '` ##+++2012-01-11 major bug !!
todays=`date`
todayY=`echo "$todays" | tr -s ' ' | cut -f 6 -d ' ' | tr -d [[:punct:]]`  ##+++ 2011_11_15 from luci218
todayM=`echo "$todays" | tr -s ' ' | cut -f 2 -d ' ' | tr -d [[:punct:]]`  ##lang dependent pos
todayD=`echo "$todays" | tr -s ' ' | cut -f 3 -d ' ' | tr -d [[:punct:]]`
mntcnt=`echo "$VARS" | grep 'Mount count'| grep -o '[[:digit:]]' | tr -d '\n'`
maxmnt=`echo "$VARS" | grep 'Maximum mount count' | grep -o '[[:digit:]]' | tr -d '\n'`
diffMC=$(( maxmnt - mntcnt ))
monthN=`for i in $(seq 1 12) ; do cal $i 1 | head -n 1 | grep -o '[[:alpha:]]*' | sed "s/^/$i /"; done`
monthT=`echo "$monthN" | grep "$todayM"`
montTN=`echo "$monthT" | cut -f 1 -d ' '`
monthC=`echo "$monthN" | grep "$nextcM"`
montCN=`echo "$monthC" | cut -f 1 -d ' '`
val30C=`cal $montCN 1 | grep '[[:digit:]]$' | sed '/^$/d' | tail -n 1 | grep -o -e '[[:digit:]]*$'`
##+++ 2011_11_15 from luci218
val30B=0
for i in `seq $((montCN+1)) $((montTN-1))` ; do
val30i=`cal $i 1 | grep '[[:digit:]]$' | sed '/^$/d' | tail -n 1 | grep -o -e '[[:digit:]]*$'`
val30B=$((val30B+val30i))
done
##+++ 2011_11_15 from luci218
val30T=`cal $montTN 1 | grep '[[:digit:]]$' | sed '/^$/d' | tail -n 1 | grep -o -e '[[:digit:]]*$'`
echo -e "$Res"
#echo $LINENO $todayY $nextcY
FSCK=
if [ "$mntcnt" -ge "$maxmnt" ] ; then  ##2
echo -e "$YEL"'Maximum mount count reached'"$Res"
FSCK='yes'

else ##2
if [ "$todayY" -ge "$nextcY" ] ; then #2.1 ##+++2011_11_15 from luci218

if [ "$montTN" = "$montCN" ] ; then #3

if [ "$todayD" -gt "$nextcD" ] ; then  #4
echo -e "$YEL"'Day interval reached'"$Res"
FSCK='yes'
fi #4

else #3

if [ "$montTN" -gt "$montCN" ] ; then #5
MinusTD=$todayD
PlusCD=$(( val30C - nextcD ))
##+++2011_10_19 month difference missing val30B
SUM=$(( MinusTD + val30B + PlusCD ))

if [ "$SUM" -gt "$interN" ] ; then #6
echo -e "$YEL"'Day interval reached'"$Res"
FSCK='yes'
fi #6

else #5
FSCK=''
fi #5

fi #3
fi #2.1
fi ##2

if [ -z "$FSCK" ] ; then #7
echo -e "$GRE"'OK , '"$Gre""next check '$nextcM $nextcD' or in '$diffMC' mounts""$Res"
echo -e "$Res"
_do_init

else #7
echo -e "$YEL"'Filesystem check interval reached :'"$Res"
echo -e "$Ora"'Today : '"$Ora""$todayM $todayD""$Ora"' , next check was or would be : '"$Ora""$nextcM  $nextcD""$Ora"
echo -e "$Ora"'mount intervals : '"$Ora""$mntcnt""$Ora"' of '"$Ora""$maxmnt"
echo -e "$Res"
fi #7

else #1
echo -e "$RED" ' Found : '"$Res""\\033[1;5;31m""$ErrFlag"
echo -e "$Res"
fi #1
}

#puppy_kernel_parameter_func(){  ##+++2012-02-02
_process_puppy_kernel_parameters(){  ##+++2015-12-12
pkp=`echo $pfix |sed 's%^pfix=%%' | tr ',' ' '`
_debug "pkp='$pkp'"
for fix in $pkp;do
case $fix in
fsck)FSCK='yes'; PFIX="$PFIX,$fix";;
*)               PFIX="$PFIX,$fix";;
esac;done
if [ "`grep -i -w 'fsck' /proc/cmdline`" ];then
FSCK='yes';fi
test "$FSCK" && echo "FSCK='$FSCK'"
PFIX=${PFIX#,}
PFIX=${PFIX%,}
PFIX="pfix=$PFIX"

}
_process_puppy_kernel_parameters
#puppy_kernel_parameter_func  ##+++2012-02-02
[ "$FSCK" = 'yes' ] || _check4fsck  ###KRG

_dropout2console(){
[ -n "$ERRMSG" ] && echo -e "$Red""$ERRMSG""$Res"
echo "Now ramdiskshell without busybox init on top"
echo -e "$Gre""Type 'busybox reboot -f' or press Cnt+Alt+Del to reboot""$Res"
exec chroot . ash
}

TimeOut=60;SLEEP=2
_ask2continue(){
echo -e "$Res"
echo -e "$Gre""Continue this $0 ?\t [ y ]"
echo -e "$Red""Dropout into console ?\t\t [ c ]""$Gre"
echo -e "$Res"
echo -ne "\\033[4;5;34m"'ENTER'"$Res"' -> '"\\033[1;7;32m"
read -n 1 -t $TimeOut K
echo -e "$Res"
Key=`echo "$K" | tr '[A-Z]' '[a-z]'`

#if [ "$Key" = "n" -o "$Key" = "c" -o "$Key" = "k" ] ; then
case $Key in n|N|c|C|k|K)
echo -e "$BLU"'dropping to console now , partition still mounted !'"$Res"
cd /
mount $VERB $VERB -o remount,ro /dev/root /
sleep $((SLEEP*1))s
exec chroot . ash
;;
esac
#fi
}

#only come here if full hd install, and previous improper shutdown.
#PDEV1="`cat $ErrFlag | cut -f 1 -d ','`" #file format: sda1,ext3,
#DEV1FS="`cat $ErrFlag | cut -f 2 -d ','`"
case $DEV1FS in
 ext2|ext3|ext4)

  echo -e "$YEL"  #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.

  if [ -n "$ErrFlag" ] ; then
  echo "Performing filesystem check of '${PDEV1}' after improper shutdown"
  else
  echo "Performing scheduled filesystem check of '${PDEV1}' ."
  echo -e "$Gre""Use 'tune2fs -i $todayD[d|w|m] [+-] -C $maxmnt [+-] /dev/$PDEV1' to adjust ."
  fi

  echo -e "$BLU""NOTE: may take awhile dependent on filesystem AND partition size, please wait patiently..."
  echo -e "$Res"
  echo

#TimeOut=60
#_ask2continue(){
#echo -e "$Res"
#echo -e "$Gre""Continue this $0 ?\t [ y ]"
#echo -e "$Red""Dropout into console ?\t\t [ c ]""$Gre"
#echo -e "$Res"
#echo -ne "\\033[4;5;34m"'ENTER'"$Res"' -> '"\\033[1;7;32m"
#read -n 1 -t $TimeOut K
#echo -e "$Res"
#Key=`echo "$K" | tr '[A-Z]' '[a-z]'`
#
#if [ "$Key" = "n" -o "$Key" = "c" -o "$Key" = "k" ] ; then
#echo -e "$BLU"'dropping to console now , partition still mounted !'"$Res"
#cd /
#mount -o remount,ro /dev/root /
#sleep $((SLEEP*1))s
#exec chroot . sh
#fi
#}

_start_udev(){
if [ -z "$HOTPLUGD" ] ; then

[ ! -f /etc/rc.d/PUPSTATE ] && echo 'PUPMODE=2' > /etc/rc.d/PUPSTATE
. /etc/rc.d/MODULESCONFIG

BLACKLISTVARS="`echo "$SKIPLIST" | tr '\-' '_' | tr ' ' '\n' | sed -e 's/^/blacklist /' | grep -v ' $'`"
[ -f /tmp/pup_event_skiplist.conf ] || echo "$BLACKLISTVARS" > /tmp/pup_event_skiplist.conf
[ -f /tmp/pup_event_modprobe.conf ] || echo "$BLACKLISTVARS" > /tmp/pup_event_modprobe.conf
##+++2012-01-13
if [ -d /etc/modprobe.d ] ; then
for i in /etc/modprobe.d/* ; do
cat $i >> /tmp/pup_event_modprobe.conf
done
fi
##+++2012-01-13
_update_modprobe_conf(){

KERNVER=`uname -r`
CONFFILE='/etc/modprobe.conf'
[ -f /etc/modprobe.d/modprobe.conf ] && CONFFILE='/etc/modprobe.d/modprobe.conf'
[ -f /etc/modprobe.d/puppy.conf ] && CONFFILE='/etc/modprobe.d/puppy.conf'

if [ -f $CONFFILE ] ; then

SYSTEM1=`dmidecode -t 0 | grep -i -E 'vendor|version|release' | tr '\n' ' ' | tr -s '\t' | tr -s ' ' | sed 's/^[[:blank:]]*/ / ; s%\t% ; %g' | tr -s ' '`
SYSTEM2=`dmidecode -t 1 | grep -i -E 'manufacturer|product|name|version|number|release' | tr '\n' ' ' | tr -s '\t' | tr -s ' '| sed 's/^[[:blank:]]*/ / ; s%\t% ; %g' | tr -s ' '`
SYSTEM3=`dmidecode -t 2 | grep -i -E 'manufacturer|product|name|version|number|release' | tr '\n' ' ' | tr -s '\t' | tr -s ' '| sed 's/^[[:blank:]]*/ / ; s%\t% ; %g' | tr -s ' '`
SYSTEM="${SYSTEM1}
${SYSTEM2}
${SYSTEM3}"
WC=`echo "$SYSTEM" | wc -l`

#GREPpattern=$(echo "$SYSTEM" | head -n 1 | sed 's/\([[:punct:]]\)/\\\\\1/g ; s/\\\\/\\/g ; s#\ #\\\ #g ; s/ $// ; s/\\$//')
GREPpattern=$(echo "$SYSTEM" | head -n 1 | sed 's/\([[:punct:]]\)/\\\\\1/g ; s#\ #\\\ #g ; s/\ *$// ; s/\\$//' | tr -s '\\')
###|sed -r 's/\./\\\./g;s/\*/\\\*/g;s#-#\\\-#g'
#if [ -z "`grep "$GREPpattern" $CONFFILE`" ] ; then
FIELD=`grep -B 1 -n "$GREPpattern" $CONFFILE`

if [ -z "`echo "$FIELD" | grep "$KERNVER"`" ] ; then

cp $CONFFILE $CONFFILE.`basename $0`.$KERNVER.sbin_init.bac

echo >> $CONFFILE
echo '#####  Updated modaliases for system  ###########' >> $CONFFILE
echo '### RUNNING kernel '"$KERNVER" >> $CONFFILE

for i in `seq 1 $WC` ; do

PARAM=`echo "$SYSTEM" | head -n $i | tail -n 1 | tr '\t' ' ' | tr -s ' '`
STRING="### ${PARAM} "
echo "$STRING" >> $CONFFILE

done

echo >> $CONFFILE

UEVENTS="`ls /sys/bus/*/devices/*/uevent`"

for i in $UEVENTS ; do

DRVR=`grep 'DRIVER' $i 2>/dev/null | cut -f 2 -d '='`;
MODA=`grep 'MODALIAS' $i 2>/dev/null | cut -f 2 -d '='` ;

if [ -n "$DRVR" ] && [ -n "$MODA" ] ; then
echo -n 'alias ' >> /tmp/sbin_init_modaliases.conf
echo -n "$MODA " >> /tmp/sbin_init_modaliases.conf
echo "$DRVR" >> /tmp/sbin_init_modaliases.conf
fi

done

cat /tmp/sbin_init_modaliases.conf | sort -u | sort -k 3 -t ' ' >> $CONFFILE

echo >> $CONFFILE
echo '### '`cat /proc/cmdline` >> $CONFFILE
echo '### '`date` >> $CONFFILE
echo "##### by $0 #######################" >> $CONFFILE
fi
fi
}
_update_modprobe_conf

echo -n '0' > /tmp/pup_event_alsa_cnt
if [ -x /sbin/pup_event_backend_modprobe_protect ] ; then
 if grep '^/dev/root ' /proc/mounts | awk '{print $4}' | grep -w 'rw' ; then ##+++2013-10-03
nice -n -3 /sbin/pup_event_backend_modprobe_protect --daemon &
 fi
fi

if [ -x /sbin/photplug ]; then
 echo '/sbin/photplug' >/proc/sys/kernel/hotplug
elif [ -x /sbin/udevd ];then
 rm $VERB -rf /dev/.udev/*/*
 HOTPLUGD='udevd'
 #100611 UDEV_LOG=2 to prevent non-critical o/p to screen at bootup and shutdown...
 UDEVVER=`udevd --version`
 if [ "$UDEVVER" -gt 150 ];then
  #100611 v151 is recommended for kernel 2.6.27+.
  UDEV_LOG=1 /sbin/udevd --daemon --resolve-names=never ###KRG ; orig LOG=2
 else
  UDEV_LOG=1 /sbin/udevd --daemon ###KRG ; orig LOG=2
 fi
else
 /sbin/pup_event_backend_d >/tmp/pup_event_backend_errors 2>&1 & #hotplug daemon. my homebrew replacement for udevd.
 HOTPLUGD='pup_event_backend_d'
fi
sleep 0.1
fi
}


_load_drivers(){
INITSTATE=`find /sys -name "initstate"`
INITSTATECOUNT=`echo "$INITSTATE" | wc -l`

if [ -n "$INITSTATE" ] && [ "$DebugVal" = '2' ];then
for i in $INITSTATE ; do echo -n "$i " ; cat "$i" ; done  ##echo
fi

if [ "$INITSTATECOUNT" -lt 25 ] ; then

MODALIASES="`ls /sys/bus/*/devices/*/modalias`"  ##+--2013-08-26 BB | sort -R`"
echo -n "Loading kernel modules "

if [ -z "$MODALIASES" ] ; then

echo -e "\\033[1;5;31m"'WARNING : '"$Red"'No modaliases found !'"\\033[39m"
echo -e "\\033[39m"'Either the kernel detected no HW automatically'"\\033[39m"
echo -e "\\033[39m"'or something else went wrong'"\\033[39m"

else

modprobe nls_cp437 #these needed by vfat/ntfs/ext2 f.s.'s.
modprobe nls_iso8859-1 #

echo 'Running the modaliases add by /sbin/init '$0 >> /tmp/pup_event_module_devpath_log

MODULECNT=0
for oneMODALIAS in $MODALIASES
do
 onePATH="`dirname $oneMODALIAS`"

 if [ -e ${onePATH}/uevent ];then
  echo "$oneMODALIAS" >> /tmp/modaliases.loaded
  echo 'add' > ${onePATH}/uevent #generates an 'add' uevent.
  echo -n '.'
  MODULECNT=$((MODULECNT+1))
  sleep 0.2
 fi

done

echo >> /tmp/pup_eve_bac_mod.log
echo >> /tmp/pup_event_module_devpath_log
echo '###########' >> /tmp/pup_event_module_devpath_log
echo
echo -e 'Detected '"$BLU""$MODULECNT ""$Res"'busses'
MODULECNT=0

sleep $((SLEEP*3))s
LSMODCNT=`lsmod | sed "1 d" | wc -l`

if [ "$LSMODCNT" = 0 ] ; then
lsmod | cut -f 1 -d ' ' | sort -g | tr '\n' ' '
else
echo -ne 'Loaded   '"$PUR""$LSMODCNT ""$Res"'drivers at least'
fi

status_func 0
echo
sleep 1s

fi

else

echo "More than 24 initstate files exist ( $INITSTATECOUNT ) "
[ "$DebugVal" = '2' ] && echo "$INITSTATE" | tr '\n' ' '
sleep $((SLEEP*2))s

fi
}


_make_block_devices(){
__load_basic_drivers__(){
if [ -z "`lsmod | grep 'usb'`" ] ; then
# missing input drivers
echo -e "$BLU""Loading usb drivers ...""$Res"
DRIVERS=`modprobe -l | grep -E 'ehci[-_]hcd|ohci[-_]hcd|uhci[-_]hcd|usbcore|usb[-_]storage' | sort -k4,8 -t '/'`
for i in $DRIVERS ; do
DRIVER=`basename $i | sed 's#\.ko.*$##'`
DRVpattern=`echo "$DRIVER" | tr '-' '_'`
echo -ne "$YEL""$DRIVER ""$BLU"'.. '"$Res"
if [ "$DRVpattern" != "usb_storage" ] ; then
[ -z "`lsmod | grep "$DRVpattern"`" ] && modprobe $DRIVER
else
[ -z "`lsmod | grep "$DRVpattern"`" ] && modprobe $DRIVER delay_use=1
fi
done
echo -e "$BLU"'Waiting 15 sec. for kernel to register usb devices ...'"$Res"
sleep 15s
echo
fi
}

_start_udev
_load_drivers

echo -n "Updating Device nodes " >/dev/console
STATUS=0
CATPROCPART=`cat /proc/partitions | sed 's#^\ *[[:alpha:]].*##g' | sed '/^$/d'`
echo "$CATPROCPART" | while read MAJ MIN SIZE SDEV ; do

rm $VERB -f "$1"/dev/$SDEV
STATUS=$(( STATUS + $? ))
mknod "$1"/dev/$SDEV b $MAJ $MIN
STATUS=$(( STATUS + $? ))
echo -n '.' >/dev/console
done

if [ "$PUPMODE" = 2 ] ; then
status_func $STATUS
fi

}
_make_block_devices

###KRG loading input drivers:
_load_input_drivers(){

echo -e "$BLU""Loading keyboard and other drivers ...""$Res"

DRIVERS=`modprobe -l | grep -E 'usbhid|rtc-cmos|libps2|atkbd|xtkbd|evdev' | grep -v -E 'snd|sound' | sort -k4,8 -t '/'`

for i in $DRIVERS ; do

DRIVER=`basename $i | sed 's#\.ko.*$##'`
DRVpattern=`echo "$DRIVER" | tr '-' '_'`

if [ -z "`lsmod | grep "$DRVpattern"`" ] ; then
echo -ne "$YEL""$DRIVER ""$BLU"'.. '"$Res"
modprobe $DRIVER
fi

done

echo -e "$Res"
}
_load_input_drivers
###KRG loading fbcon :
_load_fbcon() {
if [ "`cat /proc/cmdline | grep -E 'vga=ask|vga=0x3[0-9a-fA-F][0-9a-fA-F]|vga=[7-8][0-9][0-9]'`" != "" ]; then

echo -e "$BLU""Trying to load i2c and framebuffer drivers ...""$Res"
I2CS=`modprobe -l | grep -i 'i2c' | grep -v -E 'snd|sound' | while read line ;do basename $line | sed 's#\.ko.*$##' ;done`

GRAPHB=`ddcprobe | grep -E 'vbe|oem|vendor|product' | cut -f 2-99 -d ' ' | tr '[A-Z]' '[a-z]'`
echo -e "$YEL"'video-info : '"$BLU"$GRAPHB"$Res"

MBOARD=`dmidecode | grep -i -E 'Family|Manufacturer' | tr -d '\t' | cut -f 2 -d ':' | grep -v -i 'none' | tr '[[:punct:]]' ' ' |sed 's#^[[:blank:]]*##' | cut -f 1 -d ' ' | tr '[A-Z]' '[a-z]'`
##+++2012-02-06 added sed 's#^[[:blank:]]*##'
echo -e "$YEL"'board-info : '"$BLU"$MBOARD"$Res"

POOL="$GRAPHB
$MBOARD"
sleep 4s

if [ -n "`echo "$MBOARD" | grep -i 'Intel'`" ] ; then
if [ -n "`modprobe -l | grep -E 'i2c\-i801|i801_smbus'`" ] ; then
POOL="$POOL
i2c-i801
i801_smbus"
fi
fi

#echo $POOL
##_ask2continue
POOL=`echo "$POOL" |sed 's%\([[:punct:]]\)%\\\\\1%g'| sort -u`
#echo "$POOL"

if [ -z "`elspci -l | grep -i -E '<.*fb>|<agp.*>|<.*agp.*>|<.*agp>|<vga.*>|<.*vga.*>|<.*vga>'`" ] ; then

for i in $POOL ; do
##echo -e "\\033[0;39m"
I2C=`echo "$I2CS" | grep -i $i`

if [ -n "$I2C" ] ; then
echo -ne "$YEL"'i2c Loading ...'"$Res"

for j in $I2C ; do
DRIVER=`basename $j`
DRVpattern=`echo "$DRIVER" | tr '-' '_'`
if [ -z "`lsmod | grep "$DRVpattern"`" ] ; then
echo -ne "$BLU""$DRIVER ""$YEL"'.. '"$Res"
modprobe $DRIVER #2>/dev/null
else
echo -ne "$BLU""$DRIVER already loaded .. ""$Res"
fi
done

echo -e "$Res"
fi

done
echo -e "$Res"

FBDRIVERS=`modprobe -l | grep 'fb' | while read line ;do basename $line | sed 's#\.ko.*$##' ;done`

if [ -n "`echo "$GRAPHB" | grep -i 'Intel'`" ] ; then
if [ -n "`modprobe -l | grep -E 'i810fb'`" ] ; then
POOL="$POOL
i810fb"
fi
fi

##_ask2continue
POOL=`echo "$POOL" | sort -u`
#echo "POOL:
#$POOL"
for i in $POOL ; do
##echo -e "\\033[0;39m"
FBS=`echo "$FBDRIVERS" | grep -i $i`
#echo "'$i' .. '$FBS'"
if [ -n "$FBS" ] ; then
echo -ne "$YEL"'fb  Loading ... '"$Res"

for j in $FBS ; do
DRIVER=`basename $j`
DRVpattern=`echo "$DRIVER" | tr '-' '_'`
[[ "$DRIVER" = "nvidiafb" -a "`lsmod | grep 'nouveau'`" != "" ]] && continue
[[ "$DRIVER" = "nouveau" -a "`lsmod | grep 'nvidiafb'`" != "" ]] && continue
if [ -z "`lsmod | grep "$DRVpattern"`" ] ; then
echo -ne "$BLU""$DRIVER ""$YEL"'.. '"$Res"
modprobe $DRIVER #2>/dev/null
else
echo -ne "$BLU""$DRIVER already loaded .. ""$Res"
fi
done

echo -e "$Res"
fi

done
sleep 4s
fi

if [ -n "`modprobe -l | grep 'fbcon'`" ] && [ -z "`lsmod | grep 'fbcon'`" ] ; then
##modprobe --first-time fbcon
modprobe fbcon
echo -e "$Res"
fi

fi
#lsmod | cut -f 1 -d ' ' | sort | tr '\n' ' '
}
_load_fbcon  ###COMMENT if required ; fbcon makes colors little greyish  ###KRG
sleep 5s  ###DBG
##_ask2continue
###KRG ask for debug mode
out=/dev/null;err=/dev/null
OUT=$out;ERR=$err
_ask_debug_level(){
/etc/rc.d/rc.country
DebugVal=0
echo -e "$Res"
echo "Do you think $0 DEBUG MODE is required ?"
echo -ne "$BLU"
echo "If so , press [ y ] for normal debug incl. 'fsck -v' ,"
echo -ne "$Res""\\033[6;7;32m"
echo "    or  press [ Y ] for vastly output ,               "
echo -ne "$Res"
echo -ne "$CYA"
echo -e "which may confuse muchly first and second time ..."
echo -e "$PUR"
echo "If not wait 20 sec. or press any other key or simply [ Enter ]"
echo -e "$Res"
echo -ne "\\033[4;5;34m"'ENTER'"$Res"' -> '"\\033[1;7;32m"
read -n 1 -t 20 K
echo -e "$Res" && echo
if [ "$K" = "y" ] ; then
DebugVal=1;out=/dev/null;err=/dev/console
echo -e "$Ora"'Debug Mode '"$DebugVal"' turned on'
echo 'Have FUN !'
elif [ "$K" = "Y" ] ; then
DebugVal=2;out=/dev/console;err=/dev/console
echo -e "$Red"'Debug Mode '"$DebugVal"' turned on'
echo 'Have FUN !'
else
DebugVal=0
echo -e "$Pin"'Keeping in Silent Screen Mode'
fi
TimeOut=$(( ($DebugVal + 1) * 20 ))

SLEEP=$((DebugVal+1))
[ "$DebugVal" -ge "1" ] && echo && echo -e "$Ora"'TimeOut='"$Res""$TimeOut""$Ora"' , additional_sleep_value='"$Res""$SLEEP"
echo -e "$Res"
}
_ask_debug_level

(
##+++2012-01-29
echo -en "$Red"
killall -9 pup_event_backend_modprobe_protect
killall -9 udevd
killall -9 pup_event_backend_d
) 1>$out 2>$err
_sync
echo -e "$Res"
##+++2012-01-29
_do_fsck(){
[ "$DebugVal" -ge "2" ] && echo -e "$Ora"'_do_fsck called with param $1='"$Res""$1""$Ora"' $2='"$Res""$2"
echo -e "$Res"

[ "$1" != "/dev/$PDEV1" ] && [ -n "`mount | grep "^$1"`" ] && umount -lr "$1"
sleep 1s
[ -n "`mount | grep "^$1" | cut -f 6 -d ' ' | grep 'rw'`" ] && mount -o remount,ro $1
sleep 2s
Err=''
RETFSCK=''
CLEAN=''
FSTYPE=`guess_fstype "$1"`
[ "$FSTYPE" = "unknown" ] && FSTYPE=`disktype "$1" | grep -i 'file system' | cut -f 1 -d ' ' | tr '[A-Z]' '[a-z]'`
[ -z "$FSTYPE" ] && FSTYPE='unknown'
[ "$DebugVal" = "2" ] && echo 'FSTYPE='"$FSTYPE"
case $FSTYPE in
ext2|ext3|ext4)
if [ -z "$2" ] ; then
echo -e "$BLU""Checking Partition $1 in -n mode
if required binaries are useable . Please wait""$Res"
[ "$DebugVal" = "0" ] && { RETFSCK=`e2fsck -C 0 -n "$1" 2>/dev/null` || Err=$?; }
[ "$DebugVal" -ge "1" ] && { RETFSCK=`e2fsck -C 0 -n "$1"` || Err=$?; }
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Fsck returned'="$Err""$Res"
else
echo -e "$BLU""Checking Partition $1 in normal mode
if required binaries are useable . Please wait""$Res"
[ "$DebugVal" = "0" ] && e2fsck -C 0 -p "$1"
[ "$DebugVal" = "0" ] && { RETFSCK=`e2fsck -C 0 -n "$1" 2>/dev/null` || Err=$?; }
[ "$DebugVal" -ge "1" ] && e2fsck -C 0 "$1"
[ "$DebugVal" -ge "1" ] && { RETFSCK=`e2fsck -C 0 -n "$1"` || Err=$?; }
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Fsck returned'="$Err""$Res"
fi
CLEAN=`echo "$RETFSCK" | tail -n 1 | grep -i -o 'clean'`
;;
*)
echo -e "$BLU""NOTE : Filesystem types other than ext2|ext3|ext4 not yet supported .
Omitting fsck of $1 ...""$Res"
CLEAN='guessing_clean'
;;
esac
if [ -n "$CLEAN" ] || [ -z "$Err" ] || [ "$Err" -eq 0 ] ; then
echo -e "$GRE""OK"
echo -e "$Gre""Filesystem marked 'clean'""$Res"

else
echo -e "$RED"":Ooops: ""$Red""Fs not clean.""$Res"
[ -n "$FSCK" ] && echo -e "$Gre"'Reaching the max mount intervals also marks the fs "not clean" .'"$Res"
[ "$FSTYPE" = "ext2" ] && echo -e "$BLU""Note : ext2 fs is getting marked 'unclean' very easily . Better use ext3 or ext4""$Res"
[ "$DebugVal" -ge "1" ] && echo -e "$Res""$RETFSCK" | head -n 1
[ "$DebugVal" -ge "1" ] && echo -e "$Res""$RETFSCK" | tail -n 1
echo -e "$Blu""Looking for other useable installations ..."
fi
echo -e "$Res"
}

_do_first_fsck(){
[ -n "`mount | grep '^/dev/root' | cut -f 6 -d ' ' | grep 'rw'`" ] && mount -o remount,ro /dev/root /
_do_fsck "/dev/$PDEV1"
mount -o remount,rw /dev/root /
if [ -n "$CLEAN" ] || [ -z "$Err" ] || [ "$Err" -eq 0 ] ; then
echo -e "$BLU""Booting installation ..."
echo -e "$Res"
rm $ErrFlag
[ "$DebugVal" = "2" ] && _ask2continue
_do_init
fi
}
[ -z "$FSCK" ] && _do_first_fsck

_check4alt_partitions(){
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'$ROOTDRIVE='"$Res""$ROOTDRIVE"
DRIVES=''
DRIV=`cat /proc/partitions | grep '^ ' | grep -v 'loop' | sed 's#^ *##' | tr -s ' ' | cut -f 4 -d ' ' | cut -b 1-3 | uniq`
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Attached drives : '"$Res"$DRIV

for i in $DRIV ; do

FDISK=`fdisk -l /dev/$i | grep -i 'linux' | grep -v -i -E 'swap|Partition' | cut -f 1 -d ' '`
DRIVES="`echo -e "$DRIVES\n""$FDISK"`"
done
DRIVES=`echo "$DRIVES" | sed '/^$/d' | grep -v "$DEVROOTDRIVE" | tr '\n' ' '`
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Other partitions : '"$Res""$DRIVES"
[ -z "`echo $DRIVES | grep '[[:alpha:]]'`" ] && DRIVES=''

if [ -z "$DRIVES" ] ; then
DRIVES=`cat /proc/partitions | grep '^ ' | grep '[0-9]$' | sed 's#^ *##' | tr -s ' ' | cut -f 4 -d ' '`

DRIVES=`echo "$DRIVES" | grep -v "$PDEV1" | sed 's#^#/dev/#g' | tr '\n' ' '`
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'DRIVES: '"$DRIVES""$Res"
fi

if [ -z "$DRIVES" ] ; then
ERRMSG="Could not find any useable drives in /proc/partitions"
_dropout2console
fi
}

_check4alt_repository(){
_get_libc_version(){
CURRGLIBC=`basename $(find /lib -maxdepth 1 -name "libc-*.so")`
CURRCLMAJ=`echo "$CURRGLIBC" | cut -f 2 -d ' ' | cut -f 2 -d '.'`
CURRCLMin=`echo "$CURRGLIBC" | cut -f 2 -d ' ' | cut -f 3 -d '.'`
[ -z "$CURRCLMin" ] && CURRCLMin='0'  ##+++2011-11-25
}

if [ -z "$CLEAN" ] ; then  #0
if [ -n "$Err" ] && [ "$Err" -ne 0 ] ; then #1

_find_puppy_sfs(){

_check4alt_partitions  #TODO simplfy ?
_get_libc_version
modprobe squashfs

#******************************************************************************
for oneDRV in $DRIVES ; do  ##for 0

SIMPLEDRIVENAME=`basename $oneDRV`
mkdir $VERB -p /mnt/$SIMPLEDRIVENAME
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Mounting '"$Res"$oneDRV' on '"$Res"/mnt/$SIMPLEDRIVENAME
mount -o ro $oneDRV /mnt/$SIMPLEDRIVENAME
[ $? = 0 ] || {
    rmdir /mnt/$SIMPLEDRIVENAME 2>>$ERR
    continue; }
SFS=`find /mnt/$SIMPLEDRIVENAME -maxdepth 3 -type f -name "*.sfs" | grep -i -E 'luma|luci|lupu|pup|pu' | grep -v -E 'devx|\+mnt\+'`

###check found sfs part
if [ -z "$SFS" ] ; then  ##if 99
echo  -e "$Ora"'No puppy.sfs found on '"$Res"$oneDRV
sleep 1s
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Unmounting again '"$Res"$oneDRV
umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME 2>>$ERR
continue  ##for 0

else  ##if 99
 for oneSFS in $SFS ; do ##for 1
 [ "$DebugVal" -ge "1" ] && echo -e "$YEL"'Found '"$Pin"$oneSFS"$Res"
 bneSFS=`basename $oneSFS`
 [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Mounting now '"$Res""$oneSFS /mnt/$bneSFS"
 mkdir $VERB -p /mnt/$bneSFS
 Err=0  ###+++2013-11-20
 mount-FULL -o loop $oneSFS /mnt/$bneSFS
 Err=$?
 sleep 1s
 [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Mounting returned error value='"$BLU""$Err""$Res"

  if [ "$Err" -eq 0 ] ; then ##100
  REPOGLIBC=`basename $(find /mnt/$bneSFS/lib -maxdepth 1 -name "libc-*.so")`
  REPOCLMAJ=`echo "$REPOGLIBC" | cut -f 2 -d '.'`
  REPOCLMin=`echo "$REPOGLIBC" | cut -f 3 -d '.'`
  [ -z "$REPOCLMin" ] && REPOCLMin='0'  ##+++2011-11-25

   if [ -z "$REPOGLIBC" ] ; then ##101
   echo -e "$Red"'No libc found in '"$Res""$bneSFS"
   umount -lr /mnt/$bneSFS
   sleep 1s
   rmdir /mnt/$bneSFS
   FOUND=''
   continue ##for 1
  else ##101

   if [ "$REPOCLMAJ" -gt "$CURRCLMAJ" ] ; then #102
    echo -e "$Red""Major of libc in $bneSFS = '$REPOCLMAJ' and larger than actual '$CURRCLMAJ'""$Res"
    umount -lr /mnt/$bneSFS
    sleep 1s
    rmdir /mnt/$bneSFS
    FOUND=''
    continue ##for 1

   elif [ "$REPOCLMAJ" -eq "$CURRCLMAJ" ] && [ "$REPOCLMin" -gt "$CURRCLMin" ] ; then #102
    echo -e "$Red""Minor of libc in $bneSFS = '$REPOCLMin' and larger than actual '$CURRCLMin'""$Res"
    umount -lr /mnt/$bneSFS
    sleep 1s
    rmdir /mnt/$bneSFS
    FOUND=''
   continue ##for 1

   else #102
    echo -e "$Gre""Found '$REPOGLIBC' and should match '$CURRGLIBC'""$Res"
    FOUND='1'
    break ##for 1
   fi #102

  fi #101

 else #100
 Err=99999
 echo -e "$Red""Mounting $oneSFS failed""$Res"
 umount -lr /mnt/$bneSFS 2>>$ERR
 sleep 1s
 rmdir /mnt/$bneSFS
 FOUND=''
 continue  ##for 1
 fi #100
done  ##for 1

fi  ##if 99
###end check sfs part

[ -n "$FOUND" ] && [ "$Err" -eq 0 ] && break ##for 0
done  ##for 0
#******************************************************************************
echo -e "$Res"

[ "$DebugVal" -ge "2" ] && echo -e "$Red"'oneDRV='"$Res""$oneDRV ""$Red"'oneSFS='"$Res""$oneSFS ""$Red"'bneSFS='"$Res ""$bneSFS"
MOUNTLOOP=`mount | grep -E "$oneDRV|$bneSFS" | cut -f 1 -d ' ' | tr ' ' '|'`
MOUNT=`mount | grep -v -E "$MOUNTLOOP|$DEVROOTDRIVE" | grep '^/dev/' | grep -v -E  'initrd|none|*tmpfs|root|unionfs|aufs' | cut -f 1 -d ' '`
[ "$DebugVal" -ge "2" ] && echo -e "$Red""'$MOUNTLOOP' : '$MOUNT' :""$Res"
[ "$DebugVal" -ge "1" ] && echo -e "\nBEFORE:" && mount

for m in $MOUNT ; do
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Unmounting again '"$Res"$m
umount -lr $m
sleep 1s
[ -d /mnt/`basename $m` ] && rmdir /mnt/`basename $m`
done
([ "$DebugVal" -ge "1" ] && [ -n "$MOUNT" ]) && ( echo -e "\nAFTER:" mount && echo -e "$Res" )
sleep $((SLEEP*3))s

#******************************************************************************
if [ -n "`mount | grep "/mnt/$bneSFS"`" ] ; then #103
REPO="/mnt/$bneSFS"
REPOSFS=`basename $REPO`
REPOPART="$oneDRV"
echo -e "$Res"
echo -e "$Gre"'Repository to use : '"$GRE""$REPOSFS""$Gre"' on '"$GRE""$REPOPART"
echo -e "$Res"
sleep $((SLEEP*2))s
else  #103
echo -e "$Res"
echo -e "$Red""No suitable puppy.sfs found""$Res"
echo "Trying for Puppy full installations ...."
echo -e "$Res"
sleep $((SLEEP*2))s
REPO=''
fi #103
#******************************************************************************
}
_find_puppy_sfs

_find_puppy_full_installs(){
###part full installs
_check4alt_partitions
_get_libc_version

for oneDRV in $DRIVES ; do ##for 0

SIMPLEDRIVENAME=`basename $oneDRV`
mkdir $VERB -p /mnt/$SIMPLEDRIVENAME
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Mounting '"$Res""$oneDRV""$Ora"' on '"$Res""/mnt/$SIMPLEDRIVENAME""$Res"
mount -o rw $oneDRV /mnt/$SIMPLEDRIVENAME
DS=
[ -d /mnt/$SIMPLEDRIVENAME/etc ] && DS=`find /mnt/$SIMPLEDRIVENAME/etc -maxdepth 2 -name "DISTRO_SPECS"`
sleep 2s

if [ -n "$DS" ] ; then  ##3
if [ -f "$DS" ] ; then  ##4
source $DS
if [ -n "$DISTRO_NAME" ] && [ -n "$DISTRO_VERSION" ] ; then  ##4.1
echo -e "$GRE""Found $DISTRO_NAME $DISTRO_VERSION"
REPOGLIBC=`basename $(find /mnt/$SIMPLEDRIVENAME/lib -maxdepth 1 -name "libc-*.so")`
REPOCLMAJ=`echo "$REPOGLIBC" | cut -f 2 -d '-' | cut -f 2 -d '.'`
REPOCLMin=`echo "$REPOGLIBC" | cut -f 2 -d '-' | cut -f 3 -d '.'`
if [ -n "$REPOGLIBC" ] ; then #4.1.1
if [ "$REPOCLMAJ" -gt "$CURRCLMAJ" ] ; then ##4.2
echo -e "$Red""LIBC major = '$REPOCLMAJ' larger than '$CURRCLMAJ'""$Res"
umount -lr $oneDRV 2>>$ERR
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
continue
elif [ "$REPOCLMAJ" -eq "$CURRCLMAJ" ] && [ "$REPOCLMin" -gt "$CURRCLMin" ] ; then ##4.2
echo -e "$Red""LIBC minor = '$REPOCLMin' larger than '$CURRCLMin'""$Res"
umount -lr $oneDRV 2>>$ERR
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
continue
else ##4.2
echo -e "$Gre""Found '$REPOGLIBC' and should match '$CURRGLIBC'""$Res"
echo -e "$BLU""Fscking $oneDRV just in case ....""$Res"
umount -lr $oneDRV 2>>$ERR
sleep 2s
fi ##4.2

_do_fsck "$oneDRV" "other_full_installs"
if [ -n "$CLEAN" ] || [ -z "$Err" ] || [ "$Err" -eq "0" ] ; then  ##5
echo -e "$Gre"'OK ,'"$GRE"" using REPO /mnt/$SIMPLEDRIVENAME""$Res"
echo
mount -o rw $oneDRV /mnt/$SIMPLEDRIVENAME
sleep 1s
REPO="/mnt/$SIMPLEDRIVENAME"
break
else  ##5
echo
echo -e "$RED""No ,""$Red"" $oneDRV seems to be not clean , too""$Res"
echo "Trying next if possible ...."
echo
REPO=''
[ -n "`mount | grep "$oneDRV"`" ] && umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
fi  ##5
else
echo -e "$Red"'No GLIBC found on '"$Res"$oneDRV
umount -lr $oneDRV 2>>$ERR
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
continue
fi  ##4.1.1
else ##4.1
echo -e "$RED"'No , $DISTRO_NAME or $DISTRO_VERSION not available'"$Res"
echo 'Trying next if possible ....'
umount -lr $oneDRV 2>>$ERR
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
fi  ##4.1
fi  ##4
else #3
echo -e "$Ora"'Apparently no Puppy Linux full installation on '"$Res""$oneDRV"
umount -lr $oneDRV 2>>$ER
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
fi  ##3
done  ##for 0
}
[ -z "$REPO" ] && _find_puppy_full_installs

_tell_no_puppy_repo_found(){
if [ -z "$REPO" ] ; then  #6
echo
echo -e "$RED""No alternative useable repositories found .""$Res"
echo "You can continuing using files of full installation ."
echo "Hopefully none are corrupted ."
echo
echo -e "$Red""Type [ r ] or [ R ] to reboot"
echo -e "$GRE""Type [ c ] or [ k ] for dropout into console"
echo -e "$Gre""Else any other key and or simply [ Enter ] to continue"
echo -e "$Res"
read -t $TimeOut K
echo
Key=`echo "$K" | tr '[A-Z]' '[a-z]'`
if [ "$Key" = "c" -o "$Key" = "k" ] ; then #7
echo 'dropping to console now , partition still mounted !'
cd /
sleep 2
exec chroot . ash

elif [ "$Key" = "r" ] ; then  #7
echo "Please do an 'e2fsck $DEVROOTDRIVE' "
echo "via console/terminal using a LiveCd ."
echo "You may need to boot it with 'puppy pfix=ram' ."
echo "Remember , the timeout is 5 sec to press 'F2' ."
echo "Rebooting now in 25 seconds"
sleep 22s
[ "$DebugVal" = "0" ] && umount -a -r 2>/dev/null
[ "$DebugVal" -ge "1" ] && umount -a -r
[ "$DebugVal" -ge "1" ] && sleep 10s
sleep 2s
exec busybox reboot -f

else #7
echo -e "$Ora""Ok ... continuing ...""$Res"
REPO=''
fi  ##7
fi  ##6
}
_tell_no_puppy_repo_found

fi  ##1
fi  #0
sleep $((SLEEP*5))s  ###KRG
[ "$DebugVal" = "2" ] && _ask2continue
}
_check4alt_repository
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'$REPO='"$Res""$REPO"

[ -z "`mount | grep -Fw '/' | grep '(rw)'`" ] && mount -o remount,rw /dev/root /

_check_dev_nodes(){
#####KRG
###KRG updating fsckme file case switching kernels sda|hda
ROOTDRIVE=`basename $(rdev | cut -f 1 -d ' ')`  ### | cut -f 1 -d ' ' | sed 's#/dev/##'`
ROOTBLOCKDRIVE=${ROOTDRIVE:0:3}
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'rootdrive='"$Res""$ROOTDRIVE" && echo  ###DBG
FS=`mount | grep -Fw '/' | grep '^/dev' | tr -s ' ' | cut -f 5 -d ' '`
PDEV1="$ROOTDRIVE"
DEV1FS="$FS"
[ "$DebugVal" -eq "2" ] && echo -e "$Ora""$ROOTDRIVE $ROOTBLOCKDRIVE $FS "','" $PDEV1 $DEV1FS"
DMESG=`dmesg | grep 'Mounted root' | grep -o 'device.*' | cut -f 2 -d ' ' | sed 's#[[:alpha:][:punct:]]$##`
MAJ=`echo $DMESG | cut -f 1 -d ':'`
Min=`echo $DMESG | cut -f 2 -d ':'`
CATPP=`cat /proc/partitions | sed 's#^[a-zA-Z].*##g ; s#^[[:blank:]][a-zA-Z]##g ; /^$/d' | tr -s ' ' | sed 's#^ ##'`
MAJBL=`echo "$CATPP" | grep -w "$ROOTBLOCKDRIVE" | cut -f 1 -d ' '`
MinBL=`echo "$CATPP" | grep -w "$ROOTBLOCKDRIVE" | cut -f 2 -d ' '`
[ "$DebugVal" -eq "2" ] && echo $CATPP" $DMESG $MAJ $Min "','" $MAJBL $MinBL "',' && echo -e "$Res"
}
[ "$DebugVal" -ge "1" ] && _check_dev_nodes

_check_free_ram(){
####
####KRG check for enough RAM space ...
echo -e "$BLU"'Freeing ram ...'"$Res"
[ "$DebugVal" -ge "1" ] && echo -e "$Ora" && free && echo -e "$Res"
echo 3 > /proc/sys/vm/drop_caches  ###KRG , thanks to Bruce B ;see http://www.murga-linux.com/puppy/viewtopic.php?t=33219
[ "$DebugVal" -ge "1" ] && echo -e "$Ora" && free && echo -e "$Res"
sleep $((SLEEP*4))s  ###KRG
###Check for Available Test dev node :
if [ "`ls -l /dev/ram8 | cut -b 1-3`" != "brw" -o "`ls -l /dev/ram8 | cut -f 5,6 -d ' '`" != "1, 8" ] ; then
rm $VERB -f /dev/ram8
mknod /dev/ram8 b 1 8
fi
echo -e "$BLU"'Checking for Compiled RamDisk Size using:'"$Res"
MAXSIZEdevRAM1=`mkfs.ext2 $Q $VERB -b 1024 -i 1024 /dev/ram8 | grep 'blocks' | grep 'inodes' | tr -s ' ' | cut -f 3 -d ' '`
SIZEdevRAMdisk1=$((MAXSIZEdevRAM1 * 93 / 100))  ###KRG 0.93 is precaution
echo -e "$YEL"'Compiled-in RAMDisk Size='"$Res""$SIZEdevRAMdisk1""$Res"
echo -e "$Res"
KERNV=`uname -r`

###Check for /lib/lib*.so* sizes :
echo -e "$BLU""Checking Size of $REPO/lib/lib*.so* and $REPO/lib/ld*.so* ..."
echo -e "$Res"
SPACElib=0
LLS=`ls -l "$REPO"/lib/* | grep -o '/lib/.*\->.*' | grep -E 'firefox|seamonkey|opera' | cut -f 1 -d ' '`
[ -z "$LLS" ] && LLS="No_firefox_libs_in_lib"
[ "$DebugVal" -ge "2" ] && ( echo -e "$Red"'firefox-libs: '$LLS && echo )
LF=`find "$REPO"/lib -maxdepth 1 -name "lib*.so*" -o -name "ld*.so*"`
#Filter not needed files :
LIBF=`echo "$LF" | grep -v "$LLS" | grep -v -E 'libuClibc.*|ld\-uClibc.*|libthread.*|libm\-0.*|libm\.so\.0' | sort`
for i in $LIBF ; do
#SiZElib=`ls -s "$i" | cut -f 1 -d ' '`
SiZElib=`ls -s "$i" | awk '{print $1}'`
[ "$SiZElib" ] || SiZElib=8
SPACElib=$((SPACElib + SiZElib))
[ "$DebugVal" = "2" ] && echo -ne "$Res""$i"'='"$Red""$SiZElib "  ###DBG
( [ "$DebugVal" = "1" ] && [ "$SiZElib" -ne "0" ] ) && echo -ne "$Res""$i"'='"$Ora""$SiZElib "
done
[ "$DebugVal" = "2" ] && ( echo && echo 'total /lib='"$SPACElib" )  ###DBG
[ "$DebugVal" -ge "1" ] && ( echo && echo -e "$Res" )

echo -e "$BLU"'Checking for available RAM ...'
echo -e "$Res"
    RAM=`free | grep -i 'mem' | sed 's#^[[:blank:]]*##' | tr -s ' ' | cut -f 2 -d ' '`
FREERAM=`free | grep -i 'mem' | sed 's#^[[:blank:]]*##' | tr -s ' ' | cut -f 4 -d ' '`
RAMLIMITdevRAM2=$((MAXSIZEdevRAM1 * 2))
echo '                  free counted total RAM:'"$RAM"  ###DBG
echo 'Available RAM (minus Kernel and modules):'"$FREERAM"  ###DBG
echo '     Minimum available free RAM required:'"$RAMLIMITdevRAM2"' ... '  ###DBG

if [ "$SPACElib" -gt "$SIZEdevRAMdisk1" -o "$RAMLIMITdevRAM2" -ge "$FREERAM" ] ; then  #1
echo
echo ";)"
echo -e "$RED"
if [ "$RAMLIMITdevRAM2" -ge "$FREERAM" ] ; then                         #1.1
echo "Needed free RAM is $RAMLIMITdevRAM2 , but free RAM is $FREERAM"
else                                                                    #1.1
echo "/lib/lib*.so* is $SPACElib in KB and larger than the RamDisk compiled for"
echo -e "$GRE"
echo "kernel $KERNV with $SIZEevRAMdisk1 / $MAXSIZEevRAM1 in KB"
fi  #1.1
echo -e "$Res"
echo -e "$RED"
echo 'fsck omitted !!!'
echo -e "$GRE"
echo 'please do the filesystemcheck via Live CD'
echo -e "$YEL"
echo 'or booting another Puppy or Linux'
echo -e "$CYA"
echo "type 'busybox reboot -f' to reboot"
echo 'eventually you need to press CTRL+ALT+DELETE to reboot'
echo 'you may need to check BIOS bootorder also before booting LiveCD'
echo 'do not forget to unmount everything first !'
echo -e "$Res"
echo
echo 'dropping to console now , partition still mounted !'
cd /
mount -o remount,ro /dev/root /
sleep $((SLEEP*2))s
exec chroot . ash
fi  #1
NRAM=$(( RAM - FREERAM + RAMLIMITdevRAM2 ))
NEEDRAM=`echo "$NRAM" | sed -r 's/(.)/ \1/g' | rev | tr ' ' '\n' | sed -r '4 i\,' | sed -r '8 i\,' | tr -d '\n' | rev | sed 's#^,##'`
FORMRAM=`echo "$RAM"  | sed -r 's/(.)/ \1/g' | rev | tr ' ' '\n' | sed -r '4 i\,' | sed -r '8 i\,' | tr -d '\n' | rev | sed 's#^,##'`
echo -e "$GRE"
echo -e "\\033[18G"'... OK : '"$Res"$NEEDRAM"$GRE"' required of '"$Res"$FORMRAM
echo -e "$Res"
sleep $((SLEEP*5))s
##export LIBF
}
_check_free_ram

[ "$DebugVal" = "2" ] && _ask2continue

  #creat a ramdisk...
  #note, Puppy kernels are compiled with 13MB ramdisk, so need to be careful not to fill it up...
  echo -e "$Pin"'Creating a ramdisk and populating with a Linux environment...'"$Res"

_check_ram0(){
  if [ ! -b /dev/ram0 -o "`ls -l /dev/ram0 | cut -b 1-3`" != "brw" -o "`ls -l /dev/ram0 | cut -f 5,6 -d ' '`" != "1, 0" ]; then  ###KRG
  echo  -e "$RED"'block /dev/ram0 does not exist'"$Res"
  rm $VERB -f /dev/ram0
  echo -e "$Res"'creating now'"$Res"
  mknod /dev/ram0 b 1 0
  fi
}
_check_ram0

mkfs.ext2 $Q $VERB -m 5 -b 1024 -i 1024 /dev/ram0

_make_ram9(){
  [ ! -b /dev/ram9 -o "`ls -l /dev/ram9 | cut -b 1-3`" != "brw" -o "`ls -l /dev/ram9 | cut -f 5,6 -d ' '`" != "1, 9" ] && rm $VERB -f /dev/ram9 && mknod /dev/ram9 b 1 9  ###KRG
  mkfs.ext2 $Q $VERB -m 5 -b 1024 -i 1024 /dev/ram9
  sleep $((SLEEP*2))s
}
_make_ram9

  mkdir $VERB -p /mnt/ram0
  mkdir $VERB -p /mnt/ram9  ###KRG

  mount -t ext2 /dev/ram0 /mnt/ram0
  mount -t ext2 /dev/ram9 /mnt/ram9  ###KRG
  ###KRGbusybox mount $VERB $VERB -o remount,rw /dev/root /  ##KRG just for chroot
  sleep $((SLEEP*2))s  ###KRG

  #populate the ramdisk...
  mkdir $VERB -p /mnt/ram0/old_root
  mkdir $VERB /mnt/ram0/bin

_copy_busybox(){
  ###KRG BUSYBOX
  echo
  echo -ne "$BLU""Checking if $REPO/bin/busybox is a link to 'MyBusybox' : ""$Res"
  RLF=`readlink -f "$REPO"/bin/busybox`  ## | sed "s%^$REPO%%"`
  LSLBB=`ls -l "$REPO"/bin/busybox | grep -o '\->.*'`  ###KRG if busybox is a symlink to busybox-version

  if test "$LSLBB" != "" ; then
  echo -e "$GRE"'YES'"$Res"
  echo -e "$Res"'Copying '"$RLF"' into RamDisk'"$Res"
  #RLBB=`echo $RLF | sed 's#/bin/##'`
  RLBB=`basename "$RLF"`
  #cp $VERB -a "$REPO"/bin/"$RLBB" /mnt/ram0/bin/"$RLBB"
  cp $VERB -a "$RLF" /mnt/ram0/bin/"$RLBB"
  else
  echo -e "$Gre"'No'
  fi
  echo -e "$Res"
}
_copy_busybox

  echo -e "$BLU""Populating /mnt/ram0/bin  ...""$Res"
  [ "$DebugVal" = "2" ] && echo -ne "$Red"'/mnt/ram0/bin/'"$Res"
  for oneBIN in "[" "[[" ash autologinroot basename busybox cat chmod chown clear cp cut date dc dd df dirname dmesg du e3 ed expr false find free grep head kill ln login ls lsmod mkdir mknod more mv nice ntfs-3g pidof pwd readlink rev rm rmdir sed sleep sort stat su sync tail tar touch tr true uname usleep waitmax wc which xargs
  do  ###KRG added e3

  if [ -x $REPO/bin/$oneBIN ] ; then
  BINDIR='/bin'
  elif [ -x $REPO/usr/bin/$oneBIN ] ; then
  BINDIR='/usr/bin'
  else
  continue
  fi
  RLF=`readlink -f "$REPO""$BINDIR"/"$oneBIN" | grep -v 'busybox' | sed "s%^$REPO%%"`
  LSLBIN=`ls -l "$REPO""$BINDIR"/"$oneBIN" | grep -o '\->.*' | grep -v 'busybox'`

  if [ -n "$LSLBIN" ] ; then
  [ "$DebugVal" = "1" ] && echo -ne "$Ora"" Link $oneBIN""$Res"
  NEWBIN=`echo "$RLF" | sed 's#/usr## ; s#/local##'`
  [ "$DebugVal" = "2" ] && echo -ne "$Red"' Link '"$Res""${REPO}${BINDIR}/$oneBIN ""$Red"', '"$Res"
  [ "$DebugVal" = "2" ] && echo -ne "$Red"' LinkTarget '"$Res""${REPO}${RLF} ""$Red"', '"$Res"
  [ -x /mnt/ram0/${NEWBIN} ]   || cp $VERB -a ${REPO}${RLF} /mnt/ram0/${NEWBIN}
  [ -x /mnt/ram0/bin/$oneBIN ] || cp $VERB -a ${REPO}${BINDIR}/$oneBIN /mnt/ram0/bin/$oneBIN
  else

   if [ -x ${REPO}${BINDIR}/$oneBIN ] && [ ! -x /mnt/ram0/bin/$oneBIN ] ;then  ###KRG for symlink busybox
    cp $VERB -a ${REPO}${BINDIR}/$oneBIN /mnt/ram0/bin/
    [ "$DebugVal" = "2" ] && echo -ne "$oneBIN ""$Red"', '"$Res"

   else
    if [ "$oneBIN" != "busybox" -a "`busybox | grep $oneBIN`" != "" ] ; then  ###KRG
    [ "$DebugVal" = "2" ] && echo -en 'link '"$oneBIN ""$Red"', '"$Res"
    ln $VERB -s busybox /mnt/ram0/bin/$oneBIN
    fi
   fi
  fi
  done
  ln $VERB -sf busybox /mnt/ram0/bin/ps
  [ "$DebugVal" = "2" ] && echo -ne 'link ps '"$Red"', '"$Res"
  ln $VERB -sf busybox /mnt/ram0/bin/rdev
  [ "$DebugVal" = "2" ] && echo -ne 'link rdev '"$Red"', '"$Res"
  ln $VERB -sf busybox /mnt/ram0/bin/sh
  [ "$DebugVal" = "2" ] && echo -ne 'link sh '"$Red"', '"$Res"
  ln $VERB -sf busybox /mnt/ram0/bin/mount
  [ "$DebugVal" = "2" ] && echo -ne 'link mount '"$Red"', '"$Res"
  ln $VERB -sf busybox /mnt/ram0/bin/umount
  [ "$DebugVal" = "2" ] && echo -n 'link umount '
  [ "$DebugVal" -ge "1" ] && echo -e "$Res" && echo

  echo -e "$BLU""Populating /mnt/ram0/sbin ...""$Res"
  [ "$DebugVal" = "2" ] && echo -ne "$Red"'/mnt/ram0/sbin/'"$Res"
  mkdir $VERB /mnt/ram0/sbin
  for oneBIN in depmod dumpe2fs e2fsck elspci fdisk freeramdisk fsck.ext2 fsck.ext3 fsck.ext4 getty guess_fstype halt hdparm hotplug2stdout hotplug2stdout_notimeout hwclock ifconfig ifplugstatus insmod klogd ldconfig loadkmap losetup lsmod mount.ntfs-3g pivot_root probedisk probedisk2 probepart swapon
  do

  if [ -x $REPO/sbin/$oneBIN ] ; then
  BINDIR='/sbin'
  elif [ -x $REPO/usr/sbin/$oneBIN ] ; then
  BINDIR='/usr/sbin'
  else
  continue
  fi
  RLF=`readlink -f "$REPO""$BINDIR"/"$oneBIN" | grep -v 'busybox' | sed "s%^$REPO%%"`
  LSLSBIN=`ls -l "$REPO""$BINDIR"/"$oneBIN" | grep -o '\->.*' | grep -v 'busybox'`

   if [ -n "$LSLSBIN" ] ; then
   [ "$DebugVal" = "1" ] && echo -ne "$Ora"" Link $oneBIN ""$Res"
   NEWBIN=`echo "$RLF" | sed 's#/usr## ; s#/local##'`
   [ "$DebugVal" = "2" ] && echo -ne "$Red"' Link '"$Res""${REPO}${BINDIR}/$oneBIN ""$Red"', '"$Res"
   [ "$DebugVal" = "2" ] && echo -ne "$Red"' LinkTarget '"$Res""${REPO}${RLF} ""$Red"', '"$Res"
   [ -x /mnt/ram0/sbin/$oneBIN ] || cp $VERB -a ${REPO}${BINDIR}/"$oneBIN" /mnt/ram0/sbin/"$oneBIN"
   [ -x /mnt/ram0/${NEWBIN} ]    || cp $VERB -a ${REPO}${RLF} /mnt/ram0/${NEWBIN}
   else
   if [ -x "${REPO}${BINDIR}/$oneBIN" ];then  ###KRG -x for -e
    cp $VERB -a ${REPO}${BINDIR}/$oneBIN /mnt/ram0/sbin/
    [ "$DebugVal" = "2" ] && echo -ne "$oneBIN "
    [ "$DebugVal" = "2" ] && [ "$oneBIN" != "swapon" ] && echo -ne "$Red"', '"$Res"
   else
    if test "`busybox | grep $oneBIN`" != "" ; then  ###KRG
    ln $VERB -s ../bin/busybox /mnt/ram0/sbin/$oneBIN
    [ "$DebugVal" = "2" ] && echo -ne 'link '"$oneBIN "
    [ "$DebugVal" = "2" ] && [ "$oneBIN" != "swapon" ] && echo -ne "$Red"', '"$Res"
    fi
   fi
  fi
  done
_preserve_chroot(){
  CHROOT=`which chroot | grep '^/sbin/`
  if [ -n "$CHROOT" ] && [ ! -L "$CHROOT" ] && [ -x "$CHROOT" ] ; then
  echo "$CHROOT is no link but executable ,
creating backup of $CHROOT.bac
Please restore manually for now"
  mv $VERB $CHROOT "$CHROOT.bac"
  fi
}
_preserve_chroot

  ln $VERB -sf ../bin/busybox /sbin/chroot #must match
  [ "$DebugVal" = "2" ] && echo -ne 'link chroot '"$Red"', '"$Res"
  ln $VERB -sf ../bin/busybox /mnt/ram0/sbin/chroot #must match
  [ "$DebugVal" = "2" ] && echo -ne 'link chroot '"$Red"', '"$Res"
  ln $VERB -sf ../bin/busybox /mnt/ram0/sbin/init
  [ "$DebugVal" = "2" ] && echo -ne 'link init '"$Red"', '"$Res"
  ln $VERB -sf ../bin/busybox /mnt/ram0/sbin/poweroff
  [ "$DebugVal" = "2" ] && echo -ne 'link poweroff '"$Red"', '"$Res"
  ln $VERB -sf ../bin/busybox /mnt/ram0/sbin/reboot
  [ "$DebugVal" = "2" ] && echo -n 'link reboot '
  [ "$DebugVal" -ge "1" ] && echo -e "$Res" && echo

  echo -e "$BLU""Populating /mnt/ram0/etc  ...""$Res"
  mkdir $VERB /mnt/ram0/etc
  [ "$DebugVal" = "2" ] && echo -ne "$Red"'/mnt/ram0/etc/'"$Res"
  for oneFILE in codepage DISTRO_SPECS eventmanager fdprm floppy fontmap group gshadow host.conf hostname hosts hosts.allow hosts.deny inittab inputrc issue keymap localtime mailcap mime.types mke2fs.conf modprobe.conf modules.conf mtab networks nscd.conf nsswitch.conf passwd printcap protocols services shadow
  do
   [ "$DebugVal" = "0" ]   && cp $VERB -a "$REPO"/etc/$oneFILE /mnt/ram0/etc/ 2>/dev/null
   [ "$DebugVal" = "2" ]   && echo -ne "$oneFILE "
   [ "$DebugVal" -ge "1" ] && cp $VERB -a "$REPO"/etc/$oneFILE /mnt/ram0/etc/
   [ "$DebugVal" = "2" ]   && [ "$oneFILE" != "shadow" ] && echo -ne "$Red"', '"$Res"
  done
   [ "$DebugVal" = "2" ] && echo -e "$Res" && echo

  echo -n "$PDEV1"','"$DEV1FS"',' > /mnt/ram0/etc/fsckme.err  ###KRG  ##echo -n 2013-11-19
  echo "DebugVal='$DebugVal'" > /mnt/ram0/etc/initdebug.in  ###KRG
  echo "TimeOut='$TimeOut'" >> /mnt/ram0/etc/initdebug.in  ###KRG

  echo '/lib' > /mnt/ram0/etc/ld.so.conf
  echo 'export PATH="/bin:/sbin"
export LD_LIBRARY_PATH="/mnt/ram9/lib"
ulimit -c 0
umask 022
export USER=root
export LOGNAME=root
export TERM=linux' > /mnt/ram0/etc/profile
  cp "$REPO"/etc/fstab /mnt/ram0/etc/ || touch /mnt/ram0/etc/fstab ##+++2013-08-26

  mkdir $VERB /mnt/ram0/etc/rc.d

  echo '#!/bin/sh
 PDEV1=`cat /etc/fsckme.err | cut -f 1 -d ","`    ###KRG
DEV1FS=`cat /etc/fsckme.err | cut -f 2 -d ","`    ###KRG
test -f /etc/initdebug.in && . /etc/initdebug.in  ###KRG
PATH="/bin:/sbin"
echo -e "\\033[0;32m"
echo "Now running in ramdisk, preparing for filesystem check of ${PDEV1}..."
echo -e "\\033[0;39m"
[ ! -d /proc ] && mkdir /proc
if [ -z "`mount | grep -o /proc`" ] ; then
[ "$DebugVal" = "0" ] && mount -t proc none /proc 2>/dev/null  ###KRG added: 2>/dev/null  ###KRG
[ "$DebugVal" -ge "1" ] && mount -t proc none /proc
fi
if [ "`readlink /etc/mtab`" != "/proc/mounts" ] ; then ##e2fsck needs it , busybox mount apparently not
[ -f /etc/mtab ] || [ -L /etc/mtab ] && rm /etc/mtab
ln -s ../proc/mounts /etc/mtab
fi
[ "$DebugVal" = "0" ] && hwclock --hctosys --localtime 2>/dev/null
[ "$DebugVal" -ge "1" ] && hwclock --hctosys --localtime
echo "Unmounting the rootdrive ..."   ###KRG
echo
MOR=`mount | grep "/old_root/.*"`
for i in `echo "$MOR" | cut -f 3 -d " " | sort -r` ; do
[ "$DebugVal" = "0" ] && umount $i 2>/dev/null || ErrMor=$?  ###KRG
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""Unmounting $i ...""\\033[0;39m"
[ "$DebugVal" -ge "1" ] && umount $i || ErrMor=$?
if [ -n "`mount | grep "$i"`" ] ; then
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""Failed to unmount $i with error=$ErrMor""\\033[0;39m" && echo
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""Trying lazy now ...""\\033[0;39m"
umount -l $i || ErrMorl
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""umount -l $i returned errorcode=$ErrMorl""\\033[0;39m"
else
echo -e "\\033[1;32m""$i was unmounted""\\033[0;39m"
fi
done
if [ -n "`mount | grep -o /old_root`" ] ; then  ##1
[ "$DebugVal" = "0" ] && umount /old_root 2>/dev/null || Err1=$?
if [ "$DebugVal" -ge "1" ] ; then
umount /old_root || Err1=$?  ###KRG  ##2
echo -e "\\033[0;33m""Unmounting /old_root: error returncode=$Err1 , still mounted :""\\033[0;39m"
mount
echo  ###DBG
fi  ##2
sleep $((SLEEP*2))s
if [ -z "`mount | grep -o /old_root`" ] ; then  ##3
[ -n "$Err1" ] && [ "$Err1" -ne "0" ] && echo -e "\\033[1;32m""/old_root $PEDV1 was unmounted though""\\033[0;39m" && echo
else  ##3
echo "Not so good, was unable to unmount ${PDEV1}. trying lazy now..."
sleep $((SLEEP*2))s
umount -l /old_root
Err3=$?
sleep $((SLEEP*1))s
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""Umount error returnvalue=$Err3""\\033[0;39m"
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""Still mounted :""\\033[0;39m" && mount && echo
fi ##3
if [ -n "$Err3" ] && [ "$Err3" -ne "0" ] ; then  ###KRG  ##5
echo "Not so good, was unable to unmount ${PDEV1}. trying option force ..."
sleep $((SLEEP*2))s
umount -f /old_root
Err5=$?
sleep $((SLEEP*1))s
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""Unmount error returncode=$Err5""\\033[0;39m"
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""Still mounted :""\\033[0;39m" && mount && echo
fi  ##5
[ -n "$Err5" ] && [ "$Err5" -ne "0" ] && echo "Not so good, was unable to unmount ${PDEV1}. Continuing with f.s. check..."
fi  ##1
if [ -z "`mount | grep -o /old_root`" ] ; then
echo -e "\\033[1;32m""OK. /old_root was unmounted successfully .""\\033[0;32m"" Fscking $PDEV1  ...
Depending on size of installation, might take a while""\\033[0;39m"
if [ "$DebugVal" -ge "1" ] ; then
e2fsck -C 0 -v -f /dev/${PDEV1}
else
e2fsck -C 0 -f -y /dev/${PDEV1}
fi
else
echo -e "\\033[0;31m""Whatever cause ... /old_root or $PDEV1 still mounted!"
echo -e "\\033[0;33m""Performing read-only filesystem check ... ""\\033[0;39m"
[ "$DebugVal" -ge "1" ] && e2fsck -C 0 -n -f -v /dev/${PDEV1}
[ "$DebugVal" = "0" ] && e2fsck -C 0 -n -f /dev/${PDEV1}
fi
sync
echo
echo -e "\\033[7;32m"
echo "Filesystem check completed!"
echo -e "\\033[0;39m"
echo -e "\\033[0;32m""Removing [ xwin ] blocking files ..."
echo -e "\\033[0;39m"
mkdir -p /mnt/${PDEV1}  ###KRG removing fsckme.file  ###KRG
mount -t ${DEV1FS} /dev/${PDEV1} /mnt/${PDEV1}
ErrFlag=`find /mnt/${PDEV1} -maxdepth 3 -type f -iname "*fsckme*"`
for i in $ErrFlag ; do
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""Removing $i""\\033[0;39m"
rm $i
done
[ -f /mnt/${PDEV1}/etc/.XLOADED ] && rm /mnt/${PDEV1}/etc/.XLOADED
[ -f /mnt/${PDEV1}/tmp/bootcnt* ] && rm /mnt/${PDEV1}/tmp/bootcnt*
rm -f /var/log/X*
rm -f /var/lock/LCK*
rm -f /var/run/*.pid
SOCK=`find /mnt/${PDEV1}/var -xdev -type s | tr "\n" " "`
for i in $SOCK ; do
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""removing ""$i""\\033[0;39m"
rm -f $i
done
PIPE=`find /mnt/${PDEV1}/var -xdev -type p | tr "\n" " "`
for i in $PIPE ; do
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""removing ""$i""\\033[0;39m"
rm -f $i
done
sleep $((SLEEP*2))s
sync
umount /dev/${PDEV1}  ###KRG
[ "$DebugVal" = "0" ] && DUMPE=`dumpe2fs /dev/$PDEV1 2>/dev/null | grep -i "state"`
[ "$DebugVal" -gt "1" ] && DUMPE=`dumpe2fs /dev/$PDEV1 | grep -i "state"`
echo -e "\\033[1;34m""$DUMPE""\\033[0;39m"
echo -e "\\033[0;36m"
echo "The computer now has to be restarted."
echo -e "\\033[0;35m"
echo "Computer will reboot in 1-3  minutes, else press ENTER for immediate reboot."
echo
echo -e "\\033[0;32m"  ###KRG
echo "Press Any key and or simply ENTER to reboot ,"
echo "or wait $TimeOut sec again ,"
echo -e "\\033[0;31m"
echo "or [ r ] for dropout into rdsh :"
echo -e "\\033[0;39m"
echo -ne "\\033[4;5;34m""ENTER""\\033[0;39m"" -> ""\\033[1;7;32m"
read -n 1 -t $TimeOut K
if [ "$K" = "r" -o "$K" = "R" ] ; then
echo
echo -e "\\033[0;32m"
echo "Dropping now"
echo "Have FUN !"
echo
echo -e "\\033[0;39m"
exit
else
echo -e "\\033[0;39m"  ###KRG
[ "$DebugVal" = "0" ] && umount /proc 2>/dev/null
[ "$DebugVal" -ge "1" ] && umount /proc && sleep $((SLEEP*3))s
reboot
fi' > /mnt/ram0/etc/rc.d/rc.sysinit
  chmod $VERB 0755 /mnt/ram0/etc/rc.d/rc.sysinit

  echo -e "$BLU""Populating /mnt/ram0/usr  ...""$Res"
  LOCALTIME="${REPO}/usr/share`readlink $REPO/etc/localtime | sed 's%^.*/zoneinfo%/zoneinfo%'`"
  if [ -n "$REPO" ] ; then
  LOCALTDIR="`dirname $LOCALTIME | sed "s%$REPO%%g" | sed 's#^/## ; s#//#/#g'`"
  else
  LOCALTDIR="`dirname $LOCALTIME | sed 's#^/## ; s#//#/#g'`"
  fi
  mkdir $VERB -p /mnt/ram0/$LOCALTDIR
  cp $VERB -a $LOCALTIME /mnt/ram0/$LOCALTDIR/
  mkdir $VERB -p /mnt/ram0/usr/share
  cp $VERB -a "$REPO"/usr/share/terminfo /mnt/ram0/usr/share/

  echo -e "$BLU""Populating /mnt/ram0/dev  ...""$Res"
  cp $VERB -a "$REPO"/dev /mnt/ram0/
  _make_block_devices "/mnt/ram0"
  [ "$DebugVal" = "2" ] && _ask2continue

  ###KRG splitting /lib to second RamDisk :
  echo -e "$BLU""Populating /mnt/ram9/lib  ...""$Res"
  mkdir $VERB /mnt/ram9/lib
  ##echo -e "\\033[1;34m"'Copying Libs ... '
  for i in $LIBF ; do  ###KRG to sort unneeded libs out , see further up ###KRG
  [ "$DebugVal" -ge "1" ] && echo -ne "$Res""`basename $i`"
  [ "$DebugVal" -ge "1" ] && [ -z "`echo $i | grep 'libz\.so\..*\..*\..*'`" ] &&  echo -ne "$Ora"', '"$Res"
  cp $VERB -a $i /mnt/ram9/lib/
  done

  if [ -f "$REPO"/lib/e2initrd_helper ] ; then
  [ "$DebugVal" = "0" ] && cp $VERB -a "$REPO"/lib/e2initrd_helper /mnt/ram9/lib/ 2>/dev/null #dunno what this is.  ###KRG me not either
  if [ "$DebugVal" -ge "1" ] ; then
  echo -e "$Ora"' Copying also '"$Res"'/lib/e2initrd_helper'
  cp $VERB -a "$REPO"/lib/e2initrd_helper /mnt/ram9/lib/
  echo
  fi
  fi
  echo -e "$Res"

  ln $VERB -s /mnt/ram9/lib /mnt/ram0/lib
  mkdir $VERB /mnt/ram0/mnt
  mkdir $VERB /mnt/ram0/mnt/ram9

  mkdir $VERB /mnt/ram0/root
  mkdir $VERB /mnt/ram0/tmp
  mkdir $VERB -p /mnt/ram0/var/run
  mkdir $VERB /mnt/ram0/proc

  sleep $((SLEEP*3))s
  _sync

  #pivot_root to the ramdisk...
  echo -e "$Pin"'Performing a pivot_root to the ramdisk...'
  echo -e "$Res"

  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'1_mounts :'"$Res" && mount && echo  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*3))s  ###DBG

  ##busybox mount $VERB $VERB -o remount,ro /dev/root /
  #[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""2_mounts after remounting ro '/' :""\\033[0;39m" && busybox mount $VERB $VERB && echo  ###DBG
  #[ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG

  cd /mnt/ram0
  [ "$DebugVal" -ge "1" ] && echo -ne "$Ora"'Have changed into /mnt/ram0 , pwd:'"$Res"`pwd` && echo  ###DBG
  [ "$DebugVal" = "2" ]   && echo  -e "$Red"'ls :'"$Res" && ls --color=auto && echo  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG
  [ "$DebugVal" = "2" ]   && echo  -e "$Red"'ls  ./bin :'"$Res" && ls --color=auto ./bin && echo  ###DBG
  [ "$DebugVal" = "2" ]   && sleep $((SLEEP*2))s  ###DBG
  [ "$DebugVal" = "2" ]   && echo  -e "$Red"'ls ./sbin :'"$Res" && ls --color=auto ./sbin && echo  ###DBG
  [ "$DebugVal" = "2" ]   && sleep $((SLEEP*2))s  ###DBG

  [ -d ./mnt/ram9 ] || mkdir $VERB -p ./mnt/ram9
  mount -o move /mnt/ram9 ./mnt/ram9
  [ -d ./sys ] || mkdir ./sys
  mount -o move /sys ./sys
  mount -o move /proc ./proc
  ##ln $VERB -s ../mnt/ram9/lib ./lib
  [ "$DebugVal" = "2" ] && _ask2continue
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG

  [ "$DebugVal" -ge "1" ] && echo && echo -e "$YEL""Now just before pivot_root :""\\033[;39m"
  [ "$DebugVal" = "2" ] && _ask2continue
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'pivot_root now ...'  ###DBG
  pivot_root . old_root
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'...        pivoted' && echo  ###DBG

  #[ ! -d /mnt/ram9 ] && mkdir $VERB -p /mnt/ram9  ###KRG needs to be immediately after pivot_root  ###KRG
  #busybox mount $VERB $VERB -o move /old_root/mnt/ram9 /mnt/ram9
  #busybox mount $VERB $VERB -o move /old_root/proc /proc
  #ln $VERB -s ../mnt/ram9/lib ./lib
  [ "$DebugVal" = "2" ]   && _ask2continue
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG

  [ "$DebugVal" -ge "1" ] && echo -ne "$Ora"'pwd now :'"$Res"`pwd` && echo  ###DBG
  [ "$DebugVal" = "2" ]   && echo -e "$Red"'ls :'"$Res" && ls --color=auto  ###DBG
  [ "$DebugVal" -ge "1" ] && echo -e "$Res"  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG

  cd /  ###KRG
  [ "$DebugVal" -ge "1" ] && echo -ne "$Ora""ch'ed dir to / , pwd: ""$Res"`pwd` && echo  ###DBG
  [ "$DebugVal" = "2" ]   && echo -e "$Red"'ls /:'"$Res" && ls --color=auto /  ###DBG
  [ "$DebugVal" -ge "1" ] && echo -e "$Res"  ###DBG

  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'2_mounts :'"$Res" && mount && echo  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*4))s  ###DBG

  killall -9 pup_event_backend_d 1>$out 2>$err
  killall -9 pup_event_backend_modprobe_protect 1>$out 2>$err
  killall -9 udevd 1>$out 2>$err

  echo -e "$BLU"'Unmounting everything beneath /old_root/* ...'"$Res"
  OR=`mount | grep '/old_root/' | cut -f 3 -d ' ' | sort -r`
  for i in $OR ; do
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'unmounting '"$Res""$i"  ###DBG
  if [ "$DebugVal" = "0" ] ; then
  umount -lr $i 2>/dev/null
  else
  umount -lr $i
  Err=$?
  if [ "$Err" -ne "0" ] ; then
  echo -e "$Ora"'failed , trying lazy .. '"$Res"  ###DBG
  umount -lr $i
  fi
  sleep 1s
  [ -d "/old_root/mnt/`basename $i`" ] && rmdir $VERB /old_root/mnt/`basename $i`
  fi
  done
  mount -o remount,ro /old_root

  echo -e "$Res"
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'3_mounts :'"$Res" && mount && echo  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*4))s  ###DBG

  [ "$DebugVal" = "2" ] && echo -e "$Red"'ls /old_root:'"$Res" && ls --color=auto /old_root && echo  ###KRG ls -R would show whole partition ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*4))s  ###DBG

  ####KRG Menu for ConsoleShell
  ##echo
  echo -e "$Gre"
  echo 'Press ANY key and or ENTER to perform fsck'
  echo "or wait $TimeOut seconds ."
  echo 'Scrolling might be allowed by Shift+PageUP/Down .'
  echo -e "$Red"
  echo "or [c] or [k] for drop out into simple console mode"
  echo "or [i] or [b] for drop out into console with busybox init on top ."
  echo -e "$Res"
  echo -ne "\\033[4;5;34m"'ENTER'"$Res"' -> '"\\033[1;7;32m"
  read -n 1 -t $TimeOut K
  echo -e "$Res"
  if [ "$K" = "c" -o "$K" = "C" -o "$K" = "k" -o "$K" = "K" ] ; then
  echo -e "$Gre"
  echo 'Dropping now into simple rdsh .'
  echo 'Have FUN !'
  echo
  echo -e "$Res"
  login -f root
  exec chroot . ash

  elif [ "$K" = "i" -o "$K" = "I" -o "$K" = "b" -o "$K" = "B" ] ; then
  echo -e "$Gre"
  echo 'Dropping now into busybox init rdsh .'
  echo -e "$GRE"
  echo 'Have MORE FUN !'
  echo
  echo -e "$Res"
  echo '#DUMMY' > /etc/rc.d/rc.sysinit
  chmod $VERB 0775 /etc/rc.d/rc.sysinit
  exec chroot . ash -c "exec busybox init" </dev/console >/dev/console 2>&1

  else
  exec chroot . ash -c "exec busybox init" </dev/console >/dev/console 2>&1
  fi
  #...the ramdisk is setup so that /etc/rc.d/rc.sysinit will run, which does the f.s. check.
 ;;
 *)
  echo -e "$RED"  #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
  echo -n "Previous improper shutdown, sorry can only do f.s. check of ext2/3/4."
  echo -e "$Res"
  sleep 5s
  mount -o remount,ro /dev/root /  ###KRG
  _ask2continue
  exec busybox init  ###should be something like umount -ar ; reboot reboot -f###KRG
  #exec busybox reboot -f

;;
esac

###END###
