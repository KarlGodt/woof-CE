#!/bin/ash
#KRG ash instead sh
#(c) Copyright Barry Kauler 2010, bkhome.org
#Lesser GPL license v2 (/usr/share/doc/legal/lgpl-2.1.txt
#perform a f.s. check if file /fsckme.err exits, otherwise normal startup.
#/etc/rc.d/rc.sysinit creates /fsckme.err at bootup, rc.shutdown deletes it.
#this script is /sbin/init in the main Puppy f.s., which is the very first to run.
#in the case of not a full hd install, this script just passes execution to busybox init.

########################################################################
#
# CHANGES by Karl Reimer Godt
# 01.0 : mounting of /sys and /proc
#   .1 : adopted status_func
#   .2 : BUSYBOX_INIT_FUNC
#   .3 : check for proper devname using rdev instead of fsckme entry
#        RDEV_FUNC
#
# 02.0 : ERRFLG_FUNC : Support for -iname fsckme* file
#   .1 : check for fsck intervals
#
# 03.0 : failsafe_func
# [ $noalsa ] &&          safeBoot=10 && echo 'noalsa' >/tmp/alsa.flg
# [ $nographics ] &&      safeBoot=15 && echo 'nographics' >/tmp/graphics.flg
# [ $nofb ] &&            safeBoot=14 && echo 'nofb' >/tmp/framebuffer.flg
# [ $nofbcon ]         && safeBoot=13 && echo 'nofbcon' >/tmp/fbcon.flg
# [ $userdrivers ]      && safeBoot=2
# [ $kerneldrivers ]    && safeBoot=3
# [ $alldrivers ]       && safeBoot=4
# [ ! "$safeBoot" ]     && safeBoot=4
# [ "$safeBoot" = "0" ] && safeboot=9
# echo 'safeBoot='"$safeBoot"
#
# 04.0 : loading of drivers
#   .1 : UDEVD_FUNC with
#         modprobe_conf_func(multiple_kernels<-rc.sysinit)
#         update_modprobe_conf_func
#   .2 : update device nodes :
#         UPDATINGDEV_FUNC #MY_FUNC
#   .3 :
#   .4 : MODULES_ADD_FUNC
#   .5 : INPUT_DRIVERS_FUNC
#   .6 : FBCON_FUNC
#
# 05.0 : ASK_DEBUG_FUNC
#   .1 : SIMPLE_CONSOLE_FUNC
#   .2 : CONTINUE_FUNC
#
# 06.0 : FSCK_FUNC
#   .1 : FIRST_FSCK_FUNC
# 07.0 : CHECK_FOR_ALT_PART_FUNC
#
# 08.0 : CHECK_ALTERNATE_REPO_FUNC
#   .1 : CURR_GLIBC_FUNC
#   .2 : FIND_SFS_FUNC
#   .3 :
#   .4 :
# 08.0 :

# 09.0 :

# 10.0 : try to mount a sfs with the current libc version to ensure working binaries
#        ( not neccessary , but precaution )
# 11.0 :
# 12.0 : check if fs is cleam
# 13.0 :
# 14.0 :

#
#
# 15.0 :
# 16,0 : use second ramdisk for libs
# 17.0 :




#

#
# /dev/hda8:
# LABEL="MacPup431_O2"
# UUID="6d9a8e91-c301-4ff8-9875-97ec708cbee8"
# TYPE="ext3"
# DISTRO_NAME='Puppy'
# DISTRO_VERSION=431
# DISTRO_BINARY_COMPAT='puppy'
# DISTRO_FILE_PREFIX='pup'
# DISTRO_COMPAT_VERSION='4'
# PUPMODE=2
# KERNVER=2.6.30.9-i586-dpup005-Celeron2G
# PUP_HOME='/'
# SATADRIVES='·'
# USBDRIVES='·'
# Linux·puppypc·2.6.30.9-i586-dpup005-Celeron2G·#6·SMP·Sat·Jan·15·13:35:51·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Do·27.·Okt·22:22:42·GMT-1·2011
#
# WARNING : udevd absolutely has to be killed , otherwise udevd keeps device busy
#           busybox ps failed
#
# TODO1 : merge CHECKYEAR !!
# TODO2 : find out why /tmp/pup_eve_bac_mod.log does not get created
#                                       or newly written @rc.sysinit
#         same with /tmp/pup_event_module_devpath_log  (partition ro ??)
#         first ro mentioned in COTINUE_FUNC(drop to console)
#         and after that FSCK_FUNC FIRST_FSCK_FUNC so partition should be rw
#        ~FIXED : was rm -rf /tmp/* in rc.sysinit
#
# TODO4 : rm /tmp files , also in rc.sysinit
#
#
#
########################################################################

###2011_10_28 at boot rdev does not return the devicename(basename fails)
###particular kernel lowlatencydevtmpfs ??
###2.6.37.4-KRG-i486-StagingDrivers-3 seems ok for that , also has sound

PATH='/bin:/sbin:/usr/bin:/usr/sbin'
export LANG=C

#alias modprobe='/sbin/modprobe --first-time'
alias modprobe='modprobe -b'  ##+++2013-12-07

Red='\033[0;31m'
RED='\033[1;31m'
Gre='\033[0;32m'
GRE='\033[1;32m'
Ora='\033[0;33m'
YEL='\033[1;33m'
Blu='\033[0;34m'
BLU='\033[1;34m'
Pur='\033[0;35m'
PIN='\033[1;35m'
Cya='\033[0;36m'
CYA='\033[1;36m'
Res='\033[0;39m'

if [ -d /proc ]; then
FINDPROC=`find /proc -maxdepth 1 -type f 2>/dev/null`
[ -z "$FINDPROC" ] && busybox mount -t proc none /proc  ###KRG put here for additional df check (wary094 frugal had written /initrd into full install) ###KRG
else
mkdir /proc
busybox mount -t proc none /proc
fi

if [ -d /sys ]; then
FINDSYS=`find /sys/* -maxdepth 0 -type d 2>/dev/null`
[ -z "$FINDSYS" ] && busybox mount -t sysfs none /sys
else
mkdir /sys
busybox mount -t sysfs none /sys
fi

status_func() {
 if [ $1 -eq 0 ]; then
  /bin/echo -e "\\033[72G\\033[1;32mdone\\033[0;39m" >/dev/console #green [done] msg.
 else
  /bin/echo -e "\\033[70G\\033[1;31mfailed\\033[0;39m" >/dev/console #red [failed].
  STATUS=0
 fi
 return $1 #return with same status as entry param.
}

if [ ! -d /initrd -o "`busybox df | grep 'initrd'`" = "" ]; then
busybox mount -o remount,rw /
#sleep 1s;mkdir -p /root/my-documents/boot;cp -r /tmp /root/my-documents/boot/tmp.old  ###+++2011-12-04
sleep 1s;rm -rf /tmp/*;rm -rf /tmp/.[a-zA-Z0-9]*  ##+++2011-11-08 moved here #+2011-11-17 added rm hidden files
else
STATUS=0
status_func $STATUS
fi
BUSYBOX_INIT_FUNC(){  ###KRG
busybox umount /sys
busybox umount /proc
exec busybox init
}
if [ -d /initrd -o -n "`busybox df | grep '/initrd'`" ]; then  ###KRG
BUSYBOX_INIT_FUNC
fi  ###KRG

UPDATINGDEV_FUNC(){
#UPDATEdevCOUNT=`expr $UPDATEdevCOUNT + 1`
#if [ "$UPDATEdevCOUNT" = "1" ] ; then
#if [ "$safeBoot" -gt "2" -a "$safeBoot" -lt "16" ] ; then  ##blackist.conf || backend_modprobe
#UDEVD_FUNC
#MODULES_ADD_FUNC
#fi
#fi
echo -n "Updating Device nodes " >/dev/console
STATUS=0
CATPROCPART=`cat /proc/partitions | sed 's#^\ *[[:alpha:]].*##g' | sed '/^$/d'`
echo "$CATPROCPART" | while read MAJ MIN SIZE SDEV; do
rm -f "$1"/dev/$SDEV
STATUS=$(( $STATUS + $? ))
mknod "$1"/dev/$SDEV b $MAJ $MIN
STATUS=$(( $STATUS + $? ))
echo -n '.' >/dev/console
done
if [ ! -d /initrd -o "`busybox df | grep 'initrd'`" = "" ]; then
status_func $STATUS
fi
}

RDEV_FUNC(){
while [ -z "$PDEV1flag" ]; do  ##+++2011_10_28
DEVPDEV1=`busybox rdev | cut -f 1 -d ' '`  ##+2011_10_28 changed position to top
DEVROOTDRIVE="$DEVPDEV1" ##+2011_10_28 changed position to second
DEV1FS=`mount | grep '^/dev/root' | cut -f 5 -d ' '`  ##+2011_10_28 changed position to third
PDEV1=`basename "$DEVPDEV1"`
ROOTDRIVE="$PDEV1"
if [ -z "`echo "$PDEV1" | grep '^[shmf]'`" ]; then  ##+++2011_10_28
PDEV1flag=''
head -n 5 /proc/partitions
UPDATINGDEV_FUNC
else
echo -e "$GRE""Root device is /dev/$PDEV1""\\033[0;39m"
PDEV1flag='yes'
fi  ##+++2011_10_28
PDEV1flagCount=$((PDEV1flagCount+1))
[ "$PDEV1flagCount" -gt "10" ] && break  ##precaution to prevent neverending loop
sleep 1s
done  ##+++2011_10_28
}
[ -z "$PDEV1flag" ] && RDEV_FUNC
ERRFLG_FUNC() {  ###KRG
echo -e "$BLU"'Checking for unpropper previous shutdown  ... '"$Res"
echo -n -e "$YEL"'Searching for *fsckme* file 3 levels deep ... '"$Res"
ErrFlag=`busybox find / -maxdepth 3 -type f -iname '*fsckme*' | head -n1`  ###KRG 3 deep for fsckme.file@etc @boot @$HOME ..etc..
if [ -z "$ErrFlag" ]; then  ##1
echo -e "\\033[56G\\033[1;5;32m"'Hurray , not found !'"$Res"
echo -e "$YEL"'Checking for filesystem check intervals using'"$Res"
LANG=C
VARS=`dumpe2fs $DEVROOTDRIVE | grep -E 'Maximum mount count|Mount count|Next check after|Check interval'`
nextch=`echo "$VARS" | grep 'Next check after' | tr '\n' ' '`;[ "$nextch" ] || nextch="Next check after:         Sun Dec 31 17:51:27 9999"
nextcY=`echo "$nextch" | tr -s ' ' | cut -f 8 -d ' '`;[ "$nextcY" ] || nextcY=9999
nextcM=`echo "$nextch" | tr -s ' ' | cut -f 5 -d ' '`;[ ! "$nextcM" ] && nextcM='Dec'
nextcD=`echo "$nextch" | tr -s ' ' | cut -f 6 -d ' '`;[ "$nextcD" ] || nextcD='31'
todayY=`date +%Y`;[ "$todayY" ] || todayY='9999'
todayM=`date +%m | sed 's/^0//'`;[ "$todayM" ] || todayM=12
todayD=`date +%d | sed 's/^0//'`;[ ! "$todayD" ] && todayD='1'
mntcnt=`echo "$VARS" | grep 'Mount count'| grep -o '[[:digit:]]' | tr -d '\n'`;[ "$mntcnt" ] || mntcnt='1'
maxmnt=`echo "$VARS" | grep 'Maximum mount count' | grep -o '[[:digit:]]' | tr -d '\n'`;[ ! "$maxmnt" ] && maxmnt=999
diffMC=$(( $maxmnt - $mntcnt ));
monthN=`for i in $(seq 1 12); do cal $i 1 | head -n 1 | grep -o '[[:alpha:]]*' | sed "s/^/$i /"; done`
monthT=`echo "$monthN" | grep -w "^$todayM"`
montTN=`echo "$monthT" | cut -f 1 -d ' '`
montTO=`echo "$monthT" | cut -f 2 -d ' '`
monthC=`echo "$monthN" | grep -e "^[0-9]* $nextcM.*"`
montCN=`echo "$monthC" | cut -f 1 -d ' '`
montCO=`echo "$monthC" | cut -f 2 -d ' '`
val30C=`cal $montCN 1 | grep '[[:digit:]]$' | sed '/^$/d' | tail -n 1 | grep -o '[[:digit:]]*$'`
##+++
val30B=0
for i in `seq $((montCN+1)) $((montTN-1))`; do
val30i=`cal $i 1 | grep '[[:digit:]]$' | sed '/^$/d' | tail -n 1 | grep -o -e '[[:digit:]]*$'`
val30B=$((val30B+val30i))
done
###+++
val30T=`cal $montTN 1 | grep '[[:digit:]]$' | sed '/^$/d' | tail -n 1 | grep -o '[[:digit:]]*$'`
echo -e "$Res"
FSCK=''
if [ "$mntcnt" -ge "$maxmnt" ]; then  ##2
echo -e "$YEL"'Maximum mount count reached'"$Res"
FSCK='yes'
else ##2
if [ "$todayY" -ge "$nextcY" ]; then #3
if [ "$montTN" = "$montCN" ]; then #4
if [ "$todayD" -gt "$nextcD" ]; then  #5
echo -e "$YEL"'Day interval reached'"$Res"
FSCK='yes'
fi #5
else #4
if [ "$montTN" -gt "$montCN" ]; then #6
MinusTD=$todayD
PlusCD=$(( $val30C - $nextcD ))
SUM=$(( $MinusTD + $val30B + $PlusCD ))
if [ "$SUM" -gt "$interN" ]; then #7
echo -e "$YEL"'Day interval reached'"$Res"
FSCK='yes'
fi #7
fi #6 "$montTN" -gt "$montCN"
fi #4 "$montTN" = "$montCN"
fi #3 "$todayY" -ge "$nextcY"
fi #2 "$mntcnt" -ge "$maxmnt"
if [ -z "$FSCK" ]; then #7
echo -e "$GRE"'OK , '"$Gre""next check '$nextcM $nextcD' or in '$diffMC' mounts""$Res"
echo -e "$Res"
BUSYBOX_INIT_FUNC
else #7
echo -e "$YEL"'Filesystem check interval reached :'"$Res"
echo -e "$Ora"'Today : '"$Ora""$montTO $todayD""$Ora"' , next check was or would be : '"$Ora""$nextcM  $nextcD""$Ora"
echo -e "$Ora"'mount intervals : '"$Ora""$mntcnt""$Ora"' of '"$Ora""$maxmnt"
echo -e "$Res"
fi #7
else #1
echo -e "$RED" ' Found : '"$Res""\\033[1;5;31m""$ErrFlag"
echo -e "$Res"
fi #1
}
ERRFLG_FUNC  ###KRG
SIMPLE_CONSOLE_FUNC(){
[ -n "$ERRMSG" ] && echo -e "$Red""$ERRMSG""$Res"
echo "Now ramdiskshell without busybox init on top"
echo -e "$Gre""Type 'busybox reboot -f' , 'kill 1' or press Cnt+Alt+Del to reboot""$Res"
exec chroot . sh
}
case $DEV1FS in
 ext2|ext3|ext4)
  echo -e "$YEL"  #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
  if [ -n "$ErrFlag" ]; then
  echo "Performing filesystem check of '${PDEV1}' after improper shutdown"
  else
  echo "Performing scheduled filesystem check of '${PDEV1}' ."
  echo -e "$Gre""Use 'tune2fs -i $todayD[d|w|m] [+-] -C $maxmnt [+-] /dev/$PDEV1' to adjust ."
  fi
  echo -e "$BLU""NOTE: no progress indication, may take awhile, please wait patiently..."
  echo -e "$Res"
  echo
TimeOut=60
CONTINUE_FUNC(){
echo -e "$Res"
echo -e "$Gre""Continue this $0 ?\t [ y ]"
echo -e "$Red""Dropout into console ?\t\t [ c ]""$Gre"
echo -e "$Res"
echo -n -e "\\033[4;5;34m"'ENTER'"$Res"' -> '"\\033[1;7;32m"
read -n 1 -t $TimeOut K
echo -e "$Res"
Key=`echo "$K" | tr '[A-Z]' '[a-z]'`
if [ "$Key" = "n" -o "$Key" = "c" -o "$Key" = "k" ]; then
echo -e "$BLU"'dropping to console now , partition still mounted !'"$Res"
cd /
busybox mount -o remount,ro /
sleep $((SLEEP*1))s
exec chroot . sh
fi
}
failsafe_func(){
#rm -rf /tmp/*  ##+++2011_10_31 moved here
if [ $nodrivers ]; then
if [ "$nodrivers" = "all" ]; then
safeBoot=0 ; return
else
noDriversList=`echo "$nodrivers" | tr ',' '\n' | sed 's/^/blacklist /g'`
fi
fi
[ $noalsa ] && safeBoot=10 && echo 'noalsa' >/tmp/alsa.flg
[ $nographics ] && safeBoot=15 && echo 'nographics' >/tmp/graphics.flg
[ $nofb ] && safeBoot=14 && echo 'nofb' >/tmp/framebuffer.flg
[ $nofbcon ] && safeBoot=13 && echo 'nofbcon' >/tmp/fbcon.flg
[ $userdrivers ] && safeBoot=2
[ $kerneldrivers ]&& safeBoot=3
[ $alldrivers ] && safeBoot=4
[ ! "$safeBoot" ] && safeBoot=4
[ "$safeBoot" = "0" ] && safeboot=9
echo 'safeBoot='"$safeBoot"
}
failsafe_func

modprobe_conf_func() {
test -d /etc/mult_kernels || mkdir /etc/mult_kernels

test -d /etc/mult_kernels/modprobe.d.$KERNVER || mkdir /etc/mult_kernels/modprobe.d.$KERNVER

[ -d /etc/modprobe.d ] || mkdir /etc/modprobe.d

if test -f /etc/modprobe.conf; then #1
if [ ! -f /etc/mult_kernels/modprobe.conf."$KERNVER" ]; then  ##&&
cp -f "/etc/modprobe.conf" "/etc/mult_kernels/modprobe.conf.$KERNVER"
else
cp -f /etc/mult_kernels/modprobe.conf."$KERNVER" /etc/modprobe.conf
fi
fi

if test -d /etc/mult_kernels/modprobe.d."$KERNVER"; then #2
rm -f -r /etc/modprobe.d
cp -f -r /etc/mult_kernels/modprobe.d."$KERNVER" /etc/modprobe.d
elif test -d /etc/modprobe.d; then #2.1
cp -r /etc/modprobe.d /etc/mult_kernels/modprobe.d."$KERNVER"
fi #2

test -d /etc/mult_kernels/rc.d || mkdir /etc/mult_kernels/rc.d

if test ! -f /etc/mult_kernels/rc.d/MODULESCONFIG."$KERNVER"; then
cp /etc/rc.d/MODULESCONFIG /etc/mult_kernels/rc.d/MODULESCONFIG."$KERNVER"
else
rm /etc/rc.d/MODULESCONFIG
cp /etc/mult_kernels/rc.d/MODULESCONFIG."$KERNVER" /etc/rc.d/MODULESCONFIG
fi

test -f /lib/modules/"$KERNVER"/DOTconfig* && cp /lib/modules/"$KERNVER"/DOTconfig* /etc/modules/
} #modprobe_conf_func inside update_modprobe_conf_func

update_modprobe_conf_func(){
KERNVER=`uname -r`
CONFFILE='/etc/modprobe.conf'
[ -f /etc/modprobe.d/modprobe.conf ] && CONFFILE='/etc/modprobe.d/modprobe.conf'
[ -f /etc/modprobe.d/puppy.conf ] && CONFFILE='/etc/modprobe.d/puppy.conf'
basenameCONFFILE=`basename $CONFFILE`

modprobe_conf_func

if [ -f "$CONFFILE" ]; then
SYSTEM=`dmidecode -t 0 | grep -i -E 'vendor|version|release'`

##+++2011-11-07
SYSTEM="$SYSTEM
`dmidecode -t 1 | grep -i -E 'manufacturer|version|product'`"
SYSTEM="$SYSTEM
`dmidecode -t 2 | grep -i -E 'manufacturer|version|product'`"
##+++2011-11-07

WC=`echo "$SYSTEM" | wc -l`
GREPpattern=$(echo "$SYSTEM" | head -n 1 | tr '\t' ' ' | tr -s ' ' | sed 's/\([[:punct:]]\)/\\\\\1/g; s/\\\\/\\/g')
FIELD=`grep -B 1 -n "$GREPpattern" "$CONFFILE"`
if [ -z "`echo "$FIELD" | grep "$GREPpattern"`" ] || [ -z "`echo "$FIELD" | grep "$KERNVER"`" ]; then
cp "$CONFFILE" "$CONFFILE".`basename $0`."$KERNVER".sbin_init.bac
echo >> "$CONFFILE"
echo '#####  Updated modaliases for system  ###########' >> "$CONFFILE"
echo '### RUNNING kernel '"$KERNVER" >> "$CONFFILE"
for i in `seq 1 $WC`; do
PARAM=`echo "$SYSTEM" | head -n $i | tail -n 1 | tr '\t' ' ' | tr -s ' '`
STRING="### ${PARAM} "
echo "$STRING" >> "$CONFFILE"
done
BOARD=`dmidecode -t1 | grep -i -E 'Manufacturer|Product' | tr -d '[[:blank:]]' | cut -f 2 -d ':' | tr '\n' ' '`
echo '### '"$BOARD" >> "$CONFFILE"
BOAR2=`dmidecode -t2 | grep -i -E 'Manufacturer|Product' | tr -d '[[:blank:]]' | cut -f 2 -d ':' | tr '\n' ' '`
echo '### '"$BOAR2" >> "$CONFFILE"
echo >> "$CONFFILE"
UEVENTS="`ls /sys/bus/*/devices/*/uevent`"
for i in $UEVENTS; do
DRVR=`grep 'DRIVER' $i 2>/dev/null | cut -f 2 -d '='`;
MODA=`grep 'MODALIAS' $i 2>/dev/null | cut -f 2 -d '='` ;
if [ -n "$DRVR" ] && [ -n "$MODA" ]; then
echo -n 'alias ' >> /tmp/sbin_init_modaliases.conf
echo -n "$MODA " >> /tmp/sbin_init_modaliases.conf
echo "$DRVR" >> /tmp/sbin_init_modaliases.conf
fi
done
cat /tmp/sbin_init_modaliases.conf | sort -u | sort -k 3 -t ' ' >> "$CONFFILE"
echo >> "$CONFFILE"
echo '### '`cat /proc/cmdline` >> "$CONFFILE"
echo '### '`date` >> "$CONFFILE"
echo "##### by $0 #######################" >> "$CONFFILE"
fi
fi
if [ -f /etc/mult_kernels/"$basenameCONFFILE"."$KERNVER" ]; then
DIFF=`diff -uaNd /etc/mult_kernels/"$basenameCONFFILE"."$KERNVER" "$CONFFILE"`
echo "$DIFF" > /tmp/sbin_init."$basenameCONFFILE".diff
if [ -n "`grep -E '[[:alpha:]]|[[:punct:]]' /tmp/sbin_init."$basenameCONFFILE".diff`" ]; then
if [ "$DebugVal" = "0" ]; then
patch -s -b /etc/mult_kernels/"$basenameCONFFILE"."$KERNVER" /tmp/sbin_init."$basenameCONFFILE".diff
elif [ "$DebugVal" = "1" ]; then
patch -b /etc/mult_kernels/"$basenameCONFFILE"."$KERNVER" /tmp/sbin_init."$basenameCONFFILE".diff
else
patch --verbose -b /etc/mult_kernels/"$basenameCONFFILE"."$KERNVER" /tmp/sbin_init."$basenameCONFFILE".diff
fi
fi
fi
if [ -f "/etc/mult_kernels/modprobe.d.${KERNVER}/${basenameCONFFILE}" ]; then
DIFF=`diff -uaNd "/etc/mult_kernels/modprobe.d.${KERNVER}/${basenameCONFFILE}" "$CONFFILE"`
echo "$DIFF" > "/tmp/sbin_init.${basenameCONFFILE}.2.diff"
if [ -n "`grep -E '[[:alpha:]]|[[:punct:]]' /tmp/sbin_init."$basenameCONFFILE".2.diff`" ]; then
if [ "$DebugVal" = "0" ]; then
patch -s -b /etc/mult_kernels/modprobe.d.${KERNVER}/"$basenameCONFFILE" /tmp/sbin_init."$basenameCONFFILE".2.diff
elif [ "$DebugVal" = "1" ]; then
patch -b "/etc/mult_kernels/modprobe.d.${KERNVER}/${basenameCONFFILE}" "/tmp/sbin_init.${basenameCONFFILE}.2.diff"
else
patch --verbose -b /etc/mult_kernels/modprobe.d.${KERNVER}/"$basenameCONFFILE" /tmp/sbin_init."$basenameCONFFILE".2.diff
fi
fi
fi
} #update_modprobe_conf_func inside UDEVD_FUNC

UDEVD_FUNC(){
if [ -z "$HOTPLUGD" ]; then  ##=- BUG? why did i -z "$HOTPLUGD" ??? :S
[ -f /etc/rc.d/PUPSTATE ] || echo 'PUPMODE=2' > /etc/rc.d/PUPSTATE
. /etc/rc.d/MODULESCONFIG
##rm -rf /tmp/*  ##+++2011_10_29 -2011_10_31
BLACKLISTVARS=`echo "$SKIPLIST" | tr '\-' '_' | tr ' ' '\n' | sed -e 's/^/blacklist /' | grep -v ' $'`
[ -f /tmp/pup_event_skiplist.conf ] || echo "$BLACKLISTVARS" > /tmp/pup_event_skiplist.conf
echo "$BLACKLISTVARS" > /tmp/pup_event_blacklist.conf
echo "$BLACKLISTVARS" > /tmp/pup_event_modprobe.conf

update_modprobe_conf_func

echo -n '0' > /tmp/pup_event_alsa_cnt
if [ -x /sbin/pup_event_backend_modprobe_protect ]; then
nice -n -3 /sbin/pup_event_backend_modprobe_protect --daemon &
fi
if [ -x /sbin/udevd ]; then
 rm -rf /dev/.udev/*/*
 HOTPLUGD='udevd'
 UDEVVER=`udevd --version`
 if [ $UDEVVER -gt 150 ]; then
  UDEV_LOG=1 /sbin/udevd --daemon --resolve-names=never ###KRG ; orig LOG=2
 else
  UDEV_LOG=1 /sbin/udevd --daemon ###KRG ; orig LOG=2
 fi
else
 /sbin/pup_event_backend_d >/tmp/pup_event_backend_errors 2>&1 & #hotplug daemon. my homebrew replacement for udevd.
 HOTPLUGD='pup_event_backend_d'
fi
sleep 0.1
fi
} #UDEVD_FUNC with update_modprobe_conf_func AND modprobe_conf_func inside

MODULES_ADD_FUNC(){
INITSTATE=`find /sys -name "initstate"`
INITSTATECOUNT=`echo "$INITSTATE" | wc -l`
[ -n "$INITSTATE" ] && [ "$DebugVal" = "2" ] && for i in $INITSTATE; do echo -n "$i "; cat "$i"; done  ##echo
if [ "$INITSTATECOUNT" -lt 25 ]; then
MODALIASES="`ls /sys/bus/*/devices/*/modalias | sort -d`"
[ "$noDriversList" ] && echo "$noDriversList" >>/tmp/pup_event_skiplist.conf
echo -n "Loading kernel modules "
if [ -z "$MODALIASES" ]; then
echo -e "\\033[1;5;31m"'WARNING : '"\\033[0;31m"'No modaliases found !'"\\033[39m"
echo -e "\\033[39m"'Either the kernel detected no HardWare automatically'"\\033[39m"
echo -e "\\033[39m"'or something else went wrong'"\\033[39m"
else
modprobe nls_cp437 #these needed by vfat/ntfs/ext2 f.s.'s.
modprobe nls_iso8859-1 #
echo 'Running the modaliases add by /sbin/init '$0 >> /tmp/pup_eve_bac_mod.log
MODULECNT=0
for ONEMODALIAS in $MODALIASES
do
 #ONEPATH="`dirname $ONEMODALIAS`"
 ONEPATH=${ONEMODALIAS%/*}
 [ -e ${ONEPATH}/uevent ] || continue
 #if [ -e ${ONEPATH}/uevent ];then
  echo "$ONEMODALIAS" >> /tmp/modaliases.loaded
  echo 'add' > ${ONEPATH}/uevent #generates an 'add' uevent.
  echo -n '.'
  MODULECNT=$((MODULECNT+1))
  sleep 0.2
 #fi
done
echo >> /tmp/pup_eve_bac_mod.log
echo
echo -e 'Detected '"$BLU""$MODULECNT ""\\033[0;39m"'busses'
MODULECNT=0
sleep $((SLEEP*3))s
LSMODCNT=`lsmod | sed "1 d" | wc -l`
if [ "$LSMODCNT" = 0 ]; then
lsmod | cut -f 1 -d ' ' | sort -g | tr '\n' ' '
else
echo -e -n 'Loaded   '"\\033[1;35m""$LSMODCNT ""\\033[0;39m"'drivers at least'
fi
status_func 0
echo
sleep 1s
fi
else
echo "More than 10 initstate files exist ( $INITSTATECOUNT ) :"
echo "$INITSTATE" | tr '\n' ' '
sleep $((SLEEP*2))s
fi
}

load_USB_DRIVERS_FUNC(){
if [ -z "`lsmod | grep 'usb'`" ]; then
echo -e "$BLU""Loading usb drivers ...""$Res"
DRIVERS=`modprobe -l | grep -E 'ehci[-_]hcd|ohci[-_]hcd|uhci[-_]hcd|usbcore|usb[-_]storage' | sort -k4,8 -t '/'`
for i in $DRIVERS; do
DRIVER=`basename $i | sed 's#\.ko.*$##'`
DRVpattern=`echo "$DRIVER" | tr '-' '_'`
echo -e -n "$YEL""$DRIVER ""$BLU"'.. '"$Res"
if [ "$DRVpattern" != "usb_storage" ]; then
[ -z "`lsmod | grep "$DRVpattern"`" ] && modprobe $DRIVER
else
[ -z "`lsmod | grep "$DRVpattern"`" ] && modprobe $DRIVER delay_use=1  ##+-2011-12-10 delay_use:1 to delay_use=1
fi
done
echo -e "$BLU"'Waiting 15 sec. for kernel to register usb devices ...'"$Res"
sleep 15s
echo
fi
}
load_USB_DRIVERS_FUNC

#UPDATEdevCOUNT=0
UDEVD_FUNC
MODULES_ADD_FUNC
UPDATINGDEV_FUNC

INPUT_DRIVERS_FUNC(){
if [ "$safeBoot" = "2" ]; then
echo -e "$BLU""Loading keyboard and other drivers ...""$Res"
DRIVERS=`modprobe -l | grep -E 'usbhid|rtc-cmos|libps2|atkbd|xtkbd|evdev' | grep -v -E 'snd|sound' | sort -k4,8 -t '/'`
for i in $DRIVERS; do
DRIVER=`basename $i | sed 's#\.ko.*$##'`
DRVpattern=`echo "$DRIVER" | tr '-' '_'`
if [ -z "`lsmod | grep "$DRVpattern"`" ]; then
echo -e -n "$YEL""$DRIVER ""$BLU"'.. '"$Res"
modprobe $DRIVER
fi
done
echo -e "$Res"
fi
}
INPUT_DRIVERS_FUNC
FBCON_FUNC() {
if [ "$safeBoot" -lt "14" ]; then
if [ "`cat /proc/cmdline | grep -E 'vga=ask|vga=0x3[0-9a-fA-F][0-9a-fA-F]|vga=7[0-9][0-9]'`" ]; then
echo -e "$BLU""Trying to load i2c and framebuffer drivers ...""$Res"
I2CS=`modprobe -l | grep -i 'i2c' | grep -v -E 'snd|sound' | while read line; do basename $line | sed 's#\.ko.*$##'; done`
GRAPHB=`ddcprobe | grep -E 'vbe|oem|vendor|product' | cut -f 2-99 -d ' ' | tr '[A-Z]' '[a-z]' | tr '\n' ' '`
echo -e "$YEL"'video-info : '"$BLU"$GRAPHB"$Res"
MBOARD=`dmidecode | grep -i -E 'Family|Manufacturer' | tr -d '\t ' | cut -f 2 -d ':' | grep -v -i 'none' | tr '[[:punct:]]' ' ' | cut -f 1 -d ' ' | tr '\n' ' '`
echo -e "$YEL"'board-info : '"$BLU"$MBOARD"$Res"
POOL="$GRAPHB $MBOARD"
sleep 4s
if [ -n "`echo "$MBOARD" | grep -i 'Intel'`" ]; then
if [ -n "`modprobe -l | grep -E 'i2c\-i801|i801_smbus'`" ]; then
POOL="$POOL i2c\-i801 i801_smbus"
fi
fi
POOL=`echo "$POOL" | sort -u`
if [ -z "`elspci -l | grep -i -E '<.*fb>|<agp.*>|<.*agp.*>|<.*agp>|<vga.*>|<.*vga.*>|<.*vga>'`" ]; then
for i in $POOL; do
I2C=`echo "$I2CS" | grep -i $i`
if [ -n "$I2C" ]; then
echo -e -n "$YEL"'Loading ...'"$Res"
for j in $I2C; do
DRIVER=`basename $j`
DRVpattern=`echo "$DRIVER" | tr '-' '_'`
if [ -z "`lsmod | grep "$DRVpattern"`" ]; then
echo -e -n "$BLU""$DRIVER ""$YEL"'.. '"$Res"
modprobe $DRIVER #2>/dev/null
fi
done
echo -e "$Res"
fi
done
echo -e "$Res"
FBDRIVERS=`modprobe -l | grep 'fb' | while read line; do basename $line | sed 's#\.ko.*$##'; done`
if [ -n "`echo "$GRAPHB" | grep -i 'Intel'`" ]; then
if [ -n "`modprobe -l | grep -E 'i810fb'`" ]; then
POOL="$POOL $FBDRIVERS i810fb"
fi
fi
POOL=`echo "$POOL" | sort -u`
for i in $POOL; do
FBS=`echo "$FBDRIVERS" | grep -i $i`
if [ -n "$FBS" ]; then
echo -n -e "$YEL"'Loading ... '"$Res"
for j in $FBS; do
DRIVER=`basename $j`
DRVpattern=`echo "$DRIVER" | tr '-' '_'`
[[ "$DRIVER" = "nvidiafb" -a "`lsmod | grep 'nouveau'`" ]] && continue
[[ "$DRIVER" = "nouveau" -a "`lsmod | grep 'nvidiafb'`" ]] && continue
if [ -z "`lsmod | grep "$DRVpattern"`" ]; then
echo -e -n "$BLU""$DRIVER ""$YEL"'.. '"$Res"
modprobe $DRIVER #2>/dev/null
fi
done
echo -e "$Res"
fi
done
sleep 4s
fi
if [ "$safeBoot" -lt "12" ]; then
if [ -n "`modprobe -l | grep 'fbcon'`" ] && [ -z "`lsmod | grep 'fbcon'`" ]; then
modprobe fbcon
echo -e "$Res"
fi
fi
fi
fi
}
FBCON_FUNC  ###COMMENT if required ; fbcon makes colors little greyish  ###KRG
sleep 5s  ###DBG
ASK_DEBUG_FUNC(){
DebugVal=0
echo -e "$Res"
echo "Do you think $0 DEBUG MODE is required ?"
echo -e -n "$BLU"
echo "If so , press [ y ] and [ Enter ] for normal debug incl. 'fsck -v' ,"
echo -e -n "$Res""\\033[6;7;32m"
echo "    or  press [ Y ] and [ Enter ] for extensive output ,            "
echo -e -n "$Res"
echo -e -n "\\033[1;36m"
echo -e "which may confuse muchly first and second time ..."
echo -e "\\033[1;35m"
echo "If not wait 20 sec. or press any other key and or simply [ Enter ]"
echo -e "$Res"
echo -n -e "\\033[4;5;34m"'ENTER'"$Res"' -> '"\\033[1;7;32m"
read -n 1 -t 20 K
echo -e "$Res" && echo
if [ "$K" = "y" ]; then
DebugVal=1
echo -e "$Ora"'Debug Mode '"$DebugVal"' turned on'
echo 'Have FUN !'
elif [ "$K" = "Y" ]; then
DebugVal=2
echo -e "$Red"'Debug Mode '"$DebugVal"' turned on'
echo 'Have FUN !'
else
DebugVal=0
echo -e "\\033[0;35m"'Keeping in Silent Screen Mode'
fi
TimeOut=$(( ($DebugVal + 1) * 20 ))
SLEEP=$((DebugVal+1))
[ "$DebugVal" -ge "1" ] && echo && echo -e "$Ora"'TimeOut='"$Res""$TimeOut""$Ora"' , additional_sleep_value='"$Res""$SLEEP"
echo -e "$Res"
}
ASK_DEBUG_FUNC

kill_daemons(){
    killall udevd
    killall pup_event_backend_modprobe_protect
}
kill_daemons

FSCK_FUNC(){
[ "$DebugVal" -ge "2" ] && echo -e "$Ora"'FSCK_FUNC called with param $1='"$Res""$1""$Ora"' $2='"$Res""$2"
echo -e "$Res"
[ "$1" = "/dev/" ] && sleep 5s && CLEAN='guessing_clean' && return ##2011_10_02
[ "$1" != "/dev/$PDEV1" ] && [ -n "`mount | grep "^$1"`" ] && busybox umount -lr "$1"
sleep 1s
[ -n "`busybox mount | grep "^$1" | cut -f 6 -d ' ' | grep 'rw'`" ] && busybox mount -o remount,ro $1
sleep 2s
Err=''
RETFSCK=''
CLEAN=''
FSTYPE=`guess_fstype "$1"`
[ "$FSTYPE" = "unknown" ] && FSTYPE=`disktype "$1" | grep -i 'file system' | cut -f 1 -d ' ' | tr '[A-Z]' '[a-z]'` ##2011_10_02 disktype /dev/
[ -z "$FSTYPE" ] && FSTYPE='unknown'
[ "$DebugVal" = "2" ] && echo 'FSTYPE='"$FSTYPE"
case $FSTYPE in
ext2|ext3|ext4)
if [ -z "$2" ]; then
echo -e "$BLU""Checking Partition $1 in -n mode
if required binaries are useable . Please wait""$Res"
[ "$DebugVal" = "0" ] && { RETFSCK=`e2fsck -n "$1" 2>/dev/null` || Err=$?; }
[ "$DebugVal" -ge "1" ] && { RETFSCK=`e2fsck -n "$1"` || Err=$?; }
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Fsck returned'="$Err""$Res"
else
echo -e "$BLU""Checking Partition $1 in normal mode
if required binaries are useable . Please wait""$Res"
[ "$DebugVal" = "0" ] && e2fsck -p "$1"
[ "$DebugVal" = "0" ] && { RETFSCK=`e2fsck -n "$1" 2>/dev/null` || Err=$?; }
[ "$DebugVal" -ge "1" ] && e2fsck "$1"
[ "$DebugVal" -ge "1" ] && { RETFSCK=`e2fsck -n "$1"` || Err=$?; }
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Fsck returned'="$Err""$Res"
fi
CLEAN=`echo "$RETFSCK" | tail -n 1 | grep -i -o 'clean'`
;;
*)
echo -e "$BLU""NOTE : Filesystem types other than ext2|ext3|ext4 not yet supported .
Omitting fsck of $1 ...""$Res"
CLEAN='guessing_clean'
;;
esac
if [ -n "$CLEAN" ] || [ -z "$Err" ] || [ "$Err" -eq 0 ]; then
echo -e "$GRE""OK"
echo -e "$Gre""Filesystem marked 'clean'""$Res"
else
echo -e "$RED"":Ooops: ""$Red""Fs not clean.""$Res"
[ -n "$FSCK" ] && echo -e "$Gre"'Reaching the max mount intervals also marks the fs "not clean" .'"$Res"
[ "$FSTYPE" = "ext2" ] && echo -e "$BLU""Note : ext2 fs is getting marked 'unclean' very easily . Better use ext3 or ext4""$Res"
[ "$DebugVal" -ge "1" ] && echo -e "$Res""$RETFSCK" | head -n 1
[ "$DebugVal" -ge "1" ] && echo -e "$Res""$RETFSCK" | tail -n 1
echo -e "$Blu""Looking for other useable installations ..."
fi
echo -e "$Res"
}
FIRST_FSCK_FUNC(){
[ -n "`busybox mount | grep '^/dev/root' | cut -f 6 -d ' ' | grep 'rw'`" ] && busybox mount -o remount,ro /
FSCK_FUNC "/dev/$PDEV1"
busybox mount -o remount,rw /  ##TODO 2011_10_28 move further down
if [ -n "$CLEAN" ] || [ -z "$Err" ] || [ "$Err" -eq 0 ]; then
echo -e "$BLU""Booting installation ..."
echo -e "$Res"
rm $ErrFlag
[ "$DebugVal" = "2" ] && CONTINUE_FUNC
BUSYBOX_INIT_FUNC
fi
}
[ -z "$FSCK" ] && FIRST_FSCK_FUNC
CHECK_FOR_ALT_PART_FUNC(){
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'$ROOTDRIVE='"$Res""$ROOTDRIVE"
DRIVES=''
DRIV=`cat /proc/partitions | grep '^ ' | grep -v 'loop' | sed 's#^ *##' | tr -s ' ' | cut -f 4 -d ' ' | cut -b 1-3 | uniq`
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Attached drives : '"$Res"$DRIV
for i in $DRIV; do
FDISK=`fdisk -l /dev/$i | grep -i 'linux' | grep -v -i -E 'swap|Partition' | cut -f 1 -d ' '`
DRIVES="`echo -e "$DRIVES\n""$FDISK"`"
done
DRIVES=`echo "$DRIVES" | sed '/^$/d' | grep -v "$DEVROOTDRIVE" | tr '\n' ' '`
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Other partitions : '"$Res""$DRIVES"
[ -z "`echo $DRIVES | grep '[[:alpha:]]'`" ] && DRIVES=''
if [ -z "$DRIVES" ]; then
DRIVES=`cat /proc/partitions | grep '^ ' | grep '[0-9]$' | sed 's#^ *##' | tr -s ' ' | cut -f 4 -d ' '`
DRIVES=`echo "$DRIVES" | grep -v "$PDEV1" | sed 's#^#/dev/#g' | tr '\n' ' '`
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'DRIVES: '"$DRIVES""$Res"
fi
if [ -z "$DRIVES" ]; then
ERRMSG="Could not find any useable drives in /proc/partitions"
SIMPLE_CONSOLE_FUNC
fi
}
CHECK_ALTERNATE_REPO_FUNC(){
CURR_GLIBC_FUNC(){
CURRGLIBC=`basename $(find /lib -maxdepth 1 -name "libc-*.so")`
CURRCLMAJ=`echo "$CURRGLIBC" | cut -f 2 -d ' ' | cut -f 2 -d '.'`
CURRCLMin=`echo "$CURRGLIBC" | cut -f 2 -d ' ' | cut -f 3 -d '.'`
}
if [ -z "$CLEAN" ]; then  #0
if [ -n "$Err" ] && [ "$Err" -ne 0 ]; then #1
FIND_SFS_FUNC(){
CHECK_FOR_ALT_PART_FUNC  #TODO simplfy ?
CURR_GLIBC_FUNC
[ -z "`lsmod | grep 'squashfs'`" ] && modprobe squashfs
for oneDRV in $DRIVES; do  ##for 0
SIMPLEDRIVENAME=`basename $oneDRV`
mkdir -p /mnt/$SIMPLEDRIVENAME
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Mounting '"$Res"$oneDRV' on '"$Res"/mnt/$SIMPLEDRIVENAME
busybox mount -o ro $oneDRV /mnt/$SIMPLEDRIVENAME
[ $? = 0 ] || { rmdir /mnt/$SIMPLEDRIVENAME;continue; }  ##2013-12-07
SFS=`find /mnt/$SIMPLEDRIVENAME -maxdepth 3 -type f -name "*.sfs" | grep -i -E 'dpup|luci|luma|lupu|spup|upup|zpup|puppy|qret|qrky|wary|pup\-' | grep -v -E -e 'devx|\+mnt\+|z[a-z][0-9]*|zdrv'`
if [ -z "$SFS" ]; then  ##if 99
echo  -e "$Ora"'No puppy.sfs found on '"$Res"$oneDRV
sleep 1s
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Unmounting again '"$Res"$oneDRV
busybox umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
continue  ##for 0
else  ##if 99
for oneSFS in $SFS; do ##for 1
[ "$DebugVal" -ge "1" ] && echo -e "$YEL"'Found '"\\033[0;35m"$oneSFS"$Res"
bneSFS=`basename $oneSFS`
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Mounting now '"$Res""$oneSFS /mnt/$bneSFS"
mkdir -p /mnt/$bneSFS
Err=0
mount-FULL -o loop $oneSFS /mnt/$bneSFS
Err=$?
sleep 1s
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Mounting returned error value='"$BLU""$Err""$Res"
if [ "$Err" -eq 0 ]; then ##100
if [ "$DebugVal" = "0" ]; then
REPOGLIBC=`basename $(find /mnt/$bneSFS/lib -maxdepth 1 -name "libc-*.so") 2>/dev/null`
else
REPOGLIBC=`basename $(find /mnt/$bneSFS/lib -maxdepth 1 -name "libc-*.so")`
fi
REPOCLMAJ=`echo "$REPOGLIBC" | cut -f 2 -d '.'`
REPOCLMin=`echo "$REPOGLIBC" | cut -f 3 -d '.'`
if [ -z "$REPOGLIBC" ]; then ##101
echo -e "$Red"'No libc found in '"$Res""$bneSFS"
busybox umount -lrd /mnt/$bneSFS
sleep 1s
rmdir /mnt/$bneSFS
FOUND=''
continue
else ##101
if [ "$REPOCLMAJ" -gt "$CURRCLMAJ" ]; then #102
echo -e "$Red""Major of libc in $bneSFS = '$REPOCLMAJ' and larger than actual '$CURRCLMAJ'""$Res"
busybox umount -lrd /mnt/$bneSFS
sleep 1s
rmdir /mnt/$bneSFS
FOUND=''
continue
elif [ "$REPOCLMAJ" -eq "$CURRCLMAJ" ] && [ "$REPOCLMin" -gt "$CURRCLMin" ]; then #102
echo -e "$Red""Minor of libc in $bneSFS = '$REPOCLMin' and larger than actual '$CURRCLMin'""$Res"
busybox umount -lrd /mnt/$bneSFS
sleep 1s
rmdir /mnt/$bneSFS
FOUND=''
continue
else #102
echo -e "$Gre""Found '$REPOGLIBC' and should match '$CURRGLIBC'""$Res"
FOUND='1'
break ##for 1
fi #102
fi #101
else #100
Err=99999
echo -e "$Red""Mounting $oneSFS failed""$Res"
busybox umount -lrd /mnt/$bneSFS
sleep 1s
rmdir /mnt/$bneSFS
FOUND=''
continue
fi #100
done  ##for 1
fi  ##if 99
[ -n "$FOUND" ] && [ "$Err" -eq 0 ] && break
done  ##for 0
echo -e "$Res"
[ "$DebugVal" -ge "2" ] && echo -e "$Red"'$oneDRV='"$Res""$oneDRV ""$Red"'oneSFS='"$Res""$oneSFS"
MOUNTLOOP=`busybox mount | grep -E "$oneDRV|$bneSFS" | cut -f 1 -d ' ' | tr ' ' '|'`
MOUNT=`busybox mount | grep -v -E "$MOUNTLOOP|$DEVROOTDRIVE" | grep '^/dev/' | grep -v -E  'initrd|none|*tmpfs|root|unionfs|aufs' | cut -f 1 -d ' '`
[ "$DebugVal" -ge "2" ] && echo -e "$Red""$MOUNTLOOP : $MOUNT :""$Res"
[ "$DebugVal" -ge "1" ] && busybox mount
for m in $MOUNT; do
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Unmounting again '"$Res""$m"
busybox umount -lrd $m
sleep 1s
rmdir /mnt/`basename $m`
done
[ "$DebugVal" -ge "1" ] && [ -n "$MOUNT" ] && busybox mount && echo -e "$Res"
sleep $((SLEEP*3))s
if [ -n "`busybox mount | grep "/mnt/$bneSFS"`" ]; then #103
REPO="/mnt/$bneSFS"
REPOSFS=`basename $REPO`
REPOPART="$oneDRV"
echo -e "$Res"
echo -e "$Gre"'Repository to use : '"$GRE""$REPOSFS""$Gre"' on '"$GRE""$REPOPART"
echo -e "$Res"
sleep $((SLEEP*2))s
else  #103
echo -e "$Res"
echo -e "$Red""No suitable puppy.sfs found""$Res"
echo "Trying for Puppy full installations ...."
echo -e "$Res"
sleep $((SLEEP*2))s
REPO=''
fi #103
}
FIND_SFS_FUNC
FIND_FULLINSTALL_FUNC(){
CHECK_FOR_ALT_PART_FUNC
CURR_GLIBC_FUNC
for oneDRV in $DRIVES; do ##for 0
SIMPLEDRIVENAME=`basename $oneDRV`
mkdir -p /mnt/$SIMPLEDRIVENAME
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'Mounting '"$Res""$oneDRV""$Ora"' on '"$Res""/mnt/$SIMPLEDRIVENAME""$Res"
busybox mount -o rw $oneDRV /mnt/$SIMPLEDRIVENAME
[ $? = 0 ] || { rmdir /mnt/$SIMPLEDRIVENAME;continue; }  ##2013-12-07
DS=
[ -d /mnt/$SIMPLEDRIVENAME/etc ] && DS=`find /mnt/$SIMPLEDRIVENAME/etc -maxdepth 2 -name "DISTRO_SPECS"`
sleep 2s
if [ -n "$DS" ]; then  ##3
if [ -f "$DS" ]; then  ##4
source $DS
if [ -n "$DISTRO_NAME" ] && [ -n "$DISTRO_VERSION" ]; then  ##4.1
echo -e "$GRE""Found $DISTRO_NAME $DISTRO_VERSION"
REPOGLIBC=`basename $(find /mnt/$SIMPLEDRIVENAME/lib -maxdepth 1 -name "libc-*.so")`
REPOCLMAJ=`echo "$REPOGLIBC" | cut -f 2 -d '-' | cut -f 2 -d '.'`
REPOCLMin=`echo "$REPOGLIBC" | cut -f 2 -d '-' | cut -f 3 -d '.'`
if [ -n "$REPOGLIBC" ]; then #4.1.1
if [ "$REPOCLMAJ" -gt "$CURRCLMAJ" ]; then ##4.2
echo -e "$Red""LIBC major = '$REPOCLMAJ' larger than '$CURRCLMAJ'""$Res"
busybox umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
continue
elif [ "$REPOCLMAJ" -eq "$CURRCLMAJ" ] && [ "$REPOCLMin" -gt "$CURRCLMin" ]; then ##4.2
echo -e "$Red""LIBC minor = '$REPOCLMin' larger than '$CURRCLMin'""$Res"
busybox umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
continue
else ##4.2
echo -e "$Gre""Found '$REPOGLIBC' and should match '$CURRGLIBC'""$Res"
echo -e "$BLU""Fscking $oneDRV just in case ....""$Res"
busybox umount -lr $oneDRV
sleep 2s
fi ##4.2
FSCK_FUNC "$oneDRV" "other_full_installs"
if [ -n "$CLEAN" ] || [ -z "$Err" ] || [ "$Err" -eq "0" ]; then  ##5
echo -e "$Gre"'OK ,'"$GRE"" using REPO /mnt/$SIMPLEDRIVENAME""$Res"
echo
busybox mount -o rw $oneDRV /mnt/$SIMPLEDRIVENAME
[ $? = 0 ] || { rmdir /mnt/$SIMPLEDRIVENAME;continue; }  ##2013-12-07
sleep 1s
REPO="/mnt/$SIMPLEDRIVENAME"
break
else  ##5
echo
echo -e "$RED""No ,""$Red"" $oneDRV seems to be not clean , too""$Res"
echo "Trying next if possible ...."
echo
REPO=''
[ -n "`busybox mount | grep "$oneDRV"`" ] && busybox umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
fi  ##5
else
echo -e "$Red"'No GLIBC found on '"$Res"$oneDRV
busybox umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
continue
fi  ##4.1.1
else ##4.1
echo -e "$RED"'No , $DISTRO_NAME or $DISTRO_VERSION not available'"$Res"
echo 'Trying next if possible ....'
busybox umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
fi  ##4.1
fi  ##4
else #3
echo -e "$Ora"'Apparently no Puppy Linux full installation on '"$Res""$oneDRV"
busybox umount -lr $oneDRV
sleep 1s
rmdir /mnt/$SIMPLEDRIVENAME
fi  ##3
done  ##for 0
}
[ -z "$REPO" ] && FIND_FULLINSTALL_FUNC
NO_REPO_DIALOG_FUNC(){
if [ -z "$REPO" ]; then  #6
echo
echo -e "$RED""No alternative useable repositories found .""$Res"
echo "You can continuing using files of full installation ."
echo "Hopefully none are corrupted ."
echo
echo -e "$Red""Type [ r ] or [ R ] to reboot"
echo -e "$GRE""Type [ c ] or [ k ] for dropout into console"
echo -e "$Gre""Else any other key and or simply [ Enter ] to continue"
echo -e "$Res"
read -t $TimeOut K
echo
Key=`echo "$K" | tr '[A-Z]' '[a-z]'`
if [ "$Key" = "c" -o "$Key" = "k" ]; then #7
echo 'dropping to console now , partition still mounted !'
cd /
sleep 2
exec chroot . sh
elif [ "$Key" = "r" ]; then  #7
echo "Please do an 'e2fsck $DEVROOTDRIVE' "
echo "via console/terminal using a LiveCd ."
echo "You may need to boot it with 'puppy pfix=ram' ."
echo "Remember , the timeout is 5 sec to press 'F2' ."
echo "Rebooting now in 25 seconds"
sleep 22s
[ "$DebugVal" = "0" ] && busybox umount -a -r 2>/dev/null
[ "$DebugVal" -ge "1" ] && busybox umount -a -r
[ "$DebugVal" -ge "1" ] && sleep 10s
sleep 2s
exec busybox reboot -f
else #7
echo -e "$Ora""Ok ... continuing ...""$Res"
REPO=''
fi  ##7
fi  ##6
}
NO_REPO_DIALOG_FUNC
fi  ##1
fi  #0
sleep $((SLEEP*5))s  ###KRG
[ "$DebugVal" = "2" ] && CONTINUE_FUNC
}
CHECK_ALTERNATE_REPO_FUNC
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'$REPO='"$Res""$REPO"
[ -z "`busybox mount | grep -Fw '/' | grep '(rw)'`" ] && busybox mount -o remount,rw /
CHECK_DEV_NODES_FUNC(){
ROOTDRIVE=`basename $(busybox rdev | cut -f 1 -d ' ')`  ### | cut -f 1 -d ' ' | sed 's#/dev/##'`
ROOTBLOCKDRIVE=${ROOTDRIVE:0:3}
[ "$DebugVal" -ge "1" ] && echo -e "$Ora"'rootdrive='"$Res""$ROOTDRIVE" && echo  ###DBG
FS=`mount | grep -Fw '/' | grep '/dev' | tr -s ' ' | cut -f 5 -d ' '`
PDEV1="$ROOTDRIVE"
DEV1FS="$FS"
[ "$DebugVal" -eq "2" ] && echo -e "$Ora""$ROOTDRIVE $ROOTBLOCKDRIVE $FS "','" $PDEV1 $DEV1FS"
DMESG=`dmesg | grep 'Mounted root' | grep -o 'device.*' | cut -f 2 -d ' ' | sed 's#[[:alpha:][:punct:]]$##`
MAJ=`echo $DMESG | cut -f 1 -d ':'`
Min=`echo $DMESG | cut -f 2 -d ':'`
CATPP=`cat /proc/partitions | sed 's#^[a-zA-Z].*##g ; s#^[[:blank:]][a-zA-Z]##g ; /^$/d' | tr -s ' ' | sed 's#^ ##'`
MAJBL=`echo "$CATPP" | grep -w "$ROOTBLOCKDRIVE" | cut -f 1 -d ' '`
MinBL=`echo "$CATPP" | grep -w "$ROOTBLOCKDRIVE" | cut -f 2 -d ' '`
[ "$DebugVal" -eq "2" ] && echo $CATPP" $DMESG $MAJ $Min "','" $MAJBL $MinBL "',' && echo -e "$Res"
}
[ "$DebugVal" -ge "1" ] && CHECK_DEV_NODES_FUNC
CHECK_SPACE_FUNC(){
echo -e "$BLU"'Freeing ram ...'"$Res"
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;36m" && free && echo -e "$Res"
sleep $((SLEEP*2))s
echo 3 > /proc/sys/vm/drop_caches  ###KRG , thanks to Bruce B ;see http://www.murga-linux.com/puppy/viewtopic.php?t=33219
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;35m" && free && echo -e "$Res"
sleep $((SLEEP*4))s  ###KRG
if [ "`ls -l /dev/ram8 | cut -b 1-3`" != "brw" -o "`ls -l /dev/ram8 | cut -f 5,6 -d ' '`" != "1, 8" ]; then
rm -f /dev/ram8
mknod /dev/ram8 b 1 8
fi
echo -e "$BLU"'Checking for Compiled RamDisk Size using:'"$Res"
MAXSIZEdevRAM1=`mkfs.ext2 -v -b 1024 -i 1024 /dev/ram8 | grep 'blocks' | grep 'inodes' | tr -s ' ' | cut -f 3 -d ' '`
SIZEdevRAMdisk1=$(($MAXSIZEdevRAM1 * 93 / 100))  ###KRG 0.93 is precaution
echo -e "$YEL"'Compiled-in RAMDisk Size='"$Res""$SIZEdevRAMdisk1""$Res"
echo -e "$Res"
KERNV=`uname -r`
echo -e "$BLU""Checking Size of $REPO/lib/lib*.so* and $REPO/lib/ld*.so* ..."
echo -e "$Res"
SPACElib=0
LLS=`ls -l "$REPO"/lib/* | grep -o '/lib/.*\->.*' | grep 'firefox' | cut -f 1 -d ' '`
[ -z "$LLS" ] && LLS="No_firefox_libs_in_lib"
[ "$DebugVal" -ge "2" ] && echo -e "$Red"'firefox-libs: '$LLS && echo
LF=`find "$REPO"/lib -maxdepth 1 -name "lib*.so*" -o -name "ld*.so*"`
LIBF=`echo "$LF" | grep -v "$LLS" | grep -v -E 'libuClibc.*|ld\-uClibc.*|libthread.*|libm\-0.*|libm\.so\.0' | sort`
for i in $LIBF; do
#SiZElib=`ls -s $i | cut -f 1 -d ' '`
SiZElib=`ls -s $i | awk '{print $1}'`
SPACElib=$(($SPACElib + $SiZElib))
[ "$DebugVal" = "2" ] && echo -n -e "$Res""$i"'='"$Red""$SiZElib "  ###DBG
[ "$DebugVal" = "1" ] && [ "$SiZElib" -ne "0" ] && echo -n -e "$Res""$i"'='"$Ora""$SiZElib "
done
[ "$DebugVal" = "2" ] && echo && echo 'total /lib='"$SPACElib"  ###DBG
[ "$DebugVal" -ge "1" ] && echo && echo -e "$Res"
echo -e "$BLU"'Checking for available RAM ...'
echo -e "$Res"
RAM=`free | grep -i 'mem' | sed 's#^[[:blank:]]*##' | tr -s ' ' | cut -f 2 -d ' '`
FREERAM=`free | grep -i 'mem' | sed 's#^[[:blank:]]*##' | tr -s ' ' | cut -f 4 -d ' '`
RAMLIMITdevRAM2=$(($MAXSIZEdevRAM1 * 2))
echo '                  free counted total RAM:'"$RAM"  ###DBG
echo 'Available RAM (minus Kernel and modules):'"$FREERAM"  ###DBG
echo '     Minimum available free RAM required:'"$RAMLIMITdevRAM2"' ... '  ###DBG
if [ "$SPACElib" -gt "$SIZEdevRAMdisk1" -o "$RAMLIMITdevRAM2" -ge "$FREERAM" ]; then  #1
echo
echo ";)"
echo -e "$RED"
if [ "$RAMLIMITdevRAM2" -ge "$FREERAM" ]; then                         #1.1
echo "Needed free RAM is $RAMLIMITdevRAM2 , but free RAM is $FREERAM"
else                                                                    #1.1
echo "/lib/lib*.so* is $SPACElib in KB and larger than the RamDisk compiled for"
echo -e "$GRE"
echo "kernel $KERNV with $SIZEevRAMdisk1 / $MAXSIZEevRAM1 in KB"
fi  #1.1
echo -e "$Res"
echo -e "$RED"
echo 'fsck omitted !!!'
echo -e "$GRE"
echo 'please do the filesystemcheck via Live CD'
echo -e "$YEL"
echo 'or booting another Puppy or Linux'
echo -e "\\033[1;36m"
echo "type 'busybox reboot -f' to reboot"
echo 'eventually you need to press CTRL+ALT+DELETE to reboot'
echo 'you may need to check BIOS bootorder also before booting LiveCD'
echo 'do not forget to unmount everything first !'
echo -e "$Res"
echo
echo 'dropping to console now , partition still mounted !'
cd /
busybox mount -o remount,ro /
sleep $((SLEEP*2))s
exec chroot . sh
fi  #1
NRAM=$(( $RAM - $FREERAM + $RAMLIMITdevRAM2 ))
NEEDRAM=`echo "$NRAM" | sed -r 's/(.)/ \1/g' | rev | tr ' ' '\n' | sed -r '4 i\,' | sed -r '8 i\,' | tr -d '\n' | rev | sed 's#^,##'`
FORMRAM=`echo "$RAM" | sed -r 's/(.)/ \1/g' | rev | tr ' ' '\n' | sed -r '4 i\,' | sed -r '8 i\,' | tr -d '\n' | rev | sed 's#^,##'`
echo -e "$GRE"
echo -e "\\033[18G"'... OK : '"$Res"$NEEDRAM"$GRE"' required of '"$Res"$FORMRAM
echo -e "$Res"
sleep $((SLEEP*5))s
}
CHECK_SPACE_FUNC
[ "$DebugVal" = "2" ] && CONTINUE_FUNC
  echo -e "\\033[0;35m"'Creating a ramdisk and populating with a Linux environment...'"$Res"
CHECK_RAM0_FUNC(){
  if [ ! -b /dev/ram0 -o "`ls -l /dev/ram0 | cut -b 1-3`" != "brw" -o "`ls -l /dev/ram0 | cut -f 5,6 -d ' '`" != "1, 0" ]; then  ###KRG
  echo  -e "$RED"'block /dev/ram0 does not exist'"$Res"
  rm -f /dev/ram0
  echo -e "$Res"'creating now'"$Res"
  mknod /dev/ram0 b 1 0
  fi
}
CHECK_RAM0_FUNC
mkfs.ext2 -q -m 5 -b 1024 -i 1024 /dev/ram0
MAKE_RAM9_FUNC(){
  [ ! -b /dev/ram9 -o "`ls -l /dev/ram9 | cut -b 1-3`" != "brw" -o "`ls -l /dev/ram9 | cut -f 5,6 -d ' '`" != "1, 9" ] && rm -f /dev/ram9 && mknod /dev/ram9 b 1 9  ###KRG
  mkfs.ext2 -q -m 5 -b 1024 -i 1024 /dev/ram9
  sleep $((SLEEP*2))s
}
MAKE_RAM9_FUNC
  mkdir -p /mnt/ram0
  mkdir -p /mnt/ram9  ###KRG
  busybox mount -t ext2 /dev/ram0 /mnt/ram0
  busybox mount -t ext2 /dev/ram9 /mnt/ram9  ###KRG
  sleep $((SLEEP*2))s  ###KRG
  mkdir -p /mnt/ram0/old_root
  mkdir /mnt/ram0/bin
BUSYBOX_FUNC(){
  echo
  echo -n -e "$BLU""Checking if $REPO/bin/busybox is a link to 'MyBusybox' : ""$Res"
  RLF=`readlink -f "$REPO"/bin/busybox`  ## | sed "s%^$REPO%%"`
  LSLBB=`ls -l "$REPO"/bin/busybox | grep -o '\->.*'`  ###KRG if busybox is a symlink to busybox-version
  if test "$LSLBB"; then
  echo -e "$GRE"'YES'"$Res"
  echo -e "$Res"'Copying '"$RLF"' into RamDisk'"$Res"
  RLBB=`basename "$RLF"`
  cp -a "$REPO"/bin/"$RLBB" /mnt/ram0/bin/"$RLBB"
  else
  echo -e "$Gre"'No'
  fi
  echo -e "$Res"
}
BUSYBOX_FUNC
  echo -e "$BLU""Populating /mnt/ram0/bin  ...""$Res"
  [ "$DebugVal" = "2" ] && echo -e -n "$Red"'/mnt/ram0/bin/'"$Res"
  for ONEBIN in "[" "[[" ash autologinroot basename busybox cat chmod chown clear cp cut date dc dd df dirname dmesg du e3 ed expr false find free grep head kill ln login ls lsmod mkdir mknod more mv nice ntfs-3g pidof pwd readlink rev rm rmdir sed sleep sort stat su sync tail tar touch tr true uname usleep waitmax wc which xargs
  do  ###KRG added e3
  if [ -x $REPO/bin/$ONEBIN ]; then
  BINDIR='/bin'
  elif [ -x $REPO/usr/bin/$ONEBIN ]; then
  BINDIR='/usr/bin'
  else
  continue
  fi
  RLF=`readlink -f "$REPO""$BINDIR"/"$ONEBIN" | grep -v 'busybox' | sed "s%^$REPO%%"`
  LSLBIN=`ls -l "$REPO""$BINDIR"/"$ONEBIN" | grep -o '\->.*' | grep -v 'busybox'`
  if [ -n "$LSLBIN" ]; then
  [ "$DebugVal" = "1" ] && echo -n -e "$Ora"" Link $ONEBIN""$Res"
  NEWBIN=`echo "$RLF" | sed 's#/usr## ; s#/local##'`
  [ "$DebugVal" = "2" ] && echo -n -e "$Red"' Link '"$Res""${REPO}${BINDIR}/$ONEBIN ""$Red"', '"$Res"
  [ "$DebugVal" = "2" ] && echo -n -e "$Red"' LinkTarget '"$Res""${REPO}${RLF} ""$Red"', '"$Res"
  [ -x /mnt/ram0/${NEWBIN} ] || cp -a ${REPO}${RLF} /mnt/ram0/${NEWBIN}
  [ -x /mnt/ram0/bin/$ONEBIN ] || cp -a ${REPO}${BINDIR}/$ONEBIN /mnt/ram0/bin/$ONEBIN
  else
   if [ -x ${REPO}${BINDIR}/$ONEBIN ] && [ ! -x /mnt/ram0/bin/$ONEBIN ]; then  ###KRG for symlink busybox
    cp -a ${REPO}${BINDIR}/$ONEBIN /mnt/ram0/bin/
    [ "$DebugVal" = "2" ] && echo -e -n "$ONEBIN ""$Red"', '"$Res"
   else
    if [ "$ONEBIN" != "busybox" -a "`busybox | grep $ONEBIN`" ]; then  ###KRG
    [ "$DebugVal" = "2" ] && echo -e -n 'link '"$ONEBIN ""$Red"', '"$Res"
    ln -s busybox /mnt/ram0/bin/$ONEBIN
    fi
   fi
  fi
  done
  ln -snf busybox /mnt/ram0/bin/ps
  [ "$DebugVal" = "2" ] && echo -n -e 'link ps '"$Red"', '"$Res"
  ln -snf busybox /mnt/ram0/bin/rdev
  [ "$DebugVal" = "2" ] && echo -n -e 'link rdev '"$Red"', '"$Res"
  ln -snf busybox /mnt/ram0/bin/sh
  [ "$DebugVal" = "2" ] && echo -n -e 'link sh '"$Red"', '"$Res"
  ln -snf busybox /mnt/ram0/bin/mount
  [ "$DebugVal" = "2" ] && echo -n -e 'link mount '"$Red"', '"$Res"
  ln -snf busybox /mnt/ram0/bin/umount
  [ "$DebugVal" = "2" ] && echo -n 'link umount '
  [ "$DebugVal" -ge "1" ] && echo -e "$Res" && echo
  echo -e "$BLU""Populating /mnt/ram0/sbin ...""$Res"
  [ "$DebugVal" = "2" ] && echo -e -n "$Red"'/mnt/ram0/sbin/'"$Res"
  mkdir /mnt/ram0/sbin
  for ONEBIN in depmod dumpe2fs e2fsck elspci fdisk freeramdisk fsck.ext2 fsck.ext3 fsck.ext4 getty guess_fstype halt hdparm hotplug2stdout hotplug2stdout_notimeout hwclock ifconfig ifplugstatus insmod klogd ldconfig loadkmap losetup lsmod mount.ntfs-3g pivot_root probedisk probedisk2 probepart swapon
  do
  if [ -x $REPO/sbin/$ONEBIN ]; then
  BINDIR='/sbin'
  elif [ -x $REPO/usr/sbin/$ONEBIN ]; then
  BINDIR='/usr/sbin'
  else
  continue
  fi
  RLF=`readlink -f "$REPO""$BINDIR"/"$ONEBIN" | grep -v 'busybox' | sed "s%^$REPO%%"`
  LSLSBIN=`ls -l "$REPO""$BINDIR"/"$ONEBIN" | grep -o '\->.*' | grep -v 'busybox'`
   if [ -n "$LSLSBIN" ]; then
   [ "$DebugVal" = "1" ] && echo -n -e "$Ora"" Link $ONEBIN ""$Res"
   NEWBIN=`echo "$RLF" | sed 's#/usr## ; s#/local##'`
   [ "$DebugVal" = "2" ] && echo -n -e "$Red"' Link '"$Res""${REPO}${BINDIR}/$ONEBIN ""$Red"', '"$Res"
   [ "$DebugVal" = "2" ] && echo -n -e "$Red"' LinkTarget '"$Res""${REPO}${RLF} ""$Red"', '"$Res"
   [ -x /mnt/ram0/sbin/$ONEBIN ] || cp -a ${REPO}${BINDIR}/"$ONEBIN" /mnt/ram0/sbin/"$ONEBIN"
   [ -x /mnt/ram0/${NEWBIN} ] || cp -a ${REPO}${RLF} /mnt/ram0/${NEWBIN}
   else
   if [ -x ${REPO}${BINDIR}/$ONEBIN ]; then  ###KRG -x for -e
    cp -a ${REPO}${BINDIR}/$ONEBIN /mnt/ram0/sbin/
    [ "$DebugVal" = "2" ] && echo -e -n "$ONEBIN "
    [ "$DebugVal" = "2" ] && [ "$ONEBIN" != "swapon" ] && echo -e -n "$Red"', '"$Res"
   else
    if test "`busybox | grep $ONEBIN`"; then  ###KRG
    ln -s ../bin/busybox /mnt/ram0/sbin/$ONEBIN
    [ "$DebugVal" = "2" ] && echo -e -n 'link '"$ONEBIN "
    [ "$DebugVal" = "2" ] && [ "$ONEBIN" != "swapon" ] && echo -e -n "$Red"', '"$Res"
    fi
   fi
  fi
  done
PRESERVE_CHROOT_FUNC(){
  CHROOT=`which chroot | grep '^/sbin/`
  if [ -n "$CHROOT" ] && [ ! -L "$CHROOT" ] && [ -x "$CHROOT" ]; then
  echo "$CHROOT is no link but executable ,
creating backup of $CHROOT.bac
Please restore manually for now"
  mv $CHROOT "$CHROOT.bac"
  fi
}
PRESERVE_CHROOT_FUNC
  ln -snf ../bin/busybox /sbin/chroot #must match
  [ "$DebugVal" = "2" ] && echo -n -e 'link chroot '"$Red"', '"$Res"
  ln -snf ../bin/busybox /mnt/ram0/sbin/chroot #must match
  [ "$DebugVal" = "2" ] && echo -n -e 'link chroot '"$Red"', '"$Res"
  ln -snf ../bin/busybox /mnt/ram0/sbin/init
  [ "$DebugVal" = "2" ] && echo -n -e 'link init '"$Red"', '"$Res"
  ln -snf ../bin/busybox /mnt/ram0/sbin/poweroff
  [ "$DebugVal" = "2" ] && echo -n -e 'link poweroff '"$Red"', '"$Res"
  ln -snf ../bin/busybox /mnt/ram0/sbin/reboot
  [ "$DebugVal" = "2" ] && echo -n 'link reboot '
  [ "$DebugVal" -ge "1" ] && echo -e "$Res" && echo
  echo -e "$BLU""Populating /mnt/ram0/etc  ...""$Res"
  mkdir /mnt/ram0/etc
  [ "$DebugVal" = "2" ] && echo -n -e "$Red"'/mnt/ram0/etc/'"$Res"
  for ONEFILE in codepage DISTRO_SPECS eventmanager fdprm floppy fontmap group gshadow host.conf hostname hosts hosts.allow hosts.deny inittab inputrc issue keymap localtime mailcap mime.types mke2fs.conf modprobe.conf modules.conf mtab networks nscd.conf nsswitch.conf passwd printcap protocols services shadow
  do
   [ "$DebugVal" = "0" ] && cp -a "$REPO"/etc/$ONEFILE /mnt/ram0/etc/ 2>/dev/null
   [ "$DebugVal" = "2" ] && echo -e -n "$ONEFILE "
   [ "$DebugVal" -ge "1" ] && cp -a "$REPO"/etc/$ONEFILE /mnt/ram0/etc/
   [ "$DebugVal" = "2" ] && [ "$ONEFILE" != "shadow" ] && echo -e -n "$Red"', '"$Res"
  done
   [ "$DebugVal" = "2" ] && echo -e "$Res" && echo
  echo "$PDEV1"','"$DEV1FS"',' > /mnt/ram0/etc/fsckme.err  ###KRG
  echo 'DebugVal='"$DebugVal" > /mnt/ram0/etc/initdebug.in  ###KRG
  echo 'TimeOut='"$TimeOut" >> /mnt/ram0/etc/initdebug.in  ###KRG
  [ -f /mnt/ram0/etc/fstab ] || touch /mnt/ram0/etc/fstab
  echo '/lib' > /mnt/ram0/etc/ld.so.conf
  echo 'export PATH="/bin:/sbin"
export LD_LIBRARY_PATH="/mnt/ram9/lib"
ulimit -c 0
umask 022
export USER=root
export LOGNAME=root
export TERM=linux' > /mnt/ram0/etc/profile
  mkdir /mnt/ram0/etc/rc.d
  echo '#!/bin/sh
PDEV1=`cat /etc/fsckme.err | cut -f 1 -d ","`  ###KRG
DEV1FS=`cat /etc/fsckme.err | cut -f 2 -d ","`  ###KRG
. /etc/initdebug.in  ###KRG
PATH="/bin:/sbin"
echo -e "\\033[0;32m"
echo "Now running in ramdisk, preparing for filesystem check of ${PDEV1}..."
echo -e "\\033[0;39m"
[ ! -d /proc ] && mkdir /proc
if [ -z "`mount | grep -o /proc`" ] ; then
[ "$DebugVal" = "0" ] && mount -t proc none /proc 2>/dev/null  ###KRG added: 2>/dev/null  ###KRG
[ "$DebugVal" -ge "1" ] && mount -t proc none /proc
fi
if [ "`readlink /etc/mtab`" != "/proc/mounts" ] ; then ##e2fsck needs it , busybox mount apparently not
[ -f /etc/mtab ] || [ -L /etc/mtab ] && rm /etc/mtab
ln -s ../proc/mounts /etc/mtab
fi
[ "$DebugVal" = "0" ] && hwclock --hctosys --localtime 2>/dev/null
[ "$DebugVal" -ge "1" ] && hwclock --hctosys --localtime
echo "Unmounting the rootdrive ..."   ###KRG
echo
MOR=`mount | grep "/old_root/.*"`
for i in `echo "$MOR" | cut -f 3 -d " " | sort -r` ; do
[ "$DebugVal" = "0" ] && umount $i 2>/dev/null || ErrMor=$?  ###KRG
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""Unmounting $i ...""\\033[0;39m"
[ "$DebugVal" -ge "1" ] && umount $i || ErrMor=$?
if [ -n "`mount | grep "$i"`" ] ; then
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""Failed to unmount $i with error=$ErrMor""\\033[0;39m" && echo
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""Trying lazy now ...""\\033[0;39m"
umount -l $i || ErrMorl
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""umount -l $i returned errorcode=$ErrMorl""\\033[0;39m"
else
echo -e "\\033[1;32m""$i was unmounted""\\033[0;39m"
fi
done
if [ -n "`mount | grep -o /old_root`" ] ; then  ##1
[ "$DebugVal" = "0" ] && umount /old_root 2>/dev/null || Err1=$?
if [ "$DebugVal" -ge "1" ] ; then
umount /old_root || Err1=$?  ###KRG  ##2
echo -e "\\033[0;33m""Unmounting /old_root: error returncode=$Err1 , still mounted :""\\033[0;39m"
mount
echo  ###DBG
fi  ##2
sleep $((SLEEP*2))s
if [ -z "`mount | grep -o /old_root`" ] ; then  ##3
[ -n "$Err1" ] && [ "$Err1" -ne "0" ] && echo -e "\\033[1;32m""/old_root $PEDV1 was unmounted though""\\033[0;39m" && echo
else  ##3
echo "Not so good, was unable to unmount ${PDEV1}. trying lazy now..."
sleep $((SLEEP*2))s
umount -l /old_root
Err3=$?
sleep $((SLEEP*1))s
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""Umount error returnvalue=$Err3""\\033[0;39m"
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""Still mounted :""\\033[0;39m" && mount && echo
fi ##3
if [ -n "$Err3" ] && [ "$Err3" -ne "0" ] ; then  ###KRG  ##5
echo "Not so good, was unable to unmount ${PDEV1}. trying option force ..."
sleep $((SLEEP*2))s
umount -f /old_root
Err5=$?
sleep $((SLEEP*1))s
[ "$DebugVal" -ge "1" ] && echo -e "\\033[0;33m""Unmount error returncode=$Err5""\\033[0;39m"
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""Still mounted :""\\033[0;39m" && mount && echo
fi  ##5
[ -n "$Err5" ] && [ "$Err5" -ne "0" ] && echo "Not so good, was unable to unmount ${PDEV1}. Continuing with f.s. check..."
fi  ##1
if [ -z "`mount | grep -o /old_root`" ] ; then
echo -e "\\033[1;32m""OK. /old_root was unmounted successfully .""\\033[0;32m"" Fscking $PDEV1  ...
Depending on size of installation, might take a while""\\033[0;39m"
if [ "$DebugVal" -ge "1" ] ; then
e2fsck -v -f /dev/${PDEV1}
else
e2fsck -f /dev/${PDEV1}
fi
else
echo -e "\\033[0;31m""Whatever cause ... /old_root or $PDEV1 still mounted!"
echo -e "\\033[0;33m""Performing read-only filesystem check ... ""\\033[0;39m"
[ "$DebugVal" -ge "1" ] && e2fsck -n -f -v /dev/${PDEV1}
[ "$DebugVal" = "0" ] && e2fsck -n -f /dev/${PDEV1}
fi
sync
echo
echo -e "\\033[7;32m"
echo "Filesystem check completed!"
echo -e "\\033[0;39m"
echo -e "\\033[0;32m""Removing [ xwin ] blocking files ..."
echo -e "\\033[0;39m"
mkdir -p /mnt/${PDEV1}  ###KRG removing fsckme.file  ###KRG
mount -t ${DEV1FS} /dev/${PDEV1} /mnt/${PDEV1}
if [ $? = 0 ] ; then
ErrFlag=`find /mnt/${PDEV1} -maxdepth 3 -type f -iname "*fsckme*"`
for i in $ErrFlag ; do
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""Removing $i""\\033[0;39m"
rm $i
done
[ -f /mnt/${PDEV1}/etc/.XLOADED ] && rm /mnt/${PDEV1}/etc/.XLOADED
[ -f /mnt/${PDEV1}/tmp/bootcnt* ] && rm /mnt/${PDEV1}/tmp/bootcnt*
rm -f /var/log/X*
rm -f /var/lock/LCK*
rm -f /var/run/*.pid
SOCK=`find /mnt/${PDEV1}/var -mount -type s | tr "\n" " "`
for i in $SOCK ; do
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""removing ""$i""\\033[0;39m"
rm -f $i
done
PIPE=`find /mnt/${PDEV1}/var -mount -type p | tr "\n" " "`
for i in $PIPE ; do
[ "$DebugVal" -ge "1" ] && echo -e "\\033[1;33m""removing ""$i""\\033[0;39m"
rm -f $i
done
sleep $((SLEEP*2))s
sync
umount /dev/${PDEV1}  ###KRG
fi
[ "$DebugVal" = "0" ] && DUMPE=`dumpe2fs /dev/$PDEV1 2>/dev/null | grep -i "state"`
[ "$DebugVal" -gt "1" ] && DUMPE=`dumpe2fs /dev/$PDEV1 | grep -i "state"`
echo -e "\\033[1;34m""$DUMPE""\\033[0;39m"
echo -e "\\033[0;36m"
echo "The computer now has to be restarted."
echo -e "\\033[0;35m"
echo "Computer will reboot in 1-3  minutes, else press ENTER for immediate reboot."
echo
echo -e "\\033[0;32m"  ###KRG
echo "Press Any key and or simply ENTER to reboot ,"
echo "or wait $TimeOut sec again ,"
echo -e "\\033[0;31m"
echo "or [ r ] for dropout into rdsh :"
echo -e "\\033[0;39m"
echo -n -e "\\033[4;5;34m""ENTER""\\033[0;39m"" -> ""\\033[1;7;32m"
read -n 1 -t $TimeOut K
if [ "$K" = "r" -o "$K" = "R" ] ; then
echo
echo -e "\\033[0;32m"
echo "Dropping now"
echo "Have FUN !"
echo
echo -e "\\033[0;39m"
exit
else
echo -e "\\033[0;39m"  ###KRG
[ "$DebugVal" = "0" ] && umount /proc 2>/dev/null
[ "$DebugVal" -ge "1" ] && umount /proc && sleep $((SLEEP*3))s
reboot
fi
' > /mnt/ram0/etc/rc.d/rc.sysinit
  chmod 0755 /mnt/ram0/etc/rc.d/rc.sysinit
  echo -e "$BLU""Populating /mnt/ram0/usr  ...""$Res"
  LOCALTIME="${REPO}/usr/share`readlink $REPO/etc/localtime | sed 's%^.*/zoneinfo%/zoneinfo%'`"
  if [ -n "$REPO" ]; then
  LOCALTDIR="`dirname $LOCALTIME | sed "s%$REPO%%g" | sed 's#^/## ; s#//#/#g'`"
  else
  LOCALTDIR="`dirname $LOCALTIME | sed 's#^/## ; s#//#/#g'`"
  fi
  mkdir -p /mnt/ram0/$LOCALTDIR
  cp -a $LOCALTIME /mnt/ram0/$LOCALTDIR/
  mkdir -p /mnt/ram0/usr/share
  cp -a "$REPO"/usr/share/terminfo /mnt/ram0/usr/share/
  echo -e "$BLU""Populating /mnt/ram0/dev  ...""$Res"
  cp -a "$REPO"/dev /mnt/ram0/
  UPDATINGDEV_FUNC "/mnt/ram0"
  [ "$DebugVal" = "2" ] && CONTINUE_FUNC
  echo -e "$BLU""Populating /mnt/ram9/lib  ...""$Res"
  mkdir /mnt/ram9/lib
  for i in $LIBF; do  ###KRG to sort unneeded libs out , see further up ###KRG
  [ "$DebugVal" -ge "1" ] && echo -n -e "$Res""`basename $i`"
  [ "$DebugVal" -ge "1" ] && [ -z "`echo $i | grep 'libz\.so\..*\..*\..*'`" ] &&  echo -n -e "$Ora"', '"$Res"
  cp -a $i /mnt/ram9/lib/
  done
  if [ -f "$REPO"/lib/e2initrd_helper ]; then
  [ "$DebugVal" = "0" ] && cp -a "$REPO"/lib/e2initrd_helper /mnt/ram9/lib/ 2>/dev/null #dunno what this is.  ###KRG me not either
  if [ "$DebugVal" -ge "1" ]; then
  echo -e "$Ora"' Copying also '"$Res"'/lib/e2initrd_helper'
  cp -a "$REPO"/lib/e2initrd_helper /mnt/ram9/lib/
  echo
  fi
  fi
  echo -e "$Res"
  busybox ln -s /mnt/ram9/lib /mnt/ram0/lib
  mkdir /mnt/ram0/mnt
  mkdir /mnt/ram0/mnt/ram9
  mkdir /mnt/ram0/root
  mkdir /mnt/ram0/tmp
  mkdir -p /mnt/ram0/var/run
  mkdir /mnt/ram0/proc
  sleep $((SLEEP*3))s
  sync
  echo -e "\\033[0;35m"'Performing a pivot_root to the ramdisk...'
  echo -e "$Res"
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'1_mounts :'"$Res" && busybox mount && echo  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*3))s  ###DBG
  cd /mnt/ram0
  [ "$DebugVal" -ge "1" ] && echo -n -e "$Ora"'Have changed into /mnt/ram0 , pwd:'"$Res"`pwd` && echo  ###DBG
  [ "$DebugVal" = "2" ] && echo  -e "$Red"'ls :'"$Res" && ls --color=auto && echo  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG
  [ "$DebugVal" = "2" ] && echo  -e "$Red"'ls  ./bin :'"$Res" && ls --color=auto ./bin && echo  ###DBG
  [ "$DebugVal" = "2" ] && sleep $((SLEEP*2))s  ###DBG
  [ "$DebugVal" = "2" ] && echo  -e "$Red"'ls ./sbin :'"$Res" && ls --color=auto ./sbin && echo  ###DBG
  [ "$DebugVal" = "2" ] && sleep $((SLEEP*2))s  ###DBG
  [ ! -d ./mnt/ram9 ] && mkdir -p ./mnt/ram9
  busybox mount -o move /mnt/ram9 ./mnt/ram9
  [ ! -d ./sys ] && mkdir ./sys
  busybox mount -o move /sys ./sys
  busybox mount -o move /proc ./proc
  [ "$DebugVal" = "2" ] && CONTINUE_FUNC
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG
  [ "$DebugVal" -ge "1" ] && echo && echo -e "$YEL""Now just before pivot_root :""\\033[;39m"
  [ "$DebugVal" = "2" ] && CONTINUE_FUNC
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'pivot_root now ...'  ###DBG
  pivot_root . old_root
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'...        pivoted' && echo  ###DBG
  [ "$DebugVal" = "2" ] && CONTINUE_FUNC
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG
  [ "$DebugVal" -ge "1" ] && echo -n -e "$Ora"'pwd now :'"$Res"`pwd` && echo  ###DBG
  [ "$DebugVal" = "2" ] && echo -e "$Red"'ls :'"$Res" && ls --color=auto  ###DBG
  [ "$DebugVal" -ge "1" ] && echo -e "$Res"  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*2))s  ###DBG
  cd /  ###KRG
  [ "$DebugVal" -ge "1" ] && echo -n -e "$Ora""ch'ed dir to / , pwd: ""$Res"`pwd` && echo  ###DBG
  [ "$DebugVal" = "2" ] && echo -e "$Red"'ls /:'"$Res" && ls --color=auto /  ###DBG
  [ "$DebugVal" -ge "1" ] && echo -e "$Res"  ###DBG
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'2_mounts :'"$Res" && busybox mount && echo  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*4))s  ###DBG
  busybox killall -9 pup_event_backend_d 2>/dev/null
  busybox killall -9 pup_event_backend_modprobe_protect 2>/dev/null
  busybox killall -9 udevd 2>/dev/null
fuser_func(){  ##+-+2011_10_28 commented for now
  echo -e "$BLU"'Killing all filesystem users ...'"$Res"
  fsUsers=`fuser -m /old_root/* 2>/dev/null | tr '[[:blank:]]' ' ' | tr -s ' ' | tr ' ' '\n' | sort -u | sort -rg`
  for i in $fsUsers; do
  [ "$DebugVal" = "0" ] && echo -n "$i "
  [ "$DebugVal" -ge "1" ] && echo "$i"
  kill -1 $i
  [ "$DebugVal" = "1" ] && /bin/ps -p $i | sed -n '2 p'
  [ "$DebugVal" = "2" ] && /bin/ps -p $i
  sleep 1s
  done
  [ -n "fsUsers" ] && echo
}
  echo -e "$BLU"'Unmounting everything beneath /old_root/* ...'"$Res"
  OR=`mount | grep '/old_root/' | cut -f 3 -d ' ' | sort -r`
  for i in $OR; do
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'unmounting '"$Res""$i"  ###DBG
  if [ "$DebugVal" = "0" ]; then
  busybox umount -r $i 2>/dev/null
  Err=$?
  else
  busybox umount -lrd $i
  Err=$?
  fi
  if [ "$Err" -ne "0" ]; then
  echo -e "$Ora"'failed , trying lazy .. '"$Res"  ###DBG
  busybox umount -lrd $i
  fi
  sleep 1s
  [ -d "/old_root/mnt/`basename $i`" ] && rmdir /old_root/mnt/`basename $i`
  done
  busybox mount -o remount,ro /old_root
  echo -e "$Res"
  [ "$DebugVal" -ge "1" ] && echo -e "$Ora"'3_mounts :'"$Res" && busybox mount && echo  ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*4))s  ###DBG
  [ "$DebugVal" = "2" ] && echo -e "$Red"'ls /old_root:'"$Res" && ls --color=auto /old_root && echo  ###KRG ls -R would show whole partition ###DBG
  [ "$DebugVal" -ge "1" ] && sleep $((SLEEP*4))s  ###DBG
  echo -e "$Gre"
  echo 'Press ANY key and or ENTER to perform fsck'
  echo "or wait $TimeOut seconds ."
  echo 'Scrolling might be allowed by Shift+PageUP/Down .'
  echo -e "$Red"
  echo "or [c] or [k] for drop out into simple console mode"
  echo "or [i] or [b] for drop out into console with busybox init on top ."
  echo -e "$Res"
  echo -n -e "\\033[4;5;34m"'ENTER'"$Res"' -> '"\\033[1;7;32m"
  read -n 1 -t $TimeOut K
  echo -e "$Res"
  if [ "$K" = "c" -o "$K" = "C" -o "$K" = "k" -o "$K" = "K" ]; then
  echo -e "$Gre"
  echo 'Dropping now into simple Single User Mode sh .'
  echo 'Have FUN !'
  echo
  echo -e "$Res"
  login -f root
  exec chroot . sh
  elif [ "$K" = "i" -o "$K" = "I" -o "$K" = "b" -o "$K" = "B" ]; then
  echo -e "$Gre"
  echo 'Dropping now into busybox init Single User Mode sh .'
  echo -e "$GRE"
  echo 'Have MORE FUN !'
  echo
  echo -e "$Res"
  echo '#DUMMY' > /etc/rc.d/rc.sysinit
  chmod 0775 /etc/rc.d/rc.sysinit
  exec chroot . sh -c "exec busybox init" <dev/console >dev/console 2>&1
  else
  exec chroot . sh -c "exec busybox init" <dev/console >dev/console 2>&1
  fi
 ;;
 *)
  echo -e "$RED"  #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
  echo -n "Previous improper shutdown, sorry can only do f.s. check of ext2/3/4."
  echo -e "$Res"
  sleep 5s
  mount -o remount,ro /  ###KRG
  exec busybox init  ###should be something like umount -ar ; reboot ###KRG
 ;;
esac
