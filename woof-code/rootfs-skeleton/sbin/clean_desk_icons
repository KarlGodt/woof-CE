#!/bin/ash
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_clean_desk_icons"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/sbin/clean_desk_icons"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || . /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
#BK called from /root/.xinitrc
#v410 remove icons when drives removed.
#v410 omit icon if optical drive; defer it to pup_event_frontend_d
#w014 bugfix, refresh icons if removable drive swapped when PC turned off.

#************
#KRG

Version=1.2-KRG-MacPup_O2
echo "$0:
This script is deprecated. Removing drive icons from PuppyPin
now is done in pup_event_frontend_d.
Exiting!"
exit 0

########################################################################
#
# CHANGES by Karl Reimer Godt
# 01.0 : testing the TODOS below
#
#
#
# /dev/hda8:
# LABEL="MacPup431_O2"
# UUID="6d9a8e91-c301-4ff8-9875-97ec708cbee8"
# TYPE="ext3"
# DISTRO_NAME='Puppy'
# DISTRO_VERSION=431
# DISTRO_BINARY_COMPAT='puppy'
# DISTRO_FILE_PREFIX='pup'
# DISTRO_COMPAT_VERSION='4'
# PUPMODE=2
# KERNVER=2.6.37.4-KRG-i486-StagingDrivers-2
# PUP_HOME='/'
# SATADRIVES='·'
# USBDRIVES='·sda·'
# Linux·puppypc·2.6.37.4-KRG-i486-StagingDrivers-2·#4·SMP·Thu·Mar·17·06:05:58·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Fr·28.·Okt·12:40:20·GMT-1·2011
#
# TODO1   : BUG?? rm -f /tmp/pup_event_icon_change_flag without reading its contents
#           further vars are sourced from /etc/eventmanager
#
# TODO1.5 : read the content of /tmp/pup_event_icon_change_flag
#           either by sourceing it (would need several
#                     adjustments in frontend_d and eventmanager)
#           or greping (direction for now)
#
########################################################################

#KRG
#************

export LANG=C
. /etc/eventmanager.cfg  #has RAMSAVEINTERVAL, ICONDESK, ICONPARTITIONS, HOTPLUGNOISY, HOTPLUGON, FD0ICON.

PUPPY_PIN="$HOME"/Choices/ROX-Filer/PuppyPin
TMP_PIN=/tmp/pup_event_puppy_pin_ok
#DIR=.pup_event

stateDIR="$HOME/Choices/Puppy"
drive_iconDIR="$stateDIR"/pup_event
mkdir -p "$drive_iconDIR"

DEBUG=1
DEBUGX=1
VERB=-v

ePUPPYPIN=`grep -v "${drive_iconDIR}/drive.*" "$PUPPY_PIN" | grep -v '</pinboard>'`

#v403 /usr/sbin/eventmanager creates this file if all icons need to be rebuilt...
if [ -f /tmp/pup_event_icon_change_flag ];then

###<KRG 2011_10_28>
      ICONDESK=`grep 'ICONDESK' /tmp/pup_event_icon_change_flag`
ICONPARTITIONS=`grep 'ICONPARTITIONS'/tmp/pup_event_icon_change_flag`
      ICONWIPE=`grep 'ICONWIPE' /tmp/pup_event_icon_change_flag`
###</KRG 2011_10_28>

if [ -n "$ICONWIPE" ] ; then  ##+++2011_10_28
 rm $VERB -f /tmp/pup_event_icon_change_flag
 echo "$ePUPPYPIN"   > "$PUPPY_PIN"
 echo '</pinboard>' >> "$PUPPY_PIN"
 rm $VERB -rf "$drive_iconDIR" 2>>$ERR
 #exit ##+-+2011_10_28
fi     ##+++2011_10_28

[ -z "$ICONDESK" -a "$ICONPARTITIONS" = "" ] && exit  ##+++2011_10_28
fi

#remove all invalid drive icons off desktop...
echo -n "" > $TMP_PIN
if [ "$ICONDESK" = "false" ];then
 #leave single 'drives' icon on desktop...
 grep "$drive_iconDIR" "$PUPPY_PIN" >> "$TMP_PIN"
 rm $VERB -rf "$drive_iconDIR"/drive_[^d]* 2>>$ERR #delete all except drive_drives.
else

 #v410 Delete drive_ directories for removed drives...
 #note, this will not detect removed optical and floppy discs (see /sbin/pup_event_frontend_d).
 #Get the directory names for the drives only, not the partitions, to avoid redundant iterations through the for-loop.
 mkdir $VERB -p "$drive_iconDIR"
 DIR_DRVS=`ls -1 "$drive_iconDIR" | sed 's/drive_//' | grep -E "^hd.$|^sd.$|^sr|^mmcblk.$"`
 for ONEDRV in $DIR_DRVS
 do
  [ -d $drive_iconDIR/drive_$ONEDRV ] || continue
  [ -e /sys/block/${ONEDRV} ] || rm $VERB -rf $drive_iconDIR/drive_${ONEDRV}*
 done

 for ONEDRV in `ls -1 /sys/block | grep -vE 'loop|nbf|md|mtd|ram'`
 do
  odPATTERN="$drive_iconDIR/drive_${ONEDRV}"
  OKDRV=`grep "$odPATTERN" "$PUPPY_PIN"`
  if [ "$OKDRV" = "" ];then
   _debug "$odPATTERN not found in $PUPPY_PIN"
   rm $VERB -rf $drive_iconDIR/drive_${ONEDRV}* 2>>$ERR
  else
   [ -d $drive_iconDIR/drive_${ONEDRV} ] || continue #v408
   DRVCUT=`echo -n "$ONEDRV" | cut -c 1,2` #v410
   [ "$DRVCUT" = "sr" ] && continue #v410 omit icon if optical drive; defer it to pup_event_frontend_d
   [ "$DRVCUT" = "sc" ] && continue #v410 scd, ditto.
   if [ "$DRVCUT" = "hd" ];then
    read MEDIACAT </proc/ide/${ONEDRV}/media
    [ "$MEDIACAT" = "cdrom" ] && continue #v410 omit icon if optical drive; defer it to pup_event_frontend_d
   fi
   unset DRVMODEL1 DRVMODEL2 MEDIA VENDOR MODEL
   #w014 user may have swapped removable drives while pc turned off...
   DRVMODEL1=`grep -o '<Summary>.*Size:' $drive_iconDIR/drive_${ONEDRV}/AppInfo.xml | cut -f 2-20 -d ' ' | rev | cut -f 2-20 -d ' ' | rev`
   _debug "DRVMODEL1='$DRVMODEL1'"
   #note, this must be same as done in /sbin/probedisk2...
   case $ONEDRV in fd*) MEDIA='floppy'; VENDOR='Legacy'; MODEL='3"5 inch'
   DRVMODEL2="$VENDOR $MODEL";;
   *)
   #DRVMODEL2=`cat /sys/block/$ONEDRV/device/vendor | tr -s ' '``cat /sys/block/${ONEDRV}/device/model | tr -s ' '`
    test -f /sys/block/$ONEDRV/device/vendor && read VENDOR </sys/block/$ONEDRV/device/vendor
    test -f /sys/block/$ONEDRV/device/model  && read MODEL  </sys/block/$ONEDRV/device/model
    [ "$VENDOR" ] || VENDOR='noInfo@sysBlock'
    [ "$MODEL" ]  || MODEL='noInfo@sysBlock'
    DRVMODEL2="$VENDOR $MODEL"
   ;; esac
   _debug "DRVMODEL2='$DRVMODEL2'"

   if [ "$DRVMODEL1" != "$DRVMODEL2" ];then
    rm $VERB -rf $drive_iconDIR/drive_${ONEDRV}* 2>>$ERR
    continue
   fi
   echo "$OKDRV" >> "$TMP_PIN"
  fi
 done

fi

_debug "`cat $PUPPY_PIN`"

 echo "$ePUPPYPIN"  >  "$PUPPY_PIN"
 cat "$TMP_PIN"     >> "$PUPPY_PIN"
 echo '</pinboard>' >> "$PUPPY_PIN"

_debug "`cat $PUPPY_PIN`"

###END###
