#!/bin/ash
#BK called from "$HOME"/.xinitrc
#v410 remove icons when drives removed.
#v410 omit icon if optical drive; defer it to pup_event_frontend_d
#w014 bugfix, refresh icons if removable drive swapped when PC turned off.

echo "$0: starts `date` ...:"
export LANG=C
. /etc/eventmanager #has RAMSAVEINTERVAL, ICONDESK, ICONPARTITIONS, HOTPLUGNOISY, HOTPLUGON, FLOPPYICON.
. /etc/rc.d/functions4puppy4 # has icon_remove_func

ePUPPYPIN=`grep -v "$HOME/\.pup_event/drive_" "$HOME"/Choices/ROX-Filer/PuppyPin | grep -v '</pinboard>'`

#v403 /usr/sbin/eventmanager creates this file if all icons need to be rebuilt...
if [ -f /tmp/pup_event_icon_change_flag ];then
 IconChange=`cat /tmp/pup_event_icon_change_flag`
fi
echo $0:IconChange=$IconChange #>/dev/console

if [ "$IconChange" = "ICONWIPE" ]; then
 #rm -f /tmp/pup_event_icon_change_flag
 rm $VERB -f "$HOME"/Choices/ROX-Filer/PuppyPin
 echo "$ePUPPYPIN"  >  "$HOME"/Choices/ROX-Filer/PuppyPin
 echo '</pinboard>' >> "$HOME"/Choices/ROX-Filer/PuppyPin
 rm $VERB -rf "$HOME"/.pup_event/drive_*
 pidof sync || sync
 sleep 1
 #rox -p "$HOME"/Choices/ROX-Filer/PuppyPin
 #. /etc/rc.d/functions4puppy4
 echo "$0:now changing icons"
  ##REM: If floppy is enabled in BIOS but not connected to MB, mut and partprobe hang
  # Floppy=`mut --noserv drivelist | grep -o fd[0-9]\+`
  # pidof mut && killall mut
  # echo "Floppy=$Floppy"
  # Partitions=`partprobe -s | grep -vE 'none|swap' | cut -f 1 -d '|' | cut -f 3 -d '/'`
  # echo "Partitions=$Partitions"
  ##
  Floppy=`ls -1 /sys/block/fd[0-9]* 2>/dev/null`
  Partitions=`probepart | grep -vE "none|swap|Ext'|Extended" | cut -f 1 -d '|' | cut -f 3 -d '/'`
  [ "$Floppy" != "" ]     && for i in $Floppy;     do icon_remove_func $i; done; i=0
  [ "$Partitions" != "" ] && for i in $Partitions; do icon_remove_func $i; done; i=0
  sleep 1
 # for i in $Floppy; do icon_unmounted_func $i floppy; done; i=0
 # for i in $Partitions; do icon_unmounted_func $i drive; done ; i=0
 # Mounted=`mount | grep mnt | cut -f 1 -d " " | cut -f 3 -d '/'`
 # for i in $Mounted; do icon_mounted_func $i drive; done; i=0
 # Rootdevice=`df | grep -w '/' | tr -s " " | cut -f 1 -d " " | cut -f 3 -d '/'`
 # icon_mounted_func $Rootdevice drive
 # sync
 # rm -f /tmp/pup_event_icon_change_flag


 #icon_remove_func
 #icon_unmounted_func
 #icon_mounted_func
 Cleandeskicons=1

            for i in $Floppy ; do
                DRV_NAME=$i
                DRV_CATEGORY="floppy"
                icon_unmounted_func $DRV_NAME $DRV_CATEGORY
            done

            Drives=`probedisk2 | cut -f 1 -d '|'`
            echo Drives=$Drives
            PROBEPART="`probepart -k | grep -E '\|ext4\||\|ntfs\||\|msdos\||\|vfat\||\|ext2\||\|ext3\||\|iso9660\||\|xfs\||\|reiser'`"
            #Partitions=`probepart | cut -f1 -d '|'`
            for i in $Partitions ; do
                DRV=`echo $i | tr -d [0-9][0-9]`
                #DRV_NAME=`echo $i | cut -f 3 -d '/'`
                DRV_CATEGORY=`probedisk2 | grep  $DRV | cut -f 2 -d '|'`
                DRV_NAME=$i
                DRVINFO="`echo "$PROBEPART" | grep "$i" | cut -f 1,2,3 -d '|' | tr '\n' ' '`"
                FSTYPE="`echo -n "$DRVINFO" | cut -f 2 -d '|'`"
                echo FSTYPE=$FSTYPE
                echo DRV_NAME=$DRV_NAME
                echo DRV_CATEGORY=$DRV_CATEGORY
                icon_unmounted_func $DRV_NAME $DRV_CATEGORY $FSTYPE
            done

        Mounted=`/bin/df | tr -s ' ' | cut -f 1 -d " " | tr [A-Z] [a-z] | sed 's/filesystem//'`
        for i in $Mounted; do
        FSTYPE=`echo "$PROBEPART" | grep $i | cut -f 2 -d '|'`
        DRV_NAME=`echo $i | cut -f 3 -d '/'`
        DRV=`echo $i | tr -d [0-9][0-9]`
        DRV_CATEGORY=`probedisk2 | grep  $DRV | cut -f 2 -d '|'`
        echo FSTYPE=$FSTYPE
        echo DRV_NAME=$DRV_NAME
        echo DRV_CATEGORY=$DRV_CATEGORY
        icon_mounted_func $DRV_NAME $DRV_CATEGORY $FSTYPE
        done
    Cleandeskicons=0
 exit
fi


#remove all invalid drive icons off desktop...
echo -n "" > /tmp/pup_event_ok_pin

if [ "$ICONDESK" = "false" ];then
 #leave single 'drives' icon on desktop...
 grep "$HOME/\.pup_event/drive_drives" "$HOME"/Choices/ROX-Filer/PuppyPin >> /tmp/pup_event_ok_pin
 rm $VERB -rf "$HOME"/.pup_event/drive_[^d]*  #delete all except drive_drives.

else
 #v410 Delete drive_ directories for removed drives...
 #Note, this will not detect removed optical and floppy discs (see /sbin/pup_event_frontend_d).

 #Get the directory names for the drives only, not the partitions,
 #to avoid redundant iterations through the for-loop.
 DIR_DRVS=`ls -1 "$HOME"/.pup_event | sed 's/drive_//' | grep -E "^hd.$|^sd.$|^sr|^mmcblk.$"`

 for ONEDRV in $DIR_DRVS
 do
  [ -d "$HOME"/.pup_event/drive_$ONEDRV ] || continue
  [ -e /sys/block/${ONEDRV} ] || rm -rf "$HOME"/.pup_event/drive_${ONEDRV}*
 done

 for ONEDRV in `ls -1 /sys/block | grep -vE 'loop|ram'`
 do
  odPATTERN="$HOME/\.pup_event/drive_${ONEDRV}"
  OKDRV=`grep "$odPATTERN" "$HOME"/Choices/ROX-Filer/PuppyPin`

  if [ "$OKDRV" = "" ];then
   rm $VERB -rf "$HOME"/.pup_event/drive_${ONEDRV}*
  else
   [ -d "$HOME"/.pup_event/drive_${ONEDRV} ] || continue #v408

   DRVCUT="`echo -n "$ONEDRV" | cut -c 1,2`" #v410
   [ "$DRVCUT" = "sr" ] && continue #v410 omit icon if optical drive; defer it to pup_event_frontend_d
   [ "$DRVCUT" = "sc" ] && continue #v410 scd, ditto.

   if [ "$DRVCUT" = "hd" ];then
    MEDIACAT="`cat /proc/ide/${ONEDRV}/media`"
    [ "$MEDIACAT" = "cdrom" ] && continue #v410 omit icon if optical drive; defer it to pup_event_frontend_d
   fi

   #w014 user may have swapped removable drives while pc turned off...
   DRVMODEL1=`grep -o '<Summary>.*Size:' "$HOME"/.pup_event/drive_${ONEDRV}/AppInfo.xml | cut -f 2-20 -d ' ' | rev | cut -f 2-20 -d ' ' | rev`
   #note, this must be same as done in /sbin/probedisk2...
   DRVMODEL2="`cat /sys/block/$ONEDRV/device/vendor | tr -s ' '``cat /sys/block/${ONEDRV}/device/model | tr -s ' '`"
   if [ "$DRVMODEL1" != "$DRVMODEL2" ];then
    rm $VERB -rf "$HOME"/.pup_event/drive_${ONEDRV}*
    continue
   fi
   echo "$OKDRV" >> /tmp/pup_event_ok_pin
  fi
 done

fi

#if [ "`cat /tmp/pup_event_ok_pin`" != "" ];then
 echo "$ePUPPYPIN" >  "$HOME"/Choices/ROX-Filer/PuppyPin
 cat /tmp/pup_event_ok_pin >> "$HOME"/Choices/ROX-Filer/PuppyPin
 echo '</pinboard>' >> "$HOME"/Choices/ROX-Filer/PuppyPin
#fi

echo "$0: finished `date`"
###END###
