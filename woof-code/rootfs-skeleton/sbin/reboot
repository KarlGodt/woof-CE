#!/bin/ash
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_reboot"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/sbin/reboot"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP='1'; TWO_VERSION='1'; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#

. /etc/DISTRO_SPECS
Version='1.1 KRG'

ERR=/dev/null;OUT=$ERR;VERB='';L_VERB='';A_VERB='';QUIET='-q'; ##+++2012-03-10
[ "$DEBUG" ] && { ERR=/dev/stderr;OUT=/dev/stdout;VERB=-v;L_VERB=--verbose;A_VERB=-verbose;QUIET=''; }

usage(){
MSG="
$0 [help][force|debug|verbose][BB PARAMETERS]
Version $Version .
Puppy reboot script to run
/etc/rc.d/rc.shutdown and finally
/bin/busybox reboot .
The Simple PARAMETERS verbose,debug,force
are passed to rc.shutdown,
any other PARAMETERS get passed to busybox reboot .
`busybox reboot --help 2>&1`
"
if [ "$2" ];then
MSG="$MSG

$2
"
fi
echo "$MSG"
[ "$DISPLAY" ] && xmessage -bg black -fg yellow "$MSG"
exit $1
}

# REM: Parse Options
#grep $QUIET -E 'help|usage' <<<$@ && usage 0 ##+++2012-03-10

for p_ in $@;do
[ "$DEBUG" ] && echo $p_
case $p_ in
*help|*usage)
/etc/rc.d/rc.shutdown $p_
usage 0;;
*force) FORCE=1; RC="$RC $p_" ;;
*debug|*verbose) RC="$RC $p_" ;;
*) RBOOT="$RBOOT $p_" ;;
esac;done

# REM: test if X running, then run wmreboot
#if [ "`ps | grep -w 'X' | grep -v 'grep'`" ]; then
if [ "`pidof X`" -a ! "$FORCE" ]; then ##+++2012-03-10
echo "Using '`which wm${0##*/}`' '$@'..."
exec wmreboot "$@"
fi

# REM: Reboot problems with Dell computers ... :(
read KERNEL_CMDLINE </proc/cmdline # before umount -ar in rc.shutdown

# REM: Do something to get reboot debug output to console ..
#  sys .. ignore_loglevel :
   echo 'Y' >/sys/module/printk/parameters/ignore_loglevel
#  proc .. printk : console_loglevel default_message_loglevel minimum_console_loglevel default_console_loglevel
   echo -e "7\t7\t0\t7" >/proc/sys/kernel/printk
# ACPI ( see linux/Documentation/acpi/debug.txt )
 # set default values ( f=max )
 ACPI_DEBUG_LVL_MSK=ffffffff
 ACPI_DEBUG_LAY_MSK=ffffffff

if test -f /sys/module/acpi/parameters/debug_level; then
echo "0x$ACPI_DEBUG_LVL_MSK" >/sys/module/acpi/parameters/debug_level
test -f /sys/module/acpi/parameters/debug_layer &&
echo "0x$ACPI_DEBUG_LAY_MSK" >/sys/module/acpi/parameters/debug_layer
else
 echo -e "$Red1""ACPI debug NOT enabled in KERNEL ?""$Normal0"
fi
#


# REM: Run rc.shutdown
SHUT_HOW='rebooting' /etc/rc.d/rc.shutdown "$RC"
RV="$?"
[ "$RV" = '199' -a ! "$FORCE" ] && exit 0
[ "$RV" != '0' -a ! "$FORCE" ]  && exit 1

__standalone_kernel_version__(){
KERNEL=`uname -r`
if [ "${KERNEL:0:1}" = 3 ] ; then
 RBOOT="$RBOOT -f -n"
elif [ "${KERNEL:0:1}" = 2 -a "${KERNEL:2:1}" = 6 -a "`echo "${KERNEL:4:2}" | sed 's|[^[:digit:]]||'`" -gt 34 ] ; then
 RBOOT="$RBOOT -f -n"
fi
}

# REM: Reboot worked for kernel 2.6.30 , but not later ones .. :(
. /etc/rc.d/f4puppy5
_kernel_version5
case $KERNEL_RELEASE in
2.6.3[1-9]*|3*) RBOOT="$RBOOT -f -n";;
esac

# REM : Give final reboot message containing OS, KERNEL and kCMDLINE
TIME_OUT=5s

__bb_reboot__help__(){
    cat >&1 <<EoI
bash-3.00# busybox reboot --help
BusyBox v1.21.1 (2013-07-11 04:56:32 GMT+1) multi-call binary.

Usage: reboot [-d DELAY] [-n] [-f]

Reboot the system

    -d SEC  Delay interval
    -n  Do not sync
    -f  Force (don't go through init)
EoI
}

echo -e '\033[1;34m'"$DISTRO_NAME $DISTRO_VERSION
$KERNEL_RELEASE
$KERNEL_CMDLINE :
Executing busybox reboot '$RBOOT' in '$TIME_OUT' ..."'\033[0;39m'
# REM : Finally reboot ...
sleep $TIME_OUT
#exec /bin/busybox reboot $RBOOT
/bin/busybox reboot $RBOOT
# Very End of this file 'sbin/reboot' #
###END###
