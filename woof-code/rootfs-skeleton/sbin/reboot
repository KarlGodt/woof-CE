#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_reboot"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/sbin/reboot"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#

debugging_variables(){
ERR=/dev/null;OUT=$ERR;VERB='';L_VERB='';A_VERB='';Q='-q'; ##+++2012-03-10
[ "$DEBUG" ] && { ERR=/dev/stderr;OUT=/dev/stdout;VERB=-v;L_VERB=--verbose;A_VERB=-verbose;Q=''; }
}
#debugging_variables

__old_option_parser__(){
#[[ "$@" = '-h' ]] && exec /bin/busybox reboot --help
#[[ "$@" =~ 'help' ]] && exec /bin/busybox reboot --help
echo "$@" | grep $Q -iE '\-h|help|usage' && { echo -e "\\033[0;32m`file $0`\nPuppy Linux Wrapper that should call busybox reboot:\\033[0;39m\n";exec /bin/busybox reboot --help; }  ##+++2013-03-11
echo "$@" | grep $Q -iE 'verbose|debug' && { DEBUG=Y; debugging_variables; }
echo "$@" | grep $Q -iE 'test|check' && { DEBUG=Y; debugging_variables;set -n; }
}

usage(){
MSG="
$0 [help[|force|debug|verbose]|BB PARAMETERS]
Version $Version .
Puppy reboot script to run
/etc/rc.d/rc.shutdown and finally
/bin/busybox reboot .
Simple PARAMETERS
verbose,debug,force are passed to rc.shutdown,
any other PARAMETERS get passed to busybox reboot:
`busybox reboot --help 2>&1`
"
if [ "$2" ];then
MSG="$MSG

$2
"
fi
echo "$MSG"
[ "$DISPLAY" ] && xmessage -bg black -fg yellow "$MSG"
exit $1
}

for p_ in $@; do
[ "$VERBOSE" ] && echo $p_
case $p_ in
-?help|-?usage)
/etc/rc.d/rc.shutdown $p_
usage 0;;
-?force) RC="$RC $p_";   FORCE=1;;
-?debug|-?verbose) RC="$RC $p_" ;;
*) RBOOT="$RBOOT $p_" ;;
esac;done

if [ ! "$FORCE" ]; then
pidof X 1>$OUT 2>$ERR && { echo "X is still running. Please run wm${0##*/}. Exiting script.";exit 1; }
fi

if [ ! "$FORCE" ]; then
# REM: for the last message on screen get some variables
test -f /etc/DISTRO_SPECS && . /etc/DISTRO_SPECS
_kernel_version3
test -f /proc/cmdline && read kCMDLINE </proc/cmdline
fi # FORCE

# REM: Run rc.shutdown ...
SHUT_HOW='rebooting' /etc/rc.d/rc.shutdown
Err=$?
if [ ! "$FORCE" ]; then
[ $Err = 199 ] && exit 0
fi

#KERNEL=`uname -r`

# REM: Try to handle Dell computer reboot problems ...
if [ ! "$FORCE" ]; then
if dmidecode -t0 | grep -i 'vendor' | grep $Q -i 'dell'; then
 if [ "${KERNEL:0:1}" = 3 ] ; then
  RBOOT="$RBOOT -f -n"
 elif [ "${KERNEL:0:1}" = 2 -a "${KERNEL:2:1}" = 6 -a "`echo "${KERNEL:4:2}" | sed 's|[^[:digit:]]||'`" -gt 30 ] ; then
  RBOOT="$RBOOT -f -n"
 fi
fi
fi

##KERN="${KERNEL//[^\.[:digit:]]/}"
#KERN="${KERNEL//[^\.[:digit:]]/ }"
##K="${KERN//\./ }"
#KER="${KERN%% *}"
##Kmaj=${K%% *}
##Kmaj=${K%%\.*}
#K="${KER//\./ }"
#Kmin=`echo $K |awk '{print $2}'`
#Ksub=`echo $K |awk '{print $3}'`
#Kpat=`echo $K |awk '{print $4}'`
#if [ "${KERNEL:0:1}" = 3 ] ; then
#RBOOT="$RBOOT -f"
#elif [ "${KERNEL:0:1}" = 2 -a "${KERNEL:2:1}" = 6 -a "${sub}" -ge 34 ]; then
#RBOOT="$RBOOT -f"
#fi

if [ ! "$FORCE" ]; then
echo -e "\\033[0;36m
$DISTRO_NAME $DISTRO_VERSION $KERNEL_VERSION
\\033[0;39m$kCMDLINE
\\033[1;36m:
\\033[0;36mExecuting /bin/busybox reboot \"$@\" $RBOOT
\\033[1;36m:\\033[0;39m"

else
set --  # REM: -- unsets parameter line, single dash - not
RBOOT='-n -f'
fi

/bin/busybox reboot "$@" $RBOOT
exec /bin/busybox reboot "$@" $RBOOT

# Very End of this file 'sbin/reboot' #
###END###
