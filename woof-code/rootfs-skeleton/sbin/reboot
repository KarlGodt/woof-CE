#!/bin/ash
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_reboot"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/sbin/reboot"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP='1'; TWO_VERSION='1'; TWO_VERBOSE='1'; TWO_DEBUG='1'; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#

source /etc/DISTRO_SPECS

#ERR=/dev/null;OUT=$ERR;VERB='';L_VERB='';A_VERB='';QUIET='-q'; ##+++2012-03-10
#[ "$DEBUG" ] && { ERR=/dev/stderr;OUT=/dev/stdout;VERB=-v;L_VERB=--verbose;A_VERB=-verbose;QUIET=''; }

usage(){ echo "help for $0:
When runs , checks if X not running .
If X is running executing `which wmreboot` .
wmreboot kills X and wm and
$0 runs /etc/rc.d/rc.shutdown
and finally executes /bin/busybox reboot .

Options:

busybox reboot options:
`busybox reboot --help 2>&1`
"

/etc/rc.d/rc.shutdown --help ; }

# REM: Process parameter option arguments
PARAMETERS="$@"
#PARAMETERS=`echo "$PARAMETERS" | tr '[[:upper:]]' '[[:lower:]]'`
for param_ in $PARAMETERS; do
echo $param_ >$OUT
case $param_ in
#h|-h|help|-help|--help) usage;exit 0;;
[Hh]|-[Hh]|[-]*[Hh]*|[Hh]*) usage;exit 0;;

v|-v|verbose|[-]*verbose) VERBOSE=1; Q=''; QUIET=$Q; DBG=-d
VERB=-v;L_VERB=--verbose;A_VERB=-verbose
;;
D|-D|debug|[-]*debug) DEBUG=1
ERR=/dev/console;OUT=/dev/console #;output=$out $err
;;
s|-s|silent|[-]*silent) SILENT=1
ERR=/dev/console;OUT=/dev/null
;;
q|-q|quiet|[-]*quiet) QUIET=1
ERR=/dev/null;OUT=/dev/null #;output=$out $err
;;
*) BB_REBOOT="$BB_REBOOT $param_";;

esac
done

#[ "$DISPLAY" ] && exit

#if [ -n "`ps | grep 'X :' | grep -v 'grep'`" ]; then
if [ "`pidof X`" ]; then
exec wmreboot $PARAMETERS
fi

# REM: if things are worse ( broken /sbin/init,login or rc.sysinit )
#      and ctrl+alt+del triggers reboot
#      mount /proc if neccessary...
mountpoint $Q /proc || { mkdir -p /proc; mount -t proc proc /proc; }

# REM: PROC_CMDLINE is used at the final reboot message at the end,
#      needs to be read here before rc.shutdown umount's -a unmounts /proc
read PROC_CMDLINE </proc/cmdline

# REM: now run rc.shutdown...
retVAL=''
SHUT_HOW='rebooting' /etc/rc.d/rc.shutdown $PARAMETERS || retVAL=$?
if [ "$retVAL" ];then
case $retVAL in
199)
 # REM: 199 special exit code in rc.shutdown in interactive mode
 #      to cancel reboot process
 # REM: return || exit in case rc.shutdown is sourced ..
 echo;return 0 2>$ERR || exit 0;;
*)
 # REM: either reboot anyway despite errors or exit now.. (TODO)
 echo -e "\n\e[1;31m""ERROR: < $retVAL > canceling rc.shutdown""\e[0;39m"
 # REM: return || exit in case rc.shutdown is sourced ..
 return $retVAL 2>$ERR || exit $retVAL
;;
esac
fi

# REM: unused function - it is here for easy memory :
__say__busybox__reboot__options__(){
cat >&1 <<EoI

BusyBox v1.18.3 (2011-05-01 19:45:13 CEST) multi-call binary.

Usage: reboot [-d DELAY] [-n] [-f]

Reboot the system

Options:
   -d SEC  Delay interval
   -n  Do not sync
   -f  Force (don't go through init)

EoI
}

# REM: Now a bunch of testing code to work around
#      reboot stalls or hangs (halts) oe whatever
#      on Dell Optiplex
BB_REBOOT="$BB_REBOOT -f -n"  # set default to -f -n

# REM: need VERSION and PATCHLEVEL and if 2.6 SUBLEVEL;
#      because 2.6.30 reboots without problems,
#      but 2.6.31 already shows halt (ACPI S1 standby) behaviour ..
type -t _kernel_version5 >>$OUT && _kernel_version5 || {

    #KERNEL_MAJOR=`uname -r |cut -f1 -d.`
    #KERNEL_THREE=`uname -r |cut -f3 -d. |grep -o -e '^[0-9]*'`
   K_VERSION=`uname -r |cut -f1 -d.`
K_PATCHLEVEL=`uname -r |cut -f2 -d.`
  K_SUBLEVEL=`uname -r |cut -f3 -d. |grep -o -e '^[0-9]*'`
}

#if [ "$KERNEL_MAJOR" -eq 2 -a "$KERNEL_THREE" -lt 37 ] ; then
#if [ "$KERNEL_MAJOR" -eq 2 -a "$KERNEL_THREE" -lt 34 ] ; then
#if [ "$KERNEL_MAJOR" -eq 2 -a "$KERNEL_THREE" -lt 31 ] ; then
if [ $K_VERSION -eq 2 -a $K_PATCHLEVEL -eq 6 -a $K_SUBLEVEL -lt 31 ]; then
BB_REBOOT="${BB_REBOOT/ \-f \-n/}"
fi

echo -e "\\033[1;33m
$KERNEL_RELEASE for $DISTRO_NAME $DISTRO_VERSION
with setup: $PROC_CMDLINE
...
Executing /bin/busybox reboot '$BB_REBOOT'
:\\033[0;39m"

_reboot_works_not_(){
# REM: rc.shutdown does umount -a at the very end,
#      so if /proc is in /etc/fstab (which is the default)
#      /proc should be unmounted here
if mountpoint $Q /proc; then
        ps | awk '{if ($1 == 1) print}' | grep 'init' | grep -v 'grep'  ##DEBUG
 if [ "`ps | awk '{if ($1 == 1) print}' | grep 'init' | grep -v 'grep'`" ]; then
  kill -9 1 || exec /bin/busybox reboot $BB_REBOOT   ##TEST using kill pid nr. 1
 else          exec /bin/busybox reboot $BB_REBOOT
 fi
else          exec /bin/busybox reboot $BB_REBOOT
fi
}

[ "$DEBUG" ] && {
ps | grep -v '\['
echo
cat /proc/mounts
echo
}

# reboot hangs probably because /dev remounted ro
[ -f /proc/mounts ] || mount -t proc proc /proc
DEVMNT=`cut -f1-2 -d' ' /proc/mounts | grep ' /dev$'`
if echo "$DEVMNT" | grep $Q ' /dev$'; then
 DEVFS=`echo "$DEVMNT" | cut -f1 -d' ' | head -n1`
 mount -o remount,rw $DEVFS /dev || mount -o remount,rw /dev/root /
  #create links stderr stdout stdin
 ln -sfn ../proc/self/fd /dev/fd || mkdir -p /dev/fd
 ln -sf fd/0 /dev/stdin
 ln -sf fd/1 /dev/stdout
 ln -sf fd/2 /dev/stderr
else
 mount -o remount,rw /dev/root /
fi

[ "$DEBUG" ] && {
echo
cat /proc/mounts
echo
sleep 3
ps | grep -v '\['
sleep 3
ps | grep -v '\['
sleep 3
ps | grep -v '\['
}

sleep 3

###use exec###
_late_exit1(){
echo "Would now exec /bin/busybox reboot '$BB_REBOOT'"
echo "But exiting instead."
exit
}
#[ "$DEBUG" ] && [ "$DEBUG" -ge 2 ] &&  _late_exit1

_use_exec(){
echo "Executing exec /bin/busybox reboot '$BB_REBOOT'"
exec /bin/busybox reboot $BB_REBOOT
}
#_use_exec
###use exec###

_late_exit2(){
echo "Would now /bin/busybox reboot '$BB_REBOOT'"
echo "But exiting instead."
exit
}
[ "$DEBUG" ] && [ "$DEBUG" -ge 2 ] && _late_exit2

echo "Executing /bin/busybox reboot '$BB_REBOOT'"
/bin/busybox reboot $BB_REBOOT  ##TEST do not use exec
