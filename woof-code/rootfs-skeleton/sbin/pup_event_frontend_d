#!/bin/ash
#(c) Copyright 2008 Barry Kauler puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#this is /sbin/pup_event_frontend_d, created June 2008 for Puppy Linux 4.x, by Barry Kauler.
#This script is part of 'pup_event', my (very) light-weight alternative to udev.
#responds to events posted to /tmp/pup_event_backend_s by /sbin/pup_event_backend_d.
#this script is launched from $HOME/.xinitrc.
#v407 added hotplug support for zip and ls120 diskettes.
#v407 hotplug fix for /dev/hd* optical drives.
#v408 fix for k2.6.21.7, does not set DEVTYPE.
#v408 rewrite, now works by polling /sys/block.
#v410 rerwin: detect optical disc not inserted.
#v410 avoid exact overlapping icons.
#v411 rerwin: avoid icon getting duplicated if it is renamed
#v412 workaround, someone had RAMSAVEINTERVAL not set.
#w004 LANG=C, faster. /bin/ash, even faster.
#w007 mouse inactivity computer power-down.
#w015 handle request to update one drives icons.
#w471 fix for slow rox startup on slow cpus.
#w476 add support for ext4 f.s.
#w482 k2.6.25.16 /proc/partitions (read by probepart) can be slow to update.
#v424 add right-click menu item to unmount all mounted partitions.
#v424 experimental automatic unmounting.
#v431 shinobar: fix for overlapping icons at some screen resolutions.
#091208 fine-tune placement of desktop drive icons.
#091223 partial fix, some interfaces, no change in /sys/block when insert/remove a card.
#100613 some locales (ex: nl_BE) have ',' instead of '.' in numeric, ex o/p of 'dc'.

########################################################################
#
# CHANGES by Karl Reimer Godt :
# 01.0 : Implemented parameters start,stop,restart .
# 02.0 : Added support for recognition of /tmp/pup_event_icon_change_flag
#        to support redraw of drive icons without having to restart X .
# 03.0 : Added support for recognition of jwm tray height ...
#        STILL TODO !! ie now have
#           Xdialog --backtitle "JWM Taskbar Configuration" \
#           --title "Taskbar" \
#           --spinbox "Choose the Tray Height" 0 0 10 48 $SET_NOW 'Tray height:' 2>$TMP
#        in /usr/local/jwmconfig2/taskbarHeight .
#
# 04.0 : Added support for udf .
#
# 05.0 : Totally reworked some of my code ..
#        Invented ZCDPOLL var also in /usr/sbin/eventmanager .
#        Renamed HOTPLUGON to DESKDAEMON .
#        Took care of single 'drives' icon .
#        Introduced /tmp/pup_event_manager.flg
#         prior to /tmp/pup_event_icon_change_flag .
#
# 06.0 : Added support for battery check .
# 07.0 : Added default CLEAN_DESK_ICONS_func to
#        redraw desktop drive icons
#
# #OLD /dev/sda5:
# /dev/sda2
# #OLD LABEL="MacPup430_F3"
# LABEL="MacPup_F_3"
# #OLD UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# UUID="f7956448-f63f-44f4-a725-f15dd21add97"
# TYPE="ext3"
# DISTRO_VERSION=430              #481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"    #"ubuntu"·#"puppy"·······#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"        #"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"       #"2" #4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# #OLD KERNVER=2.6.30.6-KRG-i486
# KERNVER=3.4.9-KRG-iCore2-smp-pae-srv1000gz
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# #OLD Linux·puppypc·2.6.30.6-KRG-i486·#1·SMP·Sun·Jan·2·20:32:12·GMT-1·2011·i686·GNU/Linux
# Linux puppypc 3.4.9-KRG-iCore2-smp-pae-srv1000gz #1 SMP Sun Sep 16 18:34:45 GMT+1 2012 i686 GNU/Linux
# #OLD Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# Xserver=/usr/X11R7/bin/Xorg
# #OLD $LANG=en_US
# $LANG=de_DE.utf8
# #OLD today=Mon·Oct·24·22:53:50·CEST·2011
# today=Mon Sep 17 15:09:38 GMT+1 2012
#
# TODO1: floppy drives : fd0 shown instead of fd1 ??
#
# TODO2: change path to /tmp/wmexitmode.txt ~FIXED
# TODO3: inotifywait and freememapplet ... ~looks OK
#
# TODO 4 : add xmessage warning if powertimeout reached ~FIXED
# TODO 5 : truncate powertimeout logfile to powertimeout lines +10 NOT , logfile without further purpose , commented out
# TODO 6 : source /etc/eventmanager in icon_change_flag part
#          for changes regarding drive icons ~FIXED
#
# TODO 7 : fix killzombies func ~DONE
# TODO 8 : change '$0' to 'readlink -e $0' ...
#
########################################################################

trap "echo $0:PID=$$::Stopped.;exit 1" HUP INT QUIT KILL TERM

OUT=/dev/null;ERR=$OUT
[ "$DEBUG" ] && { OUT=/dev/stdout;ERR=/dev/stderr; }
[ "$DEBUG" = "2" ] && set -x

Version='1.1-simple Macpup_F3-Puppy_Linux-430/2 KRG'
usage(){
MSG="
$0 [help|version|start|stop|restart]

Script daemon to run in background to manage the
Puppy specific drive icons on the desktop.
The eventmanager GUI in the system menu alters the
configuration file /etc/eventmanager, which is read
by this script. Other configuration files used :
/etc/rc.d/PUPSTATE /etc/rc.d/functions4puppy4
"
echo "$MSG"
[ "$DISPLAY" ] && xmessage -bg blue3 "$MSG"
exit $1
}


########### define tmp dir #####
###+++2012-01-18
if [ -d /tmp/xwin ]; then
TMPXWIN='/tmp/xwin'
else
TMPXWIN='/tmp'
fi
###+++2012-01-18
########### define tmp dir #####


########### check program ##############
###++2012-01-21
programname='/sbin/pup_event_frontend_d'
if [ "$0" != "$programname" ];then
if [ ! -f "$programname" ];then
echo "ERROR : `basename $programname` should be installed into /sbin
exiting now "
#define ENOENT       2  /* No such file or directory */
return 2 || exit 2
else
echo "ERROR : $programname is not $0 ..
Maybe sourced ?? exiting ."
#define EPERM        1  /* Operation not permitted */
return 1 || exit 1
fi;fi
###++2012-01-21
########### check program ##############

get_lineno(){
    if [ "$1" ] ; then
    echo `grep -n -w -m1 "$1" "$programname" |cut -f1 -d':'`
    else
    echo 'UNKNOWN'
    fi
}

########### parameters start stop restart ##############
stop_func(){
echo 'stop' >"$TMPXWIN"/wmexitmode.txt
for n in `seq 9 -1 1`;do echo -n "$n ";sleep 1;done;echo
rm "$TMPXWIN"/wmexitmode.txt
if ! ps | grep 'pup_event_frontend_d' |grep -v 'grep'| grep -v "$1";then
return "$?"
else
return "$?";fi; }

echo "
$0 $1
"

case "$1" in
stop)
stop_func stop
RV=$?;if [ "$RV" = '0' ];then
echo 'stopped .';else echo 'error occurred !';fi
return "$RV" || exit "$RV";;
restart)
stop_func restart
RV="$?";if [ "$RV" = '0' ];then
echo 'stopped .';else echo 'error occurred !';return "$RV" || exit "$RV";fi;;
start|"")
:;;
help) usage 0;;
version) echo -e "\n$0: Version '$Version'\nTry help for more info\n";exit 0;;
*)
echo "implemented parameters : help|version|stop|restart|start|NULL(means start)
"
#define EINVAL      22  /* Invalid argument */
return 22 || exit 22;;
esac
########### parameters start stop restart ##############


########### battery ##########################
#support warning for low battery
BAT_0_info_file=/proc/acpi/battery/BAT0/info
BAT_0_state_file=/proc/acpi/battery/BAT0/state
BAT_0='0'
if [ -f "$BAT_0_info_file" ];then

BAT_0_DESIGN_CAPACITY=`grep 'design capacity:' "$BAT_0_info_file"`
BAT_0_DESIGN_CAPACITY="${BAT_0_DESIGN_CAPACITY//[^[:digit:]]/}"
BAT_0_WARN=$((BAT_0_DESIGN_CAPACITY/15))

BAT_0_CURRENT=`grep 'remaining capacity:' "$BAT_0_state_file"`

BAT_0_CURRENT="${BAT_0_CURRENT//[^[:digit:]]/}"
[ "$BAT_0_DESIGN_CAPACITY" -a "$BAT_0_CURRENT" ] && BAT_0='1'
fi
########### battery #########################################


################# ORIG #####################################
#v424 experiment, automatic unmounting...
auto_unmount_func() {
 #for ONEMNTPT in `mount | grep '^/dev/' | grep -vE '^/dev/loop|^/dev/ram' | cut -f 3 -d ' ' | grep -v '^/initrd/' | grep -v '^/$' | tr '\n' ' '`
 for oneMNTPT in `grep '^/dev/[fhms][md]' /proc/mounts | grep -vE '^/dev/md|/initrd/' | awk '{print $2}'`
 do
  if [ "`fuser -v -m $oneMNTPT`" = "" ];then
   sync
   umount "$oneMNTPT"; umVAL=$?
   #code from pmount: fix zombie process prevents partition unmount, invisible to fuser...
   if [ "$umVAL" -ne 0 ];then
    ZOMBIES=`/bin/ps -H -A | grep '<defunct>' | sed 's/^[[:blank:]]*//g;s/  /|/g' | grep -v '|||' | cut -f 1 -d ' ' | tr '\n' ' '`
    for oneZOMBIE in $ZOMBIES
    do
     /bin/ps --no-header -p $oneZOMBIE && kill $oneZOMBIE 2>$ERR
    done
    umount "$oneMNTPT"; umVAL=$?
   fi
  fi
 done
}

free_initrd_func() { #UniPup, runs entirely in initramfs.
 SIZEFREEK=`free | grep '^Total:' | tr -s ' ' | cut -f 4 -d ' '` #BusyBox v1.4.2 initrd.gz
 SIZEFREEM=`expr $SIZEFREEK \/ 1024`
 [ -s /tmp/pup_event_sizefreem ] && PREVSIZEFREEM=`cat /tmp/pup_event_sizefreem`
 [ "$PREVSIZEFREEM" = "$SIZEFREEM" ] && return
 #save to a file, freememapplet can read this...
 echo "$SIZEFREEM" > /tmp/pup_event_sizefreem
}

free_func() { #called every 4 seconds.
 case $PUPMODE in
  6|12) #frugal to whole partition|frugal to save-file (on HDD)
   SIZEFREEM=`/bin/df -m | grep -m1 ' /initrd/pup_rw$' | tr -s ' ' | cut -f 4 -d ' '`
  ;;
  *)
   SIZEFREEM=`/bin/df -m | grep -m1 ' /$' | tr -s ' ' | cut -f 4 -d ' '`
  ;;
 esac
 WARNMSG=""
 [ -s /tmp/pup_event_sizefreem ] && PREVSIZEFREEM=`cat /tmp/pup_event_sizefreem`
 [ $PREVSIZEFREEM -eq $SIZEFREEM ] && return
 if [ $SIZEFREEM -lt 10 ];then
  if [ -d /initrd/pup_rw/lib/modules/all-firmware -a "$ZDRVINIT" = "yes" ];then
   delete_func /initrd/pup_rw #save layer is at top, delete mods.
  else
   WARNMSG="WARNING: Personal storage getting full, strongly recommend you resize it or delete files!"
  fi
 fi
 VIRTUALFREEM=$SIZEFREEM
 if [ "$ZDRVINIT" = "yes" ];then #full set of modules present, moved from initrd.
  if [ -d /initrd/pup_rw/lib/modules/all-firmware ];then #have not yet deleted modules.
   #calc the "virtual" free space (would have if modules not there...)
   VIRTUALFREEM=`expr $SIZEFREEM + $SIZE_MODS_M`
   VIRTUALFREEM=`expr $VIRTUALFREEM - 1` #allow for some mods will not be deleted.
  fi
 fi
 #save to a file, freememapplet can read this...
 echo "$VIRTUALFREEM" > /tmp/pup_event_sizefreem
 [ $PUPMODE -eq 5 -o $PUPMODE -eq 2 ] && return 0 #5=first boot, no msgs at top of screen. 2=full install
 if [ "$WARNMSG" != "" ];then
  killall yaf-splash
  yaf-splash -margin 2 -bg red -bw 0 -placement top -font "9x15B" -outline 0 -text "$WARNMSG" &
 fi
}

free_flash_func() { #PUPMODE 3,7,13. called every 4 seconds. 3=full on internal flash, 7 frugal to whole partition, 13=frugal to save-file
 WARNMSG=""
 SIZEFREEM=`/bin/df -m | grep -m1 ' /initrd/pup_ro1$' | tr -s ' ' | cut -f 4 -d ' '`
 SIZETMPM=`/bin/df -m | grep -m1 ' /initrd/pup_rw$' | tr -s ' ' | cut -f 4 -d ' '`
 [ -s /tmp/pup_event_sizefreem ] && PREVSIZEFREEM=`cat /tmp/pup_event_sizefreem`
 [ -s /tmp/pup_event_sizetmpm ] && PREVSIZETMPM=`cat /tmp/pup_event_sizetmpm`
 [ $PREVSIZEFREEM -eq $SIZEFREEM -a $PREVSIZETMPM -eq $SIZETMPM ] && return
 if [ $SIZEFREEM -lt 10 ]; then
  if [ -d /initrd/pup_ro1/lib/modules/all-firmware -a "$ZDRVINIT" = "yes" ];then
   delete_func /initrd/pup_ro1 #delete modules in save layer only.
  else
   WARNMSG="WARNING: Personal storage file getting full, strongly recommend you resize it or delete files!"
  fi
 fi
 if [ $SIZETMPM -lt 5 ]; then
  if [ -d /initrd/pup_rw/lib/modules/all-firmware -a "$ZDRVINIT" = "yes" ];then
   delete_func /initrd/pup_rw #delete modules in top tmpfs layer only.
  else
   WARNMSG="WARNING: RAM working space only ${SIZETMPM}MB, recommend a reboot which will flush the RAM"
  fi
 fi
 VIRTUALFREEM=$SIZEFREEM
 if [ "$ZDRVINIT" = "yes" ]; then #full set of modules present at bootup.
  if [ -d /initrd/pup_ro1/lib/modules/all-firmware ];then #have not yet deleted modules.
   #calc the "virtual" free space (would have if modules not there...)
   VIRTUALFREEM=`expr $SIZEFREEM + $SIZE_MODS_M`
   VIRTUALFREEM=`expr $VIRTUALFREEM - 1` #allow for some mods will not be deleted.
  fi
 fi
 echo "$SIZETMPM" > /tmp/pup_event_sizetmpm
 #save to a file, freememapplet can read this...
 echo "$VIRTUALFREEM" > /tmp/pup_event_sizefreem
 if [ "$WARNMSG" != "" ]; then
  killall yaf-splash
  yaf-splash -margin 2 -bg red -bw 0 -placement top -font "9x15B" -outline 0 -text "$WARNMSG" &
 fi
}

savepuppy_func() { #called every 4 seconds.
 if [ -f /tmp/snapmergepuppyrequest ]; then #by request.
  rm -f /tmp/snapmergepuppyrequest
  yaf-splash -font "8x16" -outline 0 -margin 4 -bg orange -placement top -text "Saving RAM to 'pup_save' file..." &
  YAFPID=$!
  sync
  nice -n 19 /usr/sbin/snapmergepuppy
  kill $YAFPID
 fi
}

#note that init script in initrd takes care of restoring modules if enough space.
delete_func() { #called from free_func() and free_flash_func(). delete modules to create more free space.
 #passed param: /pup_rw=delete tmpfs top layer only.
 DEL_LAYER=$1
 #find out what modules are loaded, keep those...
 for oneKEEP_MOD in `lsmod | cut -f 1 -d ' ' | grep -v 'Module'`
 do
  oneKEEP_SPEC=`modinfo -F filename ${oneKEEP_MOD}`
  oneKEEP_PATH=`dirname $oneKEEP_SPEC`
  mkdir -p /tmp/${oneKEEP_PATH}
  cp -af ${oneKEEP_SPEC} /tmp/${oneKEEP_PATH}/
 done
 if [ "$DEL_LAYER" != "" ];then
  rm -rf ${DEL_LAYER}/lib/modules
 else
  if [ $PUPMODE -eq 3 -o $PUPMODE -eq 7 -o $PUPMODE -eq 13 ];then  #flash
   rm -rf ${SAVE_LAYER}/lib/modules
  fi
  rm -rf /lib/modules
 fi
 cp -af /tmp/lib/modules /lib/modules
 depmod -a
}

#v407 fixed so works for sr* and hd* optical...
probe_optical_func() { #passed param is sr<0-9> or hd<a-z>
 DRV_NAME="$1"
 DRV_CATEGORY="optical"
 CDSTATUS2="0"
 opticalPATTERN='^/dev/'"${DRV_NAME}"' '
 [ "`grep "$opticalPATTERN" /proc/mounts`" != "" ] && return #only check cd if unmounted.
 cddetect_quick -d/dev/${DRV_NAME} >$OUT 2>$ERR #very fast.
 #...returns 0 if disc inserted, else 255.
 CDSTATUS2="$?"
 #[ "$CDSTATUS2" != "0" ] && [ -d $HOME/.pup_event/drive_${DRV_NAME} ] && rm -rf $HOME/.pup_event/drive_${DRV_NAME} #v410 ensure no drive directory if drive empty. ##+-2012-01-18
 echo "$CDSTATUS2" > /tmp/pup_event_frontend_identify2_${DRV_NAME}
 [ -f /tmp/pup_event_frontend_identify1_${DRV_NAME} ] || cp /tmp/pup_event_frontend_identify2_${DRV_NAME} /tmp/pup_event_frontend_identify1_${DRV_NAME}
 CDSTATUS1=`cat /tmp/pup_event_frontend_identify1_${DRV_NAME}`
 [ "$CDSTATUS1" = "$CDSTATUS2" ] && return
 cp -f /tmp/pup_event_frontend_identify2_${DRV_NAME} /tmp/pup_event_frontend_identify1_${DRV_NAME}
 if [ "$CDSTATUS2" = "0" ]; then
  #VENDOR=`cat /sys/block/${DRV_NAME}/device/vendor | tr -s ' '`
  #MODEL=`cat /sys/block/${DRV_NAME}/device/model | tr -s ' '`
  #DRV_DESCRIPTION="$VENDOR $MODEL"
  opticalPATTERN='^/dev/'"${DRV_NAME}"'|'
  DRV_DESCRIPTION=`echo "$PROBEDISK" | grep "$opticalPATTERN" | cut -f 3 -d '|'`
  create_icon_func #requires DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION.
  [ "$HOTPLUGNOISY" = "true" ] && $HOME/.pup_event/drive_${DRV_NAME}/AppRun optical & #handler script.
#KRG else
#KRG  rm -rf $HOME/.pup_event/drive_${DRV_NAME} 2>$ERR
#KRG  remove_pinboard_func #needs DRV_NAME
 fi
}

#v407 detect ls120 and zip disc inserted...
probe_floppy_func() { #passed param is whole drive name (exs: hdc, sdc)
 DRV_NAME="$1"
 DRVMAIN=`echo -n "$DRV_NAME" | cut -c 1,2` #sd or hd.
 DRV_CATEGORY="floppy"
 floppyPATTERN="^/dev/$DRV_NAME "
 [ "`grep "$floppyPATTERN" /proc/mounts`" != "" ] && return #mounted.
 if [ "$DRVMAIN" = "hd" ];then
  cat /proc/ide/${DRV_NAME}/identify > /tmp/pup_event_frontend_identify2_${DRV_NAME}
 else
  #this method not as good, as only detects disc if it has a partition...
  floppyPATTERN=" ${DRV_NAME}"
  grep "$floppyPATTERN" /proc/partitions > /tmp/pup_event_frontend_identify2_${DRV_NAME}
 fi
 [ -f /tmp/pup_event_frontend_identify1_${DRV_NAME} ] || cp /tmp/pup_event_frontend_identify2_${DRV_NAME} /tmp/pup_event_frontend_identify1_${DRV_NAME}
 [ "`diff -s /tmp/pup_event_frontend_identify1_${DRV_NAME} /tmp/pup_event_frontend_identify2_${DRV_NAME} | grep ' are identical'`" != "" ] && return
 cp -f /tmp/pup_event_frontend_identify2_${DRV_NAME} /tmp/pup_event_frontend_identify1_${DRV_NAME}
 FLOPPYSTATUS=1
 [ "`disktype /dev/${DRV_NAME} 2>&1 | grep 'I/O error'`" = "" ] && FLOPPYSTATUS=0
 if [ "$FLOPPYSTATUS" = "0" ];then
  if [ "$DRVMAIN" = "hd" ]; then
   #DRV_DESCRIPTION=`cat /proc/ide/${DRV_NAME}/model`
   read DRV_DESCRIPTION </proc/ide/${DRV_NAME}/model
  else
   #DRV_DESCRIPTION=`cat /sys/block/${DRV_NAME}/device/model | tr -s ' '`
   read DRV_DESCRIPTION </sys/block/${DRV_NAME}/device/model | tr -s ' '
  fi
  create_icon_func #requires DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION.
  [ "$HOTPLUGNOISY" = "true" ] && $HOME/.pup_event/drive_${DRV_NAME}/AppRun floppy & #handler script.
#KRG else
#KRG  rm -rf $HOME/.pup_event/drive_${DRV_NAME} 2>$ERR
#KRG  remove_pinboard_func #needs DRV_NAME
 fi
}

OLDLANG=$LANG #100613
export LANG=C #w004

#v408 when testing k2.6.21.7, no DEVTYPE, had to modify udev rules which causes udevd to
#do multiple overlapping writes to /tmp/pup_event_backend_s. Even with 2.6.25.x, plugging
#in two USB drives at once can cause this. So, dropping that, going back to primitive,
#simple polling loop.
sleep 2 #let the dust settle after X has started.
#w471 slow cpus need more delay (well, rox does)...
DELAYFACTOR=0
CPUMHZ=`grep -m 1 -i '^cpu MHz' /proc/cpuinfo | tr -d ' ' | cut -f 2 -d ':' | cut -f 1 -d '.'`
[ "$CPUMHZ" -a $CPUMHZ -gt 100 ] && DELAYFACTOR=`expr 1100 \/ $CPUMHZ`
[ $DELAYFACTOR -gt 0 ] && sleep $DELAYFACTOR
#define ESPIPE      29  /* Illegal seek */
if [ "$DISPLAY" = "" ]; then return 29 || exit 29; fi #X not running.
################# ORIG #####################################


################# check if already running ############################
###+++2012-01-19

prog=$(basename $0)
DAEMONS=`ps-FULL -f --no-headers -C "$prog"| grep -v '<defunct>'`
PROGPID=$$
echo "
.............
$PROGPID
$DAEMONS
............."
PIDS=`echo "$DAEMONS" |awk '{print $2" "$3}'`
while [ "$PIDS" != "" ]; do

pids1=`echo "$PIDS" |sed -n "1 p"`
pid1=`echo "$pids1" |awk '{print $1}'`
ppid1=`echo "$pids1" |awk '{print $2}'`
pids2=`echo "$PIDS" |sed -n "2 p"`
echo "pids1='$pids1'"
echo "pids2='$pids2'"
[ ! "$pids2" ] && break
if [ ! "`echo "$pids2" | grep -w "$pid1"`" -a ! "`echo "$pids2" | grep -w "$ppid1"`" ];then

echo "Another $0 already running . Refusing to start .
Try $0 restart
"
#define EBUSY       16  /* Device or resource busy */
return 16 || exit 16
fi
PIDS=`echo "$PIDS" |sed '1 d'`
done
################# check if already running ############################


################# ORIG #########################################################
#v404 /usr/sbin/video-wizard (Xvesa) does create /tmp/pup_event_icon_change_flag
#which /sbin/clean_desk_icons reads via .xinirc when X starts, to wipe all drive icons.
#however I think it would be good to test here also if X mode not yet settled on...
if [ -f /tmp/videomode ];then #only exists during X resolution setup.
 if [ "`readlink /usr/bin/X`" = "Xvesa" ]; then
  while [ -f /tmp/videomode ]; do
   sleep 1
  done
 fi
fi

TOGGLE=1
SAVECNT=0
MOUSECNT=0 #w007
MINUTECNT=0 #w007
#CURPOS1="" #w007
CURRPOS1='-1 -1' ##+++2012-01-18 moved here for not testing it inside DAEMON all the time
#echo -n "" > /tmp/pup_event_frontend_d_curpos.log #w007

ZDRV='';ZDRVINIT='no' #these usually set in PUPSTATE.
. /etc/rc.d/PUPSTATE
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/X11R7/bin"
KERNEL_RELEASE=`uname -r`
. /etc/eventmanager #has RAMSAVEINTERVAL, ICONDESK, HOTPLUGNOISY, ICONPARTITIONS, BACKENDON, POWERTIMEOUT
. /etc/rc.d/functions4puppy4
################# ORIG #####################################


################# orig to function #################
SCRN_VARS_func() {  #KRG

SCRNXY=`xwininfo -root | grep -o '\-geometry .*' | tr -s ' ' | cut -f 2 -d ' ' | cut -f 1 -d '+'` #orig
SCRN_X=`echo -n "$SCRNXY" | cut -f 1 -d 'x'` #orig
SCRN_Y=`echo -n "$SCRNXY" | cut -f 2 -d 'x'` #orig

} #KRG
SCRN_VARS_func

RAM_POWER_func(){
[ "$RAMSAVEINTERVAL" = "" ] && RAMSAVEINTERVAL=30 #412
RAMSAVEINTERVAL=`expr $RAMSAVEINTERVAL \* 60` #convert minutes to seconds.

[ "$POWERTIMEOUT" = "" ] && POWERTIMEOUT=0 #w007
POWERTIMEOUT=`expr $POWERTIMEOUT \* 60` #convert minutes to seconds.
}
RAM_POWER_func
################# orig to function #################################


################# ORIG #####################################
SIZE_MODS_M=0
if [ "$ZDRVINIT" = "yes" ];then
 #all mods were in initrd at bootup, then moved to main f.s.
 SIZE_MODS_M=`du -m -s /lib/modules | cut -f 1`
fi
RETVALm=1
PREVSIZETMPM=0
PREVSIZEFREEM=0

format_size_func() {
 [ $SIZE ] || SIZE=0
 if [ $SIZE -gt 1048576 ];then #1024*1024
  SIZE=`LANG=$OLDLANG dc $SIZE 1048576 \/ p` #100613 dc o/p '.' if LANG=C.
  SIZE="`LANG=$OLDLANG printf "%.1f" $SIZE`GB" #100613
 else
  if [ $SIZE -gt 99 ];then
   SIZE="`expr $SIZE \/ 1024`MB"
  else
   SIZE=`LANG=$OLDLANG dc $SIZE 1024 \/ p` #100613
   SIZE="`LANG=$OLDLANG printf "%.1f" $SIZE`MB" #100613
  fi
 fi
 [ "$SIZE" = "0.0MB" ] && SIZE="0"
 [ "$SIZE" = "0,0MB" ] && SIZE="0" #100613
}

create_appinfo_func() { #needs INFO, DRV_CATEGORY, MOREITEMS, ONEDRVNAME
   echo "<?xml version=\"1.0\"?>
<AppInfo>
  <Summary>${INFO}</Summary>
  <About>
   <Purpose>Drive icons are part of Puppy Event Manager, see System menu</Purpose>
   <Authors>Barry Kauler LGPL 2008</Authors>
  </About>
  <AppMenu>
   <Item option=\"pmount_${DRV_CATEGORY}\" icon=\"gtk-harddisk\"><Label>Run Pmount Puppy Drive Mounter</Label></Item><Item option=\"eventmanager\" icon=\"gtk-execute\"><Label>Run Desktop Drive Icon Manager</Label></Item>${MOREITEMS}
  </AppMenu>
</AppInfo>" > $HOME/.pup_event/drive_${ONEDRVNAME}/AppInfo.xml
}
################# ORIG #####################################


################# new functions ###############
funcHOME(){  #KRG
test "$HOME" = '/' && export HOME=/root
}
funcHOME  #KRG


JWM_func(){
CWM=`cat /etc/windowmanager`
if [ "$CWM" = "jwm" ]; then
JwmL=`grep -E -i 'Tray | autohide | insert | x | y | insert' $HOME/.jwmrc-tray`
JWMTpos=`echo $JwmL | grep -o 'y=.*$' | cut -f 1 -d ' ' | cut -f 2 -d '"'`
[ -z "$JWMTpos" ] && JWMTpos="-1"
HEIGHT=`echo $JwmL | grep -o 'height=.*$' | tr -d ' ' | cut -f 2 -d '"'`
fi
[ -z "$HEIGHT" ] && HEIGHT=28

JWMT_Yvar=10
JWMT_Yvar=$(expr \( $SCRN_Y \/ 500 \) '*' $HEIGHT)
echo JWMT_Yvar=$JWMT_Yvar
}
JWM_func


ROX_func(){
CONFFILEROX="$HOME/.config/rox.sourceforge.net/ROX-Filer/Options"
PIN_GRID_STEP=`grep -m1 "pinboard_grid_step" "$CONFFILEROX" | sed -e "s/ *<[^>]*>//g"`
[ -z "$PIN_GRID_STEP" ] && PIN_GRID_STEP=16 #16=medium.
[ "$PIN_GRID_STEP" -le 0 ] && PIN_GRID_STEP=16 #precaution.

echo "PIN_GRID_STEP='$PIN_GRID_STEP'"
PIN_GRID_STEP2=`expr $PIN_GRID_STEP \/ 2`
JWMT_Yvar=$((((JWMT_Yvar/PIN_GRID_STEP2)+1)*PIN_GRID_STEP2))

[ -z "$ICON_PLACE_START_GAP" ] && ICON_PLACE_START_GAP=32
[ -z "$ICON_PLACE_ORIENTATION" ] && ICON_PLACE_ORIENTATION='bottom'
if [ -z "$ICON_PLACE_SPACING" ] ; then
DriveIconsize=`grep -o 'DRVICON=.*' /etc/rc.d/functions4puppy4  | grep -o -e '[[:digit:]]*' | head -n 1`  ##+2022_11_05 added -e to grep -o
ICON_PLACE_SPACING=$(( (( $DriveIconsize / $PIN_GRID_STEP ) + 1 ) * $PIN_GRID_STEP ))
fi

VALSY=$(( $SCRN_Y / $PIN_GRID_STEP ))
for i in `seq 1 $VALSY` ; do PGSYvals="$PGSYvals `echo $( dc $i $PIN_GRID_STEP \* p )`" ; done
echo $VALSY
echo $PGSYvals
VALSX=$(( $SCRN_X / $PIN_GRID_STEP ))
for i in `seq 1 $VALSX` ; do PGSXvals="$PGSXvals `echo $( dc $i $PIN_GRID_STEP \* p )`" ; done
}
ROX_func


MAX_XY_func(){

CONFFILEROX="$HOME/.config/rox.sourceforge.net/ROX-Filer/Options"  #also deeper down in script
FONT_SIZE=`grep 'name="label_font">.*<' $CONFFILEROX |sed 's|\(.*\)>\(.*\)<\(.*\)|\2|' |rev |awk '{print $1}' |rev`
echo "FONTSIZE=$FONT_SIZE"

ICON_X=48;icon_x=$((ICON_X/2))
ICON_Y=$((FONT_SIZE+48));icon_y=$((ICON_Y/2))

#MAX_X=`expr $SCRN_X - 32`
#MAX_Y=`expr $SCRN_Y - 48` ##+++2012-01-19
MAX_X=$(($SCRN_X-icon_x))  #24 half icon size of 48
MAX_Y=$(($SCRN_Y-icon_y)) #49 full iconsize, 24 label
}
MAX_XY_func


START_XY_ICON_VALUES_func() {  #KRG
case $ICON_PLACE_ORIENTATION in #see /etc/eventmanager

  bottom)
   COORD_X=$ICON_PLACE_START_GAP #default 32, see /etc/eventmanager
    case "$JWMTpos" in
   0)  #top
   JWMT_Yvar=0
   ;;
   *)
   :
   ;;
    esac
   COORD_YSt=$(( $SCRN_Y - $ICON_PLACE_EDGE_GAP - $JWMT_Yvar ))
   #COORD_YSt=$(( $SCRN_Y - $JWMT_Yvar ))
   COORD_Y=$COORD_YSt
   echo "COORD_Y='$COORD_Y'"
   COORD_Y=`expr \( $COORD_Y - $PIN_GRID_STEP2 \) \/ $PIN_GRID_STEP '*'  $PIN_GRID_STEP` #430: - $PINgridSTEP2
   echo "$COORD_Y='$COORD_Y'"
   ;;

  top)
  [ "$DEBUG" ] && { LINEP=D0511;echo "`[ $LINENO ] && echo $LINENO || get_lineno $LINEP` START_XY_ICON_VALUES_func"; }
  COORD_X=$ICON_PLACE_START_GAP #default 32, see /etc/eventmanager
    case "$JWMTpos" in
   0)
   echo JWMTpos=$JWMTpos ICON_PLACE_START_GAP=$ICON_PLACE_START_GAP ICON_PLACE_EDGE_GAP=$ICON_PLACE_EDGE_GAP #JWMT_Yvar=$JWMT_Yvar
   :
   ;;
   *)
   echo JWMTpos=$JWMTpos
   JWMT_Yvar=0
   ;;
    esac
   COORD_YSt=$(( $ICON_PLACE_EDGE_GAP + $JWMT_Yvar ))
   echo  COORD_YSt=$COORD_YSt PIN_GRID_STEP2=$PIN_GRID_STEP2
   COORD_Y=$COORD_YSt
   COORD_Y=`expr \( $COORD_Y + $PIN_GRID_STEP2 \) / $PIN_GRID_STEP '*'  $PIN_GRID_STEP`
   [ "$DEBUG" ] && { LINEP=D0512;echo "`[ $LINENO ] && echo $LINENO || get_lineno $LINEP`"; }
   ;;

   left)
   COORD_X=$ICON_PLACE_START_GAP #EDGEdefault 64, see /etc/eventmanager
    case "$JWMTpos" in
   0)
   :
   ;;
   *)
   MAX_Y=$((MAX_Y-JWMT_Yvar));JWMT_Yvar=$((JWMT_Yvar*-1))
   ;;
    esac
   COORD_YSt=$(( $ICON_PLACE_EDGE_GAP + $JWMT_Yvar ))
   COORD_Y=$COORD_YSt
   COORD_Y=`expr \( $COORD_Y + $PIN_GRID_STEP2 \) / $PIN_GRID_STEP '*'  $PIN_GRID_STEP`

   ;;
   right)
   #COORD_X=`expr $SCRN_X - \( 2 \* $ICON_PLACE_START_GAP \)` #default 64, see /etc/eventmanager
   COORD_X=`expr $SCRN_X - $ICON_PLACE_START_GAP`
   echo "JWMTpos='$JWMTpos'"
    case "$JWMTpos" in
   0) #TOP
   :
   ;;
   *)
   MAX_Y=$((MAX_Y-JWMT_Yvar));JWMT_Yvar=$((JWMT_Yvar*-1))
   ;;
    esac
   COORD_YSt=$(( $ICON_PLACE_EDGE_GAP + $JWMT_Yvar )) #default 64, see /etc/eventmanager
   COORD_Y=$COORD_YSt
   COORD_Y=`expr \( $COORD_Y + $PIN_GRID_STEP2 \) / $PIN_GRID_STEP '*'  $PIN_GRID_STEP`
   echo "right: COORD_Y=$COORD_Y"

   ;;
esac
}
START_XY_ICON_VALUES_func #KRG

[ "$DEBUG" ] && { LINEP=D002;echo "`[ $LINENO ] && echo $LINENO || get_lineno $LINEP`"; }

free_coord() {
 #find a free place on desktop. v410 avoid exact overlapping icons...
 #091208 finetune placement, also any side of screen...
 #read the coords grid, code from shinobar...
 #sleep 1
 COORDSGRID1=`grep -o ' x="[0-9]*" y="[0-9]*" ' $HOME/Choices/ROX-Filer/PuppyPin` # | sed 's/[0-9]"/"/g'`"
 COORDSGRID2=`grep -o ' x="[0-9]*" y="[0-9]*" ' $HOME/Choices/ROX-Filer/PuppyPin`
 COORDSGRID=`echo -e "$COORDSGRID1\n$COORDSGRID2"`
 echo "$COORDSGRID" | head -n 2

 case $ICON_PLACE_ORIENTATION in #see /etc/eventmanager
  bottom)

   echo "X='$COORD_X' Y='$COORD_Y' '$ONEDRVNAME'"
   xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   xyCNT=0 #precaution.

   while [ 1 ];do

    xgPATTERN=`echo -n "$xPATTERN"` # |  sed 's/[0-9]"/"/g'`
    echo "    xgPATTERN=$xgPATTERN"

    [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" = "" ] && { echo breaking now;break; }
    COORD_X=`expr $COORD_X + $ICON_PLACE_SPACING`

    if [ "$COORD_X" -gt "$MAX_X" ];then #start next line up.
     #LINE=$(( $LINE + 1 ))
     COORD_Y=`expr $COORD_Y - $ICON_PLACE_SPACING`
     #COORD_Y=`expr $COORD_Y - $ICON_PLACE_SPACING - $PIN_GRID_STEP`  ###- $PIN_GRID_STEP`  ### - $FONTSfac \( $LINE \* $FBUF \) - 8` #SCRN_Y@1024:-8
     if [ -z "`echo "$PGSYvals" | grep "$COORD_Y"`" ] ; then
     for i in `seq 1 $PIN_GRID_STEP` ; do
     TEST=$(( $COORD_Y - $i ))
     echo $TEST
     [ -n "`echo "$PGSYvals" | grep "$TEST"`" ] && { COORD_Y=$TEST;break; }
     done
     fi
     COORD_X=$ICON_PLACE_START_GAP

     echo "COORD_Y='$COORD_Y' COORD_X='$COORD_X'" #LINE='"$LINE"'='
    fi

    xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   done
   #echo
  ;;
  top)

   xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   xyCNT=0 #precaution.
   while [ 1 ];do
    xgPATTERN=`echo -n "$xPATTERN"` # |  sed 's/[0-9]"/"/g'`
    [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" = "" ] && break
    COORD_X=`expr $COORD_X + $ICON_PLACE_SPACING`
    if [ $COORD_X -gt $MAX_X ];then #start next line down.

     COORD_Y=`expr $COORD_Y + $ICON_PLACE_SPACING`
     COORD_X=$ICON_PLACE_START_GAP
    fi
    xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   done
  ;;
  left)
   echo "Free_Coord ' x=\"${COORD_X}\" y=\"${COORD_Y}\" '"
   xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   xyCNT=0 #precaution.
   while [ 1 ];do
    xgPATTERN=`echo -n "$xPATTERN"` # |  sed 's/[0-9]"/"/g'`
    echo "xgPATTERN=$xgPATTERN"
    [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" = "" ] && break
    COORD_Y=`expr $COORD_Y + $ICON_PLACE_SPACING`
    if [ $COORD_Y -ge $MAX_Y ];then #start next row.
      echo "COORD_Y=$COORD_Y MAX_Y=$MAX_Y"
     COORD_X=`expr $COORD_X + $ICON_PLACE_SPACING`
     #COORD_Y=$(((ICON_PLACE_EDGE_GAP+JWMT_Yvar+PIN_GRID_STEP2)/PIN_GRID_STEP2*PIN_GRID_STEP2))
     COORD_Y=$((ICON_PLACE_EDGE_GAP+JWMT_Yvar))
     #COORD_Y=$(( (ICON_PLACE_EDGE_GAP+JWMT_Yvar)+((PIN_GRID_STEP2+1)/PIN_GRID_STEP2*PIN_GRID_STEP2) ))
     #COORD_Y=$(( (ICON_PLACE_EDGE_GAP+JWMT_Yvar)+((PIN_GRID_STEP2)/PIN_GRID_STEP2*PIN_GRID_STEP2) ))
    fi
    xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
    echo "$xPATTERN :JWMT_Yvar=$JWMT_Yvar ICON_PLACE_EDGE_GAP=$ICON_PLACE_EDGE_GAP"
   done
  ;;
  right)

   xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   xyCNT=0 #precaution.
   while [ 1 ];do
    xgPATTERN=`echo -n "$xPATTERN"` # |  sed 's/[0-9]"/"/g'`
    [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" = "" ] && break
    COORD_Y=`expr $COORD_Y + $ICON_PLACE_SPACING`
    if [ "$COORD_Y" -ge "$MAX_Y" ];then #start next row back.
      echo "COORD_Y=$COORD_Y MAX_Y=$MAX_Y"
     COORD_X=`expr $COORD_X - $ICON_PLACE_SPACING`
     #COORD_Y=$(((ICON_PLACE_EDGE_GAP+JWMT_Yvar+PIN_GRID_STEP2)/PIN_GRID_STEP2*PIN_GRID_STEP2))
     COORD_Y=$((ICON_PLACE_EDGE_GAP+JWMT_Yvar))
     #COORD_Y=$(( (ICON_PLACE_EDGE_GAP+JWMT_Yvar)+((PIN_GRID_STEP2+1)/PIN_GRID_STEP2*PIN_GRID_STEP2) ))
     #COORD_Y=$(( (ICON_PLACE_EDGE_GAP+JWMT_Yvar)+((PIN_GRID_STEP2)/PIN_GRID_STEP2*PIN_GRID_STEP2) ))
     fi
    xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   done
  ;;
 esac
}

[ "$DEBUG" ] && { LINEP=D003;echo "`[ $LINENO ] && echo $LINENO || get_lineno $LINEP`"; }
add_pinboard_func() { #needs ONEDRVNAME, DRV_CATEGORY, FSTYPE
 #ppPATTERN=' label="'"$ONEDRVNAME"'"'
 #v411 rerwin: avoid icon getting duplicated if it is renamed...
 #ppPATTERN="$home/.pup_event/drive_${ONEDRVNAME}<"
 # <icon x="160" y="704" label="sr0" args="optical 0">//.pup_event/drive_sr0</icon>
 #ppPATTERN="$HOME/\\.pup_event/drive_${ONEDRVNAME}<" ##++2012-01-18
 ppPATTERN="/\\.pup_event/drive_${ONEDRVNAME}<" ##++2012-01-18
 ##[ "`grep "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin`" != "" -a -z "`grep "$ppPATTERN" $HOME/Choices/ROX-Filer/PuppyPin`" ] && return #precaution.
 [ "`grep "$ppPATTERN" $HOME/Choices/ROX-Filer/PuppyPin`" != "" ] && return
 free_coord
 echo "XforROX='${COORD_X}' YforROX='${COORD_Y}' '$ONEDRVNAME'"
 #ONEDRVNAMElast="$ONEDRVNAME"
 echo
 echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <PinboardAdd>
   <Path>$HOME/.pup_event/drive_${ONEDRVNAME}</Path>
   <X>${COORD_X}</X>
   <Y>${COORD_Y}</Y>
   <Label>${ONEDRVNAME}</Label>
   <Args>${DRV_CATEGORY} ${FSTYPE}</Args>
  </PinboardAdd>
 </env:Body>
</env:Envelope>"  | rox -R  2>$ERR
}


create_icon_func() {
    echo 'create_icon_func:'
    echo "$@"
    echo "DRV_NAME='$DRV_NAME' DRV_CATEGORY='$DRV_CATEGORY' DRV_DESCRIPTION='$DRV_DESCRIPTION'"
 #create desktop icon, and directory with handler script, icon and help...
 #requires global variables DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION.
 #if a passed param $1, then PROBEPART already known, inefficient to rerun here each time.
 #[ "`echo "$DRV_NAME" |grep '[0-9]'`" ] || return

 DRVINFO="$DRV_NAME"'|0|0'
 if [ "$ICONPARTITIONS" = "true" ];then
  #display an icon for each partition... w476 add ext4...
  #[ "$1" ] || PROBEPART=`probepart -k | grep -iEv "\|swap\||/dev/[hnmflr].*\|none\||/dev/sd.*\|none\||\|not inserted\||\|extended\||ext'd.*\||\|none detected\||/dev/sr.*\|none\|"`
  [ "$1" ] || PROBEPART=`probepart -k | grep -iEv "\|swap\||/dev/[hnmflr].*\|none\||/dev/sd.*\|none\||\|extended\||ext'd.*\||\|none detected\||/dev/sr.*\|none\|"`
  drvPATTERN='^/dev/'"${DRV_NAME}" #important, no space on end!
  DRVINFO=`echo "$PROBEPART" | grep "$drvPATTERN" | cut -f 1,2,3 -d '|' | tr '\n' ' '`

  #w482 k2.6.25.16 /proc/partitions (read by probepart) can be slow to update...
  diCNT=0
  if [ "`echo "$DRV_NAME" | grep -E '^sd|^mmc|^sr'`" ];then
   while [ "$DRVINFO" = "" ];
   do
    diCNT=$((diCNT+1))
    [ "$diCNT" -gt 13 ] && break ##+-=2013-07-07
    sleep 2  ##ZTE MODEM sr2 slow in updating values > increased count 3>13, sleep 1>2
    PROBEPART=`probepart -k | grep -iEv "\|swap\||/dev/[hnmflr].*\|none\||/dev/sd.*\|none\||\|not inserted\||\|extended\||ext'd.*\||\|none detected\||/dev/sr.*\|none\|"`
    DRVINFO=`echo "$PROBEPART" | grep "$drvPATTERN" | cut -f 1,2,3 -d '|'`
    case $DRV_NAME in
    sd*)
    test -e /sys/block/$DRV_NAME/${DRV_NAME}1 || break
    ;;
    mmc*)
    test -e /sys/block/$DRV_NAME/${DRV_NAME}p1 || break
    ;;
    sr*)
      :
    ;;
    esac
   done
  fi
 echo "$DRVINFO"
 fi

 DRVINFO=`echo "$DRVINFO" | sed 's/not inserted/not_inserted/'`

 for oneDRVINFO in $DRVINFO
 do
  echo "oneDRVINFO='$oneDRVINFO'"
  ONEDRVNAME=`echo "$oneDRVINFO" | cut -f 1 -d '|' | cut -f 3 -d '/'`
  FSTYPE=`echo "$oneDRVINFO" | cut -f 2 -d '|'`
  SIZE=`echo "$oneDRVINFO" | cut -f 3 -d '|'`
  drvPATTERN='^/dev/'"${ONEDRVNAME}"' ' #important, a space on end!
  if [ ! -d $HOME/.pup_event/drive_${ONEDRVNAME} ];then
   mkdir $HOME/.pup_event/drive_${ONEDRVNAME}
   cp -af /usr/local/bin/drive_all $HOME/.pup_event/drive_${ONEDRVNAME}/AppRun
   if [ -e /sys/block/${ONEDRVNAME} ];then
    #device is an entire drive.
    #SIZE=`cat /sys/block/${ONEDRVNAME}/size`
    read SIZE </sys/block/${ONEDRVNAME}/size
    SIZE=$(($SIZE/2)) #get KB.
    format_size_func #formats SIZE for display.
    INFO="Description: ${DRV_DESCRIPTION} Size: ${SIZE}"
   else
    if [ "$FSTYPE" = "0" -a "$SIZE" = "0" ];then
     INFO="Puppy drive manager"
    else
     #pPATTERN=' '"$ONEDRVNAME"'$'
     #SIZE=`grep "$pPATTERN" /proc/partitions | tr -s ' ' | cut -f 4 -d ' '`
     format_size_func #formats SIZE for display.
     INFO="Filesystem: $FSTYPE Size: $SIZE"
    fi
   fi
   #v424 add item to unmount all partitions...
   MOREITEMS="<Item option=\"unmount\" icon=\"gtk-harddisk\"><Label>Unmount ${ONEDRVNAME} (if currently mounted)</Label></Item><Item option=\"unmountall\" icon=\"gtk-harddisk\"><Label>Unmount ALL mounted partitions</Label></Item>"
   create_appinfo_func #needs INFO, DRV_CATEGORY, MOREITEMS, ONEDRVNAME
  fi
  if [ "$ICONDESK" = "true" ];then #see /etc/eventmanager.
   MNTSTATUS=`/bin/df | grep "$drvPATTERN"`
   [ "$DEBUG" ] && echo "MNTSTATUS='$MNTSTATUS' for drvPATTERN='$drvPATTERN'"
   if [ "$MNTSTATUS" = "" ];then
    icon_unmounted_func $ONEDRVNAME $DRV_CATEGORY #see functions4puppy4.
   else
    icon_mounted_func $ONEDRVNAME $DRV_CATEGORY #see functions4puppy4.
   fi
   add_pinboard_func #needs ONEDRVNAME, DRV_CATEGORY, FSTYPE.
  else #for single universal icon
   icon_unmounted_func drives any
   add_pinboard_func #needs ONEDRVNAME, DRV_CATEGORY, FSTYPE. for single universal icon
  fi
  sleep 0.03
 done
 #always create a handler for entire drive, even if no icon displayed...
 if [ ! -d $HOME/.pup_event/drive_${DRV_NAME} ];then
  if [ -e /sys/block/${DRV_NAME} ]; then
   mkdir $HOME/.pup_event/drive_${DRV_NAME}
   cp -af /usr/local/bin/drive_all $HOME/.pup_event/drive_${DRV_NAME}/AppRun
   SIZE=`cat /sys/block/${DRV_NAME}/size`
   SIZE=$(($SIZE/2)) #get KB.
   format_size_func #formats SIZE for display.
   INFO="Description: ${DRV_DESCRIPTION} Size: ${SIZE}"
   #v424 add item to unmount all mounted partitions...
   MOREITEMS="<Item option=\"unmountall\" icon=\"gtk-harddisk\"><Label>Unmount ALL mounted partitions</Label></Item>"
   ONEDRVNAME="$DRV_NAME"
   create_appinfo_func #needs INFO, DRV_CATEGORY, MOREITEMS, ONEDRVNAME
  fi
 fi
}


remove_pinboard_func() { #needs DRV_NAME (name of entire drive)
 echo "$@"
 echo "DRV_NAME=$DRV_NAME'"
 ppPATTERN=' label="'"$DRV_NAME"'.*" '
 echo "ppPATTERN=$ppPATTERN"
 ##[ -z "`grep "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin`" -o -z "`grep "$ppPATTERN" $HOME/Choices/ROX-Filer/PuppyPin`" ] && echo "returning from remove_pinboard_func wo any Changes" && return
 [ -z "`grep "$ppPATTERN" $HOME/Choices/ROX-Filer/PuppyPin`" ] && return  ##+2011-11-05 added space before closing ]
 ALLNAMES=`grep -o "$ppPATTERN" $HOME/Choices/ROX-Filer/PuppyPin | cut -f 2 -d '"' | tr '\n' ' '` #'geany
 #ALLNAMESH=`grep -o "$ppPATTERN" $HOME/Choices/ROX-Filer/PuppyPin | cut -f 2 -d '"' | tr '\n' ' '` #'geany
 #ALLNAMES="$ALLNAMES $ALLNAMESH"
 #echo "ALLNAMES=$ALLNAMES'"
 #echo "ALLNAMESH=$ALLNAMESH'"

 for oneDRVNAME in $ALLNAMES
 do
  echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <PinboardRemove>
   <Path>$HOME/.pup_event/drive_${oneDRVNAME}</Path>
  </PinboardRemove>
 </env:Body>
</env:Envelope>"  | rox -R  2>$ERR
 done
}


funcCLEAN_DESK_ICONS(){
while read part;do
DRV_NAME=$part remove_pinboard_func #$DRV_NAME
done << _EOI
$(grep -o '/\.pup_event/drive.*' $HOME/Choices/ROX-Filer/PuppyPin |sed -r 's,(.*)(drives)(.*),\2,;s,(.*drive_)(.*)(<.*),\2,')
_EOI
rm -rf $HOME/.pup_event/*
}
funcCLEAN_DESK_ICONS

funcPUPEVENTSTART(){
######################################################################
#stuff to setup at entry...

mkdir -p $HOME/.pup_event
#build the desktop icons...
DRV_CATEGORY='drive'
#KRGPROBEDISK=`probedisk2`

echo > /tmp/PROBEDISK2.txt #KRG
probedisk2 | grep -v -i -E 'DBG|dbg|DEBUG|debug' | sed '/^$/d' | while read line; do
[ "$line" ] || continue
L=`echo $line | sed 's#|$#|DiskWontSay#'`
echo "$L" >> /tmp/PROBEDISK2.txt
done

if [ -d /proc/ide ]; then
PROBEDISK=`cat /tmp/PROBEDISK2.txt | sort -g`
else
PROBEDISK=`cat /tmp/PROBEDISK2.txt`
fi #KRG

#v407 ls120/zip floppy drives are probed every 4 secs...
DRVS_FLOPPY=`echo "$PROBEDISK" | grep '|floppy|' | cut -f 1 -d '|' | cut -f 3 -d '/'`
#v407 same thing for all optical drives...
DRVS_OPTICAL=`echo "$PROBEDISK" | grep '|optical|' | cut -f 1 -d '|' | cut -f 3 -d '/'`
if [ "$ICONDESK" = "false" ]; then
 #only show a single 'drives' icon on desktop...
 DRV_NAME='drives'
 DRV_CATEGORY='any' #see pmount.
 DRV_DESCRIPTION="all drives"
 create_icon_func #needs DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION.
else
 #show all drives on desktop... w476 add ext4...
 #PROBEPART=`probepart -k | grep -E '\|ext4\||\|ntfs\||\|msdos\||\|vfat\||\|ext2\||\|ext3\||\|iso9660\||\|xfs\||\|reiser\||\|reiserfs\||\|udf\|'`
  PROBEPART=`probepart -k | grep -viE "\|swap\||/dev/[hmflr].*\|none\||/dev/sd.*\|none\||\|extended\||ext'd.*\||\|none detected\|"`
 if [ "$FD0ICON" = "true" ]; then #see /etc/eventmanager
#KRG if [ -e /sys/block/fd0 ];then
 for i in `ls /sys/block | grep 'fd' | sort -r`; do #KRG
   PROBEDISK="/dev/$i|floppy|Legacy floppy drive
$PROBEDISK"
   PROBEPART="/dev/$i|vfat|1440
$PROBEPART"
done #KRG
#KRG  fi
 fi

 for oneDRV in `echo "$PROBEDISK" | cut -f 1,2,3 -d '|' | tr ' ' '_' | tr '\n' ' '`
 #for ONEDRV in `echo "$PROBEPART" | cut -f 1,2,3 -d '|' | tr ' ' '_' | tr '\n' ' '`
 do
  DRV_NAME=`echo -n "$oneDRV" | cut -f 1 -d '|' | cut -f 3 -d '/'`
  DRV_CATEGORY=`echo -n "$oneDRV" | cut -f 2 -d '|'`
  DRV_DESCRIPTION=`echo -n "$oneDRV" | cut -f 3 -d '|' | tr '_' ' '`
  [ "$DEBUG" ] && echo "DRV_NAME=$DRV_NAME DRV_CATEGORY=$DRV_CATEGORY DRV_DESCRIPTION=$DRV_DESCRIPTION"
  [ "`echo "$PROBEPART" | grep "$DRV_NAME"`" ] || continue #precaution (such as CD not inserted).
  [ "$DEBUG" ] && echo "'$DRV_NAME' in PROBEDISK and PROBEPART"
  create_icon_func startup #needs DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION, PROBEPART.
 sleep 0.3
 done
fi
}
funcPUPEVENTSTART


funcEXIT(){
if [ "$BACKENDON" = "false" ];then #see /etc/eventmanager.
 killall hotplug2stdout #pup_event_backend_d #no module/firmware hotplug support.
 #...kill hotplug2stdout, as that will cause pup_eventd_backend_d to die.
 #[ -f /sbin/udevd ] && killall udevd #alternative to pup_event_backend_d.
 #[ -x /sbin/pup_event_backend_modprobe_protect ] && /sbin/pup_event_backend_modprobe_protect --stop  ##+++2012-01-18
 [ "`ps-FULL --no-headers -C udevd`" ] && killall udevd
 [ "`ps-FULL --no-headers -C pup_event_backend_modprobe_protect`" ] && pup_event_backend_modprobe_protect --stop
 #exit ##+-2012-01-18
fi
#[ "$HOTPLUGON" = "false" ] && exit
#define EEXIST      17  /* File exists */
[ "$DESKDAEMON" = "false" ] && exit 17 #turn off all frontend hotplug support. see /etc/eventmanager.
}
funcEXIT


LINEP=D005;echo "$0 line '`[ $LINENO ] && echo $LINENO || get_lineno $LINEP`' POWERTIMEOUT='$POWERTIMEOUT'"


POWERTIMEOUT_FUNCS(){
func_powertimeout_1(){
    MINUTECNT=`expr $MINUTECNT + 4`
    if [ $MINUTECNT -gt 59 ];then
    [ "$AUTOUNMOUNT" = "true" ] && auto_unmount_func #v424 automatially unmount a partition if no longer being used (AUTOUNMOUNT set in eventmanager).
    MINUTECNT=0
    fi
}

powertimeout_func(){
    :
}

if [ "$POWERTIMEOUT" != '0' -o "$AUTOUNMOUNT" = "true" -o "$BAT_0" = '1' ];then #w007 power-off computer after inactivity.
powertimeout_func(){
  #MOUSECNT=`expr $MOUSECNT + 4`
  MINUTECNT=`expr $MINUTECNT + 4`
  if [ $MINUTECNT -gt 59 ];then #come in here every minute...
    MINUTECNT=0
   if [ "$BAT_0" = '1' ];then
  BAT_0_CURRENT=`grep 'last full capacity:' "$BAT_0_info_file"`
  BAT_0_CURRENT="${BAT_0_CURRENT//[^[:digit:]]/}"
   if [ $BAT_0_CURRENT -lt $BAT_0_WARN ];then
    aplay /usr/share/audio/2barks.au;aplay /usr/share/audio/2barks.au
    pupmessage -bg red -timeout 30 "Battery State is: $BAT_0_CURRENT
better to plug in ac adapter or poweroff the laptop "
   fi #warn
  fi #bat
   [ "$AUTOUNMOUNT" = "true" ] && auto_unmount_func #v424 automatially unmount a partition if no longer being used (AUTOUNMOUNT set in eventmanager).
  if [ "$POWERTIMEOUT" != '0' ];then
   MOUSECNT=$((MOUSECNT+60))
   CURPOS2=`getcurpos`
   #just a log file without any further purpose :
   #echo "MOUSECNT=$MOUSECNT CURPOS2=$CURPOS2" >> /tmp/pup_event_frontend_d_curpos.log
   #[ "$CURPOS1" = "" ] && CURPOS1="$CURPOS2" ##changed at the beginning from CURPOS1="" to CURPOS1="-1 -1"
   [ "$CURPOS1" != "$CURPOS2" ] && MOUSECNT=0
   CURPOS1="$CURPOS2"
    #[ $MOUSECNT -gt $POWERTIMEOUT ] && wmpoweroff &
    if [ "$MOUSECNT" -gt $POWERTIMEOUT ];then
     aplay /usr/share/audio/2barks.au
     sleep 1
     aplay /usr/share/audio/2barks.au
     xmessage -timeout 60 -bg '#F213AD' -buttons "OK_poweroff :100, NO_KEEP_PUPPY_RUNNING:101" "Choosen POWERTIMEOUT reached of $((POWERTIMEOUT/60)) min .

> If you think it is unapropriate , please go to
> Puppy Eventmanager in the
> System Menu and change this value
"
      if [ "$?" -lt '101' ];then
      echo 'wmpoweroff' > "$TMPXWIN"/wmexitmode.txt
      wmpoweroff &
      fi
    fi
  fi
fi
}
fi
}
POWERTIMEOUT_FUNCS

##+++2013-07-07
#ls -1 --hide=ram* --hide=loop* /sys/block > /tmp/pup_event_frontend_block2
ls -1 /sys/block | grep -vE '^nbd|^ram|^loop|^md|^mtd' > /tmp/pup_event_frontend_block2
cp /tmp/pup_event_frontend_block2 /tmp/pup_event_frontend_block1
##+++2013-07-07

PUPEVENTDAEMON_func(){
###################################################################
#now go into a two-second two-second loop...
while [ 1 ]
do
 sleep 2

 #graceful exit if shutdown X (see /usr/X11R7/bin/restartwm,wmreboot,wmpoweroff)...
 #[ -f "$TMPXWIN"/wmexitmode.txt ] && break  ##+2011-11-07 changed path to "$TMPXWIN"
 [ -f "$TMPXWIN"/wmexitmode.txt ] && return  ##+2011-11-07 changed path to "$TMPXWIN"
 #break gives retrunvalue of 1 ##+++2012-01-11

 #test for any change in /sys/block...
 #ls -1 --hide=ram* --hide=loop* /sys/block > /tmp/pup_event_frontend_block2
 ls -1 /sys/block | grep -vE '^nbd|^ram|^loop|^md|^mtd' > /tmp/pup_event_frontend_block2
 if [ -f /tmp/pup_event_frontend_block_request ];then #w015 (see gparted_shell, puppyinstaller, bootflash)
  sleep 0.1
  REMOVEBLOCK='^'"`cat /tmp/pup_event_frontend_block_request`"'$'
  BLOCKS2=`grep -v "$REMOVEBLOCK" /tmp/pup_event_frontend_block2`
  echo "$BLOCKS2" > /tmp/pup_event_frontend_block2
  rm -f /tmp/pup_event_frontend_block_request
 fi

 #[ ! -f /tmp/pup_event_frontend_block1 ] && cp /tmp/pup_event_frontend_block2 /tmp/pup_event_frontend_block1 ##---2013-07-07 outside while
 #BLOCKDIFF=`/usr/bin/diff /tmp/pup_event_frontend_block1 /tmp/pup_event_frontend_block2`

 BLOCKDIFF=`diff /tmp/pup_event_frontend_block1 /tmp/pup_event_frontend_block2`
 echo "BLOCKDIFF=$BLOCKDIFF"

 #091223 some interfaces, no change in /sys/block when insert/remove a card...
 #note, /proc/partitions can be very slow to update, particularly when remove a card.
 #note, /sys/block/sd*/sd* shows card insertion but may not update on removal -- /usr/local/bin/drive_all will remove an invalid drive icon if clicked on.
 if [ "$BLOCKDIFF" = "" ];then
  BLOCKSPROBE=""
  #for ONETESTDRV in `cat /tmp/pup_event_frontend_block2 | grep '^sd'`
  for ONETESTDRV in `grep '^sd' /tmp/pup_event_frontend_block2` ##+-+2013-07-07
  do
   [ "`echo "$ATADRIVES" | grep "$ONETESTDRV"`" != "" ] && continue
   [ "`cat /sys/block/${ONETESTDRV}/removable 2>/dev/null`" = "0" ] && continue
   if [ ! -e /sys/block/${ONETESTDRV}/${ONETESTDRV}1 ];then #drive exists, but no partition (no card plugged in).
    #[ -d $HOME/.pup_event/drive_${ONETESTDRV}1 ] && BLOCKSPROBE="${BLOCKSPROBE}< ${ONETESTDRV}:"
    [ -d $HOME/.pup_event/drive_${ONETESTDRV}1 ] && BLOCKSPROBE="${BLOCKSPROBE}-${ONETESTDRV}:"
    dd if=/dev/${ONETESTDRV} of=/dev/null bs=512 count=1 >$OUT 2>$ERR #try force kernel to update.
   #else
   # [ ! -d $HOME/.pup_event/drive_${ONETESTDRV}1 ] && BLOCKSPROBE="${BLOCKSPROBE}> ${ONETESTDRV}:"  #-+-2013-07-07
   elif [ ! -d $HOME/.pup_event/drive_${ONETESTDRV}1 ] ; then
    #BLOCKSPROBE="${BLOCKSPROBE}> ${ONETESTDRV}:"
    BLOCKSPROBE="${BLOCKSPROBE}+${ONETESTDRV}:"
   fi
  done
  [ "$BLOCKSPROBE" != "" ] && BLOCKDIFF=`echo -n "$BLOCKSPROBE" | tr ':' '\n'`
 fi

 #########hotplug block event##########
 if [ "$BLOCKDIFF" != "" ];then

  cp -f /tmp/pup_event_frontend_block2 /tmp/pup_event_frontend_block1

   BLOCKSADD=`echo "$BLOCKDIFF" | grep -oe '^+[[:alnum:]]*' | sed 's%^+%%'`
   BLOCKSREM=`echo "$BLOCKDIFF" | grep -oe '^-[[:alnum:]]*' | sed 's%^-%%'`

   PROBEDISK=`probedisk2`
   DRVS_OPTICAL=`echo "$PROBEDISK" | grep '|optical|' | cut -f 1 -d '|' | cut -f 3 -d '/'` #update
   DRVS_FLOPPY=`echo "$PROBEDISK" | grep '|floppy|' | cut -f 1 -d '|' | cut -f 3 -d '/'` #update

  ACTION=add
  SUBSYSTEM=block
  DEVTYPE=disk
  for DRV_NAME in $BLOCKSADD
  do
   [ -e /sys/block/$DRV_NAME ] || continue #precaution
   DEVPATH=/block/$DRV_NAME
   odPATTERN='^/dev/'"$DRV_NAME"'|'
   IFS='|' read DRV_NAME DRV_CATEGORY DRV_DESCRIPTION PARTS <<_EOI
$(echo "$PROBEDISK" | grep "$odPATTERN")
_EOI
   DRV_NAME="${DRV_NAME##*/}"
   [ "$ICONDESK" = "true" ] && create_icon_func #uses DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION
   [ "$HOTPLUGNOISY" = "true" ] && $HOME/.pup_event/drive_${DRV_NAME}/AppRun ${DRV_CATEGORY} & #handler script.
  done

  ACTION=remove
  for DRV_NAME in $BLOCKSREM
  do
   DEVPATH=/block/$DRV_NAME
   if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, refresh it.
    killall gtkdialog_pmount 2>$ERR
    sleep 0.1
    LANG=$OLDLANG pmount & #100613 fix from shinobar.
   fi
   remove_pinboard_func #needs DRV_NAME
   rm -rf $HOME/.pup_event/drive_${DRV_NAME}* 2>$ERR
  done

 fi

 #######four second timeout procesing#########
 if [ $TOGGLE -eq 0 ];then #slow down to every 4 seconds.
  TOGGLE=1
  continue
 else
  TOGGLE=0
 fi
 #######four second timeout procesing#########

 #SAVECNT=`expr $SAVECNT + 4`
 SAVECNT=$((SAVECNT+4))
 if [ $RAMSAVEINTERVAL -ne 0 -a $SAVECNT -gt $RAMSAVEINTERVAL ];then
  touch /tmp/snapmergepuppyrequest #request to savepuppy_func.
  SAVECNT=0
 fi

 #monitor free memory, periodic save of tmpfs top layer...
 case $PUPMODE in
  3|7|13)  #flash
   free_flash_func
   savepuppy_func
  ;;
  16|24|17|25) #unipup.
   free_initrd_func
  ;;
  *)
   free_func
  ;;
 esac

if [[ -f /tmp/pup_event_manager.flg ]];then ###2012-01-18

    . /etc/eventmanager ###2012-01-18
    EXIT_func
    RAM_POWER_func
    POWERTIMEOUT_FUNCS
    rm /tmp/pup_event_manager.flg
 if [[ -f /tmp/pup_event_icon_change_flag ]]; then  #KRG

    Floppies=`ls /sys/block | grep 'fd[0-9]' | sort -r`
    if [ -d /proc/ide ] ; then
    Drives=`ls /sys/block | grep -E '^sd|^hd|^sr|^mmc' | sort -r`
    else
    Drives=`ls /sys/block | grep -E '^sd|^hd|^sr|^mmc'`
    fi
    for DRV_NAME in $Drives drives; do
    remove_pinboard_func
    done
    for DRV_NAME in $Floppies; do
    remove_pinboard_func
    done
    SCRN_VARS_func
    JWM_func
    ROX_func
    MAX_XY_func
    START_XY_ICON_VALUES_func
    PUPEVENTSTART_func
    sleep 1
    rm -f /tmp/pup_event_icon_change_flag

fi;fi


if [ "$ZCDPOLL" != "false" ];then
 #unfortunately, we have to poll at regular intervals to see if a cd is inserted...
 for ONEOPTICAL in $DRVS_OPTICAL
 do
  [ "$ONEOPTICAL" ] || continue #precaution
  probe_optical_func $ONEOPTICAL
 done
 #v407 poll to see if a ls120 or zip floppy diskette inserted...
 for ONEFLOPPY in $DRVS_FLOPPY
 do
  [ "$ONEFLOPPY" ] || continue #precaution
  probe_floppy_func $ONEFLOPPY
 done
fi

if [ "$1" ]; then echo "$0 daemon started ."; shift; fi #KRG


 #some apps should not be disturbed by this background stuff...
 RUNPS=`ps`
 #w482 add xorriso...
 #[ "`echo "$RUNPS" | grep -E 'xorriso|xorrecord|xine|petget|wget|axel|dotpup|mplayer|gcurl|gimv|burniso2cd|growisofs|cdrecord|pcdripper|xfmedia|xmms|ripoff|pdvdrsab|pburn|mhwaveedit|installpkg\.sh|downloadpkgs\.sh'`" != "" ] && continue
 [ "`echo "$RUNPS" | grep -E 'xorriso|xorrecord|petget|wget|axel|dotpup|gcurl|gimv|burniso2cd|growisofs|cdrecord|pcdripper|xfmedia|ripoff|pdvdrsab|pburn|installpkg\.sh|downloadpkgs\.sh'`" != "" ] && continue

 powertimeout_func

done #2*2 second loop.
}
PUPEVENTDAEMON_func start
RV="$?"
echo "$0 stopped with exitcode '$RV'"
exit "$RV"
###END###
