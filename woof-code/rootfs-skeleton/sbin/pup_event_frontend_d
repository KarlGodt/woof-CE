#!/bin/ash
#(c) Copyright 2008 Barry Kauler puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#this is /sbin/pup_event_frontend_d, created June 2008 for Puppy Linux 4.x, by Barry Kauler.
#This script is part of 'pup_event', my (very) light-weight alternative to udev.
#responds to events posted to /tmp/pup_event_backend_s by /sbin/pup_event_backend_d.
#this script is launched from $home/.xinitrc.
#v407 added hotplug support for zip and ls120 diskettes.
#v407 hotplug fix for /dev/hd* optical drives.
#v408 fix for k2.6.21.7, does not set DEVTYPE.
#v408 rewrite, now works by polling /sys/block.
#v410 rerwin: detect optical disc not inserted.
#v410 avoid exact overlapping icons.
#v411 rerwin: avoid icon getting duplicated if it is renamed
#v412 workaround, someone had RAMSAVEINTERVAL not set.
#w004 LANG=C, faster. /bin/ash, even faster.
#w007 mouse inactivity computer power-down.
#w015 handle request to update one drives icons.
#w471 fix for slow rox startup on slow cpus.
#w476 add support for ext4 f.s.
#w482 k2.6.25.16 /proc/partitions (read by probepart) can be slow to update.
#v424 add right-click menu item to unmount all mounted partitions.
#v424 experimental automatic unmounting.
#v431 shinobar: fix for overlapping icons at some screen resolutions.
#091208 fine-tune placement of desktop drive icons.
#091223 partial fix, some interfaces, no change in /sys/block when insert/remove a card.
#100613 some locales (ex: nl_BE) have ',' instead of '.' in numeric, ex o/p of 'dc'.

########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.6-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.6-KRG-i486·#1·SMP·Sun·Jan·2·20:32:12·GMT-1·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Mon·Oct·24·22:53:50·CEST·2011
# TODO1: floppy drives : fd0 shown instead of fd1
#
#
#
# TODO1: change path to /tmp/wmexitmode.txt
########################################################################

[ "$DISPLAY" ] || exit #X not running.

kill_func(){
    #MEPID=$$
    #PIDS=`pidof ${0##*/} | tr ' ' '\n'`
    #PIDS=`echo "$PIDS" | grep -vw "$MEPID"`
    PIDS=`pidof -o $$ -o $PPID -o %PPID ${0##*/}`
    for pid in $PIDS; do
    kill -9 $pid   ; done
}

case $1 in
stop)
kill_func
exit
;;
restart)
kill_func
;;
*) : ;;
esac

##+++2012-04-02
pidof -o $$ -o %PPID -o %PPID ${0##*/} && { echo "$0: Already Running.";exit 1; }
pidof ROX-Filer || fixitup
##+++2012-04-02

#v424 experiment, automatic unmounting...
auto_unmount_func() {
 for ONEMNTPT in `mount | grep '^/dev/' | grep -vE '^/dev/loop|^/dev/ram' | cut -f 3 -d ' ' | grep -v '^/initrd/' | grep -v '^/$' | tr '\n' ' '`
 do
  if [ "`fuser -v -m $ONEMNTPT`" = "" ];then
   sync
   /bin/umount "$ONEMNTPT" ; umVAL=$?
   #code from pmount: fix zombie process prevents partition unmount, invisible to fuser...
   if [ $umVAL -ne 0 ];then
    ZOMBIES=`/bin/ps -H -A | grep '<defunct>' | sed -e 's/  /|/g' | grep -v '|||' | cut -f 1 -d ' ' | tr '\n' ' '`
    for ONEZOMBIE in $ZOMBIES
    do
     kill $ONEZOMBIE 2>/dev/null
    done
    /bin/umount "$ONEMNTPT" ; umVAL=$?
   fi
  fi
 done
}

free_initrd_func() { #UniPup, runs entirely in initramfs.
 SIZEFREEK=`free | grep '^Total:' | tr -s ' ' | cut -f 4 -d ' '`
 SIZEFREEM=`expr $SIZEFREEK \/ 1024`
 [ -s /tmp/pup_event_sizefreem ] && PREVSIZEFREEM=`cat /tmp/pup_event_sizefreem`
 [ "$PREVSIZEFREEM" = "$SIZEFREEM" ] && return
 #save to a file, freememapplet can read this...
 echo "$SIZEFREEM" > /tmp/pup_event_sizefreem
}

free_func() { #called every 4 seconds.
 case $PUPMODE in
  6|12)
   SIZEFREEM=`/bin/df -m | grep ' /initrd/pup_rw$' | tr -s ' ' | cut -f 4 -d ' '`
  ;;
  *)
   SIZEFREEM=`/bin/df -m | grep ' /$' | tr -s ' ' | cut -f 4 -d ' '`
  ;;
 esac
 WARNMSG=""
 [ -s /tmp/pup_event_sizefreem ] && PREVSIZEFREEM=`cat /tmp/pup_event_sizefreem`
 [ $PREVSIZEFREEM -eq $SIZEFREEM ] && return
 if [ $SIZEFREEM -lt 10 ];then
  if [ -d /initrd/pup_rw/lib/modules/all-firmware -a "$ZDRVINIT" = "yes" ];then
   delete_func /initrd/pup_rw #save layer is at top, delete mods.
  else
   WARNMSG="WARNING: Personal storage getting full, strongly recommend you resize it or delete files!"
  fi
 fi
 VIRTUALFREEM=$SIZEFREEM
 if [ "$ZDRVINIT" = "yes" ];then #full set of modules present, moved from initrd.
  if [ -d /initrd/pup_rw/lib/modules/all-firmware ]; then #have not yet deleted modules.
   #calc the "virtual" free space (would have if modules not there...)
   VIRTUALFREEM=`expr $SIZEFREEM + $SIZE_MODS_M`
   VIRTUALFREEM=`expr $VIRTUALFREEM - 1` #allow for some mods will not be deleted.
  fi
 fi
 #save to a file, freememapplet can read this...
 echo "$VIRTUALFREEM" > /tmp/pup_event_sizefreem
 [ $PUPMODE -eq 5 -o $PUPMODE -eq 2 ] && return 0 #5=first boot, no msgs at top of screen.
 if [ "$WARNMSG" ]; then
  killall yaf-splash
  yaf-splash -margin 2 -bg red -bw 0 -placement top -font "9x15B" -outline 0 -text "$WARNMSG" &
 fi
}

free_flash_func() { #PUPMODE 3,7,13. called every 4 seconds.
 WARNMSG=""
 SIZEFREEM=`/bin/df -m | grep ' /initrd/pup_ro1$' | tr -s ' ' | cut -f 4 -d ' '`
 SIZETMPM=`/bin/df -m | grep ' /initrd/pup_rw$' | tr -s ' ' | cut -f 4 -d ' '`
 [ -s /tmp/pup_event_sizefreem ] && PREVSIZEFREEM=`cat /tmp/pup_event_sizefreem`
 [ -s /tmp/pup_event_sizetmpm ] && PREVSIZETMPM=`cat /tmp/pup_event_sizetmpm`
 [ $PREVSIZEFREEM -eq $SIZEFREEM -a $PREVSIZETMPM -eq $SIZETMPM ] && return
 if [ $SIZEFREEM -lt 10 ]; then
  if [ -d /initrd/pup_ro1/lib/modules/all-firmware -a "$ZDRVINIT" = "yes" ];then
   delete_func /initrd/pup_ro1 #delete modules in save layer only.
  else
   WARNMSG="WARNING: Personal storage file getting full, strongly recommend you resize it or delete files!"
  fi
 fi
 if [ $SIZETMPM -lt 5 ]; then
  if [ -d /initrd/pup_rw/lib/modules/all-firmware -a "$ZDRVINIT" = "yes" ];then
   delete_func /initrd/pup_rw #delete modules in top tmpfs layer only.
  else
   WARNMSG="WARNING: RAM working space only ${SIZETMPM}MB, recommend a reboot which will flush the RAM"
  fi
 fi
 VIRTUALFREEM=$SIZEFREEM
 if [ "$ZDRVINIT" = "yes" ]; then #full set of modules present at bootup.
  if [ -d /initrd/pup_ro1/lib/modules/all-firmware ]; then #have not yet deleted modules.
   #calc the "virtual" free space (would have if modules not there...)
   VIRTUALFREEM=`expr $SIZEFREEM + $SIZE_MODS_M`
   VIRTUALFREEM=`expr $VIRTUALFREEM - 1` #allow for some mods will not be deleted.
  fi
 fi
 echo "$SIZETMPM" > /tmp/pup_event_sizetmpm
 #save to a file, freememapplet can read this...
 echo "$VIRTUALFREEM" > /tmp/pup_event_sizefreem
 if [ "$WARNMSG" ]; then
  killall yaf-splash
  yaf-splash -margin 2 -bg red -bw 0 -placement top -font "9x15B" -outline 0 -text "$WARNMSG" &
 fi
}

savepuppy_func() { #called every 4 seconds.
 if [ -f /tmp/snapmergepuppyrequest ]; then #by request.
  rm -f /tmp/snapmergepuppyrequest
  yaf-splash -font "8x16" -outline 0 -margin 4 -bg orange -placement top -text "Saving RAM to 'pup_save' file..." &
  YAFPID=$!
  sync
  nice -n 19 /usr/sbin/snapmergepuppy
  kill $YAFPID
 fi
}

#note that init script in initrd takes care of restoring modules if enough space.
delete_func() { #called from free_func() and free_flash_func(). delete modules to create more free space.
 #passed param: /pup_rw=delete tmpfs top layer only.
 DEL_LAYER=$1
 #find out what modules are loaded, keep those...
 for ONEKEEP_MOD in `lsmod | cut -f 1 -d ' ' | grep -v 'Module'`
 do
  ONEKEEP_SPEC=`modinfo -F filename ${ONEKEEP_MOD}`
  ONEKEEP_PATH=`dirname $ONEKEEP_SPEC`
  mkdir -p /tmp${ONEKEEP_PATH}
  cp -af ${ONEKEEP_SPEC} /tmp${ONEKEEP_PATH}/
 done
 if [ "$DEL_LAYER" ]; then
  rm -rf ${DEL_LAYER}/lib/modules
 else
  if [ $PUPMODE -eq 3 -o $PUPMODE -eq 7 -o $PUPMODE -eq 13 ];then
   rm -rf ${SAVE_LAYER}/lib/modules
  fi
  rm -rf /lib/modules
 fi
 cp -af /tmp/lib/modules /lib/modules
 depmod -a
}


#v407 fixed so works for sr* and hd* optical...
probe_optical_func() { #passed param is sr<0-9> or hd<a-z>
 DRV_NAME="$1"
 DRV_CATEGORY="optical"
 CDSTATUS2="0"
 opticalPATTERN='^/dev/'"${DRV_NAME}"' '
 [ "`grep "$opticalPATTERN" /proc/mounts`" ] && return #only check cd if unmounted.
 cddetect_quick -d/dev/${DRV_NAME} >/dev/null 2>&1 #very fast.
 #...returns 0 if disc inserted, else 255.
 CDSTATUS2="$?"
 [ "$CDSTATUS2" != "0" -a -d $home/.pup_event/drive_${DRV_NAME} ] && rm -rf $home/.pup_event/drive_${DRV_NAME} #v410 ensure no drive directory if drive empty.
 echo "$CDSTATUS2" > /tmp/pup_event_frontend_identify2_${DRV_NAME}
 [ -f /tmp/pup_event_frontend_identify1_${DRV_NAME} ] || cp /tmp/pup_event_frontend_identify2_${DRV_NAME} /tmp/pup_event_frontend_identify1_${DRV_NAME}
 CDSTATUS1=`cat /tmp/pup_event_frontend_identify1_${DRV_NAME}`
 [ "$CDSTATUS1" = "$CDSTATUS2" ] && return
 cp -f /tmp/pup_event_frontend_identify2_${DRV_NAME} /tmp/pup_event_frontend_identify1_${DRV_NAME}
 if [ "$CDSTATUS2" = "0" ];then
  #VENDOR="`cat /sys/block/${DRV_NAME}/device/vendor | tr -s ' '`"
  #MODEL="`cat /sys/block/${DRV_NAME}/device/model | tr -s ' '`"
  #DRV_DESCRIPTION="$VENDOR $MODEL"
  opticalPATTERN='^/dev/'"${DRV_NAME}"'|'
  DRV_DESCRIPTION=`echo "$PROBEDISK" | grep "$opticalPATTERN" | cut -f 3 -d '|'`
  create_icon_func #requires DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION.
  [ "$HOTPLUGNOISY" = "true" ] && $home/.pup_event/drive_${DRV_NAME}/AppRun optical & #handler script.
#KRG else
#KRG  rm -rf $HOME/.pup_event/drive_${DRV_NAME} 2>/dev/null
#KRG  remove_pinboard_func #needs DRV_NAME
 fi
}

#v407 detect ls120 and zip disc inserted...
probe_floppy_func() { #passed param is drive name (exs: hdc, sdc)
 DRV_NAME="$1"
 DRVMAIN=`echo -n "$DRV_NAME" | cut -c 1,2` #sd or hd.
 DRV_CATEGORY="floppy"
 floppyPATTERN="^/dev/$DRV_NAME"
 [ "`grep "$floppyPATTERN" /proc/mounts`" ] && return #mounted.
 if [ "$DRVMAIN" = "hd" ];then
  cat /proc/ide/${DRV_NAME}/identify > /tmp/pup_event_frontend_identify2_${DRV_NAME}
 else
  #this method not as good, as only detects disc if it has a partition...
  floppyPATTERN=" ${DRV_NAME}"
  grep "$floppyPATTERN" /proc/partitions > /tmp/pup_event_frontend_identify2_${DRV_NAME}
 fi
 [ -f /tmp/pup_event_frontend_identify1_${DRV_NAME} ] || cp /tmp/pup_event_frontend_identify2_${DRV_NAME} /tmp/pup_event_frontend_identify1_${DRV_NAME}
 [ "`diff -s /tmp/pup_event_frontend_identify1_${DRV_NAME} /tmp/pup_event_frontend_identify2_${DRV_NAME} | grep ' are identical'`" ] && return
 cp -f /tmp/pup_event_frontend_identify2_${DRV_NAME} /tmp/pup_event_frontend_identify1_${DRV_NAME}
 FLOPPYSTATUS=1
 [ "`disktype /dev/${DRV_NAME} 2>&1 | grep 'I/O error'`" ] || FLOPPYSTATUS=0
 if [ "$FLOPPYSTATUS" = "0" ];then
  if [ "$DRVMAIN" = "hd" ];then
   DRV_DESCRIPTION=`cat /proc/ide/${DRV_NAME}/model`
  else
   DRV_DESCRIPTION=`cat /sys/block/${DRV_NAME}/device/model | tr -s ' '`
  fi
  create_icon_func #requires DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION.
  [ "$HOTPLUGNOISY" = "true" ] && $home/.pup_event/drive_${DRV_NAME}/AppRun floppy & #handler script.
#KRG else
#KRG  rm -rf $HOME/.pup_event/drive_${DRV_NAME} 2>/dev/null
#KRG  remove_pinboard_func #needs DRV_NAME
 fi
}

OLDLANG=$LANG #100613
export LANG=C #w004

#v408 when testing k2.6.21.7, no DEVTYPE, had to modify udev rules which causes udevd to
#do multiple overlapping writes to /tmp/pup_event_backend_s. Even with 2.6.25.x, plugging
#in two USB drives at once can cause this. So, dropping that, going back to primitive,
#simple polling loop.

sleep 2 #let the dust settle after X has started.
#w471 slow cpus need more delay (well, rox does)...
old_rox_delay(){
DELAYFACTOR=0
CPUMHZ=`grep -m 1 -i '^cpu MHz' /proc/cpuinfo | tr -d ' ' | cut -f 2 -d ':' | cut -f 1 -d '.'`
[ $CPUMHZ ] && [ $CPUMHZ -gt 100 ] && DELAYFACTOR=`expr 1100 \/ $CPUMHZ`
[ $DELAYFACTOR -gt 0 ] && sleep $DELAYFACTOR
}
until test "`pidof ROX-Filer`"; do sleep 1s; done

#v404 /usr/sbin/video-wizard (Xvesa) does create /tmp/pup_event_icon_change_flag
#which /sbin/clean_desk_icons reads via .xinirc when X starts, to wipe all drive icons.
#however I think it would be good to test here also if X mode not yet settled on...
if [ -f /tmp/videomode ];then #only exists during X resolution setup.
 if [ "`readlink /usr/bin/X`" = "Xvesa" ];then
  while [ -f /tmp/videomode ];do
   sleep 1
  done
 fi
fi

TOGGLE=1
SAVECNT=0
MOUSECNT=0 #w007
MINUTECNT=0 #w007
CURPOS1="" #w007
echo -n "" > /tmp/pup_event_frontend_d_curpos.log #w007

ZDRV='';ZDRVINIT='no' #these usually set in PUPSTATE.
. /etc/rc.d/PUPSTATE
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/X11R7/bin"
KERNVER=`uname -r`
. /etc/eventmanager #has RAMSAVEINTERVAL, ICONDESK, HOTPLUGNOISY, ICONPARTITIONS, BACKENDON, POWERTIMEOUT
. /etc/rc.d/functions4puppy4

SCRN_VARS_func() {  #KRG
SCRNXY=`xwininfo -root | grep -o '\-geometry .*' | tr -s ' ' | cut -f 2 -d ' ' | cut -f 1 -d '+'` #orig
SCRN_X=`echo -n "$SCRNXY" | cut -f 1 -d 'x'` #orig
SCRN_Y=`echo -n "$SCRNXY" | cut -f 2 -d 'x'` #orig
} #KRG
SCRN_VARS_func

[ "$RAMSAVEINTERVAL" ] || RAMSAVEINTERVAL=30 #412
RAMSAVEINTERVAL=`expr $RAMSAVEINTERVAL \* 60` #convert minutes to seconds.

[ "$POWERTIMEOUT" ] || POWERTIMEOUT=0 #w007
POWERTIMEOUT=`expr $POWERTIMEOUT \* 60` #convert minutes to seconds.

SIZE_MODS_M=0
if [ "$ZDRVINIT" = "yes" ];then
 #all mods were in initrd at bootup, then moved to main f.s.
 SIZE_MODS_M=`du -m -s /lib/modules | cut -f 1`
fi
RETVALm=1
PREVSIZETMPM=0
PREVSIZEFREEM=0




format_size_func() {
 [ $SIZE ] || SIZE=0
 if [ $SIZE -gt 1048576 ];then #1024*1024
  SIZE=`LANG=$OLDLANG dc $SIZE 1048576 \/ p` #100613 dc o/p '.' if LANG=C.
  SIZE="`LANG=$OLDLANG printf "%.1f" $SIZE`GB" #100613
 else
  if [ $SIZE -gt 99 ];then
   SIZE="`expr $SIZE \/ 1024`MB"
  else
   SIZE=`LANG=$OLDLANG dc $SIZE 1024 \/ p` #100613
   SIZE="`LANG=$OLDLANG printf "%.1f" $SIZE`MB" #100613
  fi
 fi
 [ "$SIZE" = "0.0MB" ] && SIZE="0"
 [ "$SIZE" = "0,0MB" ] && SIZE="0" #100613
}

create_appinfo_func() { #needs INFO, DRV_CATEGORY, MOREITEMS, ONEDRVNAME
   echo "<?xml version=\"1.0\"?>
<AppInfo>
  <Summary>${INFO}</Summary>
  <About>
   <Purpose>Drive icons are part of Puppy Event Manager, see System menu</Purpose>
   <Authors>Barry Kauler LGPL 2008</Authors>
  </About>
  <AppMenu>
   <Item option=\"pmount_${DRV_CATEGORY}\" icon=\"gtk-harddisk\"><Label>Run Pmount Puppy Drive Mounter</Label></Item><Item option=\"eventmanager\" icon=\"gtk-execute\"><Label>Run Desktop Drive Icon Manager</Label></Item>${MOREITEMS}
  </AppMenu>
</AppInfo>" > $home/.pup_event/drive_${ONEDRVNAME}/AppInfo.xml
}


HOME_func(){  #KRG
home="$HOME"
[ "$home" = "/" ] && home="/root"
echo "home='$home'"
}  #KRG
HOME_func  #KRG


JWM_func(){
#CWM=`cat /etc/windowmanager`
read CWM </etc/windowmanager
if [ "$CWM" = "jwm" ]; then
JwmL=`grep -E -i 'Tray | autohide | insert | x | y | insert' $home/.jwmrc-tray`
JWMTpos=`echo $JwmL | grep -o 'y=.*$' | cut -f 1 -d ' ' | cut -f 2 -d '"'`
[ -z "$JWMTpos" ] && JWMTpos="-1"
HEIGHT=`echo $JwmL | grep -o 'height=.*$' | tr -d ' ' | cut -f 2 -d '"'`
fi
[ -z "$HEIGHT" ] && HEIGHT=28

[ "$HEIGHT" = "20" -o "$HEIGHT" = "28" ] && HP=1
[ "$HEIGHT" = "34" -o "$HEIGHT" = "42" ] && HP=2
[ -z "$HP" -o "$HP" -lt 1 -o "$HP" -gt 2 ] && HP=1
}
JWM_func

ROX_func(){
CONFFILEROX="$home/.config/rox.sourceforge.net/ROX-Filer/Options"
PIN_GRID_STEP=`grep "pinboard_grid_step" $CONFFILEROX | sed -e "s/ *<[^>]*>//g"`
[ -z "$PIN_GRID_STEP" ] && PIN_GRID_STEP=16 #16=medium.
[ "$PIN_GRID_STEP" -le 0 ] && PIN_GRID_STEP=16 #precaution.

echo "PIN_GRID_STEP='$PIN_GRID_STEP'"
PIN_GRID_STEP2=`expr $PIN_GRID_STEP \/ 2`

[ -z "$ICON_PLACE_START_GAP" ] && ICON_PLACE_START_GAP=32
##[ -z "$ICON_PLACE_EDGE_GAP" ] && ICON_PLACE_EDGE_GAP=64
[ -z "$ICON_PLACE_ORIENTATION" ] && ICON_PLACE_ORIENTATION='bottom'
if [ -z "$ICON_PLACE_SPACING" ] ; then
##case "$ICON_PLACE_ORIENTATION" in
##bottom)

DriveIconsize=`grep -o 'DRVICON=.*' /etc/rc.d/functions4puppy4  | grep -o -e '[[:digit:]]*' | head -n 1`  ##+2022_11_05 added -e to grep -o

ICON_PLACE_SPACING=$(( (( $DriveIconsize / $PIN_GRID_STEP ) + 1 ) * $PIN_GRID_STEP ))
func99(){
case "$SCRN_Y" in
480)  ICON_PLACE_SPACING=$(( $ICON_PLACE_SPACING + ( $PIN_GRID_STEP * 1 ) ))
;;
600)  ICON_PLACE_SPACING=$(( $ICON_PLACE_SPACING + ( $PIN_GRID_STEP * 2 ) ))
;;
768)  ICON_PLACE_SPACING=$(( $ICON_PLACE_SPACING + ( $PIN_GRID_STEP * 3 ) )) #24
;;
1024) ICON_PLACE_SPACING=$(( $ICON_PLACE_SPACING + ( $PIN_GRID_STEP * 4 ) )) #32
;;
1200) ICON_PLACE_SPACING=$(( $ICON_PLACE_SPACING + ( $PIN_GRID_STEP * 5 ) )) #40
;;
esac
}
fi

VALSY=$(( $SCRN_Y / $PIN_GRID_STEP ))
for i in `seq 1 $VALSY` ; do PGSYvals="$PGSYvals `echo $( dc $i $PIN_GRID_STEP \* p )`" ; done
echo "VALSY='$VALSY'"
echo "PGSYvals='$PGSYvals'"

VALSX=$(( $SCRN_X / $PIN_GRID_STEP ))
for i in `seq 1 $VALSX` ; do PGSXvals="$PGSXvals `echo $( dc $i $PIN_GRID_STEP \* p )`" ; done
}
ROX_func

MAX_XY_func(){
MAX_X=`expr $SCRN_X`

}
MAX_XY_func

START_XY_ICON_VALUES_func() {  #KRG
case $ICON_PLACE_ORIENTATION in #see /etc/eventmanager
  bottom)
   COORD_X=$ICON_PLACE_START_GAP #default 32, see /etc/eventmanager
   case "$JWMTpos" in
   0)
   COORD_YSt=$(( 0 + $ICON_PLACE_START_GAP )) # ICON_PLACE_EDGE_GAP default 64, see /etc/eventmanager
   ;;
   *)
   COORD_YSt=`expr $SCRN_Y - $ICON_PLACE_EDGE_GAP - \( $PIN_GRID_STEP \* $HP \)` #default 64, see /etc/eventmanager
   if [ -z "`echo "$PGSYvals" | grep "$COORD_YSt"`" ] ; then
     for i in `seq 1 $PIN_GRID_STEP` ; do
     TEST=$(( $COORD_YSt - $i ))
     echo $TEST
     [ -n "`echo "$PGSYvals" | grep "$TEST"`" ] && { COORD_YSt=$TEST;break; }
     done
   fi
   ;;
   esac

   COORD_Y=$COORD_YSt
   echo '$COORD_Y='$COORD_Y
   #COORD_Y=`expr \( $COORD_Y - $PIN_GRID_STEP2 \) \/ $PIN_GRID_STEP '*'  $PIN_GRID_STEP` #430: - $PINgridSTEP2
   COORD_Y=`expr \( $COORD_Y \) / $PIN_GRID_STEP '*'  $PIN_GRID_STEP`
   echo '$COORD_Y='$COORD_Y
   ;;


  top)
  COORD_X=$ICON_PLACE_START_GAP #default 32, see /etc/eventmanager
  case "$JWMTpos" in
   0)
   COORD_YSt=$(( $ICON_PLACE_START_GAP + $JWMT_Yvar )) ###ICON_PLACE_EDGE_GAP=64 too large at 1024x768
   ;;
   *)
   COORD_YSt=$ICON_PLACE_START_GAP
   ;;
   esac
   COORD_Y=$COORD_YSt
   #COORD_Y=`expr \( $COORD_Y + $PIN_GRID_STEP2 \) / $PIN_GRID_STEP '*'  $PIN_GRID_STEP`
   COORD_Y=`expr \( $COORD_Y + \) / $PIN_GRID_STEP '*'  $PIN_GRID_STEP`
   ;;
   left)
   COORD_X=$ICON_PLACE_START_GAP #EDGEdefault 64, see /etc/eventmanager
   case "$JWMTpos" in
   0)
   COORD_YSt=$(( $ICON_PLACE_START_GAP + $JWMT_Yvar ))
   ;;
   *)
   COORD_YSt=$ICON_PLACE_START_GAP #default 32, see /etc/eventmanager
   ;;
   esac
   COORD_Y=$COORD_YSt
   COORD_Y=`expr \( $COORD_Y + $PIN_GRID_STEP2 \) / $PIN_GRID_STEP '*'  $PIN_GRID_STEP`
   ;;
   right)
   COORD_X=`expr $SCRN_X - \( 2 \* $ICON_PLACE_SPACING \) - $PIN_GRID_STEP2` #default 64, see /etc/eventmanager
   echo JWMTpos=$JWMTpos
   case "$JWMTpos" in
   0)
   COORD_YSt=$(( $ICON_PLACE_START_GAP + $JWMT_Yvar )) #default 32, see /etc/eventmanager
   ;;
   *)
   COORD_YSt=$ICON_PLACE_START_GAP #default 32, see /etc/eventmanager
   ;;
   esac
   COORD_Y=$COORD_YSt
   COORD_Y=`expr \( $COORD_Y + $PIN_GRID_STEP2 \) / $PIN_GRID_STEP '*'  $PIN_GRID_STEP`
   echo right COORD_Y=$COORD_Y
   ;;
esac
}
START_XY_ICON_VALUES_func #KRG

VAR_VARS_func(){
LINE=1
}
VAR_VARS_func

free_coord() {
 #find a free place on desktop. v410 avoid exact overlapping icons...
 #091208 finetune placement, also any side of screen...
 #read the coords grid, code from shinobar...
 #sleep 1
 COORDSGRID1=`grep -o -e ' x="[0-9]*" y="[0-9]*" ' $home/Choices/ROX-Filer/PuppyPin` # | sed 's/[0-9]"/"/g'`
 COORDSGRID2=`grep -o -e ' x="[0-9]*" y="[0-9]*" ' $home/Choices/ROX-Filer/PuppyPin`
 COORDSGRID="`echo "$COORDSGRID1"\n"$COORDSGRID2"`"
 echo "$COORDSGRID" | head -n 2

 case $ICON_PLACE_ORIENTATION in #see /etc/eventmanager
  bottom)

   echo 'X='"$COORD_X"'= Y='"$COORD_Y"'= '"$ONEDRVNAME"
   xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   xyCNT=0 #precaution.

   while [ 1 ];do

    xgPATTERN=`echo -n "$xPATTERN"`  # | sed 's/[0-9]"/"/g'
    echo "    xgPATTERN=$xgPATTERN"'='

    [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" ] || { echo breaking now;break; }
    COORD_X=`expr $COORD_X + $ICON_PLACE_SPACING`

    if [ "$COORD_X" -gt "$MAX_X" ];then #start next line up.
     LINE=$(( $LINE + 1 ))
     COORD_Y=`expr $COORD_Y - $ICON_PLACE_SPACING - $PIN_GRID_STEP`  ###- $PIN_GRID_STEP`  ### - $FONTSfac \( $LINE \* $FBUF \) - 8` #SCRN_Y@1024:-8
     if [ -z "`echo "$PGSYvals" | grep "$COORD_Y"`" ] ; then
     for i in `seq 1 $PIN_GRID_STEP` ; do
     TEST=$(( $COORD_Y - $i ))
     echo $TEST
     [ -n "`echo "$PGSYvals" | grep "$TEST"`" ] && COORD_Y=$TEST && break
     done
     fi
     COORD_X=$ICON_PLACE_START_GAP

     echo 'COORD_Y='"$COORD_Y"'= COORD_X='"$COORD_X"'= LINE='"$LINE"'='
    fi

    xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "

   done
   #echo
  ;;
  top)

   xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   xyCNT=0 #precaution.
   while [ 1 ];do
    xgPATTERN=`echo -n "$xPATTERN"` # |  sed 's/[0-9]"/"/g'`"
    [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" ] || break
    COORD_X=`expr $COORD_X + $ICON_PLACE_SPACING`
    if [ $COORD_X -gt $MAX_X ];then #start next line down.

     COORD_Y=`expr $COORD_Y + $ICON_PLACE_SPACING`
     COORD_X=$ICON_PLACE_START_GAP
    fi
    xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   done
  ;;
  left)

   xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   xyCNT=0 #precaution.
   while [ 1 ];do
    xgPATTERN=`echo -n "$xPATTERN"` # |  sed 's/[0-9]"/"/g'`"
    [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" ] || break
    COORD_Y=`expr $COORD_Y + $ICON_PLACE_SPACING`
    if [ $COORD_Y -gt $MAX_Y ];then #start next row.

     COORD_X=`expr $COORD_X + $ICON_PLACE_SPACING `
     COORD_Y=$ICON_PLACE_START_GAP
    fi
    xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   done
  ;;
  right)

   xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   xyCNT=0 #precaution.
   while [ 1 ];do
    xgPATTERN=`echo -n "$xPATTERN"` # |  sed 's/[0-9]"/"/g'`"
    [ "`echo "$COORDSGRID" | grep "$xgPATTERN"`" ] || break
    COORD_Y=`expr $COORD_Y + $ICON_PLACE_SPACING`
    if [ "$COORD_Y" -gt "$MAX_Y" ];then #start next row back.

     COORD_X=`expr $COORD_X - $ICON_PLACE_SPACING`
     COORD_Y=$ICON_PLACE_START_GAP
    fi
    xPATTERN=" x=\"${COORD_X}\" y=\"${COORD_Y}\" "
   done
  ;;
 esac
}

add_pinboard_func() { #needs ONEDRVNAME, DRV_CATEGORY, FSTYPE
 #ppPATTERN=' label="'"$ONEDRVNAME"'"'
 #v411 rerwin: avoid icon getting duplicated if it is renamed...
 ppPATTERN="$home/.pup_event/drive_${ONEDRVNAME}<"
 ##[ "`grep "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin`" != "" -a -z "`grep "$ppPATTERN" $HOME/Choices/ROX-Filer/PuppyPin`" ] && return #precaution.
 [ "`grep "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin`" ] && return
 free_coord
 echo XforROX=${COORD_X} YforROX=${COORD_Y} $ONEDRVNAME
 #ONEDRVNAMElast="$ONEDRVNAME"
 echo
 echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <PinboardAdd>
   <Path>$home/.pup_event/drive_${ONEDRVNAME}</Path>
   <X>${COORD_X}</X>
   <Y>${COORD_Y}</Y>
   <Label>${ONEDRVNAME}</Label>
   <Args>${DRV_CATEGORY} ${FSTYPE}</Args>
  </PinboardAdd>
 </env:Body>
</env:Envelope>"  | rox -R
}

create_icon_func() {
 #create desktop icon, and directory with handler script, icon and help...
 #requires global variables DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION.
 #if a passed param $1, then PROBEPART already known, inefficient to rerun here each time.
 DRVINFO="$DRV_NAME"'|0|0'
 if [ "$ICONPARTITIONS" = "true" ];then
  #display an icon for each partition... w476 add ext4...
  [ "$1" ] || PROBEPART=`probepart -k | grep -E '\|ext4\||\|ntfs\||\|msdos\||\|vfat\||\|fat[0-9]*\||\|ext2\||\|ext3\||\|iso9660\||\|xfs\||\|jfs\||\|reiser'`
  drvPATTERN='^/dev/'"${DRV_NAME}" #important, no space on end!
  DRVINFO=`echo "$PROBEPART" | grep "$drvPATTERN" | cut -f 1,2,3 -d '|' | tr '\n' ' '`

  #w482 k2.6.25.16 /proc/partitions (read by probepart) can be slow to update...
  diCNT=0
  if [ "`echo -n "$DRV_NAME" | grep -E '^sd|^mmc'`" ]; then
   while [ ! "$DRVINFO" ];do
    diCNT=`expr $diCNT + 1`
    [ $diCNT -gt 3 ] && break
    sleep 1
    PROBEPART=`probepart -k | grep -E '\|ext4\||\|ntfs\||\|msdos\||\|vfat\||\|fat[0-9]*\||\|ext2\||\|ext3\||\|iso9660\||\|xfs\||\|jfs\||\|reiser'`
    DRVINFO=`echo "$PROBEPART" | grep "$drvPATTERN" | cut -f 1,2,3 -d '|' | tr '\n' ' '`
   done
  fi

 fi
 for ONEDRVINFO in $DRVINFO
 do
  ONEDRVNAME=`echo -n "$ONEDRVINFO" | cut -f 1 -d '|' | cut -f 3 -d '/'`
  FSTYPE=`echo -n "$ONEDRVINFO" | cut -f 2 -d '|'`
  SIZE=`echo -n "$ONEDRVINFO" | cut -f 3 -d '|'`
  drvPATTERN='^/dev/'"${ONEDRVNAME}"' ' #important, a space on end!
  if [ ! -d $home/.pup_event/drive_${ONEDRVNAME} ];then
   mkdir $home/.pup_event/drive_${ONEDRVNAME}
   cp -af /usr/local/bin/drive_all $home/.pup_event/drive_${ONEDRVNAME}/AppRun
   if [ -e /sys/block/${ONEDRVNAME} ];then
    #device is an entire drive.
    SIZE=`cat /sys/block/${ONEDRVNAME}/size`
    SIZE=$(($SIZE/2)) #get KB.
    format_size_func #formats SIZE for display.
    INFO="Description: ${DRV_DESCRIPTION} Size: ${SIZE}"
   else
    if [ "$FSTYPE" = "0" -a "$SIZE" = "0" ];then
     INFO="Puppy drive manager"
    else
     #pPATTERN=' '"$ONEDRVNAME"'$'
     #SIZE=`grep "$pPATTERN" /proc/partitions | tr -s ' ' | cut -f 4 -d ' '`
     format_size_func #formats SIZE for display.
     INFO="Filesystem: $FSTYPE Size: $SIZE"
    fi
   fi
   #v424 add item to unmount all partitions...
   MOREITEMS="<Item option=\"unmount\" icon=\"gtk-harddisk\"><Label>Unmount ${ONEDRVNAME} (if currently mounted)</Label></Item><Item option=\"unmountall\" icon=\"gtk-harddisk\"><Label>Unmount ALL mounted partitions</Label></Item>"
   create_appinfo_func #needs INFO, DRV_CATEGORY, MOREITEMS, ONEDRVNAME
  fi
  if [ "$ICONDESK" = "true" ];then #see /etc/eventmanager.
   MNTSTATUS=`/bin/df | grep "$drvPATTERN"`
   if [ "$MNTSTATUS" = "" ];then
    icon_unmounted_func $ONEDRVNAME $DRV_CATEGORY #see functions4puppy4.
   else
    icon_mounted_func $ONEDRVNAME $DRV_CATEGORY #see functions4puppy4.
   fi
   add_pinboard_func #needs ONEDRVNAME, DRV_CATEGORY, FSTYPE.
  fi
 done
 #always create a handler for entire drive, even if no icon displayed...
 if [ ! -d $home/.pup_event/drive_${DRV_NAME} ];then
  if [ -e /sys/block/${DRV_NAME} ];then
   mkdir $home/.pup_event/drive_${DRV_NAME}
   cp -af /usr/local/bin/drive_all $home/.pup_event/drive_${DRV_NAME}/AppRun
   SIZE=`cat /sys/block/${DRV_NAME}/size`
   SIZE=$(($SIZE/2)) #get KB.
   format_size_func #formats SIZE for display.
   INFO="Description: ${DRV_DESCRIPTION} Size: ${SIZE}"
   #v424 add item to unmount all mounted partitions...
   MOREITEMS="</Item><Item option=\"unmountall\" icon=\"gtk-harddisk\"><Label>Unmount ALL mounted partitions</Label></Item>"
   ONEDRVNAME="$DRV_NAME"
   create_appinfo_func #needs INFO, DRV_CATEGORY, MOREITEMS, ONEDRVNAME
  fi
 fi
}

remove_pinboard_func() { #needs DRV_NAME (name of entire drive)
 ppPATTERN=' label="'"$DRV_NAME"'.*" '
 ##[ -z "`grep "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin`" -o -z "`grep "$ppPATTERN" $HOME/Choices/ROX-Filer/PuppyPin`" ] && echo "returning from remove_pinboard_func wo any Changes" && return
 [ -z "`grep "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin`" ] && return  ##+2011_11_05 added space before closing ]
 ALLNAMES=`grep -o "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin | cut -f 2 -d '"' | tr '\n' ' '`
 ALLNAMESH=`grep -o "$ppPATTERN" $home/Choices/ROX-Filer/PuppyPin | cut -f 2 -d '"' | tr '\n' ' '`
 ALLNAMES="$ALLNAMES $ALLNAMESH"
 for ONEDRVNAME in $ALLNAMES
 do
  echo "<?xml version=\"1.0\"?>
<env:Envelope xmlns:env=\"http://www.w3.org/2001/12/soap-envelope\">
 <env:Body xmlns=\"http://rox.sourceforge.net/SOAP/ROX-Filer\">
  <PinboardRemove>
   <Path>$home/.pup_event/drive_${ONEDRVNAME}</Path>
  </PinboardRemove>
 </env:Body>
</env:Envelope>"  | rox -R
 done
}


old_clear_desk_icons_func(){
 PROBEDISK=`probedisk2`
 BlockDrives=`echo "$PROBEDISK" | cut -f 1 -d '|' | sort -r`
 if [ "$BlockDrives" ] ; then #1.1.1
  echo "Blockdrives not empty"
  for DRV_NAME in $BlockDrives ; do
 remove_pinboard_func
  done
 fi
 FloppyDrives=`ls /sys/block 2>/dev/null | grep -w -e 'fd[0-9]*'`
 FDRV=`echo "$FloppyDrives"`
 if [ "$FDRV" ]; then
      for DRV_NAME in $FDRV
      do
      remove_pinboard_func
      done

 fi
}

clear_desk_icons_func(){
while read line
do test "$line" || continue
DRV=`echo "$line" | grep -o -e 'drive_[^<]*'`
test "$DRV" || continue
#echo "$DRV"
DRV="${DRV/drive_/}"
echo "$DRV"
case $DRV in
sr*|fd*) DRV_NAME=$DRV remove_pinboard_func;;
sd*)     test "${OLD_DRV:0:3}" = "${DRV:0:3}" && continue
         DRV_NAME=${DRV:0:3} remove_pinboard_func
;;
*)       DRV_NAME=$DRV remove_pinboard_func;;
esac
OLD_DRV=$DRV
done<$home/Choices/ROX-Filer/PuppyPin
unset DRV OLD_DRV line DRV_NAME
}
clear_desk_icons_func


PUPEVENTSTART_func(){
######################################################################
#stuff to setup at entry...
mkdir -p $home/.pup_event

#build the desktop icons...
DRV_CATEGORY='drive'
#KRGPROBEDISK="`probedisk2`"
echo > /tmp/PROBEDISK2.txt #KRG
probedisk2 | grep -v -i -E 'DBG|dbg|DEBUG|debug' | sed '/^$/d' | while read line; do
L=`echo $line | sed 's#|$#|DiskWontSay#'`
echo "$L" >> /tmp/PROBEDISK2.txt
done
if [ -d /proc/ide ] ; then
PROBEDISK=`cat /tmp/PROBEDISK2.txt | sort -g`
else
PROBEDISK=`cat /tmp/PROBEDISK2.txt`
fi #KRG
#v407 ls120/zip floppy drives are probed every 4 secs...
DRVS_FLOPPY=`echo "$PROBEDISK" | grep '|floppy|' | cut -f 1 -d '|' | cut -f 3 -d '/'`
#v407 same thing for all optical drives...
DRVS_OPTICAL=`echo "$PROBEDISK" | grep '|optical|' | cut -f 1 -d '|' | cut -f 3 -d '/'`
if [ "$ICONDESK" = "false" ];then
 #only show a single 'drives' icon on desktop...
 DRV_NAME='drives'
 DRV_CATEGORY='any' #see pmount.
 DRV_DESCRIPTION="all drives"
 create_icon_func #needs DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION.
else
 #show all drives on desktop... w476 add ext4...
 PROBEPART=`probepart -k | grep -iE '\|ext4\||\|ntfs\||\|msdos\||\|vfat\||\|fat[0-9]*\||\|ext2\||\|ext3\||\|iso9660\||\|xfs\||\|jfs\||\|reiser'`
 if [ "$FD0ICON" = "true" ];then #see /etc/eventmanager
#KRG if [ -e /sys/block/fd0 ];then
 for i in `ls /sys/block | grep 'fd' | sort -r` ; do #KRG
   PROBEDISK="/dev/$i|floppy|Legacy floppy drive
$PROBEDISK"
   PROBEPART="/dev/$i|vfat|1440
$PROBEPART"
done #KRG
#KRG  fi
 fi
 for ONEDRV in `echo "$PROBEDISK" | cut -f 1,2,3 -d '|' | tr ' ' '_'`
 do
  DRV_NAME=`echo -n "$ONEDRV" | cut -f 1 -d '|' | cut -f 3 -d '/'`
  DRV_CATEGORY=`echo -n "$ONEDRV" | cut -f 2 -d '|'`
  DRV_DESCRIPTION=`echo -n "$ONEDRV" | cut -f 3 -d '|' | tr '_' ' '`
  [ "`echo "$PROBEPART" | grep "$DRV_NAME"`" ] || continue #precaution (such as CD not inserted).
  create_icon_func startup #needs DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION, PROBEPART.
 done
fi
}
PUPEVENTSTART_func

if [ "$BACKENDON" = "false" ];then #see /etc/eventmanager.
 killall hotplug2stdout #pup_event_backend_d #no module/firmware hotplug support.
 #...kill hotplug2stdout, as that will cause pup_eventd_backend_d to die.
 [ -f /sbin/udevd ] && killall udevd #alternative to pup_event_backend_d.
 exit
fi
[ "$HOTPLUGON" = "false" ] && exit #turn off all frontend hotplug support. see /etc/eventmanager.

PUPEVENTDAEMON_func(){
###################################################################
#now go into a two-second loop...
while [ 1 ]
do
 sleep 2

 #graceful exit if shutdown X (see /usr/X11R7/bin/restartwm,wmreboot,wmpoweroff)...
 [ -f /tmp/xwin/wmexitmode.txt ] && break  ##+2011-11-07 changed path to /tmp/xwin

 #test for any change in /sys/block...
 #ls -1 --hide=ram* --hide=loop* /sys/block > /tmp/pup_event_frontend_block2
 ls -1 /sys/block | grep -vE '^zram|^ram|^loop|^md|^mtd|^nbd' > /tmp/pup_event_frontend_block2
 if [ -f /tmp/pup_event_frontend_block_request ]; then #w015 (see gparted_shell, puppyinstaller, bootflash)
  sleep 0.1
  REMOVEBLOCK='^'"`cat /tmp/pup_event_frontend_block_request`"'$'
  BLOCKS2=`grep -v "$REMOVEBLOCK" /tmp/pup_event_frontend_block2`
  echo "$BLOCKS2" > /tmp/pup_event_frontend_block2
  rm -f /tmp/pup_event_frontend_block_request
 fi
 [ -f /tmp/pup_event_frontend_block1 ] || cp /tmp/pup_event_frontend_block2 /tmp/pup_event_frontend_block1
 BLOCKDIFF=`diff /tmp/pup_event_frontend_block1 /tmp/pup_event_frontend_block2`

 #091223 some interfaces, no change in /sys/block when insert/remove a card...
 #note, /proc/partitions can be very slow to update, particularly when remove a card.
 #note, /sys/block/sd*/sd* shows card insertion but may not update on removal -- /usr/local/bin/drive_all will remove an invalid drive icon if clicked on.
 if [ ! "$BLOCKDIFF" ];then
  BLOCKSPROBE=""
  for ONETESTDRV in `cat /tmp/pup_event_frontend_block2 | grep '^sd'`
  do
   [ "`echo "$ATADRIVES" | grep "$ONETESTDRV"`" ] && continue
   [ "`cat /sys/block/${ONETESTDRV}/removable 2>/dev/null`" = "0" ] && continue
   if [ ! -e /sys/block/${ONETESTDRV}/${ONETESTDRV}1 ];then #drive exists, but no partition (no card plugged in).
    [ -d $home/.pup_event/drive_${ONETESTDRV}1 ] && BLOCKSPROBE="${BLOCKSPROBE}< ${ONETESTDRV}:"
    dd if=/dev/${ONETESTDRV} of=/dev/null bs=512 count=1 > /dev/null 2>&1 #try force kernel to update.
   else
    [ ! -d $home/.pup_event/drive_${ONETESTDRV}1 ] && BLOCKSPROBE="${BLOCKSPROBE}> ${ONETESTDRV}:"
   fi
  done
  [ "$BLOCKSPROBE" ] && BLOCKDIFF=`echo -n "$BLOCKSPROBE" | tr ':' '\n'`
 fi

 #########hotplug block event##########
 if [ "$BLOCKDIFF" ]; then

  cp -f /tmp/pup_event_frontend_block2 /tmp/pup_event_frontend_block1

  BLOCKSADD=`echo "$BLOCKDIFF" | grep '^> ' | cut -f 2-9 -d ' ' | tr '\n' ' '`
  BLOCKSREM=`echo "$BLOCKDIFF" | grep '^< ' | cut -f 2-9 -d ' ' | tr '\n' ' '`

  ACTION=add
  SUBSYSTEM=block
  DEVTYPE=disk
  for DRV_NAME in $BLOCKSADD
  do
   [ -e /sys/block/$DRV_NAME ] || continue #precaution
   DEVPATH=/block/$DRV_NAME
   odPATTERN='^/dev/'"$DRV_NAME"'|'
   PROBEDISK=`probedisk2`
   DRVS_OPTICAL=`echo "$PROBEDISK" | grep '|optical|' | cut -f 1 -d '|' | cut -f 3 -d '/'` #update
   DRVS_FLOPPY=`echo "$PROBEDISK" | grep '|floppy|' | cut -f 1 -d '|' | cut -f 3 -d '/'` #update
   DRV_CATEGORY=`echo -n "$PROBEDISK" | grep "$odPATTERN" | cut -f 2 -d '|'`
   DRV_DESCRIPTION=`echo -n "$PROBEDISK" | grep "$odPATTERN" | cut -f 3 -d '|' | tr -s ' '`
   [ "$ICONDESK" = "true" ] && create_icon_func #uses DRV_NAME, DRV_CATEGORY, DRV_DESCRIPTION
   [ "$HOTPLUGNOISY" = "true" ] && $home/.pup_event/drive_${DRV_NAME}/AppRun ${DRV_CATEGORY} & #handler script.
  done

  ACTION=remove
  for DRV_NAME in $BLOCKSREM
  do
   #[ -e /sys/block/$DRV_NAME ] && continue #precaution. w015 must remove.
   DRVS_OPTICAL=`echo "$DRVS_OPTICAL" | grep -v "$DRV_NAME"` #update
   DRVS_FLOPPY=`echo "$DRVS_FLOPPY" | grep -v "$DRV_NAME"` #update
   DEVPATH=/block/$DRV_NAME
   if [ "`pidof gtkdialog_pmount`" ]; then #if pmount running, refresh it.
    killall gtkdialog_pmount 2>/dev/null
    sleep 0.1
    LANG=$OLDLANG pmount & #100613 fix from shinobar.
   fi
   remove_pinboard_func #needs DRV_NAME
   rm -rf $home/.pup_event/drive_${DRV_NAME}* 2>/dev/null
  done

 fi

 if [ $TOGGLE -eq 0 ];then #slow down to every 4 seconds.
  TOGGLE=1
  continue
 else
  TOGGLE=0
 fi

 #######four second timeout procesing#########
 SAVECNT=`expr $SAVECNT + 4`
 if [ $RAMSAVEINTERVAL -ne 0 -a $SAVECNT -gt $RAMSAVEINTERVAL ];then
  touch /tmp/snapmergepuppyrequest #request to savepuppy_func.
  SAVECNT=0
 fi
 if [ $POWERTIMEOUT -ne 0 ];then #w007 power-off computer after inactivity.
  MOUSECNT=`expr $MOUSECNT + 4`
  MINUTECNT=`expr $MINUTECNT + 4`
  if [ $MINUTECNT -gt 59 ];then #come in here every minute...
   MINUTECNT=0
   CURPOS2=`getcurpos`
   echo "MOUSECNT=$MOUSECNT CURPOS2=$CURPOS2" >> /tmp/pup_event_frontend_d_curpos.log
   [ "$CURPOS1" ] || CURPOS1="$CURPOS2"
   [ "$CURPOS1" = "$CURPOS2" ] || MOUSECNT=0
   CURPOS1="$CURPOS2"
   [ $MOUSECNT -gt $POWERTIMEOUT ] && wmpoweroff &
  fi
 fi
 #some apps should not be disturbed by this background stuff...
 RUNPS=`ps`
 #w482 add xorriso...
 [ "`echo "$RUNPS" | grep -E 'xorriso|xorrecord|xine|petget|wget|axel|dotpup|mplayer|gcurl|gimv|burniso2cd|growisofs|cdrecord|pcdripper|xfmedia|xmms|ripoff|pdvdrsab|pburn|mhwaveedit|installpkg\.sh|downloadpkgs\.sh'`" ] && continue

 [ "$AUTOUNMOUNT" = "true" ] && auto_unmount_func #v424 automatially unmount a partition if no longer being used (AUTOUNMOUNT set in eventmanager).

 #monitor free memory, periodic save of tmpfs top layer...
 case $PUPMODE in
  3|7|13)
   free_flash_func
   savepuppy_func
  ;;
  16|24|17|25) #unipup.
   free_initrd_func
  ;;
  *)
   free_func
  ;;
 esac
 [ "$ICONDESK" = "false" ] && continue #v405 see /etc/eventmanager
 #unfortunately, we have to poll at regular intervals to see if a cd is inserted...
 for ONEOPTICAL in $DRVS_OPTICAL
 do
  [ "$ONEOPTICAL" ] || continue #precaution
  probe_optical_func $ONEOPTICAL
 done
 #v407 poll to see if a ls120 or zip floppy diskette inserted...
 for ONEFLOPPY in $DRVS_FLOPPY
 do
  [ "$ONEFLOPPY" ] || continue #precaution
  probe_floppy_func $ONEFLOPPY
 done

if [[ -f /tmp/pup_event_icon_change_flag ]]; then  #KRG
    ##if [[ "`cat /tmp/pup_event_icon_change_flag`" = "ICONWIPE" ]]; then
    Floppies=`ls /sys/block | grep 'fd[0-9]' | sort -r`
    if [ -d /proc/ide ] ; then
    Drives=`ls /sys/block | grep -E '^sd|^hd|^sr|^mmc' | sort -r`
    else
    Drives=`ls /sys/block | grep -E '^sd|^hd|^sr|^mmc'`
    fi
    for DRV_NAME in $Drives; do
    remove_pinboard_func
    done
    for DRV_NAME in $Floppies; do
    remove_pinboard_func
    done
    SCRN_VARS_func
    ##JWMTASKBAR_func
    JWM_func
    ROX_func
    MAX_XY_func
    START_XY_ICON_VALUES_func
    PUPEVENTSTART_func
    sleep 1
    rm -f /tmp/pup_event_icon_change_flag
    ##fi
fi  #KRG

done #2 second loop.
}
PUPEVENTDAEMON_func

exit
###END###
