#!/bin/bash
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_func"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/local/jwmconfig3/func"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#


########################################################################
#
#
#
#
#
# /dev/hda8:
# LABEL="MacPup431_O2"
# UUID="6d9a8e91-c301-4ff8-9875-97ec708cbee8"
# TYPE="ext3"
# DISTRO_NAME='Puppy'
# DISTRO_VERSION=431
# DISTRO_BINARY_COMPAT='puppy'
# DISTRO_FILE_PREFIX='pup'
# DISTRO_COMPAT_VERSION='4'
# PUPMODE=2
# KERNVER=2.6.37.4-KRG-i486-StagingDrivers-2
# PUP_HOME='/'
# SATADRIVES='·'
# USBDRIVES='·sda·'
# Linux·puppypc·2.6.37.4-KRG-i486-StagingDrivers-2·#4·SMP·Thu·Mar·17·06:05:58·GMT-8·2011·i686·GNU/Linux
# X·Window·System·Version·1.3.0
# Release·Date:·19·April·2007
# X·Protocol·Version·11,·Revision·0,·Release·1.3
# Build·Operating·System:·UNKNOWN·
# Current·Operating·System:·Linux·puppypc·2.6.37.4-KRG-i486-StagingDrivers-2·#4·SMP·Thu·Mar·17·06:05:58·GMT-8·2011·i686
# Build·Date:·28·November·2007
# $LANG=de_DE@euro
# today=So·30.·Okt·12:48:25·GMT+1·2011
#
#
#
#
#
########################################################################
PRO='/func'
SCRIPT_DIR="/usr/local/jwmconfig3"
#. $SCRIPT_DIR/path

case "$1" in

-themedef)

  DefTheme="
<JWM>

<WindowStyle>
    <Active>
        <Text>$FG_SELECTED</Text>
        <Title>$ACT_GRAD</Title>
        <!--  <Corner>white</Corner>  -->
        <Outline>black</Outline>
    </Active>
    <Inactive>
        <Text>$FOREGROUND</Text>
        <Title>$MEN_GRAD</Title>
        <!--  <Corner>#aaaaaa</Corner>  -->
        <Outline>black</Outline>
    </Inactive>
</WindowStyle>

<TaskListStyle>
    <Foreground>$FOREGROUND</Foreground>
    <Background>$MEN_REVERSED</Background>
    <ActiveForeground>$FG_SELECTED</ActiveForeground>
    <ActiveBackground>$ACT_GRAD</ActiveBackground>
</TaskListStyle>

<TrayStyle>
    <Foreground>$FOREGROUND</Foreground>
    <Background>$MENU_BG</Background>
</TrayStyle>

<PagerStyle>
    <Outline>black</Outline>
    <!-- non-active programs: bg[NORMAL]-->
    <Foreground>$MENU_BG</Foreground>
    <!-- non-active desktops: bg[ACTIVE]-->
    <Background>$PAGER_BG</Background>
    <!-- selected app/desktop bg[SELECTED]-->
    <ActiveForeground>$FG_SELECTED</ActiveForeground>
    <!-- frame of selected desktop...bg[SELECTED] -->
    <ActiveBackground>$ACTIVE_BG</ActiveBackground>
</PagerStyle>


<MenuStyle>
    <Foreground>$FOREGROUND</Foreground>
    <Background>$MENU_BG</Background>
    <ActiveForeground>$FG_SELECTED</ActiveForeground>
    <ActiveBackground>$ACT_REVERSED</ActiveBackground>
</MenuStyle>

</JWM>"

;;

-gradientcolors)

  # create gradient colours:
  DIFF="16#20"
  for COLOUR in ACTIVE_BG MENU_BG
  do
    NAME=${COLOUR:0:3}
    eval RR=\${$COLOUR:1:2}
    eval GG=\${$COLOUR:3:2}
    eval BB=\${$COLOUR:5:2}

    for ONE in RR GG BB
    do
      eval A=\$$ONE
      let MORE="16#$A"+$DIFF
      let LESS="16#$A"-$DIFF

      if [[ $MORE -gt 255 ]] ; then # limit to max
        eval ${ONE}_LOWER="bf"
        eval ${ONE}_UPPER="ff"
      elif [[ $LESS -lt 0 ]] ; then
        eval ${ONE}_LOWER="00"
        eval ${ONE}_UPPER="40"
      else
        TMP_LOWER="`echo "$LESS 16 o p" |dc`"
        [ ${#TMP_LOWER} -eq 1 ] && TMP_LOWER="0$TMP_LOWER"
        eval ${ONE}_LOWER=$TMP_LOWER
        TMP_UPPER="`echo "$MORE 16 o p" |dc`"
        [ ${#TMP_UPPER} -eq 1 ] && TMP_UPPER="0$TMP_UPPER"
        eval ${ONE}_UPPER=$TMP_UPPER
      fi
    done
  #echo "#$RR_LOWER$GG_LOWER$BB_LOWER:#$RR_UPPER$GG_UPPER$BB_UPPER"
    eval ${NAME}_GRAD="#$RR_LOWER$GG_LOWER$BB_LOWER:#$RR_UPPER$GG_UPPER$BB_UPPER"
    eval ${NAME}_REVERSED="#$RR_UPPER$GG_UPPER$BB_UPPER:#$RR_LOWER$GG_LOWER$BB_LOWER"
  done
  ;;

-trayapply)

#########
#John Doe created code for the applet backgrounds, old jwmconfig, port here...
BackgroundColor="$MENU_BG" #"#ffc100"

function GetLineIndex
{
    lineVal=`fgrep -in "$1" "$TrayFile" | awk -F":" '{print $1}'`
    #return `expr $lineVal`
    return $lineVal
}

cp -f "$TrayFile" "$TrayFileBak"

GetLineIndex "blinkydelayed"
linenumber=$?

GetLineIndex "xload -nolabel"
linenumber2=$?

lineNumber=`expr $linenumber`
lineNumber2=`expr $linenumber2`

blinkyline="            blinkydelayed -bg \"$BackgroundColor\""
xloadline="         xload -nolabel -fg red -hl white -bg \"$BackgroundColor\""
if test "$lineNumber" -gt 0 ; then
sed -e "$lineNumber"i"$blinkyline" -e "$lineNumber"d "$TrayFileBak" > "$TrayFile"
fi
if [ "$lineNumber2" -gt 0 ]; then
sed -e "$lineNumber2"i"$xloadline" -e "$lineNumber2"d "$TrayFileBak" > "$TrayFile"
fi
#end John Doe's code.
########

;;

-trayapply2)
echo $DBG
  # Patriot Sep 2009
  # Attempting some robustness
  # Update only for known -bg option applets: blinky and xload

  . "$ColorFile" #Get MENU_BG, PAGER_BG

  if [ ! "$MENU_BG" ]; then
    # if MENU_BG not found in jwm_colors
    if [ -e "$ThemeFile" ]; then
      # Get MENU_BG from newly selected theme
      MENU_BG=$(awk -F: '/MenuStyle/,/<\/MenuStyle>/' ${ThemeFile} | grep '<Background>' | sed -e 's|</.*>||g' -e 's|.*<.*>||g')
      # theme file could be borked, so hardcode a fallback
      [ ! "$MENU_BG" ] && MENU_BG='#292D29'
    else
      # if theme file missing ...
      MENU_BG='#292D29'
    fi
  fi

  if [ ! "$PAGER_BG" ]; then
    if [ -e "$ThemeFile" ]; then
      PAGER_BG=$(awk -F: '/PagerStyle/,/<\/PagerStyle>/' ${ThemeFile} | grep '<Background>' | sed -e 's|</.*>||g' -e 's|.*<.*>||g')
      [ ! "$PAGER_BG" ] && PAGER_BG='#292D29'
    else
      PAGER_BG='#292D29'
    fi
  fi

  # Make a backup !
  cp -f "$TrayFile" "$TrayFile.bak"
  # Update applet -bg colors, catch-all method
  if [ "`cat "$TrayFile" | grep 'blinky'`" != "" ]; then
  sed -e 's|\(.*blinky.*\) -bg ".*"|\1 -bg "'"$MENU_BG"'"|g' < "$TrayFile" > "$TrayFile".trayapply2
  fi
  if [ "`cat "$TrayFile" | grep 'xload'`" != "" ]; then
  sed -e 's|\(.*xload.*\) -bg ".*"|\1 -bg "'"$PAGER_BG"'"|g' < "$TrayFile" > "$TrayFile".trayapply2
  fi
  # Precaution: update to jwmrc-tray only if not empty
  [ -s "$TrayFile".trayapply2 ] && cp -f "$TrayFile".trayapply2 "$TrayFile"

###END###
;;

-notify)

#----notify of result----->>

if [ "$RES" -eq "1" ]; then
  if [ -z "$CHECKCONF" ]; then
    RESTOP="Change Saved"
    RESMSG="Now set for $CHOICE $PATTERN"

  else
    RESTOP="Change Reversed"
    RESMSG="New config corrupt. Keeping previous"
    if [ "$PF" -eq "1" ]; then
    cp -f "$PersonalFileBak" "$PersonalFile"
    else
    cp -f "$TrayFileBak" "$TrayFile"
    fi
  fi
else ##krg---just in case--->>
  RESTOP="Change Failed"
  RESMSG="Configuration has not been altered"
  if [ "$PF" -eq "1" ]; then
  cp -f "$PersonalFileBak" "$PersonalFile"
  else
  cp -f "$TrayFileBak" "$TrayFile"
  fi
fi
PF=0

# REM: Xdialog msgbox
Xdialog --title "$RESTOP" --msgbox "$RESMSG" 0 0

;;



-checkconf)

jwm -p 2> "$TmpCL"

CHECKCONF=`cat "$TmpCL"`

;;

-simpleok)  ##ok_or_exit
##---panelButton--->
case $? in
  0)
    echo $DBG $PRO "OK";;
  255)
    echo $DBG $PRO "Box closed."
    exit 0;;
esac

;;

-simpleexit)  ##exit
##---focusModel--->
case $retval in
  1)
    exit 0;;
  255)
    exit 0;;
esac

;;

-cancel)  ##like simple exit
##---taskbar*--->
case $retval in
    1 | 255)  exit 0;;
esac

;;

-threecheck)
##--panel-buttons main gui--->
case $retval in
  0)
    echo $DBG $PRO "'$choice' chosen.";;
  1)
    echo $DBG $PRO "Cancel pressed."
    exit 0;;
  255)
    echo $DBG $PRO "Box closed."
    exit 0;;
esac

;;

-fileselect)

case $? in
    0)
        echo $DBG $PRO "\"$FILE\" chosen";;
    1)
        echo $DBG $PRO "Cancel pressed."
        exit 0;;
    255)
        echo $DBG $PRO "Box closed."
        exit 0;;
esac

;;

-testInput)
### Simple Comparison and Translation
echo "$ADDMASK" > "$TmpAM"
sed -e "s#ALT#1#i" \
      -e "s#CTRL#2#i" \
      -e "s#HYPER#3#i" \
      -e "s#META#4#i" \
      -e "s#SHIFT#5#i" \
      -e "s#SUPER#6#i" \
      -e "s#A#1#i" \
      -e "s#C#2#i" \
      -e "s#H#3#i" \
      -e "s#M#4#i" \
      -e "s#S#5#i" \
      -e "s#P#6#i" \
      -e "s#[^123456]##g" \
      -e "s#1#A#" \
      -e "s#2#C#" \
      -e "s#3#H#" \
      -e "s#4#M#" \
      -e "s#5#S#" \
      -e "s#6#P#" "$TmpAM" > "$TmpMK"

  MASKKEY=`cat "$TmpMK"`
  rm -f "$TmpAM"
  rm -f "$TmpMK"

  ;;

-listSC)

hoMe="$HOME"  ##+++2011_10_30

# because of action type clear the $VAR getting empty
PersonalFile="$hoMe/.jwm/jwmrc-personal"
KeyL="/tmp/JWMconfig/KeyL"   ##+2011_10_30 changes for tmp subdir JWMconfig
# because of action type clear the $VAR getting empty
awk '/key/ {print $2 "_" $3}' "$PersonalFile" | awk -F\> '/key/ {print $1 "| " $2}' | awk -F\< '/key/ {print $1}' > "$KeyL"

echo $DBG func list SC
echo $PersonalFile
echo $KEY
echo $KeyL
echo `cat $KeyL`
echo $DBG 323
  ;;


-backup2)
if test "$PF" == "1" ; then
cp -f "$PersonalFile" "$PersonalFileBak"
else
cp -f "$TrayFile" "$TrayFileBak"
fi
;;

-backup)

if test ! -f "$ColorFileDef" ; then
cp -f "$ColorFile" "$ColorFileDef" ; fi
if test ! -f "$ThemeFileDef" ; then
cp -f "$ThemeFile" "$ThemeFileDef" ; fi
if test ! -f "$TrayFileDef" ; then
cp -f "$TrayFile" "$TrayFileDef" ; fi
if test ! -f "$TrayFileBak" ; then
cp -f "$TrayFile" "$TrayFileBak" ; fi
if test ! -f "$ThemeFileBak" ; then
cp -f "$ThemeFile" "$ThemeFileBak" ; fi
if test ! -f "$JwmPersonalBak" ; then
cp -f "$PersonalFile" "$PersonalFileBak" ; fi
if test ! -f "$ColorFileBak" ; then
cp -f "$ColorFile" "$ColorFileBak" ; fi

;;

esac
