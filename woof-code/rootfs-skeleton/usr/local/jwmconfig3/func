#!/bin/ash

. /etc/rc.d/f4puppy5



#  2011-12-13 01:26  joewing
#
#   * [r547] /src/event.c, /src/help.c, /src/hint.c, /src/hint.h,
#     /src/main.c, /src/main.h, /src/parse.c, /src/root.c, /src/root.h:
#     Add jwm -reload for reloading the root menu.

#2010-12-13 04:07 +0000 [r496]  joewing:
#
#   * src/key.c, jwm.1.in, src/desktop.c, src/main.h, src/parse.c,
#     src/key.h, src/client.c, src/desktop.h, src/pager.c, src/event.c,
#     src/hint.c, src/jwm.h, example.jwmrc, src/main.c, src/move.c: Add
#     support for virtual desktops in 2-dimensions.

case $1 in

-themedef)

  DefTheme="
<JWM>

<WindowStyle>
    <Active>
        <Text>$FG_SELECTED</Text>
        <Title>$ACT_GRAD</Title>
        <!--  <Corner>white</Corner>  -->
        <Outline>black</Outline>
    </Active>
    <Inactive>
        <Text>$FOREGROUND</Text>
        <Title>$MEN_GRAD</Title>
        <!--  <Corner>#aaaaaa</Corner>  -->
        <Outline>black</Outline>
    </Inactive>
</WindowStyle>

<TaskListStyle>
    <Foreground>$FOREGROUND</Foreground>
    <Background>$MEN_REVERSED</Background>
    <ActiveForeground>$FG_SELECTED</ActiveForeground>
    <ActiveBackground>$ACT_GRAD</ActiveBackground>
</TaskListStyle>

<TrayStyle>
    <Foreground>$FOREGROUND</Foreground>
    <Background>$MENU_BG</Background>
</TrayStyle>

<PagerStyle>
    <Outline>black</Outline>
    <!-- non-active programs: bg[NORMAL]-->
    <Foreground>$MENU_BG</Foreground>
    <!-- non-active desktops: bg[ACTIVE]-->
    <Background>$PAGER_BG</Background>
    <!-- selected app/desktop bg[SELECTED]-->
    <ActiveForeground>$FG_SELECTED</ActiveForeground>
    <!-- frame of selected desktop...bg[SELECTED] -->
    <ActiveBackground>$ACTIVE_BG</ActiveBackground>
</PagerStyle>


<MenuStyle>
    <Foreground>$FOREGROUND</Foreground>
    <Background>$MENU_BG</Background>
    <ActiveForeground>$FG_SELECTED</ActiveForeground>
    <ActiveBackground>$ACT_REVERSED</ActiveBackground>
</MenuStyle>

</JWM>"

;;

-gradientcolors)

  # create gradient colours:
  DIFF="16#20"
  for COLOUR in ACTIVE_BG MENU_BG
  do
    NAME=${COLOUR:0:3}
    eval RR=\${$COLOUR:1:2}
    eval GG=\${$COLOUR:3:2}
    eval BB=\${$COLOUR:5:2}

    for ONE in RR GG BB
    do
      eval A=\$$ONE
      let MORE="16#$A"+$DIFF
      let LESS="16#$A"-$DIFF

      if [ $MORE -gt 255 ] ; then # limit to max
        eval ${ONE}_LOWER="bf"
        eval ${ONE}_UPPER="ff"
      elif [ $LESS -lt 0 ] ; then
        eval ${ONE}_LOWER="00"
        eval ${ONE}_UPPER="40"
      else
        TMP_LOWER="`echo "$LESS 16 o p" |dc`"
        [ ${#TMP_LOWER} -eq 1 ] && TMP_LOWER="0$TMP_LOWER"
        eval ${ONE}_LOWER=$TMP_LOWER
        TMP_UPPER="`echo "$MORE 16 o p" |dc`"
        [ ${#TMP_UPPER} -eq 1 ] && TMP_UPPER="0$TMP_UPPER"
        eval ${ONE}_UPPER=$TMP_UPPER
      fi
    done
  #echo "#$RR_LOWER$GG_LOWER$BB_LOWER:#$RR_UPPER$GG_UPPER$BB_UPPER"
    eval ${NAME}_GRAD="#$RR_LOWER$GG_LOWER$BB_LOWER:#$RR_UPPER$GG_UPPER$BB_UPPER"
    eval ${NAME}_REVERSED="#$RR_UPPER$GG_UPPER$BB_UPPER:#$RR_LOWER$GG_LOWER$BB_LOWER"
  done
  ;;

-trayapply)

#########
#John Doe created code for the applet backgrounds, old jwmconfig, port here...
BackgroundColor="$MENU_BG" #"#ffc100"

function GetLineIndex
{
    lineVal=`fgrep -in "$1" "$trayFILE" | awk -F":" '{print $1}'`
    #return `expr $lineVal`
    return $lineVal
}

cp $VERB -f "$trayFILE" "$trayFILEbak"

GetLineIndex "blinkydelayed"
linenumber=$?
echo $linenumber
GetLineIndex "xload -nolabel"
linenumber2=$?
echo $linenumber2

lineNumber=`expr $linenumber`
lineNumber2=`expr $linenumber2`
echo $lineNumber
echo $lineNumber2

blinkyline="\           blinkydelayed -bg \"$BackgroundColor\""
echo -e "$blinkyline"
xloadline="\            xload -nolabel -fg red -hl white -bg \"$BackgroundColor\""
echo -e "$xloadline"

if test "$lineNumber" -gt 0 ; then
echo trayFILEbak=$trayFILEbak trayFILE=$trayFILE
sed -e "$lineNumber"i"$blinkyline" -e "$lineNumber"d "$trayFILEbak" > "$trayFILE"
fi
cp $VERB -f "$trayFILE" "$trayFILEbak"
if [ "$lineNumber2" -gt 0 ]; then
echo trayFILEbak=$trayFILEbak trayFILE=$trayFILE
sed -e "$lineNumber2"i"$xloadline" -e "$lineNumber2"d "$trayFILEbak" > "$trayFILE"
fi
#end John Doe's code.
########

;;

-trayapply2)
echo $DBG
  # Patriot Sep 2009
  # Attempting some robustness
  # Update only for known -bg option applets: blinky and xload

  . "$colorFILE" #Get MENU_BG, PAGER_BG

  if [ ! "$MENU_BG" ]; then
    # if MENU_BG not found in jwm_colors
    if [ -e "$themeFILE" ]; then
      # Get MENU_BG from newly selected theme
      MENU_BG=$(awk -F: '/MenuStyle/,/<\/MenuStyle>/' ${themeFILE} | grep '<Background>' | sed -e 's|</.*>||g' -e 's|.*<.*>||g')
      # theme file could be borked, so hardcode a fallback
      [ ! "$MENU_BG" ] && MENU_BG="#292D29"
    else
      # if theme file missing ...
      MENU_BG="#292D29"
    fi
  fi

  if [ ! "$PAGER_BG" ]; then
    if [ -e "$themeFILE" ]; then
      PAGER_BG=$(awk -F: '/PagerStyle/,/<\/PagerStyle>/' ${themeFILE} | grep '<Background>' | sed -e 's|</.*>||g' -e 's|.*<.*>||g')
      [ ! "$PAGER_BG" ] && PAGER_BG="#292D29"
    else
      PAGER_BG="#292D29"
    fi
  fi

  # Make a backup !
  cp $VERB -f "$trayFILE" "$trayFILE".bak
  # Update applet -bg colors, catch-all method
  if [ "`cat $trayFILE | grep blinky`" != "" ]; then
  sed -e 's|\(.*blinky.*\) -bg ".*"|\1 -bg "'"$MENU_BG"'"|g' < "$trayFILE" > "$trayFILE".new
  fi
  # Precaution: update to jwmrc-tray only if not empty
  [ -s "$trayFILE".new ] && cp -f "$trayFILE".new "$trayFILE"

  if [ "`cat $trayFILE | grep xload`" != "" ]; then
  sed -e "s|\(.*xload.*\) -bg \".*\"|\1 -bg \"$PAGER_BG\"|g" < "$trayFILE" > "$trayFILE".new
  fi
  # Precaution: update to jwmrc-tray only if not empty
  [ -s "$trayFILE".new ] && cp $VERB -f "$trayFILE".new "$trayFILE"

###END###
;;

-notify)

#----notify of result----->>

if [ "$RES" -ge "1" ]; then
  if [ -z "$CHECKCONF" ]; then
    RESTOP="Change Saved"
    RESMSG="Now set for $CHOICE $PATTERN"
    RETURN=0
  else
    RESTOP="Change Reversed"
    RESMSG="New config corrupt. Keeping previous"
    if [ "$PF" -eq "1" ]; then
    cp $VERB -f "$personalFILEbak" "$personalFILE"
    else
    cp $VERB -f "$trayFILEbak" "$trayFILE"
    fi
    RETURN=1
  fi
else ##krg---just in case--->>
  RESTOP="Change Failed"
  RESMSG="Configuration has not been altered"
  if [ "$PF" -eq "1" ]; then
  cp $VERB -f "$personalFILEbak" "$personalFILE"
  else
  cp $VERB -f "$trayFILEbak" "$trayFILE"
  fi
  RETURN=1
fi
PF=0
Xdialog --title "$RESTOP" --msgbox "$RESMSG" 0 0

;;



-checkconf)

jwm -p 2>&1 | grep -vE '^DEBUG: |no version information available' >"$tmpCL"

CHECKCONF=`cat "$tmpCL"`

;;

-simpleok)
##---panelButton--->
case $? in
  0)
    echo $DBG $PRO "OK";;
  255)
    echo $DBG $PRO "Box closed."
    exit 0;;
esac

;;

-simpleexit)
##---focusModel--->
case $retval in
  1)
    exit 0;;
  255)
    exit 0;;
esac

;;

-cancel)
##---taskbar*--->
case $retval in
    1 | 255)  exit 0;;
esac

;;

-threecheck)
##--panel-buttons main gui--->
case $retval in
  0)
    echo $DBG $PRO "'$choice' chosen.";;
  1)
    echo $DBG $PRO "Cancel pressed."
    exit 0;;
  255)
    echo $DBG $PRO "Box closed."
    exit 0;;
esac

;;

-fileselect)

case $? in
    0)
        echo $DBG $PRO "\"$FILE\" chosen";;
    1)
        echo $DBG $PRO "Cancel pressed."
        exit 0;;
    255)
        echo $DBG $PRO "Box closed."
        exit 0;;
esac

;;

-testInput)
### Simple Comparison and Translation
echo "$ADDMASK" > "$tmpAM"
sed -e "s#ALT#1#i" \
      -e "s#CTRL#2#i" \
      -e "s#HYPER#3#i" \
      -e "s#META#4#i" \
      -e "s#SHIFT#5#i" \
      -e "s#SUPER#6#i" \
      -e "s#A#1#i" \
      -e "s#C#2#i" \
      -e "s#H#3#i" \
      -e "s#M#4#i" \
      -e "s#S#5#i" \
      -e "s#P#6#i" \
      -e "s#[^123456]##g" \
      -e "s#1#A#" \
      -e "s#2#C#" \
      -e "s#3#H#" \
      -e "s#4#M#" \
      -e "s#5#S#" \
      -e "s#6#P#" "$tmpAM" > "$tmpMK"

  MASKKEY=`cat "$tmpMK"`
  rm $VERB -f "$tmpAM"
  rm $VERB -f "$tmpMK"

  ;;

-listSC)
# because of action type clear the $VAR getting empty
personalFILE="$HOME/.jwm/jwmrc-personal"
keyL="/tmp/keyL"
# because of action type clear the $VAR getting empty
awk '/key/ {print $2 "_" $3}' "$personalFILE" | awk -F\> '/key/ {print $1 " " $2}' | awk -F\< '/key/ {print $1}' >"$keyL"

echo $DBG func listSC
echo $personalFILE
echo $KEY
echo $keyL
echo `cat $keyL`
echo $DBG 323
  ;;


-backup2)
if test "$PF" = "1" ; then
cp $VERB -f "$personalFILE" "$personalFILEbak"
else
cp $VERB -f "$trayFILE" "$trayFILEbak"
fi
;;

-backup)

if test ! -f "$colorFILEdef" ; then
cp $VERB -f "$colorFILE" "$colorFILEdef" ; fi
if test ! -f "$themeFILEdef" ; then
cp $VERB -f "$themeFILE" "$themeFILEdef" ; fi
if test ! -f "$trayFILEdef" ; then
cp $VERB -f "$trayFILE" "$trayFILEdef" ; fi
if test ! -f "$trayFILEbak" ; then
cp $VERB -f "$trayFILE" "$trayFILEbak" ; fi
if test ! -f "$themeFILEbak" ; then
cp $VERB -f "$themeFILE" "$themeFILEbak" ; fi
if test ! -f "$JwmPersonalBak" ; then
cp $VERB -f "$personalFILE" "$personalFILEbak" ; fi
if test ! -f "$colorFILEbak" ; then
cp $VERB -f "$colorFILE" "$colorFILEbak" ; fi

;;

esac

# Very End of this file '/usr/local/jwmconfig3/func' #
###END###

_jwmconfig_backup(){
 if test ! -f "$colorFILEdef" ; then
cp $VERB -f "$colorFILE" "$colorFILEdef" ; fi
if test ! -f "$themeFILEdef" ; then
cp $VERB -f "$themeFILE" "$themeFILEdef" ; fi
if test ! -f "$trayFILEdef" ; then
cp $VERB -f "$trayFILE" "$trayFILEdef" ; fi
if test ! -f "$trayFILEbak" ; then
cp $VERB -f "$trayFILE" "$trayFILEbak" ; fi
if test ! -f "$themeFILEbak" ; then
cp $VERB -f "$themeFILE" "$themeFILEbak" ; fi
if test ! -f "$JwmPersonalBak" ; then
cp $VERB -f "$personalFILE" "$personalFILEbak" ; fi
if test ! -f "$colorFILEbak" ; then
cp $VERB -f "$colorFILE" "$colorFILEbak" ; fi
}

_jwmconfig_backup2(){
if test "$PF" = "1" ; then
cp $VERB -f "$personalFILE" "$personalFILEbak"
else
cp $VERB -f "$trayFILE" "$trayFILEbak"
fi
}

_jwmconfig_listSC(){
 # because of action type clear the $VAR getting empty
personalFILE="$HOME/.jwm/jwmrc-personal"
keyL="/tmp/keyL"
# because of action type clear the $VAR getting empty
awk '/key/ {print $2 "_" $3}' "$personalFILE" | awk -F\> '/key/ {print $1 " " $2}' | awk -F\< '/key/ {print $1}' >"$keyL"

echo $DBG func listSC
echo $personalFILE
echo $KEY
echo $keyL
echo `cat $keyL`
echo $DBG 429
}

_jwmconfig_test_input(){
 ### Simple Comparison and Translation
echo "$ADDMASK" > "$tmpAM"
sed -e "s#ALT#1#i" \
      -e "s#CTRL#2#i" \
      -e "s#HYPER#3#i" \
      -e "s#META#4#i" \
      -e "s#SHIFT#5#i" \
      -e "s#SUPER#6#i" \
      -e "s#A#1#i" \
      -e "s#C#2#i" \
      -e "s#H#3#i" \
      -e "s#M#4#i" \
      -e "s#S#5#i" \
      -e "s#P#6#i" \
      -e "s#[^123456]##g" \
      -e "s#1#A#" \
      -e "s#2#C#" \
      -e "s#3#H#" \
      -e "s#4#M#" \
      -e "s#5#S#" \
      -e "s#6#P#" "$tmpAM" > "$tmpMK"

  MASKKEY=`cat "$tmpMK"`
  rm $VERB -f "$tmpAM"
  rm $VERB -f "$tmpMK"
}

_jwmconfig_fileselect(){
 case $? in
    0)
        echo $DBG $PRO "\"$FILE\" chosen";;
    1)
        echo $DBG $PRO "Cancel pressed."
        exit 0;;
    255)
        echo $DBG $PRO "Box closed."
        exit 0;;
esac
}

_jwmconfig_check_three(){
 ##--panel-buttons main gui--->
case $retval in
  0)
    echo $DBG $PRO "'$choice' chosen.";;
  1)
    echo $DBG $PRO "Cancel pressed."
    exit 0;;
  255)
    echo $DBG $PRO "Box closed."
    exit 0;;
esac
}

_jwmconfig_exit_simple(){
##---focusModel--->
case $retval in
  1)
    exit 0;;
  255)
    exit 0;;
esac
}

_jwmconfig_exit_cancel(){
##---taskbar*--->
case $retval in
    1 | 255)  exit 0;;
esac
}

_jwmconfig_exit_close(){
##---panelButton--->
case $? in
  0)
    echo $DBG $PRO "OK";;
  255)
    echo $DBG $PRO "Box closed."
    exit 0;;
esac
}

_jwmconfig_check_jwm_files(){
jwm -p 2>&1 | grep -vE '^DEBUG: |no version information available' >"$tmpCL"
CHECKCONF=`cat "$tmpCL"`
}

_jwmconfig_notify(){
   #----notify of result----->>

if [ "$RES" -ge "1" ]; then
  if [ -z "$CHECKCONF" ]; then
    RESTOP="Change Saved"
    RESMSG="Now set for $CHOICE $PATTERN"
    RETURN=0
  else
    RESTOP="Change Reversed"
    RESMSG="New config corrupt. Keeping previous"
    if [ "$PF" -eq "1" ]; then
    cp $VERB -f "$personalFILEbak" "$personalFILE"
    else
    cp $VERB -f "$trayFILEbak" "$trayFILE"
    fi
    RETURN=1
  fi
else ##krg---just in case--->>
  RESTOP="Change Failed"
  RESMSG="Configuration has not been altered"
  if [ "$PF" -eq "1" ]; then
  cp $VERB -f "$personalFILEbak" "$personalFILE"
  else
  cp $VERB -f "$trayFILEbak" "$trayFILE"
  fi
  RETURN=1
fi
PF=0
Xdialog --title "$RESTOP" --msgbox "$RESMSG" 0 0

return $RETURN
}

_jwmconfig_colors(){
  # create gradient colours:
  DIFF="16#20"
  for COLOUR in ACTIVE_BG MENU_BG
  do
    NAME=${COLOUR:0:3}
    eval RR=\${$COLOUR:1:2}
    eval GG=\${$COLOUR:3:2}
    eval BB=\${$COLOUR:5:2}

    for ONE in RR GG BB
    do
      eval A=\$$ONE
      let MORE="16#$A"+$DIFF
      let LESS="16#$A"-$DIFF

      if [ $MORE -gt 255 ] ; then # limit to max
        eval ${ONE}_LOWER="bf"
        eval ${ONE}_UPPER="ff"
      elif [ $LESS -lt 0 ] ; then
        eval ${ONE}_LOWER="00"
        eval ${ONE}_UPPER="40"
      else
        TMP_LOWER="`echo "$LESS 16 o p" |dc`"
        [ ${#TMP_LOWER} -eq 1 ] && TMP_LOWER="0$TMP_LOWER"
        eval ${ONE}_LOWER=$TMP_LOWER
        TMP_UPPER="`echo "$MORE 16 o p" |dc`"
        [ ${#TMP_UPPER} -eq 1 ] && TMP_UPPER="0$TMP_UPPER"
        eval ${ONE}_UPPER=$TMP_UPPER
      fi
    done
  #echo "#$RR_LOWER$GG_LOWER$BB_LOWER:#$RR_UPPER$GG_UPPER$BB_UPPER"
    eval ${NAME}_GRAD="#$RR_LOWER$GG_LOWER$BB_LOWER:#$RR_UPPER$GG_UPPER$BB_UPPER"
    eval ${NAME}_REVERSED="#$RR_UPPER$GG_UPPER$BB_UPPER:#$RR_LOWER$GG_LOWER$BB_LOWER"
  done
}

_jwmconfig_trayapply(){

#########
#John Doe created code for the applet backgrounds, old jwmconfig, port here...
BackgroundColor="$MENU_BG" #"#ffc100"

function GetLineIndex
{
    lineVal=`fgrep -in "$1" "$trayFILE" | awk -F":" '{print $1}'`
    #return `expr $lineVal`
    return $lineVal
}

cp $VERB -f "$trayFILE" "$trayFILEbak"

GetLineIndex "blinkydelayed"
linenumber=$?
echo $linenumber
GetLineIndex "xload -nolabel"
linenumber2=$?
echo $linenumber2

lineNumber=`expr $linenumber`
lineNumber2=`expr $linenumber2`
echo $lineNumber
echo $lineNumber2

blinkyline="\           blinkydelayed -bg \"$BackgroundColor\""
echo -e "$blinkyline"
xloadline="\            xload -nolabel -fg red -hl white -bg \"$BackgroundColor\""
echo -e "$xloadline"

if test "$lineNumber" -gt 0 ; then
echo $trayFILEbak $trayFILE
sed -e "$lineNumber"i"$blinkyline" -e "$lineNumber"d "$trayFILEbak" > "$trayFILE"
fi
cp $VERB -f "$trayFILE" "$trayFILEbak"
if [ "$lineNumber2" -gt 0 ]; then
echo trayFILEbak=$trayFILEbak trayFILE=$trayFILE
sed -e "$lineNumber2"i"$xloadline" -e "$lineNumber2"d "$trayFILEbak" > "$trayFILE"
fi
#end John Doe's code.
########
}

_jwmconfig_trayapply2(){
echo $DBG
  # Patriot Sep 2009
  # Attempting some robustness
  # Update only for known -bg option applets: blinky and xload

  . "$colorFILE" #Get MENU_BG, PAGER_BG

  if [ ! "$MENU_BG" ]; then
    # if MENU_BG not found in jwm_colors
    if [ -e "$themeFILE" ]; then
      # Get MENU_BG from newly selected theme
      MENU_BG=$(awk -F: '/MenuStyle/,/<\/MenuStyle>/' ${themeFILE} | grep '<Background>' | sed -e 's|</.*>||g' -e 's|.*<.*>||g')
      # theme file could be borked, so hardcode a fallback
      [ ! "$MENU_BG" ] && MENU_BG="#292D29"
    else
      # if theme file missing ...
      MENU_BG="#292D29"
    fi
  fi

  if [ ! "$PAGER_BG" ]; then
    if [ -e "$themeFILE" ]; then
      PAGER_BG=$(awk -F: '/PagerStyle/,/<\/PagerStyle>/' ${themeFILE} | grep '<Background>' | sed -e 's|</.*>||g' -e 's|.*<.*>||g')
      [ ! "$PAGER_BG" ] && PAGER_BG="#292D29"
    else
      PAGER_BG="#292D29"
    fi
  fi

  # Make a backup !
  cp $VERB -f "$trayFILE" "$trayFILE".bak
  # Update applet -bg colors, catch-all method
  if [ "`cat $trayFILE | grep blinky`" != "" ]; then
  sed -e 's|\(.*blinky.*\) -bg ".*"|\1 -bg "'"$MENU_BG"'"|g' < "$trayFILE" > "$trayFILE".new
  fi
  # Precaution: update to jwmrc-tray only if not empty
  [ -s "$trayFILE".new ] && cp $VERB -f "$trayFILE".new "$trayFILE"

  if [ "`cat $trayFILE | grep xload`" != "" ]; then
  sed -e "s|\(.*xload.*\) -bg \".*\"|\1 -bg \"$PAGER_BG\"|g" < "$trayFILE" > "$trayFILE".new
  fi
  # Precaution: update to jwmrc-tray only if not empty
  [ -s "$trayFILE".new ] && cp $VERB -f "$trayFILE".new "$trayFILE"

###END###
}
