#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_func_new"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/local/pschedule/func_new"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in 1; do shift; done; }

_trap

}
# End new header
#
MODE="$1"

edit () {
MINUTE=`echo "$TREE" | cut -d " " -f 1`
HOUR=`echo "$TREE" | cut -d " " -f 2`
DAY=`echo "$TREE" | cut -d " " -f 3`
MONTH=`echo "$TREE" | cut -d " " -f 4`
WEEKDAY=`echo "$TREE" | cut -d " " -f 5`
TASK=`echo "$TREE" | cut -d " " -f 6-`
TASKNAME=`echo "$TASK" | cut -d "#" -f 2-` #jake_take
OLD="$MINUTE $HOUR $DAY $MONTH $WEEKDAY $TASK"

if [ "$MINUTE" = "*" ]; then MINUTE="any"; fi
if [ `echo $MINUTE | wc -c` = 2 ]; then MINUTE=0"$MINUTE"; fi #place a zero in front when only 1 digit
if [ "$HOUR" = "*" ]; then HOUR="any"; fi
if [ `echo $HOUR | wc -c` = 2 ]; then HOUR=0"$HOUR"; fi #place a zero in front when only 1 digit
if [ "$DAY" = "*" ]; then DAY="any"; else DAY="$DAY."; fi
case $WEEKDAY in
	1)		WEEKDAY="Monday";;
	2)		WEEKDAY="Tuesday";;
	3)		WEEKDAY="Wedensday";;
	4)		WEEKDAY="Thursday";;
	5)		WEEKDAY="Friday";;
	6)		WEEKDAY="Saturday";;
	0)		WEEKDAY="Sunday";;
	"*")	WEEKDAY="any";;
esac
case "$MONTH" in
	1)		MONTH="January";;
	2)		MONTH="February";;
	3)		MONTH="March";;
	4)		MONTH="April";;
	5)		MONTH="May";;
	6)		MONTH="June";;
	7)		MONTH="July";;
	8)		MONTH="August";;
	9)		MONTH="September";;
	10)		MONTH="October";;
	11)		MONTH="November";;
	12)		MONTH="December";;
	"*")	MONTH="any";;
esac
ITEMS_HOUR="<item>$HOUR</item>$ITEMS_HOUR"
ITEMS_MINUTE="<item>$MINUTE</item>$ITEMS_MINUTE"
ITEMS_DAY="<item>$DAY</item>$ITEMS_DAY"	
ITEMS_MONTH="<item>$MONTH</item>$ITEMS_MONTH"	
ITEMS_WEEKDAY="<item>$WEEKDAY</item>$ITEMS_WEEKDAY"	
}

new () {
if [ "$MODE" != "-edit" ]; then TASK='gxmessage "Happy Puppy"'; TASKNAME='Please enter the task name"'; fi #jake_take
export new_task="
<window title=\"Pschedule - Task on time\">
<vbox>
 <frame Task>
  <hbox>
   <text><label>Command:</label></text>
   <entry><variable>TASK</variable><input>echo $TASK</input></entry>
  </hbox>
  <hbox>
   <text><label>Task name (optional):</label></text>
   <entry><variable>TASKNAME</variable><input>echo $TASKNAME</input></entry>
  </hbox>
 </frame>
 <frame Time>
  <hbox>
   <table>
    <width>70</width><height>150</height>
    <label>Hour</label>
    <variable>HOUR</variable>
    $ITEMS_HOUR
    <action>. $PROGPATH/func_human_to_cron</action>
    <action>refresh:ENTRY_CRON</action>
    <action>. $PROGPATH/func_cron_to_human -new</action>
    <action>refresh:ENTRY_NEXT</action>
   </table>
   <table>
    <width>70</width><height>100</height>
    <label>Min.</label>
    <variable>MINUTE</variable>
    $ITEMS_MINUTE
    <action>. $PROGPATH/func_human_to_cron</action>
    <action>refresh:ENTRY_CRON</action>
    <action>. $PROGPATH/func_cron_to_human -new</action>
    <action>refresh:ENTRY_NEXT</action>
   </table>
   <table>
    <width>120</width><height>100</height>
    <label>Day</label>
    <variable>WEEKDAY</variable>
	$ITEMS_WEEKDAY
    <action>. $PROGPATH/func_human_to_cron</action>
    <action>refresh:ENTRY_CRON</action>
    <action>. $PROGPATH/func_cron_to_human -new</action>
    <action>refresh:ENTRY_NEXT</action>
   </table>
   <table>
    <width>70</width><height>100</height>
    <label>Date</label>
    <variable>DAY</variable>
    $ITEMS_DAY
    <action>. $PROGPATH/func_human_to_cron</action>
    <action>refresh:ENTRY_CRON</action>
    <action>. $PROGPATH/func_cron_to_human -new</action>
    <action>refresh:ENTRY_NEXT</action>
   </table>
   <table>
    <width>120</width><height>100</height>
    <label>Month</label>
    <variable>MONTH</variable>
    $ITEMS_MONTH
    <action>. $PROGPATH/func_human_to_cron</action>
    <action>refresh:ENTRY_CRON</action>
    <action>. $PROGPATH/func_cron_to_human -new</action>
    <action>refresh:ENTRY_NEXT</action>
   </table>
  </hbox>
  <hbox>
   <text><label>Cron time</label></text>
   <vbox>
    <entry><variable>ENTRY_CRON</variable><width>90</width><height>27</height><input>cat /tmp/pschedule-cron</input></entry>
   </vbox>
  </hbox>
  <hbox>
   <text><label>Next run</label></text>
   <entry editable=\"false\"><variable>ENTRY_NEXT</variable><input>cat /tmp/pschedule-next</input></entry>
  </hbox>
 </frame>
 <hbox>
  <button cancel></button>
  <button ok></button>
 </hbox>
</vbox>
</window>"
I=$IFS; IFS=""
for STATEMENTS in  $(gtkdialog3 --program=new_task); do
	eval $STATEMENTS
done
IFS=$I
TASK="$TASK #$TASKNAME" #jake_take
case $EXIT in
	OK) if [ "$MODE" = "-edit" ]; then
			sed -i -e 's%*%{ð®STARđþ}%g' /var/spool/cron/crontabs/$USER
			OLD=`echo "$OLD" | sed -e 's%*%{ð®STARđþ}%g'`
			PATTERN="s%$OLD%$ENTRY_CRON $TASK%g"
			sed -i -e "$PATTERN" /var/spool/cron/crontabs/$USER
			sed -i -e 's%{ð®STARđþ}%*%g' /var/spool/cron/crontabs/$USER
		else
			echo "$ENTRY_CRON $TASK" >> /var/spool/cron/crontabs/$USER
		fi
		killall -q crond; crond #restart cron
		;;
	*)	exit;;
esac
}

if [ "$MODE" = "-edit" ]; then
	if [ ! "$TREE" ]; then
		FRAME="Error"; IMG="dialog-error"; TXT2="No selected task"
		. $PROGPATH/box_ok
	else
		TREE=`cat /tmp/pschedule-treeitems | grep "$TREE" | cut -d "|" -f 3 | cut -c 2-` #jake_take 
		edit #generate lists of cron command 
		new
	fi
else
	new
fi