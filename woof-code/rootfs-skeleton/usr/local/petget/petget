#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_petget"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/local/petget/petget"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
#(c) Copyright Barry Kauler 2009, puppylinux.com
#2009 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html).
# Note: Puppy Package Manager GUI is started from /usr/local/petget/pkg_chooser.sh .
# 'petget' is for commandline execution, especially from ROX-Filer.
# If passed param is a pkg name preceded by a '+': installs pkg, '-' uninstalls. Needs to be located in current PWD.
# example: +xbubble-0.2.4
# For integration with Rox-Filer or commandline: .pet,.deb,.tgz,.tar.gz with absolute path installs.
# ex: petget /root/xbubble-0.2.4.pet
# For integration with browser, ex: petget http://somewhere.on.internet/xbubble-0.2.4.pet
# Note, petget also get called from /etc/rc.d/rc.update to remove packages. ex:
# petget -xbubble-0.2.4
# ...when X not running, removal will not put up any DLG windows, will remove without question.
#w482 restart jwm immediately to update menu.
#v424 fix .pet in path with space chars.

echo "$0: START" >&2
CURR_DIR="$PWD"
echo "CURR_DIR='$CURR_DIR'" >&2

OUT=/dev/null;ERR=$OUT
[ "$DEBUG" ] && { OUT=/dev/stdout;ERR=/dev/stderr; }

Version='1.1-simple Puppy-Linux-4.3.1 KRG'

[ "$1" ] || exit

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

usage(){
MSG="
$0 /Path/to/package/to/install.extension
$0 Filename.pet [options]

Where extension may be one of these :
pet,deb,rpm,tar.gz,tgz,tar.bz2,tar.xz,txz
b2pet,lopet,lapet,xzpet

unsupported : pup

NOTE rpm : currently only works with older .rpm

Options :
-h|help           : ici
-V|version        : outputs version info
-R|remove Pkgname : removes pkg
-A|add Filename   : installs pkg (default)
-v|verbose        : verbose output
-D|debug          : 'set -x'
-C|codecheck      : 'set -n'

-\$PKGNAME        : uninstalls pkg
+\$PKGNAME        : installs pkg (default)
NOTE PKGNAME : FILENAME=PKGNAME.EXT
ie FILENAME=you2pup-2.2.1_light.pet
->  PKGNAME=you2pup-2.2.1_light
This works only in the current directory
ie #cd /mnt/home/Downloads/Pet
# ls ##output shows like this
copydvd-1.0.pet you2pup-2.1.4.pet you2pup-2.2.1.pet
# petget +copydvd-1.0 would run installpkg.sh
# petget -copydvd-1.0 would run removepreview.sh
"
echo -e "$MSG"
if [ "$DISPLAY" ];then
xmessage "$MSG";fi

exit $1
}

OUT=/dev/null;ERR=/dev/null
if   [ "`echo "$@" |grep -Eiw '\-h|help'`" ];  then usage 0
elif [ "`echo "$@" |grep -Ew '\-V|version'`" ];then { echo -e "\n$0: Version '$Version'\nUse help for more info\n";exit 0; }
elif [ "`echo "$@" |grep -Ew '\-R|remove'`" ]; then :
elif [ "`echo "$@" |grep -Ew '\-A|add'`" ];    then :
elif [ "`echo "$@" |grep -Ew '\-v|verbose'`" ];then VERB=-v;L_VERB=--verbose;A_VERB=-verbose;ME_VERB=1;OUT=/dev/stdout;ERR=/dev/stderr
elif [ "`echo "$@" |grep -Eiw '\-D|debug'`" ]; then set -x;DEBUG=1
elif [ "`echo "$@" |grep -Eiw '\-C|codecheck'`" ];then set -n
fi

tmpDIR=/tmp/petget     ##+++2012-05-10
mkdir -p "$tmpDIR"     ##+++2011-10-25

export LANG=C
. /etc/DISTRO_SPECS #has DISTRO_BINARY_COMPAT, DISTRO_COMPAT_VERSION

PASSEDPARAM="$1"
FULL_PKG_PATH="$PASSEDPARAM"

echo "PASSEDPARAM=$PASSEDPARAM'" >&2
echo "FULL_PKG_PATH=$FULL_PKG_PATH'" >&2

if [ "`echo -n "$PASSEDPARAM" | grep '^\\-'`" != "" ];then
 #remove a package...
 PKGNAME=`echo -n "$PASSEDPARAM" | cut -c 2-99`
 TREE2="$PKGNAME"
 export TREE2
 if [ "`tty`" != 'not a tty' ] ; then
 read -n1 -p "Sure you want to remove '$PKGNAME' [Yy|Other] ? " OK_KEY
 [ "$OK_KEY" = Y -o "$OK_KEY" = y ] || exit 0
 fi
 /usr/local/petget/removepreview.sh
 exit $?
fi

#want to install a pkg...

COMPAT_EXT=""
case $DISTRO_BINARY_COMPAT in
 slackware)
  COMPAT_EXT=".tgz"
 ;;
 debian|ubuntu)
  COMPAT_EXT=".deb"
 ;;
 arch)
  COMPAT_EXT=".tar.gz"
 ;;
 mageia)
  COMPAT_EXT='.rpm';;
esac

#what type is it...
PASSEDBASE=`basename "$PASSEDPARAM"`
case $PASSEDBASE in
 *.pet) EXT=".pet";;
 *.deb) EXT=".deb";;
 *.tgz) EXT=".tgz";;
# *.tar.gz) EXT=".tar.gz";;
 *.txz) EXT='.txz';;
 *.tar.lzma|*.tar.lzm|*.tar.lza|*.tar.lzo|*.tar.lzop|*.tar.bz2|*.tar.xz|*.tar.gz)
 EXT='.'`echo "$PASSEDBASE"|rev|cut -f1,2 -d.|rev`
  ;;
  *.rpm) EXT='.rpm';;
 *.b2pet)EXT='.b2pet';;
 *.lopet)EXT='.lopet';;
 *.lapet)EXT='.lapet';;
 *.xzpet)EXT='.xzpet';;
 *.pup)  EXT='.pup';;
 *)
  EXT=""
 ;;
esac
echo "EXT='$EXT'"

#download if required...
PKGNAME="";_PKG_ROOT=1

if [ "`echo -n "$PASSEDPARAM" | grep -E '^ftp|^http'`" != "" ];then
 cd /root
 rxvt -title "Puppy Package Manager: download" -bg orange -geometry 80x10 -e wget "$PASSEDPARAM"
 PKGPATH=`dirname "$PASSEDPARAM"` #really a url.
 FULLPKGNAME=`basename "$PASSEDPARAM"`
 PKGMAIN=`basename "$PASSEDPARAM" ${EXT}`
 if [ ! -f "$FULLPKGNAME" ];then
  xmessage -bg red "Sorry, failed to download $FULLPKGNAME"
  exit
 fi

else
 #get rid of any leading '+'...
 PASSEDPARAM=`echo -n "$PASSEDPARAM" | sed -e 's%^+%%'`
 echo "PASSEDPARAM=$PASSEDPARAM'" >&2
 [ -e "$PASSEDPARAM" ] || { echo "PWD=$PWD' : File '$PASSEDPARAM' seems not to exist";exit 1; }
 [ -f "$PASSEDPARAM" ] || { echo "PWD=$PWD' : File '$PASSEDPARAM' not regular";exit 1; }
 FIRSTCHAR=`echo -n "$PASSEDPARAM" | cut -c 1`
 if [ "$FIRSTCHAR" = "/" -o "$FIRSTCHAR" = "." ];then
  PKGPATH=`dirname "$PASSEDPARAM"`
  FULLPKGNAME=`basename "$PASSEDPARAM"`
  PKGMAIN=`basename "$PASSEDPARAM" ${EXT}`

 else
  PKGPATH=`pwd`

  if [ "$EXT" = "" ];then
   PKGMAIN="$PASSEDPARAM"
   FULLPKGNAME="${PKGMAIN}.pet"
   EXT=".pet"
  else
   FULLPKGNAME=`basename "$PASSEDPARAM"`
   PKGMAIN=`basename "$PASSEDPARAM" ${EXT}`
  fi ## EXT or NOT EXT

 fi ## firstchar = / or .

 # cp -f "${PKGPATH}/${FULLPKGNAME}" /root/ 2>$ERR #v424 fix if spaces in path.
 #_PKG_ROOT=1
 [ -f "/root/${FULLPKGNAME}" ] || { echo "File not in /root directory";cp -f "${PKGPATH}/${FULLPKGNAME}" /root/ 2>$ERR && _PKG_ROOT=''; }

fi #download or local

originPKGPATH="$PKGPATH" #w482
PKGPATH=/root

#split PKGMAIN, ex: FULLPKGNAME=xvidtune-1.0.1-i486-1.tgz has PKGNAME=xvidtune-1.0.1
 case $EXT in
  .deb)
   #deb ex: xsltproc_1.1.24-1ubuntu2_i386.deb  xserver-common_1.5.2-2ubuntu3_all.deb
   DB_nameonly=`echo -n "$PKGMAIN" | cut -f 1 -d '_'`
   DB_pkgrelease=`echo -n "$PKGMAIN" | rev | cut -f 2 -d '_' | cut -f 1 -d '-' | rev`
   prPATTERN="s%\\-${DB_pkgrelease}.*%%"
   PKGNAME=`echo -n "$PKGMAIN" | sed -e "$prPATTERN"`
   DB_version=`echo "$PKGNAME" | cut -f 2 -d '_'`
   [ "$ME_VERB" ] && echo "'$DB_nameonly' '$DB_pkgrelease' $prPATTERN '$PKGNAME' '$DB_version'"
  ;;
  .pet|.pup)
   PKGNAME="$PKGMAIN"
   DB_version=`echo -n "$PKGNAME" | grep -o '\\-[0-9].*' | sed -e 's%^\-%%'`
   xDB_version=`echo -n "$DB_version" | sed -e 's%\\-%\\\\-%g' -e 's%\\.%\\\\.%g'`
   xPATTERN="s%${xDB_version}%%"
   DB_nameonly=`echo -n "$PKGNAME" | sed -e "$xPATTERN" -e 's%\\-$%%'`
   DB_pkgrelease=""
   [ "$ME_VERB" ] && echo "'$DB_nameonly' '$DB_pkgrelease' $prPATTERN '$PKGNAME' '$DB_version' '$xDB_version' '$xPATTERN'"
  ;;
  .tgz|.txz)
   #slack ex: xvidtune-1.0.1-i486-1.tgz  printproto-1.0.4-noarch-1.tgz
   PKGNAME=`echo -n "$PKGMAIN" | sed -e 's%\\-i[3456]86.*%%' -e 's%\\-noarch.*%%'`
   DB_version=`echo -n "$PKGNAME" | grep -o '\\-[0-9].*' | sed -e 's%^\\-%%'`
   xDB_version=`echo -n "$DB_version" | sed -e 's%\\-%\\\\-%g' -e 's%\\.%\\\\.%g'`
   xPATTERN="s%${xDB_version}%%"
   DB_nameonly=`echo -n "$PKGNAME" | sed -e "$xPATTERN" -e 's%\-$%%'`
   DB_pkgrelease=`echo -n "$PKGMAIN" | sed -e 's%.*\\-i[3456]86%%' -e 's%.*\\-noarch%%' -e 's%^\\-%%'`
   [ "$ME_VERB" ] && echo "'$DB_nameonly' '$DB_pkgrelease' $prPATTERN '$PKGNAME' '$DB_version' '$xDB_version' '$xPATTERN'"
  ;;
  .tar.gz|.tar.bz2)
   #arch ex: xproto-7.0.14-1-i686.pkg.tar.gz  trapproto-3.4.3-1.pkg.tar.gz
   PKGNAME=`echo -n "$PKGMAIN" | sed -e 's%\\-i[3456]86.*%%' -e 's%\\.pkg$%%' | rev | cut -f 2-9 -d '-' | rev`
   echo 1
   DB_version=`echo -n "$PKGMAIN" | grep -o '[\-\_][0-9].*' | sed -e 's%^[\-\_]%%'`
   echo 2
   xDB_version=`echo -n "$DB_version" | sed -e 's%[-_]%\\\\-%g' -e 's%\.%\\\\.%g'`
   echo 3
   xPATTERN="s%${xDB_version}%%"
   DB_nameonly=`echo -n "$PKGNAME" | sed -e "$xPATTERN" -e 's%\\-$%%'`
   echo 4
   DB_pkgrelease=`echo -n "$PKGMAIN" | sed -e 's%\\-i[3456]86.*%%' -e 's%\\.pkg$%%' | rev | cut -f 1 -d '-' | rev`
   [ "$ME_VERB" ] && echo "$prPATTERN '$PKGNAME' '$DB_version' '$xDB_version' '$xPATTERN' '$DB_nameonly' '$DB_pkgrelease' "
  ;;
  .rpm)
  #fedora ex: acetoneiso-2.3-2.mga2.i586.rpm
  #           acidrip-0.14-10.mga1.noarch.rpm
   PKGNAME=`echo -n "$PKGMAIN" | sed -e 's%\\.i[3456]86.*%%' -e 's%\\.noarch.*%%' -e 's%\\.mga[0-9]$%%' | rev | cut -f 2-9 -d '-' | rev`
   DB_version=`echo -n "$PKGNAME" | grep -o '\\-[0-9].*' | sed -e 's%^\\-%%'`
   xDB_version=`echo -n "$DB_version" | sed -e 's%\\-%\\\\-%g' -e 's%\\.%\\\\.%g'`
   xPATTERN="s%${xDB_version}%%"
   DB_nameonly=`echo -n "$PKGNAME" | sed -e "$xPATTERN" -e 's%\\-$%%'`
   DB_pkgrelease=`echo -n "$PKGMAIN" | sed -e 's%\\.i[3456]86.*%%' -e 's%\\.noarch.*%%' -e 's%.*mga%%'`
   [ "$ME_VERB" ] && echo "'$DB_nameonly' '$DB_pkgrelease' $prPATTERN '$PKGNAME' '$DB_version' '$xPATTERN'"
  ;;
  .bzpet|.lopet|.lapet|.xzpet)
   PKGNAME="$PKGMAIN"
   DB_version=`echo -n "$PKGNAME" | grep -o '\\-[0-9].*' | sed -e 's%^\-%%'`
   xDB_version=`echo -n "$DB_version" | sed -e 's%\\-%\\\\-%g' -e 's%\\.%\\\\.%g'`
   xPATTERN="s%${xDB_version}%%"
   DB_nameonly=`echo -n "$PKGNAME" | sed -e "$xPATTERN" -e 's%\\-$%%'`
   DB_pkgrelease=""
   [ "$ME_VERB" ] && echo "'$DB_nameonly' '$DB_pkgrelease' $prPATTERN '$PKGNAME' '$DB_version' '$xPATTERN'"
   ;;
 esac

cd "$PKGPATH" #well, this is /root

#confirm want to install...
export INSTALL_DIALOG="<window title=\"Puppy Package Manager\" icon-name=\"gtk-about\">
  <vbox>
  <pixmap><input file>/usr/local/lib/X11/pixmaps/question.xpm</input></pixmap>
   <text><label>Click 'OK' button to confirm that you wish to install this package:</label></text>
   <text use-markup=\"true\"><label>\"<b>${FULLPKGNAME}</b>\"</label></text>
   <hbox>
    <button ok></button>
    <button><label>Examine Package</label>
    <action>EXIT:examine</action></button>
    <button cancel></button>
   </hbox>
  </vbox>
 </window>"
RETPARAMS=`gtkdialog3 --program=INSTALL_DIALOG`
eval "$RETPARAMS"
#[ "$EXIT" != "OK" ] && exit
#echo $EXIT
echo "RETPARAMS='$RETPARAMS'"
echo "EXIT='$EXIT'"
if [ "$EXIT" != "OK" -a "$EXIT" != "examine" ];then # && exit
##echo "exiting $0";
##[ -f "/root/${FULLPKGNAME}" ] && rm "/root/${FULLPKGNAME}";
#echo "Exiting $0";[ ! "$_PKG_ROOT" ] && [ -f "/root/${FULLPKGNAME}" ] && rm "/root/${FULLPKGNAME}";exit $?;fi
echo "Exiting $0";
[ ! "${_PKG_ROOT}" ] && rm "/root/${FULLPKGNAME}"
exit $?;fi

if [ "$EXIT" = "OK" ];then
#find entry in databases...
#pkgname|nameonly|version|pkgrelease|category|size|path|fullfilename|dependencies|description|
#optionally on the end: compileddistro|compiledrelease|repo| (fields 11,12,13)
pPATTERN='^'"$PKGNAME"'|'
if [ "$EXT" = ".pet" ];then
 DB_ENTRY=`cat /root/.packages/Packages-puppy-* | grep "$pPATTERN" | sort -r | head -n 1`
else
 DB_ENTRY=`cat /root/.packages/Packages-${DISTRO_BINARY_COMPAT}-* | grep "$pPATTERN" | head -n 1`
fi

#w482 doesn't matter if incomplete, installpkg.sh will read .desktop file for description and category...
#also, if .pet pkg has pet.specs, that will get written to /root/.packages/user-packages-installed
if [ "$DB_ENTRY" = "" ];then
 DB_ENTRY="${PKGNAME}|${DB_nameonly}|${DB_version}|${DB_pkgrelease}||||${FULLPKGNAME}|||"
fi

#w482 hack, if pkg was originally at /root then don't delete it...
[ "$originPKGPATH" = "$PKGPATH" ] && cp -f ${PKGPATH}/${FULLPKGNAME} ${PKGPATH}/${FULLPKGNAME}-TEMPBACKUP

#install pkg...
rm -f $TEMP_D/petget_missing_dbentries-Packages-* 2>$ERR
rm -f $TEMP_D/petget-installed-pkgs.log 2>$ERR
echo "$DB_ENTRY" > $TEMP_D/petget_missing_dbentries-Packages-alien
DEBUG=$DEBUG VERB=$VERB /usr/local/petget/installpkg.sh "$PKGPATH/$FULLPKGNAME"
RETVAL=$?

#installpkg.sh has already done this...
rm -f $PKGPATH/$FULLPKGNAME 2>$ERR
rm -f $PKGPATH/${PKGNAME}.tar.gz 2>$ERR

#w482 hack, if pkg was originally at /root then don't delete it...
[ "$originPKGPATH" = "$PKGPATH" ] && mv -f ${PKGPATH}/${FULLPKGNAME}-TEMPBACKUP ${PKGPATH}/${FULLPKGNAME}

#announce result...
if [ $RETVAL -ne 0 -o ! -s $TEMP_D/petget-installed-pkgs.log ];then
 if [ $RETVAL != 0 ];then ADD_MSG='(Something went wrong in the installpkg.sh)'
 else ADD_MSG="($TEMP_D/petget-installed-pkgs.log seems not to be OK)";fi
 export FAIL_DIALOG="<window title=\"Puppy Package Manager\" icon-name=\"gtk-about\">
  <vbox>
  <pixmap><input file>/usr/local/lib/X11/pixmaps/error.xpm</input></pixmap>
   <text use-markup=\"true\"><label>\"<b>Error, package ${FULLPKGNAME} failed to install.</b>\"</label></text>
    <hbox><text><label>\"\"</label></text></hbox>
    <hbox><text><label>$ADD_MSG</label></text></hbox>
    <hbox><text><label>\"\"</label></text></hbox>
   <hbox>
    <button ok></button>
   </hbox>
  </vbox>
 </window>"
 gtkdialog3 --program=FAIL_DIALOG
 exit
fi

INSTALLEDMSG=`cat $TEMP_D/petget-installed-pkgs.log`
MENUMSG=""
INSTALLEDCAT=`echo -n "$INSTALLEDMSG" | rev | cut -f 1 -d ' ' | rev`
if [ "$INSTALLEDCAT" = "none" ];then
 MENUMSG="<text><label>...note, this package does not have a menu entry.</label></text>"
else
 MENUMSG="<text><label>...look in '${INSTALLEDCAT}' in the menu (bottom-left of screen) to run the application.</label></text>"
fi

#installpkg.sh will have logged to "$tmpDIR"/petget-installed-pkgs-log
export INSTALL_DIALOG="<window title=\"Puppy Package Manager\" icon-name=\"gtk-about\">
 <vbox>
 <pixmap><input file>/usr/local/lib/X11/pixmaps/ok.xpm</input></pixmap>
  <text><label>The following package has been successfully installed:</label></text>
  <text use-markup=\"true\"><label>\"<b>${INSTALLEDMSG}</b>\"</label></text>
  ${MENUMSG}
  <hbox>
   <button ok></button>
  </hbox>
 </vbox>
</window>
"
gtkdialog3 --program=INSTALL_DIALOG

RESTARTMSG="Please wait, updating help page and menu..."
[ "`pidof jwm`" != "" ] && RESTARTMSG="Please wait, updating help page and menu (the screen will flicker!)..." #w482
[ "$INSTALLEDCAT" = "none" ] && RESTARTMSG="Please wait, updating help page..."
yaf-splash -font "8x16" -outline 0 -margin 4 -bg orange -text "${RESTARTMSG}" &
X3PID=$!

#master help index has to be updated...
/usr/sbin/indexgen.sh
#Reconstruct configuration files for JWM, Fvwm95, IceWM...
if [ "$INSTALLEDCAT" != "none" ];then
 /usr/sbin/fixmenus
 [ "`pidof jwm`" != "" ] && jwm -restart #w482
fi


else

function view_temp(){
pwd

#FILES=`find \( -type f -o -type l \) |sed 's|^\.||'`
#FILES=`find \( -type f -o -type l \) |sed 's|^\.||;s|^/||'`
FILES=`find -mindepth 2 \( -type f -o -type l \) |sed 's|^\.||' | sed 's|^/||'`

for file in $FILES;do
#file=${file#*/}

if echo "$file" | grep $QUIET -i -E -e '*pet*\.specs'; then
SPEC_LINES=`cat "$file"`
 while read line_;
 do
 [ "$line_" ] || continue
 grep $QUIET "$line_" "$HOME"/.packages/user-installed-packages && echo "$line_" >> already.installed || echo "$line_" >> notyet.installed
 done<<EOI
$(echo "$SPEC_LINES")
EOI
continue
fi


file="/${file#*/}"

#if echo "$file" | grep $QUIET -i -E -e '*pet*\.specs' ; then
#SPEC_LINES=`cat "$file"`
# while read line ; do
# [ "$line" ] || continue
# grep $QUIET "$line" "$HOME"/.packages/user-installed-packages && echo "$line" >> already.installed || echo "$line" >> notyet.installed
# done<<EOI
#$(echo "$SPEC_LINES")
#EOI
#continue
#fi

if [ -e "$file" ]; then
#if [ -e "${file#*/}" ] ; then
echo "$file" >> files_overwrite.lst
else
echo "$file" >> files_new.lst
fi

done  #for file in FILES

rox "$tmpDIR"/"${FULLPKG}"/
xmessage -geometry +500+300 -buttons "OK :140, Delete:141" "Click Delete button to erase this
examination directory ,
otherwise just OK"
if [ "$?" = '141' ];then
cd /root
rox -D "$tmpDIR"/"${FULLPKG}"/
rm -rf "$tmpDIR"/"${FULLPKG}"/
fi
}

#PKGPATH=`dirname "$PASSEDPARAM"`
#FULLPKGNAME=`basename "$PASSEDPARAM"`
#PASSEDBASE=`basename "$PASSEDPARAM"`
if [ "`echo "${FULLPKGNAME}" | grep '\.tar\..*'`" ];then
FULLPKG=`echo "${FULLPKGNAME}" |sed 's|\.tar\..*$||'`
EXTN=`echo "${FULLPKGNAME}" |sed "s|$FULLPKG||;s|^\.||"`
else
FULLPKG="${FULLPKGNAME%\.*}"
EXTN="${FULLPKGNAME##*.}"
fi;echo $EXTN;echo $FULLPKG
rox -D "$tmpDIR"/"$FULLPKG"   ##+++2013-04-29
rm -fr "$tmpDIR"/"$FULLPKG"   ##+++2013-04-29
mkdir -p "$tmpDIR"/"$FULLPKG"
#cp "$PKGPATH/$FULLPKGNAME" "$tmpDIR"/"${FULLPKG}"/
mv "$PKGPATH/$FULLPKGNAME" "$tmpDIR"/"${FULLPKG}"/
cd "$tmpDIR"/"${FULLPKG}"/
case $EXTN in
pet)
pet2tgz ${FULLPKGNAME}
tar xzf ${FULLPKG}.tar.gz
#rox "$tmpDIR"/"${FULLPKG}"/
#xmessage -buttons "OK :140, Delete:141" "Click Delete button to erase this
#examination directory ,
#otherwise just OK"
#if [ "$?" = '141' ];then
#rox -D "$tmpDIR"/"${FULLPKG}"/
#rm -rf "$tmpDIR"/"${FULLPKG}"/
#fi
view_temp
;;
deb)
#mkdir -p "$tmpDIR"/${FULLPKG}
dpkg-deb -x ${FULLPKGNAME} "$tmpDIR"/${FULLPKG}
#rox "$tmpDIR"/"${FULLPKG}"/
#xmessage -buttons "OK :140, Delete:141" "Click Delete button to erase this
#examination directory ,
#otherwise just OK"
#if [ "$?" = '141' ];then
#rox -D "$tmpDIR"/"${FULLPKG}"/
#rm -rf "$tmpDIR"/"${FULLPKG}"/
#fi
view_temp
;;
tar.gz|tgz)
if [ "$EXT" = 'tgz' ];then
mv "${FULLPKGNAME}" "${FULLPKG}".tar.gz;fi
tar xzf "${FULLPKG}".tar.gz
#rox "$tmpDIR"/"${FULLPKG}"/
#xmessage -buttons "OK :140, Delete:141" "Click Delete button to erase this
#examination directory ,
#otherwise just OK"
#if [ "$?" = '141' ];then
#rox -D "$tmpDIR"/"${FULLPKG}"/
#rm -rf "$tmpDIR"/"${FULLPKG}"/
#fi
view_temp
;;
tar.bz2)
tar xjf "${FULLPKG}".tar.bz2
view_temp
;;
tar.xz|txz)
if [ "$EXT" = 'txz' ]; then
mv "${FULLPKGNAME}" "${FULLPKG}".tar.xz;
fi
xz -d "${FULLPKG}".tar.xz
tar xf "${FULLPKG}".tar
view_temp
;;
b2pet)
pet2tgz -b ${FULLPKGNAME}
tar xjf ${FULLPKG}.tar.bz2
view_temp
;;
lopet)
pet2tgz -l ${FULLPKGNAME}
lzop -d ${FULLPKG}.tar.lzo
tar xf ${FULLPKG}.tar
view_temp
;;
lapet)
pet2tgz -L ${FULLPKGNAME}
lzma -d ${FULLPKG}.tar.lzma
tar xf ${FULLPKG}.tar
view_temp
;;
xzpet)
pet2tgz -x ${FULLPKGNAME}
xz -d ${FULLPKG}.tar.xz
tar xf ${FULLPKG}.tar
view_temp
;;
rpm)
RPM2CPIO="rpm2cpio"
[ "`which rpm2cpio2`" ] && RPM2CPIO="rpm2cpio2"
mkdir Rpm_Extract.d
cd ./Rpm_Extract.d
$RPM2CPIO ../"${FULLPKGNAME}" 2>../petget_extract_errs | cpio -d -i -m
RPM_RV=$?
   if [ "$RPM_RV" != 0 ];then
   ERR_MSG=`cat ../petget_extract_errs`
    xmessage -bg "orange red" -center -title "PupZip: ERROR" "An error has occurred opening the RPM file.

$ERR_MSG

Suggestion: install unrpm.pup DotPup package, which contains an alternative
RPM extraction program, that PupZip will automatically use if present."
   fi
 sync
FULLPKG_F="${FULLPKG//\.src/}" #trustedgrub-1.1.0-14.1.src
FULLPKG_F="${FULLPKG_F%-*}" #trustedgrub-1.1.0-14.1
find -maxdepth 1 -type f \( -iname "${FULLPKG_F}.tar.*" -o -iname "${FULLPKG_F}.t[gx]z" -o -iname "${FULLPKG_F}.tar" \)  -print
find -maxdepth 1 -type f \( -iname "${FULLPKG_F}.tar.*" -o -iname "${FULLPKG_F}.t[gx]z" -o -iname "${FULLPKG_F}.tar" \)  -exec xarchive {} \; &
view_temp
;;
*)
xmessage -bg red "$EXTN examination not yet implemented"
;;
esac

echo "PWD='$PWD'" >&2
cd "$CURR_DIR"    >&2
echo "PWD='$PWD'" >&2
echo "PASSEDPARAM='$PASSEDPARAM'" >&2
echo "Running `readlink -f $0` again ." >&2
exec petget "$PASSEDPARAM"
fi

kill $X3PID
echo "$0: END" >&2
###END###
