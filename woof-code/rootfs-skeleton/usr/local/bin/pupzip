#!/bin/ash
#Barry Kauler 2005 www.puppylinux.com
#frontend for XArchive.
#well, i want this to be a universal archiver frontend for puppy.
#v4.00 25apr2008 BK: now have full dpkg-deb in Puppy.
#w474 support .delta, .bfe files.

# this script does:
#  1. check for filename as parameter
#  2. if simple compressed file with supported extensions, extract and exit
#  3. check if an archive program is found in PATH, f.ex. xarchive
#  4. exit if no archive program found.
#  5. again check for paramters
#  6. run archive program if no parameters
#  7. if --help as parameter, give a help message
#  8. if no extension, treat as ordinary file and run archive program to create archive file
#  9. check for further known archive extensions like .tar, .tgz, .rpm
# 10. prepare the archive for the archive program in case
# 11. run archive program on archive file
# 12. else run archive program to create archive file from normal file

test -f /etc/rc.d/f4puppy5 && . /etc/rc.d/f4puppy5

alias cp="cp $VERB"
alias mv="mv $VERB"

PARAMIN="$@"
_debug "PARAMIN='$PARAMIN'"
CDIR="`pwd`"
_debug "CDIR='$CDIR'"
#note, do not cd to directory this app is located in. Why?

_check_unzip_exe(){
which "$*" >>$OUT
}

_simple_extract_file(){
test -f "$*"  || return 2
xmessage -buttons "Yes,No" "Do you want to decompress $* ?
(it will decompress in current location
 and the original file will be deleted)"
      [ $? -eq 101 ] || exit 0
      $EXTRACT_BIN $EXTRACT_OPTS "$*"
      RV=$?
      _sync
      exit ${RV:-1}
}

_say_status_xmessage(){
case $1 in
0) bgCOLOUR=green; TITLE_STRING=SUCCESS; MSG="Done.";;
*) bgCOLOUR=red;   TITLE_STRING=ERROR;   MSG="Probably some errors occurred.";;
esac
MSG=`gettext "$MSG"`
xmessage -bg $bgCOLOUR -timeout 10 -title "PUPZIP: $TITLE_STRING" "$MSG" &
}

_check_free_space(){
test -f "$*" || return 2

FREE_SPACE=`df -k / | tail -n1 | awk '{print $4}'`
test "$FREE_SPACE" || { _warn "unable to determine available space on / ."; return 3; }
test "${FREE_SPACE//[[:digit:]]/}" && { _err "invalid value for available space on / ."; return 4; }

SIZE_FILE=`du -k "$*" | awk '{print $1}'`
test "$SIZE_FILE" || { _warn "unable to determine size of file $* ."; return 5; }
test "${SIZE_FILE//[[:digit:]]/}" && { _err "invalid value for size of file $* ."; return 6; }

if test $((SIZE_FILE * (NEED_SPACE+2) )) -ge $FREE_SPACE; then # +2 files: The original and the temporary.
xmessage -bg red -title "PupZip: ERROR" "Probably not enough available free space on / to extract $* ."
exit 255
else true
fi
}

_extract_file(){
test -f "$*"  || return 2
_check_free_space "$*"

xmessage -buttons "Yes,No" -title "PupZip: CONFIRM" "Do you want to decompress $* ?
(it will decompress in current location)"
      [ $? -eq 101 ] || exit 0
      cp -a "$*" "$*".tmp
      $EXTRACT_BIN $EXTRACT_OPTS "$*"
      RV=$?
      if test "$RV" = 0; then
      _sync
      test -f "$*".tmp && mv "$*".tmp "$*"
      else false
      fi
      RV=$((RV+$?))
      _say_status_xmessage $RV
      exit ${RV:-1}
}

_switch_file_type(){
test -f "$*" || return 2
case "$*" in
*.tar|*.tar.*) return 0;;
*.delta) exec xdelta_gui "$*";;
*.bfe)   exec bcrypt_gui "$*";;
*.gz)    EXTRACT_BIN=gunzip; NEED_SPACE=3;;
*.bz2)   EXTRACT_BIN=bunzip2; NEED_SPACE=4;;
*.lzo)   EXTRACT_BIN=lzo; EXTRACT_OPTS=-d; NEED_SPACE=2;;
*.lz|*.lza|*.lzma)  EXTRACT_BIN=lzma; EXTRACT_OPTS=-d; NEED_SPACE=5;;
*.xz)    EXTRACT_BIN=xz; EXTRACT_OPTS=-d; NEED_SPACE=5;;
*.zip)   EXTRACT_BIN=unzip; NEED_SPACE=3;;
*.Z)     EXTRACT_BIN=uncompress; NEED_SPACE=3;;
*) return 0;;
esac
_check_unzip_exe "$EXTRACT_BIN" || { err "'$EXTRACT_BIN' not found in PATH."; return 3; }
_extract_file "$*"
}

test -f "$*" && _switch_file_type "$*"

#in order of preference...
if [ "`which xarchive`" ];then
echo XARCHIVE IS THERE
 XARCHIVE="xarchive"
elif [ "`which TkZip`" ];then
  XARCHIVE="TkZip"
elif [ "`which guitar`" ];then
   XARCHIVE="guitar"
else
   exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "No archive GUI program found.
Please install XArchive."
fi

case $PARAMIN in
'') exec $XARCHIVE;; # just start xarchive...
"-h"|*help)
 if [ "$XARCHIVE" = "xarchive" ];then
 MSGE="Drag and drop invocation of XArchive is achieved by dragging any file or
directory the \"pupzip\" icon on the desktop. If you drag one of the
recognised archived files, such as .tar.gz, .rpm, .deb, .zip, .tar.bz2,
it will open in XArchive and you will be given the opportunity to extract
it. If you drag an ordinary file to the desktop icon, such as for example
\"myfile.txt\", a XArchive will popup a dialog asking if you want to add
it to an existing archive or create a new one."
 else
 MSGE="There is support for drag-and-drop of archive files to the desktop icon,
however not for files and directories -- for that you need to have
XArchiver installed, the preferred archiver program for Puppy."
 fi

 xmessage -bg "orange" -center -title "PupZip: help" "
This is a frontend to $XARCHIVE, which in turn is a frontend to the
archiver utilities in Puppy (such as gzip, bzip2, dpkg, rpm, zip).

Note: $XARCHIVE can be started in the conventional way via the menu.

$MSGE

PupZip can also be invoked from Rox by the \"Open With...\" menu,
by right-clicking on a file or directory." &
 exit
;;
*.deb|*.rpm|*.tar*|*.tbz|*.tgz|*.bz2|*.gz|*.zip) :;; # known archive extensions
*.*)  # file with some else extension
 if [ "$XARCHIVE" = "xarchive" ];then
 echo "Unknown archive file format, guessing you want to create archive.."
 echo  "Now about starting xarchive --add=ask $PARAMIN"
  exec xarchive --add=ask "$PARAMIN"
 else
  exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "Unknown archive file format
for '$XARCHIVE' program."
 fi
;;
*)       # file has no extension, so treat as ordinary file...
 if [ "$XARCHIVE" = "xarchive" ];then
   exec xarchive --add=ask "$PARAMIN"
 else
   exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "Do not know how to handle file names without extension
for '$XARCHIVE' program."
 fi
;;
esac

#it should be now an archive file...

 #get absolute path of file...
 if [ "`echo -n "$PARAMIN" | cut -b 1`" = "/" ];then  ##11
  FULLSPEC="$PARAMIN"
  #relative path...
 elif [ "$CDIR" = "/" ];then  ##111
   FULLSPEC="/$PARAMIN"
 else
   FULLSPEC="$CDIR/$PARAMIN"
 fi ##11
 echo "FULLSPEC='$FULLSPEC'"

 aFILE="`basename "$PARAMIN"`"
 echo "aFILE='$aFILE'"
 aEXT="$aFILE"
 echo "aEXT='$aEXT'"
  while [ "`echo -n "$aEXT" | grep '\.'`" ];do
   aEXT="`echo -n "$aEXT" | cut -f 2- -d '.'`"
  done

 #drops here with aEXT=extension.
 case $aEXT in
  rpm|RPM)
#RPM2CPIO="rpm2cpio2"  ##BUG
#1.0.7a: xarchive - gz, rpm, deb by GuestToo Puppy Master Mon 12 Dec 2005, 03:42
#http://208.109.22.214/puppy/viewtopic.php?t=4577&sid=1a697fb27e2f9301f269eaf64da53d8b
RPM2CPIO="rpm2cpio"
[ "`which rpm2cpio2`" ] && RPM2CPIO="rpm2cpio2"

   rm -rf /tmp/temprpm
   mkdir /tmp/temprpm
   cd /tmp/temprpm
   $RPM2CPIO "$FULLSPEC" | cpio -d -i -m
   if [ $? -ne 0 ];then
    exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "An error has occurred opening the RPM file.
Suggestion: install unrpm.pup DotPup package, which contains an alternative
RPM extraction program, that PupZip should automatically use if present."
   else true
   fi
   sync
   tar -c -f /tmp/temprpm.tar .
   rm -rf /tmp/temprpm
   cd /
   $XARCHIVE /tmp/temprpm.tar
   rm -f /tmp/temprpm.tar
   cd $CDIR
   exit
   ;;
#v4.00 xarchive wrappers should handle .deb ...
##busybox applets are not adequate for handling rpm, deb...
##the full alternatives, dotpups by GuestToo...
#DPKGDEB="dpkg-deb"
#[ "`which dpkg-deb2`" ] && DPKGDEB="dpkg-deb2"
#  deb|DEB)
#   mkdir /tmp/temprpm
#   cd /tmp/temprpm
#   $DPKGDEB -x "$FULLSPEC"
#   if [ ! $? -eq 0 ];then
#    exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "An error has occurred opening the DEB file."
#   fi
#   tar -c -f /tmp/temprpm.tar .
#   rm -rf /tmp/temprpm
#   cd /
#   $XARCHIVE /tmp/temprpm.tar
#   rm -f /tmp/temprpm.tar
#   cd $CDIR
#   exit
#   ;;
*)
 echo "NOW ABOUT TO EXEC XARCHIVE $XARCHIVE $PARAMIN"
 exec $XARCHIVE "$PARAMIN"
 ;;
 esac

###END###
