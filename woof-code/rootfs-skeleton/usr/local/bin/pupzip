#!/bin/ash

DEBUG=1
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_pupzip"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/local/bin/pupzip"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || . /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
#Barry Kauler 2005 www.puppylinux.com
# Frontend for XArchive.
# Well, I want this to be a universal archiver frontend for puppy.
#v4.00 25apr2008 BK: now have full dpkg-deb in Puppy.
#w474 support .delta, .bfe files.

PARAM="$@"
PARAM=`echo "${PARAM}" | sed 's%^ *%%;s% *$%%'`
test -e "$PARAM" && PARAM=`realpath "$PARAM"`
_debug "PARAM='$PARAM'"
test "$PARAM" && set - "$PARAM"

CDIR=`pwd`
_debug "CDIR='$CDIR'"
#note, do not cd to directory this app is located in.


_test_done(){
( # checks if already uncompressed file exists.
test "$*" || return 3
test -e "${*%.*}"
)
}

_get_size(){
#( # if the size is greater equal return 0
test "$*" || return 3
{ SIZE=`stat -c %s "$@" | awk '{print $1}'`; } || return 1
echo $SIZE
test $SIZE -ge $((50*1024*1024))  # 100MB
#) 2>>$ERR
}

_say_wait_msg(){
    # if size takes some time , give xmessage
test "$*" || return 3
_get_size "$@" >>$ERR && xmessage "Uncompressing, please wait..." & UPID=$!
}

_check_free_space(){
( # return 0 if free space in mountpoint is larger than 7 times the compressed size
PACK_SIZE=`_get_size "$@"`
_debug " PACK_SIZE=$PACK_SIZE"
FREE_SPACE=`df -B 1 "${*%/*}" | tail -n1 | awk '{print $4}'`
_debug "FREE_SPACE=$FREE_SPACE"
test $FREE_SPACE -gt $((PACK_SIZE * 7))
)
}

_exit_low_space(){
# exit if little space in save file (mountpoint /initrd/pup_rw)
xmessage -bg red -title "pupzip" "`gettext 'Decompression needs up to 7 times
the size of the compressed file.
Refusing to decompress.'`"
exit 10
}

_mk_bkup(){
( #make a backup named tmp-FILENAME.EXT
test "$*" || return 3
cp $VERB "$@" "${@%/*}"/tmp-"${@##*/}"
)
}

_restore_file(){
( #some compressors do not keep the compressed file after decompression
test "$*" || return 3
   _sync
   /bin/ps -p $UPID --no-header && kill $UPID
test -e "$*" || mv $VERB "${@%/*}"/tmp-"${@##*/}" "$@"
) >>$OUT 2>>$ERR
}

_prepare(){
# bundele of some above functions
        test "$*" || return 3
       _test_done "$@" && { echo Already uncompressed .; exit 0; }
       _check_free_space "$@";
case $? in 0) :;; 1) _exit_low_space;; *) echo CODE ERROR; exit 2;; esac
       _say_wait_msg "$@"
       _mk_bkup "$@"
}

_unpack(){
# run all the above functions, uncompress and restore original compressed file
    test "$*" || return 3
    test "$PACK" || return 4
  _prepare "$@"  || exit $?
   time $PACK $OPTS "$@"
  _restore_file "$@"
exit $?
}

case $@ in
*.tar*) :;;

*.gz)  PACK=gzip  OPTS="-d $Q $VERB" _unpack "$@" || exit 5;;
*.bz2) PACK=bzip2 OPTS="-d $Q $VERB" _unpack "$@" || exit 5;;
*.xz)  PACK=xz    OPTS="-d $Q $VERB" _unpack "$@" || exit 5;;

*.delta) exec xdelta_gui "$@";;
*.bfe)   exec bcrypt_gui "$@";;
esac


#in order of preference...
if [ "`which xarchive`" != "" ];then
 echo "XARCHIVE PROGRAM IS INSTALLED"
 XARCHIVE="xarchive"
elif [ "`which TkZip`" != "" ]; then
  XARCHIVE="TkZip"
elif [ "`which guitar`" != "" ];then
   XARCHIVE="guitar"
else
   exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "No archive GUI program found.
Please install XArchive."
fi

#the full alternatives, dotpups by GuestToo...
DPKGDEB="dpkg-deb"
[ "`which dpkg-deb2`" != "" ] && DPKGDEB="dpkg-deb2"
#RPM2CPIO="rpm2cpio2"  ##BUG
#1.0.7a: xarchive - gz, rpm, deb by GuestToo Puppy Master Mon 12 Dec 2005, 03:42
#http://208.109.22.214/puppy/viewtopic.php?t=4577&sid=1a697fb27e2f9301f269eaf64da53d8b
RPM2CPIO="rpm2cpio"
[ "`which rpm2cpio2`" != "" ] && RPM2CPIO="rpm2cpio2"

if [ "$PARAM" = "" ];then
echo "$PARAM is EMPTY ; starting now XARCHIVE ..."
 #just start xarchive...
 exec $XARCHIVE
fi

if [ "$XARCHIVE" = "xarchive" ];then
 MSGE="Drag and drop invocation of XArchive is achieved by dragging any file or
directory the \"pupzip\" icon on the desktop. If you drag one of the
recognised archived files, such as .tar.gz, .rpm, .deb, .zip, .tar.bz2,
it will open in XArchive and you will be given the opportunity to extract
it. If you drag an ordinary file to the desktop icon, such as for example
\"myfile.txt\", a XArchive will popup a dialog asking if you want to add
it to an existing archive or create a new one."
else
 MSGE="There is support for drag-and-drop of archive files to the desktop icon,
however not for files and directories -- for that you need to have
XArchiver installed, the preferred archiver program for Puppy."
fi

if [ "$PARAM" = "--help" ];then
 xmessage -bg "orange" -center -title "PupZip: help" "
This is a frontend to $XARCHIVE, which in turn is a frontend to the
archiver utilities in Puppy (such as gzip, bzip2, dpkg, rpm, zip).

Note: $XARCHIVE can be started in the conventional way via the menu.

$MSGE

PupZip can also be invoked from Rox by the \"Open With...\" menu,
by right-clicking on a file or directory."
 exit
fi


ARCHIVEFILE=`echo -n "$PARAM" | grep -i -E '\.tar|\.bz2|\.gz|\.rpm|\.deb|\.zip|\.tgz|\.tbz|\.apk' | grep -v '\\\.'`
[ "$DEBUG" ] && echo 'ARCHIVEFILE='"$ARCHIVEFILE"

if [ "$ARCHIVEFILE" != "" ]; then
 #it is an archive file...

 #get absolute path of file...
 if [ "`echo -n "$PARAM" | cut -b 1`" = "/" ];then  ##11
  FULLSPEC="$PARAM"
 else
  #relative path...
  if [ "$CDIR" = "/" ];then  ##111
   FULLSPEC="/$PARAM"
  else
   FULLSPEC="$CDIR/$PARAM"
  fi
 fi ##11
 [ "$DEBUG" ] && echo 'FULLSPEC='"$FULLSPEC"

 #busybox applets are not adequate for handling rpm, deb...
 aFILE=`basename "$PARAM"`
 echo "aFILE='$aFILE'"
 if [ "`echo -n "$aFILE" | grep '\.'`" = "" ];then  ##11
  #file has no extension, so treat as ordinary file...
    if [ "$XARCHIVE" = "xarchive" ]; then  ##111
     exec xarchive --add=ask "$PARAM"
    else
     exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "Not an archive file"
    fi
 else  ##11
  taEXT="$aFILE"
  [ "$DEBUG" ] && echo "taEXT='$taEXT'"
  #while [ "`echo -n "$aEXT" | grep '\.'`" != "" ]; do
  while :; do
   taEXT=${taEXT#*.}
   test "$aEXT" = "$taEXT" && break
   aEXT="$taEXT"
   sleep 0.1
  done
 fi  ##11

 #drops here with aEXT=extension.
 case $aEXT in
  rpm|RPM)

   # REM: Simple way
   #mkdir /tmp/temprpm
   #cd /tmp/temprpm

   # REM: use filename for pkg.tar
   fileBASE=`basename "$aFILE" .$aEXT`
   [ "$DEBUG" ] && echo "fileBASE='$fileBASE'"

   mkdir $VERB -p /tmp/"$fileBASE"
   cd /tmp/"$fileBASE"

   $RPM2CPIO "$FULLSPEC" | cpio $VERB -d -i -m
   if [ ! $? -eq 0 ];then
    exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "An error has occurred opening the RPM file.
Suggestion: install unrpm.pup DotPup package, which contains an alternative
RPM extraction program, that PupZip will automatically use if present."
   fi
   sync

   #tar -c -f /tmp/temprpm.tar .
   #rm -rf /tmp/temprpm

   # REM : Above extracted .rpm into directory
   #       Now creating a tar archive of that directory
   tar $VERB -c -f /tmp/"$fileBASE".tar .
   [ "$DEBUG" ] || rm $VERB -rf /tmp/"$fileBASE"

   cd /

   #$XARCHIVE /tmp/temprpm.tar
   #rm -f /tmp/temprpm.tar

   $XARCHIVE /tmp/"$fileBASE".tar
   [ "$DEBUG" ] || rm $VERB -f /tmp/"$fileBASE".tar

   cd "$CDIR"
   exit
   ;;

   *)
__unpack_debian__(){
#v4.00 remove...
  case $* in
  deb|DEB)
   mkdir $VERB -p /tmp/temprpm
   cd /tmp/temprpm
   $DPKGDEB -x "$FULLSPEC"
   if [ ! $? -eq 0 ];then
    exec xmessage -bg "orange red" -center -title "PupZip: ERROR" "An error has occurred opening the DEB file."
   fi
   tar $VERB -c -f /tmp/temprpm.tar .
   [ "$DEBUG" ] || rm $VERB -rf /tmp/temprpm
   cd /
   $XARCHIVE /tmp/temprpm.tar
   [ "$DEBUG" ] || rm $VERB -f /tmp/temprpm.tar
   cd "$CDIR"
   exit
   ;;
   esac
}
   ;;

 esac

 set - "$PARAM"
 echo "NOW ABOUT TO EXEC XARCHIVER '$XARCHIVE' \"$@\""

 #LANG=C;LC_ALL=C
 #export LANG=C
 #export LC_ALL=C
 #locale

 exec $XARCHIVE "$@"

elif [ "$XARCHIVE" = "xarchive" ]; then
  set - "$PARAM"
  echo  "Now about starting xarchive --add=ask \"$@\""
  exec xarchive --add=ask "$@"
else
  exec xmessage -bg 'orange red' -center -title 'PupZip: ERROR' 'Not an archive file ..!?..'

fi

###END###
