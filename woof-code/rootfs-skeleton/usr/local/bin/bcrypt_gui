#!/bin/sh
#Barry Kauler, April 2009. GPL v3 licence.
# Gui for 'bcrypt' file encrypt/decrypt.
# $1 is normally invoked by clicking on a .bfe file in rox, $1 has full path.
# Also supports drag and drop.
# Most of this code was written by coolpup, I have just butchered it a bit.
#w482 dogone: password must be 8 chars, logic fixed.


_TITLE_=bcrypt_gui
_VERSION_=1.0omega
_COMMENT_="GTKdialog GUI to enter a password for .bfe files."

MY_SELF="$0"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
 set +e
 source /etc/rc.d/f4puppy5 && {
 set +n
 source /etc/rc.d/f4puppy5; } || echo "WARNING : Could not source /etc/rc.d/f4puyppy5 ."

ADD_PARAMETER_LIST=
ADD_PARAMETERS=
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
for i in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap
} || echo "Warning : No /etc/rc.d/f4puppy5 installed."


if [ "`which bcrypt`" = "" ];then
 xmessage -center -bg red "The 'bcrypt' package must be installed first."
 exit
fi

#if [ ! $1 ];then
 #run from the menu. this section was originally created by 'coolpup', jan. 2009.
 #modified by BK april 2009.
 SOURCEFILE=""
 if [ $1 ];then
  SOURCEFILE="$1"
  [ ! -f "$SOURCEFILE" ] && exit
 fi

 MSG2="<text><label>\"  \"</label></text>"
 while [ 1 ];do
  if [ "$SOURCEFILE" = "" ];then
   DEFAULT=""
  else
   DEFAULT="<default>${SOURCEFILE}</default>"
  fi
  export BCRYPT="
<window title=\"Bcrypt file encryption\" icon-name=\"gtk-file\">
<vbox>
  <text><label>Welcome, this is a GUI for the 'bcrypt' utility, to encrypt or decrypt a file</label></text>
   <text use-markup=\"true\"><label>\"<b>For file encryption or decryption, drag the file here â†“    </b>\"</label></text>
  <hbox>
  <entry accept=\"directory\">${DEFAULT}<variable>SOURCEFILE</variable></entry>
  </hbox>
  ${MSG2}
  <hbox>
   <text><label>Enter password:</label></text>
   <entry invisible_char=\"x\" visibility=\"false\">
    <variable>PASSWORD1</variable>
   </entry>
  </hbox>
  <hbox>
   <text><label>Reenter password:</label></text>
   <entry invisible_char=\"x\" visibility=\"false\">
    <variable>PASSWORD2</variable>
   </entry>
  </hbox>

  <hbox>
  <button help>
   <action>Xdialog --wrap --screencenter --left --title \"Pcrypt - HELP\" --msgbox \"Bcrypt is a cross-platform file encryption utility which means that encrypted files are portable across all supported operating systems and processors, of which Linux and Win32 are two of them.\n\nIt is used for encrypting files, and can be used for secure deletion, which is better than any common file shredder since the deleted file has been encrypted beforehand. It is available from the main menu and from the right-click context menu by default for most of the basic text, image, and audio file types.\n\nPassphrases must be between 8 and 56 characters and are hashed internally to a 448 bit key (the largest keysize supported by the blowfish algorithm) regardless of the passphrase size. However, all characters supplied are significant since the stronger your passphrase, the more secure your data will be. WARNING: If you forget the encryption key (passphrase) your file can never be opened again in your lifetime and probably never will.\n\nBy default, bcrypt will compress input files before encryption, remove input files after they are processed (assuming they are processed successfully), and overwrite the original input files with random data three times before deleting them in order to prevent data recovery by unauthorized persons.\n\nEncrypted files will be saved with an extension of .bfe. Any files ending in .bfe will be assumed to be encrypted with bcrypt, and so bcrypt will attempt to decrypt them. Any other input files will be encrypted.\n\nBcrypt uses the blowfish encryption algorithm published by Bruce Schneier in 1993.\n\nPcrypt was created by coolpup for Puppy Linux, February 2009 GPL v3 Licence.\nBcrypt_gui based on Pcrypt, by Barry Kauler, April 2009.\n\nBcrypt copyright (c) 2002 Johnny Shelley All rights reserved. Licence supplied.\" 600x0</action>
  </button>
  <button cancel></button>
  <button ok></button>
  </hbox>
</vbox>
</window>"

  RETVALS="`gtkdialog3 --program=BCRYPT --center`"

 PWORD1=`echo "$RETVALS" | grep -m1 'PASSWORD1=.*'`
 PWORD1_=${PWORD1//PASSWORD1=\"/}
 PWORD1_=`echo "$PWORD1_" | sed 's/"$//'`
 _PWORD1_=`echo "$PWORD1_" | _string_to_octal`

 PWORD2=`echo "$RETVALS" | grep -m1 'PASSWORD2=.*'`
 PWORD2_=${PWORD2//PASSWORD2=\"/}
 PWORD2_=`echo "$PWORD2_" | sed 's/"$//'`
 _PWORD2_=`echo "$PWORD2_" | _string_to_octal`

   RETVALS_=`echo "$RETVALS" | grep -v 'PASSWORD[1-2]=.*'`

 echo "$_PWORD1_"
 echo "$_PWORD2_"
 _RETVAL_="PASSWORD1='$_PWORD1_'
 PASSWORD2='$_PWORD2_'
$RETVALS_"

  #eval "$RETVALS"
  eval "$_RETVAL_"

  [ "$EXIT" != "OK" ] && break
  [ "$PASSWORD1" = "" ] && break
  [ "$PASSWORD2" = "" ] && break
  [ "$SOURCEFILE" = "" ] && break
  [ ! -f "$SOURCEFILE" ] && break
  BYTES1=`echo -n -e "$PASSWORD1" | wc -c`
  echo
  if [ $BYTES1 -lt 8 ];then #w482 dogone advised, change from -le.
   MSG2="Password needs to be at least 8 characters!"
   MSG2="<text use-markup=\"true\"><label>\"<b>${MSG2}</b>\"</label></text>"
   continue
  fi
  if [ "$PASSWORD1" != "$PASSWORD2" ];then
   MSG2="The password entries do not match!"
   MSG2="<text use-markup=\"true\"><label>\"<b>${MSG2}</b>\"</label></text>"
   continue
  fi

  DIRNAME="`dirname "$SOURCEFILE"`"
  BASENAME="`basename "$SOURCEFILE"`"
  cd "$DIRNAME"
  if [ "`echo "$BASENAME" | grep '\.bfe$'`" != "" ];then
   echo -e "$PASSWORD1" | bcrypt $BASENAME 2>/tmp/bcrypt_error
  else
  PASSWORD1=`echo "$PASSWORD1" | sed 's!\\\012$!!'`
  PASSWORD2=`echo "$PASSWORD2" | sed 's!\\\012$!!'`
   echo -e "$PASSWORD1
$PASSWORD2"
   echo -e "$PASSWORD1
$PASSWORD2" | bcrypt $BASENAME 2>/tmp/bcrypt_error
  fi
  if [ $? -ne 0 ];then
   MSG2="`cat /tmp/bcrypt_error | tail -n 1`"
   MSG2="<text use-markup=\"true\"><label>\"<b>${MSG2}</b>\"</label></text>"
   continue
  fi

  break
 done

 exit
#fi


###################################################################
#NOT USING BELOW HERE ANY MORE

#this section entered when click on an encrypted file in rox.

DIRNAME="`dirname $1`"
NAMEONLY="`basename $1`"
cd $DIRNAME
STATUS=1

MSG1="To unencrypt this file, enter the password:"
while [ $STATUS -ne 0 ];do
 export MAIN_DIALOG="
<window title=\"Bcrypt decryption\" icon-name=\"gtk-file\">
 <vbox>
  <text>
   <label>${MSG1}</label>
  </text>
  <entry invisible_char=\"x\" visibility=\"false\">
    <variable>PASSWORD1</variable>
  </entry>
  <hbox>
   <button ok></button>
   <button cancel></button>
  </hbox>
 </vbox>
</window>
"

 RETVALS="`gtkdialog3 --program=MAIN_DIALOG`"

 PWORD=`echo "$RETVALS" | grep -m1 'PASSWORD1=.*'`
 PWORD_=${PWORD//PASSWORD1=\"/}
 PWORD_=`echo "$PWORD_" | sed 's/"$//'`
 _PWORD_=`echo "$PWORD_" | _string_to_octal`

   EXIT_=`echo "$RETVALS" | grep -m1 'EXIT=.*'`

 echo "$_PWORD_"
 _RETVAL_="PASSWORD1='$_PWORD_'
$EXIT_"

 #eval "$RETVALS"
 eval "$_RETVAL_"

 [ "$EXIT" != "OK" ] && break
 [ "$PASSWORD1" = "" ] && break

 echo "$PASSWORD1" | bcrypt "$NAMEONLY"
 STATUS=$?
 if [ $STATUS -ne 0 ];then
  MSG1="Wrong password! try again:"
 fi
done

###END###
