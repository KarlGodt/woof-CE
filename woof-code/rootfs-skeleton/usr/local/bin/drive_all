#!/bin/ash
#(c) Copyright 2008 Barry Kauler, puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#
# /sbin/pup_event_frontend_d creates a desktop icon and copy of this script for each drive, ex:
#  for drive sda: cp -a /usr/local/bin/drive_all /root/.pup_event/drive_sda/AppRun
#
# This script is launched by pup_event_frontend_d when the icon is first created.
#  also, this script is launched when user clicks on deskop icon
#  (former is configurable, see /usr/sbin/eventmanager).
#
# Optional passed parameters are :
#  category of drive: card, floppy, optical, usbdrv, drive.
#  pmount_{DRV_CATEGORY}:
#  mountro
#  unmount
#  unmountall
#  fsck
#  eventmanager
#  FS_TYPE
#  MOUNT_OPTS
#
#v4.0.2 jun08: first write of this script, expanding 'pup_eventd' management.
#v403 icon menu, can call with 'unmount', 'eventmanager' and 'pmount_<DRV_CATEGORY>' params.
#v411 added 'quiet' option for vfat, suppresses error msg when file attribs not preserved on copy.
#w002 left click to unmount a partition.
#w476 fix codepage for vfat f.s.


########################################################################
#
# Changes by Karl Reimer Godt
# 01.0 : killzombies function : sed beginning spaces away .
# 02.0 : Show nested mounts in umount xmessage gui .. see also /bin/umount script
# 03.0 : Added usage, trap, version, debug macros .
# 04.0 : Added support for udf .
# 05.0 : Added support for different /sbin/probepart output
#
# /dev/sda2:
# #OLD LABEL="2nd"
# LABEL="MacPup_F_3"
# #OLD UUID="a4f28ea3-eede-49f8-93ca-dbeefe8f72fa"
# UUID="f7956448-f63f-44f4-a725-f15dd21add97"
# TYPE="ext3"
# DISTRO_VERSION=430            #481·#416·#218·#478··#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"  #"ubuntu"·#"puppy"···#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"  #"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4" #"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.34-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# PDEV1='sda2'
# #OLD Linux·puppypc·2.6.34-KRG-i486·#3·SMP·Fri·Dec·31·05:10:23·GMT-8·2010·i686·GNU/Linux
# Linux puppypc 3.4.9-KRG-iCore2-smp-pae-srv1000gz #1 SMP Sun Sep 16 18:34:45 GMT+1 2012 i686 GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# #OLD $LANG=de_DE@euro
# $LANG=de_DE.utf8
# #OLD today=Mi·18.·Jan·03:21:35·GMT+1·2012
# today=Mon Sep 17 20:33:36 GMT+1 2012
#
# TODO 1 : iconhandler for udf
#
#
#
########################################################################

  _TITLE_=puppy_drive_all
_VERSION_=2.0-Fox3-Dell755
_COMMENT_="Default AppRun for the Partition Icons on Desktop."

MY_SELF="$0"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST="eventmanager|unmount|unmountall|[pmount_]DRV_CATEGORY ] [ FSTYPE ]"
ADD_PARAMETERS="pmount_DRV_CATEGORY :
eventmanager : Run small eventmanager GUI
unmount      : Unmount the partition
unmountall   : Unmount all unmountable drives

DRV_CATEGORY : all, drive
FSTYPE : File system type ie. ext4"
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap
}

#w002 extracted as a func...
killzombies(){
   ZOMBIES=`/bin/ps -H -A | grep '<defunct>' | sed 's#^[[:blank:]]*##'|sed -e 's/  /|/g' | grep -v '|||' | cut -f 1 -d ' '`
   for oneZOMBIE in $ZOMBIES
   do
    echo "Killing parent(less?) zombie process $oneZOMBIE"
    /bin/ps --no-header -p $oneZOMBIE && kill $oneZOMBIE
   done
}

unmount_func() {
  #REM: Preparing for unmounting
 #pidof sync || sync  ##2012-06-05
 rox -D "$MNTPT"

 # REM: syncs to disks  ...
 awk "{if (\$3 == \"$oneDRVNAME\") print \$12}" /proc/diskstats ##DEBUG
 _pidof sync || sync
 awk "{if (\$3 == \"$oneDRVNAME\") print \$12}" /proc/diskstats ##DEBUG

 # REM: sleep handling only for USB drives
 #        to better ensure reads/writes to usb are completed ..
 readlink /sys/block/$oneDRVNAME | grep $Q 'usb' && {
 sleep 2 ##2012-06-05

 # REM: linux/Documentation/ABI/testing/procfs-diskstats
 #      12 - I/Os currently in progress
 #       3 - device name
 IOs=`awk "{if (\\$3 == \\"$oneDRVNAME\\") print \\$12}" /proc/diskstats`
 [ "$IOs" ] || IOs=0
 [ "$IOs" = '0' ] || yaf-splash -bg orange2 -text "Waiting for IO ops on '$oneDRVNAME' to complete ..." & yioPID=$!
 while [ "$IOs" != '0' ]; do sleep 2; IOs=`awk "{if (\\$3 == \\"$oneDRVNAME\\") print \\$12}" /proc/diskstats`; done
 [ "$yioPID" ] && { /bin/ps -p $yioPID >>$OUT 2>>$ERR && kill $yioPID; }
 }

 # REM: Now unmounting
 while [ 1 ];do
  # REM: give a splash telling whats on, kill previous splash
  [ "$yPID_" ] && { /bin/ps -p $yPID_ >>$OUT 2>>$ERR && kill $yPID_; }
  yaf-splash -bg purple3 -text "Unmounting '$MNTPT' .." & yPID_=$!
  /bin/umount "$MNTPT" ; umVAL=$?
  #fix zombie process prevents partition unmount, invisible to fuser...
  if [ $umVAL -ne 0 ];then
   killzombies
   [ -n "`busybox mount | grep "$MNTPT"`" ] && {
       [ "$DEBUG" ] || {
           # REM: get rid of multiple xmessages from umount script
           xmPIDS=`ps -o pid,args | grep xmessage | grep umount | grep -v grep | awk '{print $1}'`
           for aPID in $xmPIDS; do /bin/ps -p $aPID >>$OUT 2>>$ERR && kill $aPID; done
       }
       /bin/umount "$MNTPT"; umVAL=$?; }
  fi

  #rare ocassion, partition got unmounted before umount runs above...
  umPATTERN=" ${MNTPT} "
  MOUNT_=`busybox mount | grep "$umPATTERN"`
  [ "${MOUNT_}" ] || umVAL=0

  if [ $umVAL -ne 0 ];then
   # use fuser binary that supports -v option, bb fuser does not
   EXTRAMSG0=`_command fuser -v -m "$MNTPT" 2>&1`

   # detect loop mounts using the default filemnt mount directory syntax
   umPATTERN_2=`echo "$MNTPT" |sed 's|/|\\\\+|g'`
   NESTEDS_=`busybox mount | grep "$umPATTERN_2"`

   if [ "$NESTEDS_" ]; then
   EXTRAMSG0="$EXTRAMSG0
$NESTEDS_ "
   fi

   # another attempt to detect loop mounts ##+++2014-11-10
   # losetup: Ungültige Option -- a
   # BusyBox v1.21.1
   FILE_MOUNTS_=`losetup -a 2>>$ERR || losetup`
   FILE_MOUNTS=`echo "$FILE_MOUNTS_" | grep -w "$MNTPT"`

   if [ "$FILE_MOUNTS" ]; then
   EXTRAMSG0="$EXTRAMSG0
$FILE_MOUNTS"
   fi

   if [ "$EXTRAMSG0" = "" ];then
    xmessage -bg "#ff8080" -title "Puppy drive manager: ERROR" -center "FAILURE! In the case of removable media, the most
common reason is the media is not currently inserted.
If so, please remedy.
"
   else
   # Reset irritating fuser message "kernel", which likely means 'lo' driver
   [ "$EXTRAMSG0" = 'kernel' ] && EXTRAMSG0=''
    xmessage -bg "#ff00ff" -title "KILL, KILL..." -center \
 -buttons KILL:10,EXIT:20 -default "EXIT" "FAILURE! One or more processes (programs) are currently
using /dev/${oneDRVNAME}. Here they are:
PIDS , apps or file mounts :
$EXTRAMSG0

If you press the \"KILL\" button, Puppy will attempt to
kill the offending programs for you. Only do this as a
last resort. Firstly you should try to close the programs
manually, so do not press \"KILL\".
PLEASE PRESS THE \"EXIT\" BUTTON!"
    if [ $? -eq 10 ];then
     fuser -k -m "$MNTPT"
     continue
    fi
   fi

  else  # Unmount succeded
   #[ "$oneDRVNAME" = "sr0" -o "$oneDRVNAME" = "sr1" ] && eject /dev/$oneDRVNAME
   case $oneDRVNAME in
    sr[0-9]*|scd[0-9]*|hd[a-d]) eject /dev/$oneDRVNAME;;
   esac
  fi

  [ "$yPID_" ] && { /bin/ps -p $yPID_ >>$OUT 2>>$ERR && kill $yPID_; }
  break
  #[ "$yPID_" ] && { /bin/ps -p $yPID_ >>$OUT 2>>$ERR && kill $yPID_; }
 done
  #[ "$yPID_" ] && { /bin/ps -p $yPID_ >>$OUT 2>>$ERR && kill $yPID_; }
}

FSTYPE="";
[ "$2" ] && FSTYPE="$2" #see pup_eventd
case "$FSTYPE" in
*not*inserted*|*none*) FSTYPE="";;
esac

MOUNT_OPTS=
[ "$3" ] && MOUNT_OPTS="-o $3" #see pup_eventd
case "$MOUNT_OPS" in
#FILESYSTEM INDEPENDENT MOUNT OPTIONS
*sync*|*time*|*auto*|*context*|*defaults*|*dev*|*exec*|*group*|*version*|*mand*|*suid*|*owner*|*mount*|ro|rw|*user*) :;;
*) unset MOUNT_OPTS;;
esac

#extract drive name from end of the script name...
#note, when click on desktop icon, /root/.pup_event/drive_<oneDRVNAME> is executed,
#however a script may run /root/.pup_event/drive_<oneDRVNAME>/AppRun ...
# REM: TODO : however a script may run ./AppRun ...
oneDRVNAME=`echo "${0}" | sed -e 's%/AppRun%%' | rev | cut -f 1 -d '_' | rev`
_debug "oneDRVNAME='$oneDRVNAME'"

if [ "`echo "${1}" | grep 'pmount_'`" != "" ];then #v403 chose pmount from drive icon menu.
 DRV_CATEGORY=`echo -n "${1}" | cut -f 2 -d '_'`
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount 2>$ERR
  sleep 0.1
 fi
 exec pmount ${DRV_CATEGORY}

elif [ "$1" = "eventmanager" ];then #v403 chosen from drive icon menu.
 #v405 'desktop' param, cutdown tabs for desktop drive icons only...
 exec eventmanager desktop

elif [ "$1" = "unmount" ];then #v403 chose unmount from drive icon menu.
 mPATTERN='^/dev/'"$oneDRVNAME"' '
 #MNTPT=`mount | grep "$mPATTERN" | cut -f 3 -d ' '`
 MNTPT=`/bin/df | tac | grep -m1 "$mPATTERN" | tr -s ' ' | cut -f 6 -d ' '`
 [ "$MNTPT" = "" ] && exit 200 #precaution.
 if [ "$MNTPT" = "/" -o "`echo "$MNTPT" | grep '/initrd/'`" != "" ];then
  xmessage -bg "#ff8080" -title "Puppy drive manager" -center "/dev/${oneDRVNAME} mounted on ${MNTPT}
is in use by Puppy. You cannot unmount it."
  exit 201
 fi
 #yaf-splash -bg purple3 -text "Unmounting '$MNTPT' .." & yPID=$!
 unmount_func
 #[ "$yPID" ] && { /bin/ps -p $yPID >>$OUT 2>>$ERR && kill $yPID; }
 exit $?

#v424 have added right-click menu item to unmount all partitions (see pup_event_frontend_d)...
elif [ "$1" = "unmountall" ];then
 for MNTPT in `mount | tac | grep '^/dev/' | grep -vE '^/dev/loop|^/dev/ram|^/dev/md|^/dev/mtd|^/dev/nbd' | cut -f 3 -d ' ' | grep -v '^/initrd/' | grep -v '^/$'`
 do
  #yaf-splash -bg seagreen -text "Unmounting '$MNTPT' ..." & yPID=$!
  unmount_func
  #kill $yPID >>$OUT 2>>$ERR
  sleep 1
 done
 exit $?
fi

#w002 left-mouse-click to unmount...
#info: params passed to this script:
# left-click: 0=/root/.pup_event/drive_sda3/AppRun 1=drive 2=ext3
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=unmount 2=
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=pmount_drive 2=
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=eventmanager 2=
#in first ex $1 can be drive,floppy,usbdrv,optical,card.

#v424 have removed this dlg box. maybe make it optional in the future...
#if [ $2 ];then
# #if partition already mounted, offer to unmount it...
# mPATTERN='^/dev/'"$oneDRVNAME"' '
# MNTPT=`df | grep "$mPATTERN" | tr -s ' ' | cut -f 6 -d ' '`
# if [ "$MNTPT" != "" ];then
#  if [ "$MNTPT" != "/" -a "`echo "$MNTPT" | grep '/initrd/'`" = "" ];then
#   #it is allowed to be unmounted (not in use by woof)...
#   xmessage -bg "orange" -title "Puppy drive manager" -center -buttons " NO :11,Unmount ${oneDRVNAME}:10,Unmount all:12" "Do you want to unmount ${oneDRVNAME}?
#It is currently mounted on ${MNTPT}"
#   UMNTFLG=$?
#   if [ $UMNTFLG -eq 10 ];then
#    unmount_func
#   exit
#   fi
#   if [ $UMNTFLG -eq 12 ];then
#    for MNTPT in `mount | grep '^/dev/' | grep -vE '^/dev/loop|^/dev/ram' | cut -f 3 -d ' ' | grep -v '^/initrd/' | grep -v '^/$' | tr '\n' ' '`
#   do
#    unmount_func
#   done
#    exit
#   fi
#  fi
# fi
#fi

DRV_CATEGORY="${1}"
   [ "$DRV_CATEGORY" = "" ] && DRV_CATEGORY="drive" #precaution.
[ "$DRV_CATEGORY" = "all" ] && DRV_CATEGORY="drive" #precaution.

[ -f /etc/eventmanager ] && . /etc/eventmanager #written to by /usr/sbin/eventmanager
[ ! $RAMSAVEINTERVAL ] && RAMSAVEINTERVAL=30

#[ "$AUTOTARGET" != "true" -a "$AUTOTARGET" != "false" ]     && AUTOTARGET="true"
case $AUTOTARGET in
TRUE|True|true|Y|YES|Yes|yes|y|1|FALSE|False|false|N|NO|No|no|n|0) :;;
*) AUTOTARGET="true";;
esac
#[ "$HOTPLUGNOISY" != "true" -a "$HOTPLUGNOISY" != "false" ] && HOTPLUGNOISY="false"
case $HOTPLUGNOISY in
TRUE|True|true|Y|YES|Yes|yes|y|1|FALSE|False|false|N|NO|No|no|n|0) :;;
*) HOTPLUGNOISY="false";;
esac
#[ "$ICONDESK" != "true" -a "$ICONDESK" != "false" ]             && ICONDESK="true"
case $ICONDESK in
TRUE|True|true|Y|YES|Yes|yes|y|1|FALSE|False|false|N|NO|No|no|n|0) :;;
*) ICONDESK="true";;
esac
#[ "$ICONPARTITIONS" != "true" -a "$ICONPARTITIONS" != "false" ] && ICONPARTITIONS="true"
case $ICONPARTITIONS in
TRUE|True|true|Y|YES|Yes|yes|y|1|FALSE|False|false|N|NO|No|no|n|0) :;;
*) ICONPARTITIONS="true";;
esac

#if ICONDESK=false (see /etc/eventmanager and /sbin/pup_eventd) then there will only
#be one icon on the desktop, labelled 'drives' and handler script is /usr/local/bin/drive_drives
if [ "$oneDRVNAME" = "drives" ];then
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount 2>$ERR
  sleep 0.1
 fi
 exec pmount $DRV_CATEGORY
fi

#decision... we can bring up a "handler" window, that explains things, good for beginners.
#or jump direct to most appropriate target application, or do nothing.
#for now only have AUTOTARGET=true go direct to most appropriate target app,
# =false always start Pmount.
if [ "$AUTOTARGET" = "false" ];then
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount 2>$ERR
  sleep 0.1
 fi
 exec pmount $DRV_CATEGORY
fi

case $DRV_CATEGORY in  ##+++2014-10-16
*mountro)
         grep $Q -w "^/dev/$oneDRVNAME" /proc/mounts && {

 # REM: linux/Documentation/ABI/testing/procfs-diskstats
 #      12 - I/Os currently in progress
 #       3 - device name
 awk "{if (\$3 == \"$oneDRVNAME\") print \$12}" /proc/diskstats  ##DEBUG
 IOs=`awk "{if (\\$3 == \\"$oneDRVNAME\\") print \\$12}" /proc/diskstats`
 [ "$IOs" ] || IOs=0
 [ "$IOs" = '0' ] || yaf-splash -bg orange2 -text "Waiting for IO ops on '$oneDRVNAME' to complete ..." & yioPID=$!
 while [ "$IOs" != '0' ]; do sleep 2; IOs=`awk "{if (\\$3 == \\"$oneDRVNAME\\") print \\$12}" /proc/diskstats`; done
 [ "$yioPID" ] && { /bin/ps -p $yioPID >>$OUT 2>>$ERR && kill $yioPID; }


   if grep -w "^/dev/$oneDRVNAME" /proc/mounts | awk '{print $4}' | grep $Q -w rw
 then
        /bin/mount -o remount,ro /dev/"$oneDRVNAME" /mnt/"$oneDRVNAME" || false

 elif grep -w "^/dev/$oneDRVNAME" /proc/mounts | awk '{print $4}' | grep $Q -w ro
 then
        /bin/mount -o remount,rw /dev/"$oneDRVNAME" /mnt/"$oneDRVNAME" || false

 else :
   fi
        } || {
         mkdir -p /mnt/"$oneDRVNAME"
        /bin/mount -o         ro /dev/"$oneDRVNAME" /mnt/"$oneDRVNAME" || false
    }
    exit $?
;;
esac

_notice "DRV_CATEGORY='$DRV_CATEGORY' FSTYPE='$FSTYPE'"
case $DRV_CATEGORY in ##+++2014-10-18
*fsck_*)
grep $Q -w "^/dev/$oneDRVNAME" /proc/mounts && _exit 10 "Found '$oneDRVNAME' in /proc/mounts"
 FSTYPE=${DRV_CATEGORY#*_}
 _notice "DRV_CATEGORY='$DRV_CATEGORY' FSTYPE='$FSTYPE'"
 [ "$FSTYPE" ] || _exit 11 "Missing FSTYPE"
echo '#!/bin/sh
fsck -C0 -v /dev/'"$oneDRVNAME"'
RV=$?
read -p "Press enter to close this window" CloseKey
exit $RV
'                >/tmp/fsck-$oneDRVNAME.sh
 chmod $VERB 0744 /tmp/fsck-$oneDRVNAME.sh

 rxvt -title "Fsck $oneDRVNAME" -e /tmp/fsck-$oneDRVNAME.sh
 exit $?
;;
esac

#oh, now have to analyse the media, decide what app to run...
#if [ "$oneDRVNAME" = "sr0" -o "$oneDRVNAME" = "sr1" ];then
if [ "`echo "$oneDRVNAME" |grep -E '^sr[0-9]|^scd[0-9]|^hd[a-d]$'`" ];then  ###+++2012-01-20 2014-10-16
 srPATTERN='^/dev/'"$oneDRVNAME"' '
 if [ "`busybox mount | grep "$srPATTERN"`" = "" ];then
  cddetect $Q $VERB -d/dev/${oneDRVNAME}
  __cddetect_returnvals__(){
    cat >&2 <<EoI
    sets exit value according to detected cd type:
    - audio       1
    - data        2
    - ISO         3
    - dvd         4
    - VideoDVD    5
    - VCD         6
    - SVCD        7
    - UVCD        8
    - mixed      50
EoI
                        }
  RETVAL=$?
  case $RETVAL in
  3) #iso file: normal data cd. iso9660
   true
   ;;
  8) # udf with .wma wav files [VCD: , ] 8 ##+++2012-01-20
     # FSTYPE='udf'
     FSTYPE=`guess_fstype /dev/$oneDRVNAME`
     ln -snf /dev/${oneDRVNAME} /dev/dvd
     exec defaultmediaplayer dvd://
   ;;
  1) #audio
   ln -snf /dev/${oneDRVNAME} /dev/cdrom
   exec defaultmediaplayer cdda://
   ;;
  5) #video dvd
   ln -snf /dev/${oneDRVNAME} /dev/dvd
   exec defaultmediaplayer dvd://
   ;;
  0) #failed to detect type.
   #cddetect does not work properly for dvd's, try something else...
   if [ "`dvd+rw-mediainfo /dev/sr0 | grep 'Mounted Media: .* DVD-ROM'`" != "" ];then
    ln -snf /dev/${oneDRVNAME} /dev/dvd
    exec defaultmediaplayer dvd://
   fi
   ;;
  esac
 fi
 #[ ! "$FSTYPE" ] && FSTYPE="iso9660"
 [ "$FSTYPE" ] || FSTYPE=`guess_fstype /dev/$oneDRVNAME`
 [ "$FSTYPE" ] || FSTYPE=unknown
 [ "$FSTYPE" = unknown ] || FSTYPE=`blkid /dev/$oneDRVNAME | grep -m1 -w "^/dev/$oneDRVNAME" | grep -oE ' TYPE="[^"]+"' | cut -f2 -d'"'`
 [ "$FSTYPE" ] || FSTYPE=unknown
 [ "$FSTYPE" = unknown ] && unset FSTYPE
fi

#if dropped down here, it is likely to be a data partition...
#if it is a mountable partition then mount and open with rox. If already mntd then open in rox...
#if [ "$ICONPARTITIONS" = "true" ];then
if [ "$FSTYPE" != "" ];then
 dPATTERN='^/dev/'"$oneDRVNAME"' '
 if [ "`/bin/df | grep "$dPATTERN"`" = "" ];then
  #not mounted...
  yaf-splash -bg purple2 -text "Mounting '$oneDRVNAME' ..." & yPID=$!
  mkdir -p /mnt/$oneDRVNAME
  case $FSTYPE in
   NTFS|Ntfs|ntfs)
    #'mount' is a script that takes care of mounting ntfs...
    /bin/mount $MOUNT_OPTS -t ntfs /dev/$oneDRVNAME /mnt/$oneDRVNAME
    RETVAL1=$?
    ;;
   fat*|FAT*|Fat*|vfat)
    #w476 modify codepage and iocharset (note: this code also in /usr/sbin/pmount)...
    #note, could also set iocharset=iso8859-2 (default: codepage=437, iocharset=iso8859-1)
    NLS_PARAM=''
    if [ -f /etc/keymap ];then #set in /etc/rc.d/rc.country
     KEYMAP=`cat /etc/keymap | cut -f 1 -d '.'`
     case $KEYMAP in
      de|be|br|dk|es|fi|fr|it|no|se|pt)
       NLS_PARAM=',codepage=850'
      ;;
      slovene|croat|hu101|hu|cz-lat2|pl|ro_win)
       NLS_PARAM=',codepage=852,iocharset=iso8859-2'
      ;;
     esac
    fi
    /bin/mount $MOUNT_OPTS -t vfat -o shortname=mixed,quiet${NLS_PARAM} /dev/$oneDRVNAME /mnt/$oneDRVNAME #v411
    RETVAL1=$?
    ;;
   *)
    # REM: file-system type not needed usually,
    #       but may be useful if changed, ie from ext2 to ext3 ..
    FSTYPE=`echo "$FSTYPE" | tr '[[:upper:]]' '[[:lower:]]'`
    # REM: If all fs-types are compiled into kernel could check for
    #      fs support
    #       else unset FSTYPE and try without FSTYPE
    #       mount-FULL is quite capable to detect fs automatically
    #        and load fs-driver if not inside kernel (already loaded)
    grep $Q -w "$FSTYPE" /proc/filesystems || unset FSTYPE
    [ "$FSTYPE" ] && {
    /bin/mount $MOUNT_OPTS -t $FSTYPE /dev/$oneDRVNAME /mnt/$oneDRVNAME || false
    } || {
    /bin/mount $MOUNT_OPTS            /dev/$oneDRVNAME /mnt/$oneDRVNAME || false
    }
    RETVAL1=$?
    ;;
  esac
  [ $RETVAL1 -eq 0 ] && : #exec rox -x /mnt/$oneDRVNAME -d /mnt/$oneDRVNAME
  WARN_MSG=`dmesg | tail -n5 | grep -w "($oneDRVNAME)" | grep $Q -E 'emerg|alert|crit|error|warning'`
  [ "$WARN_MSG" ] && xmessage -title "DRIVE_ALL MOUNT WARNING" "$WARN_MSG" &
  /bin/ps -p $yPID >>$OUT && kill $yPID
  exit $RETVAL1
 else
  #mounted...
  MNTPT=`/bin/df | grep "$dPATTERN" | tr -s ' ' | cut -f 6 -d ' '`
  if [ -h /mnt/home ];then
   [ "`readlink /mnt/home`" = "$MNTPT" ] && MNTPT="/mnt/home"
  fi
  #exec rox -x /mnt/$oneDRVNAME -d /mnt/$oneDRVNAME
  exec rox -x "$MNTPT" -d "$MNTPT"
  : #now done by /bin/mount.sh
 fi
fi


#NOTE: if pmount already running, don't really want to kill then restart,
# just want to bring the window up if it's minimised ...how?

if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
 killall gtkdialog_pmount 2>$ERR
 sleep 0.1
fi

if test  "$DRV_CATEGORY" = optical; then
xmessage -title "$MY_SELF" "Please insert a CD/DVD first."
elif test "$DRV_CATEGORY" = floppy; then
xmessage -title "$MY_SELF" "Please insert a floppy first."
else
xmessage -title "PMOUNT LAST FALLBACK" -buttons "Pmount:100,Quit:101" "NOTICE : Encountered unknown situation..
Will now run pmount '$DRV_CATEGORY' as last resort."
[ "$?" = 100 ] && exec pmount ${DRV_CATEGORY}
fi

###END###
