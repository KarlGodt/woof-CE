#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_drive_all"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/local/bin/drive_all"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap
INFO=1;DEBUG=1
}
# End new header
#
#(c) Copyright 2008 Barry Kauler, puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
# /sbin/pup_event_frontend_d creates a desktop icon and copy of this script for each drive,
#ex: for drive sda: cp -a /usr/local/bin/drive_all /root/.pup_event/drive_sda/AppRun
# This script is launched by pup_event_frontend_d when the icon is first created.
# Also, this script is launched when user clicks on deskop icon (former is configurable,
# see /usr/sbin/eventmanager.
# Passed param is category of drive: card, floppy, optical, usbdrv, drive .
#v4.0.2 jun08: first write of this script, expanding 'pup_eventd' management.
#v403 icon menu, can call with 'unmount', 'eventmanager' and 'pmount_<DRV_CATEGORY>' params.
#v411 added 'quiet' option for vfat, suppresses error msg when file attribs not preserved on copy.
#w002 left click to unmount a partition.
#w476 fix codepage for vfat f.s.


#************
#KRG

OUT=/dev/null;ERR=$OUT
[ "$DEBUG" ] && { OUT=/dev/stdout;ERR=/dev/stderr; }
[ "$DEBUG" = 2 ] && set -x

Version=1.1-KRG-MacPup_O2

usage(){
MSG="
$0 [ help | version ]
$0 [ pmount_ | eventmanager | unmount | unmountall ]
   [ DRIVECATEGORY ]
   [ option1 [ FILE_SYSTEM_TYPE ]]
"
echo "$MSG
$2"
exit $1
}
[ "`echo "$1" | grep -wEi "help|\-h"`" ] && usage 0
[ "`echo "$1" | grep -wEi "version|\-V"`" ] && { echo "$0: $Version";exit 0; }

trap "exit" HUP INT QUIT ABRT KILL TERM

#KRG
#************


#w002 extracted as a func...
unmount_func(){
 rox -D "$MNTPT"

 ##+++2013-04-23 sync crap
 if test "`mount |grep -m1 "$MNTPT" | grep '(rw'`" != "" ; then
 pidof sync || { sync; sleep 2; }
 fi

 while [ 1 ];do

  umount "$MNTPT" ; umVAL=$?
  #fix zombie process prevents partition unmount, invisible to fuser...
  if [ $umVAL -ne 0 ];then
   #ZOMBIES=`ps -H -A | grep '<defunct>' | sed -e 's/  /|/g' | grep -v '|||' | cut -f 1 -d ' ' | tr '\n' ' '`
   ZOMBIES=`ps -H -A | grep '<defunct>' | grep -v 'grep' | sed -e 's/  /|/g' | grep -v '|||' | cut -f 1 -d ' ' | tr '\n' ' '`
   for oneZOMBIE in $ZOMBIES
   do
    echo "Killing parentless zombie process $oneZOMBIE"
    kill $oneZOMBIE
   done
   umount "$MNTPT" ; umVAL=$?
  fi

  #rare ocassion, partition got unmounted before umount runs above...
  umPATTERN="${MNTPT} "
  [ "`busybox mount | grep "$umPATTERN"`" = "" ] && umVAL=0
  if [ $umVAL -ne 0 ];then
   #find loop mounts on that partition ..
   local LOOPS_ALL mntHEX device_ device dev_hex_inode_ dev_hex_ dev_hex inode path_to_file_ path_to_file

   LOOPS_ALL=`/sbin/losetup -a` || LOOPS_ALL=`/sbin/losetup`
   mntHEX=`stat -c %D "$MNTPT"`

   while read device_ dev_hex_inode_ path_to_file_
   do
   case "$device_" in "") continue;; esac
    device=${device_%:*}

    dev_hex_=${dev_hex_inode_%:*}
     dev_hex=${dev_hex_//[\[\]]/}
     #case $dev_hex in [$mntHEX]) :;; *) continue;; esac
     [ "$dev_hex" = "$mntHEX" ] || continue

    inode=${dev_hex_inode_##*:}

    path_to_file=${path_to_file_%)*}
    path_to_file=${path_to_file#*(}

                                                _debug "$device $dev_hex $inode $path_to_file"
                 # stat -c %D" "%n /mnt/* | awk "{if  (\$1 == \"$dev_hex\") print}"  #DEBUG
        LOOP_MSG_=`stat -c %D" "%n /mnt/* | awk "{if (\\$1 == \"$dev_hex\") print}"`
_info "$LOOP_MSG_ $device $path_to_file"
     EXTRA_LOOP_MSG0="$EXTRA_LOOP_MSG0
${LOOP_MSG_} $device $path_to_file"

   done<<EoI
`echo "$LOOPS_ALL"`
EoI

   EXTRA_FUSER_MSG0=`fuser -v -m "$MNTPT" 2>&1`

EXTRA_MSG0="$EXTRA_LOOP_MSG0
$EXTRA_FUSER_MSG0"

   EXTRA_MSG0=`echo "$EXTRA_MSG0" | sed '/^$/d'`

   if [ "$EXTRA_MSG0" = "" ];then
    xmessage -bg "#ff8080" -title "Puppy drive manager: ERROR" -center "FAILURE! In the case of removable media, the most
common reason is the media is not currently inserted.
If so, please remedy."
   else
    xmessage -bg "#ff00ff" -title "KILL, KILL..." -center -buttons KILL:10,EXIT:20 "FAILURE! One or more processes (programs) are currently
using /dev/${oneDRVNAME}. Here they are:
$EXTRA_MSG0

If you press the \"KILL\" button, Puppy will attempt to
kill the offending programs for you. Only do this as a
last resort. Firstly you should try to close the programs
manually, so do not press \"KILL\".
PLEASE PRESS THE \"EXIT\" BUTTON!"
    if [ $? -eq 10 ];then
     fuser -k -m "$MNTPT"
     continue
    fi
   fi
  else
   [ "$oneDRVNAME" = "sr0" -o "$oneDRVNAME" = "sr1" ] && eject /dev/$oneDRVNAME
  fi
  break
 done
}

FSTYPE=""
[ "$2" ] && FSTYPE="$2" #see pup_eventd

#extract drive name from end of the script name...
#note, when click on desktop icon, /root/.pup_event/drive_<oneDRVNAME> is executed,
#however a script may run /root/.pup_event/drive_<oneDRVNAME>/AppRun ...
_debug "\$0:$0 -- \$*: '$*' \$#=$#"
oneDRVNAME=`echo "${0}" | sed -e 's%/AppRun%%' | rev | cut -f 1 -d '_' | rev`
_info "oneDRVNAME='$oneDRVNAME'"

if [ "`echo "${1}" | grep 'pmount_'`" != "" ];then #v403 chose pmount from drive icon menu.
 DRV_CATEGORY=`echo -n "${1}" | cut -f 2 -d '_'`
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount 2>$ERR
  sleep 0.1
 fi
 exec pmount ${DRV_CATEGORY}
fi

if [ "$1" = "eventmanager" ];then #v403 chosen from drive icon menu.
 #v405 'desktop' param, cutdown tabs for desktop drive icons only...
 exec eventmanager desktop
fi

if [ "$1" = "unmount" ];then #v403 chose unmount from drive icon menu.
 mPATTERN='^/dev/'"$oneDRVNAME"' '
 #MNTPT=`mount | grep "$mPATTERN" | cut -f 3 -d ' '`
 MNTPT=`df | grep "$mPATTERN" | tr -s ' ' | cut -f 6 -d ' '`
 [ "$MNTPT" = "" ] && exit 1 #precaution.
 if [ "$MNTPT" = "/" -o "`echo "$MNTPT" | grep '/initrd/'`" != "" ];then
  xmessage -bg "#ff8080" -title "Puppy drive manager" -center "/dev/${oneDRVNAME} mounted on ${MNTPT}
is in use by Puppy. You cannot unmount it."
  exit
 fi
 unmount_func
 exit
fi

#v424 have added right-click menu item to unmount all partitions (see pup_event_frontend_d)...
if [ "$1" = "unmountall" ];then
 #for MNTPT in `mount | grep '^[]\"/dev/' | grep -vE '^[]\"/dev/loop|^[]\"/dev/ram' | cut -f 4 -d '"' | grep -v '^[]\"/initrd/' | grep -v '^[]\"/$' | tr ' ' '\`'`
 for MNTPT in `awk '{if (match($1, "/dev/.*[0-9]$") || $1 == "/dev/[fmsh].*[0-9]") print $1}' /proc/mounts`
 do
 #MNTPT=`echo "$MNTPT" | tr '\`' ' '`
  _info "umountall: Attempt to unmount MNTPT='$MNTPT'"
  unmount_func
 done
 exit $?
fi

#w002 left-mouse-click to unmount...
#info: params passed to this script:
# left-click: 0=/root/.pup_event/drive_sda3/AppRun 1=drive 2=ext3
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=unmount 2=
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=pmount_drive 2=
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=eventmanager 2=
#in first ex $1 can be drive,floppy,usbdrv,optical,card.

#v424 have removed this dlg box. maybe make it optional in the future...
#if [ $2 ];then
# #if partition already mounted, offer to unmount it...
# mPATTERN='^/dev/'"$oneDRVNAME"' '
# MNTPT=`df | grep "$mPATTERN" | tr -s ' ' | cut -f 6 -d ' '`
# if [ "$MNTPT" != "" ];then
#  if [ "$MNTPT" != "/" -a "`echo "$MNTPT" | grep '/initrd/'`" = "" ];then
#   #it is allowed to be unmounted (not in use by woof)...
#   xmessage -bg "orange" -title "Puppy drive manager" -center -buttons " NO :11,Unmount ${oneDRVNAME}:10,Unmount all:12" "Do you want to unmount ${oneDRVNAME}?
#It is currently mounted on ${MNTPT}"
#   UMNTFLG=$?
#   if [ $UMNTFLG -eq 10 ];then
#    unmount_func
#   exit
#   fi
#   if [ $UMNTFLG -eq 12 ];then
#    for MNTPT in `mount | grep '^/dev/' | grep -vE '^/dev/loop|^/dev/ram' | cut -f 3 -d ' ' | grep -v '^/initrd/' | grep -v '^/$' | tr '\n' ' '`
#   do
#    unmount_func
#   done
#    exit
#   fi
#  fi
# fi
#fi

DRV_CATEGORY="${1}"
[ "$DRV_CATEGORY" = "" ]    && DRV_CATEGORY="drive" #precaution.
[ "$DRV_CATEGORY" = "all" ] && DRV_CATEGORY="drive" #precaution.

[ -f /etc/eventmanager ] && . /etc/eventmanager #written by /usr/sbin/eventmanager
[ "$ICONDESK" != "true" -a "$ICONDESK" != "false" ] && ICONDESK="true"
[ ! $RAMSAVEINTERVAL ] && RAMSAVEINTERVAL=30
[ "$HOTPLUGNOISY" != "true" -a "$HOTPLUGNOISY" != "false" ] && HOTPLUGNOISY="false"
[ "$AUTOTARGET" != "true" -a "$AUTOTARGET" != "false" ] && AUTOTARGET="true"
[ "$ICONPARTITIONS" != "true" -a "$ICONPARTITIONS" != "false" ] && ICONPARTITIONS="true"

#if ICONDESK=false (see /etc/eventmanager and /sbin/pup_eventd) then there will only
#be one icon on the desktop, labelled 'drives' and handler script is /usr/local/bin/drive_drives
if [ "$oneDRVNAME" = "drives" ];then
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount 2>$ERR
  sleep 0.1
 fi
 exec pmount $DRV_CATEGORY
fi

#decision... we can bring up a "handler" window, that explains things, good for beginners.
#or jump direct to most appropriate target application, or do nothing.
#for now only have AUTOTARGET=true go direct to most appropriate target app,
# =false always start Pmount.
if [ "$AUTOTARGET" = "false" ];then
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount 2>$ERR
  sleep 0.1
 fi
 exec pmount $DRV_CATEGORY
fi

case $DRV_CATEGORY in  ##+++2014-10-16
*mountro)
         grep -w "^/dev/$oneDRVNAME" /proc/mounts && {
         mkdir -p /mnt/"$oneDRVNAME"
        /bin/mount $VERB -o remount,ro /dev/"$oneDRVNAME" /mnt/"$oneDRVNAME" || false
        } || {
         mkdir -p /mnt/"$oneDRVNAME"
        /bin/mount $VERB -o         ro /dev/"$oneDRVNAME" /mnt/"$oneDRVNAME" || false
    }
    exit $?
;;
esac

_notice "DRV_CATEGORY='$DRV_CATEGORY' FSTYPE='$FSTYPE'"
case $DRV_CATEGORY in ##+++2014-10-18
*fsck_*)
grep $Q -w "^/dev/$oneDRVNAME" /proc/mounts && _exit 10 "Found '$oneDRVNAME' in /proc/mounts"
 FSTYPE=${DRV_CATEGORY#*_}
 _notice "DRV_CATEGORY='$DRV_CATEGORY' FSTYPE='$FSTYPE'"
 [ "$FSTYPE" ] || _exit 11 "Missing FSTYPE"
echo '#!/bin/sh
fsck -C0 -v /dev/'"$oneDRVNAME"'
RV=$?
if [ "$RV" = 0 ]; then
echo "Removing fsckme flag file ..."
/bin/mount /dev/'"$oneDRVNAME"'
[ $? = 0 ] && find /mnt/'"$oneDRVNAME"' -maxdepth 3 -iname "*fsckme*" -delete
fi
read -p "Press enter to close this window" CloseKey
exit $RV
'                >/tmp/fsck-$oneDRVNAME.sh
 chmod $VERB 0744 /tmp/fsck-$oneDRVNAME.sh

 rxvt -title "Fsck $oneDRVNAME" -e /tmp/fsck-$oneDRVNAME.sh
 exit $?
;;
esac

#oh, now have to analyse the media, decide what app to run...
if [ "$oneDRVNAME" = "sr0" -o "$oneDRVNAME" = "sr1" ];then
 srPATTERN='^/dev/'"$oneDRVNAME"' '
 if [ "`busybox mount | grep "$srPATTERN"`" = "" ];then
  cddetect -q -d/dev/${oneDRVNAME}
  RETVAL=$?
  case $RETVAL in
  3) #iso file: normal data cd.
   true
   ;;
  1) #audio
   ln -snf /dev/${oneDRVNAME} /dev/cdrom
   exec defaultmediaplayer cdda://
   ;;
  5) #video dvd
   ln -snf /dev/${oneDRVNAME} /dev/dvd
   exec defaultmediaplayer dvd://
   ;;
  0) #failed to detect type.
   #cddetect does not work properly for dvd's, try something else...
   if [ "`dvd+rw-mediainfo /dev/sr0 | grep 'Mounted Media: .* DVD-ROM'`" != "" ];then
    ln -snf /dev/${oneDRVNAME} /dev/dvd
    exec defaultmediaplayer dvd://
   fi
   ;;
  esac
 fi
 FSTYPE=`guess_fstype /dev/${oneDRVNAME}`
 [ "$FSTYPE" = 'unknown' ] && FSTYPE="iso9660"
 [ "$FSTYPE" ] || FSTYPE="iso9660"
fi

#if dropped down here, it is likely to be a data partition...
#if it is a mountable partition then mount and open with rox. If already mntd then open in rox...
#if [ "$ICONPARTITIONS" = "true" ];then
if [ "$FSTYPE" != "" ];then
 dPATTERN='^/dev/'"$oneDRVNAME"' '
 if [ "`df | grep "$dPATTERN"`" = "" ];then
  #not mounted...
  mkdir -p /mnt/$oneDRVNAME
  case $FSTYPE in
   NTFS|Ntfs|ntfs)
    #'mount' is a script that takes care of mounting ntfs...
    mount -t ntfs /dev/$oneDRVNAME /mnt/$oneDRVNAME
    RETVAL1=$?
    ;;
   FAT|Fat|FAT*|Fat*|fat*|vfat)
    #w476 modify codepage and iocharset (note: this code also in /usr/sbin/pmount)...
    #note, could also set iocharset=iso8859-2 (default: codepage=437, iocharset=iso8859-1)
    NLS_PARAM=''
    if [ -f /etc/keymap ];then #set in /etc/rc.d/rc.country
     KEYMAP=`cat /etc/keymap | cut -f 1 -d '.'`
     case $KEYMAP in
      de|be|br|dk|es|fi|fr|it|no|se|pt)
       NLS_PARAM=',codepage=850'
      ;;
      slovene|croat|hu101|hu|cz-lat2|pl|ro_win)
       NLS_PARAM=',codepage=852,iocharset=iso8859-2'
      ;;
     esac
    fi
    mount -t vfat -o shortname=mixed,quiet${NLS_PARAM} /dev/$oneDRVNAME /mnt/$oneDRVNAME #v411
    RETVAL1=$?
    ;;
   *)
    FSTYPE=`echo "$FSTYPE" | tr '[[:upper:]]' '[[:lower:]]'`
    MOUNT_OPT=rw                   ##+++2013-04-23
    [ "$FSTYPE" = iso9660 -o "$FSTYPE" = udf ] && MOUNT_OPT=ro
    mount -t $FSTYPE -o $MOUNT_OPT /dev/$oneDRVNAME /mnt/$oneDRVNAME
    RETVAL1=$?
    ;;
  esac
  [ $RETVAL1 -eq 0 ] && exec rox -x /mnt/$oneDRVNAME #-d /mnt/$oneDRVNAME
 else
  #mounted...
  MNTPT=`df | grep "$dPATTERN" | tr -s ' ' | cut -f6- -d ' '`
  if [ -h /mnt/home ];then
   [ "`readlink /mnt/home`" = "$MNTPT" ] && MNTPT="/mnt/home"
  fi
  #exec rox -x /mnt/$oneDRVNAME -d /mnt/$oneDRVNAME
  exec rox -x "$MNTPT" -d "$MNTPT"
 fi
fi

pmount_last_resort(){
#NOTE: if pmount already running, don't really want to kill then restart,
# just want to bring the window up if it's minimised ...how?
if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
 killall gtkdialog_pmount 2>$ERR
 sleep 0.1
fi
exec pmount ${DRV_CATEGORY}
}

_debug "END of script."
###END###
