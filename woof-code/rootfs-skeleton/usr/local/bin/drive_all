#!/bin/ash
#(c) Copyright 2008 Barry Kauler, puppylinux.com
#2008 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#/sbin/pup_event_frontend_d creates a desktop icon and copy of this script for each drive, ex:
# for drive sda: cp -a /usr/local/bin/drive_all /root/.pup_event/drive_sda/AppRun
#this script is launched by pup_event_frontend_d when the icon is first created. also,
#this script is launched when user clicks on deskop icon (former is configurable,
# see /usr/sbin/eventmanager.
#passed param is category of drive: card, floppy, optical, usbdrv, drive.
#v4.0.2 jun08: first write of this script, expanding 'pup_eventd' management.
#v403 icon menu, can call with 'unmount', 'eventmanager' and 'pmount_<DRV_CATEGORY>' params.
#v411 added 'quiet' option for vfat, suppresses error msg when file attribs not preserved on copy.
#w002 left click to unmount a partition.
#w476 fix codepage for vfat f.s.

########################################################################
#
# Changes by Karl Reimer Godt
# 01.0 : killzombies func :sed beginning spaces away
#
#
# /dev/sda2:
# LABEL="2nd"
# UUID="a4f28ea3-eede-49f8-93ca-dbeefe8f72fa"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.34-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# PDEV1='sda2'
# Linux·puppypc·2.6.34-KRG-i486·#3·SMP·Fri·Dec·31·05:10:23·GMT-8·2010·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Mi·18.·Jan·03:21:35·GMT+1·2012
#
# TODO 1 : iconhandler for udf
#
#
#
########################################################################

. /etc/rc.d/f4puppy5

#w002 extracted as a func...
unmount_func() {
 rox -D "$MNTPT"
 _sync
 while :;do
  /bin/umount $VERB "$MNTPT" ; umVAL=$?
  #fix zombie process prevents partition unmount, invisible to fuser...
  if [ "$umVAL" -ne 0 ];then
   ZOMBIES="`/bin/ps  -H -A | grep '<defunct>' | sed 's#^[[:blank:]]*##g'|sed -e 's/  /|/g' | grep -v '|||' | awk '{print $1}'`"
   for ONEZOMBIE in $ZOMBIES
   do
    echo "Killing parentless zombie process $ONEZOMBIE"
    kill $ONEZOMBIE
   done

  DEBUG=1
  # REM: Try to unmount nested loop mounts

  _does_not_work_(){ #since /proc/mount gets rewritten,
  for i in 1 2       #would skip every second line
  do
  while read d m rest
  do
  m=`echo -e "$m"`
  _debug "$m"
  case $m in $MNTPT)
   while :; do
    read l n r
    n=`echo -e "$n"`
    _debug "$l:$n"
    case $l in /dev/loop*) /bin/umount -l "$n";;
    *) break 2;; esac
   sleep 1
   done
  ;; *) continue;; esac
  done</proc/mounts
  done
  }

  NR=`grep -n -m1 " $MNTPT " /proc/mounts | awk -F':' '{print $1}'`
  _debug "Found $MNTPT at line '$NR' in /proc/mounts"

  if test "$NR"; then
   while read d m rest
   do
   m=`echo -e "$m"`
   case $d in /dev/loop*) /bin/umount -l "$m";; *) break;; esac
   sleep 1
   done <<EoI
`tail +$((NR+1)) /proc/mounts`
EoI
  fi

  DEBUG=

   [ -n "`cut -f2 -d' ' /proc/mounts | grep "^$MNTPT$"`" ] && /bin/umount $VERB "$MNTPT" ; umVAL=$?
  fi

  #rare ocassion, partition got unmounted before umount runs above...
  umPATTERN="^${MNTPT}$"
  [ "`cut -f2 /d' ' /proc/mounts | grep "$umPATTERN"`" ] || umVAL=0
  if [ "$umVAL" -ne 0 ];then
   EXTRAMSG0="`fuser -v -m "$MNTPT"`"
   if [ "$EXTRAMSG0" = "" ];then
    xmessage -bg "#ff8080" -title "Puppy drive manager: ERROR" -center "FAILURE! In the case of removable media, the most
common reason is the media is not currently inserted.
If so, please remedy."
   else
    xmessage -bg "#ff00ff" -title "KILL, KILL..." -center -buttons KILL:10,EXIT:20 "FAILURE! One or more processes (programs) are currently
using /dev/${ONEDRVNAME}. Here they are:
$EXTRAMSG0

If you press the \"KILL\" button, Puppy will attempt to
kill the offending programs for you. Only do this as a
last resort. Firstly you should try to close the programs
manually, so do not press \"KILL\".
PLEASE PRESS THE \"EXIT\" BUTTON!"
    if [ $? -eq 10 ];then
     fuser -k -m "$MNTPT"
     continue
    fi
   fi
  else
   case "$ONEDRVNAME" in sr*|scd*) eject /dev/$ONEDRVNAME;; esac
  fi
  break
 done
}

FSTYPE=""
[ "$2" ] && FSTYPE="$2" #see pup_eventd

#extract drive name from end of the script name...
#note, when click on desktop icon, /root/.pup_event/drive_<ONEDRVNAME> is executed,
#however a script may run /root/.pup_event/drive_<ONEDRVNAME>/AppRun ...
ONEDRVNAME="`echo "${0}" | sed -e 's%/AppRun%%' | rev | cut -f 1 -d '_' | rev`"

if [ "`echo "${1}" | grep 'pmount_'`" != "" ];then #v403 chose pmount from drive icon menu.
 DRV_CATEGORY="`echo -n "${1}" | cut -f 2 -d '_'`"
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount
  sleep 0.1
 fi
 exec pmount ${DRV_CATEGORY}

elif [ "$1" = "eventmanager" ];then #v403 chosen from drive icon menu.
 #v405 'desktop' param, cutdown tabs for desktop drive icons only...
 exec eventmanager desktop

elif [ "$1" = "unmount" ];then #v403 chose unmount from drive icon menu.
 mPATTERN='^/dev/'"$ONEDRVNAME"' '
 #MNTPT="`mount | grep "$mPATTERN" | cut -f 3 -d ' '`"
 MNTPT="`/bin/df | grep "$mPATTERN" | tr -s ' ' | cut -f 6 -d ' '`"
 [ "$MNTPT" ] || exit #precaution.
 case "$MNTPT" in "/"|/initrd/*)
  xmessage -bg "#ff8080" -title "Puppy drive manager" -center "/dev/${ONEDRVNAME} mounted on ${MNTPT}
is in use by Puppy. You cannot unmount it."
  exit
 ;;
 esac
 unmount_func
 exit

#v424 have added right-click menu item to unmount all partitions (see pup_event_frontend_d)...
elif [ "$1" = "unmountall" ];then
 for MNTPT in `grep '^/dev/' /proc/mounts | grep -vE '^/dev/loop|^/dev/ram|^/dev/zram' | cut -f 2 -d ' ' | grep -vE '^/initrd/|^/$'`
 do
  MNTPT=`echo -e "$MNTPT"`
  unmount_func
 done
 exit

fi

_old_right_click_menu(){
#w002 left-mouse-click to unmount...
#info: params passed to this script:
# left-click: 0=/root/.pup_event/drive_sda3/AppRun 1=drive 2=ext3
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=unmount 2=
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=pmount_drive 2=
# right-menu: 0=/root/.pup_event/drive_sda3/AppRun 1=eventmanager 2=
#in first ex $1 can be drive,floppy,usbdrv,optical,card.

#v424 have removed this dlg box. maybe make it optional in the future...
if [ "$2" ];then
 #if partition already mounted, offer to unmount it...
 mPATTERN='^/dev/'"$ONEDRVNAME"' '
 MNTPT="`df | grep "$mPATTERN" | tr -s ' ' | cut -f 6 -d ' '`"
 if [ "$MNTPT" != "" ];then
  if [ "$MNTPT" != "/" -a "`echo "$MNTPT" | grep '/initrd/'`" = "" ];then
   #it is allowed to be unmounted (not in use by woof)...
   xmessage -bg "orange" -title "Puppy drive manager" -center -buttons " NO :11,Unmount ${ONEDRVNAME}:10,Unmount all:12" "Do you want to unmount ${ONEDRVNAME}?
It is currently mounted on ${MNTPT}"
   UMNTFLG=$?
   if [ "$UMNTFLG" -eq 10 ];then
    unmount_func
   exit
   fi
   if [ "$UMNTFLG" -eq 12 ];then
    for MNTPT in `mount | grep '^/dev/' | grep -vE '^/dev/loop|^/dev/ram' | cut -f 3 -d ' ' | grep -v '^/initrd/' | grep -v '^/$'`
   do
    unmount_func
   done
    exit
   fi
  fi
 fi
fi
}

DRV_CATEGORY="${1}"
[ "$DRV_CATEGORY" = "" ]    && DRV_CATEGORY="drive" #precaution.
[ "$DRV_CATEGORY" = "all" ] && DRV_CATEGORY="drive" #precaution.

[ -f /etc/eventmanager ] && . /etc/eventmanager #written by /usr/sbin/eventmanager
[ "$ICONDESK" != "true" -a "$ICONDESK" != "false" ]             && ICONDESK="true"
[ "$HOTPLUGNOISY" != "true" -a "$HOTPLUGNOISY" != "false" ]     && HOTPLUGNOISY="false"
[ "$AUTOTARGET" != "true" -a "$AUTOTARGET" != "false" ]         && AUTOTARGET="true"
[ "$ICONPARTITIONS" != "true" -a "$ICONPARTITIONS" != "false" ] && ICONPARTITIONS="true"

#if ICONDESK=false (see /etc/eventmanager and /sbin/pup_eventd) then there will only
#be one icon on the desktop, labelled 'drives' and handler script is /usr/local/bin/drive_drives
if [ "$ONEDRVNAME" = "drives" ];then
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount
  sleep 0.1
 fi
 exec pmount $DRV_CATEGORY

#decision... we can bring up a "handler" window, that explains things, good for beginners.
#or jump direct to most appropriate target application, or do nothing.
#for now only have AUTOTARGET=true go direct to most appropriate target app,
# =false always start Pmount.
elif [ "$AUTOTARGET" = "false" ];then
 if [ "`pidof gtkdialog_pmount`" != "" ];then #if pmount running, kill it.
  killall gtkdialog_pmount
  sleep 0.1
 fi
 exec pmount $DRV_CATEGORY
fi

#oh, now have to analyse the media, decide what app to run...
#if [ "$ONEDRVNAME" = "sr0" -o "$ONEDRVNAME" = "sr1" ];then
if [ "`echo "$ONEDRVNAME" |grep '^sr[0-9]'`" ];then  ###+++2012-01-20
 srPATTERN='^/dev/'"$ONEDRVNAME"' '
 if [ "`busybox mount | grep "$srPATTERN"`" = "" ];then
  cddetect $Q -d/dev/${ONEDRVNAME}
  RETVAL=$?
  case $RETVAL in
  3) #iso file: normal data cd. iso9660
   true
   ;;
  8) # udf with .wma wav files [VCD: , ] 8 ##+++2012-01-20
   FSTYPE='udf';;
  1) #audio
   ln -sf /dev/${ONEDRVNAME} /dev/cdrom
   exec defaultmediaplayer cdda://
   ;;
  5) #video dvd
   ln -sf /dev/${ONEDRVNAME} /dev/dvd
   exec defaultmediaplayer dvd://
   ;;
  0) #failed to detect type.
   #cddetect does not work properly for dvd's, try something else...
   if [ "`dvd+rw-mediainfo /dev/sr0 | grep 'Mounted Media: .* DVD-ROM'`" != "" ];then
    ln -sf /dev/${ONEDRVNAME} /dev/dvd
    exec defaultmediaplayer dvd://
   fi
   ;;
  esac
 fi
 [ "$FSTYPE" ] || FSTYPE=`guess_fstype /dev/$ONEDRVNAME`
 case $FSTYPE in unknown|'') FSTYPE="iso9660";; esac
fi

#if dropped down here, it is likely to be a data partition...
#if it is a mountable partition then mount and open with rox. If already mntd then open in rox...
#if [ "$ICONPARTITIONS" = "true" ];then
if [ "$FSTYPE" != "" ];then
 dPATTERN='^/dev/'"$ONEDRVNAME"' '
 if [ "`/bin/df | grep "$dPATTERN"`" = "" ];then
  #not mounted...
  mkdir $VERB -p /mnt/$ONEDRVNAME
  case $FSTYPE in
   ntfs)
    #'mount' is a script that takes care of mounting ntfs...
    /bin/mount $VERB -t ntfs /dev/$ONEDRVNAME /mnt/$ONEDRVNAME
    RETVAL1=$?
    ;;
   vfat)
    #w476 modify codepage and iocharset (note: this code also in /usr/sbin/pmount)...
    #note, could also set iocharset=iso8859-2 (default: codepage=437, iocharset=iso8859-1)
    NLS_PARAM=''
    if [ -f /etc/keymap ];then #set in /etc/rc.d/rc.country
     KEYMAP="`cut -f1 -d'.' /etc/keymap`"
     case $KEYMAP in
      de|be|br|dk|es|fi|fr|it|no|se|pt)
       NLS_PARAM=',codepage=850'
      ;;
      slovene|croat|hu101|hu|cz-lat2|pl|ro_win)
       NLS_PARAM=',codepage=852,iocharset=iso8859-2'
      ;;
     esac
    fi
    /bin/mount $VERB -t vfat -o shortname=mixed,quiet${NLS_PARAM} /dev/$ONEDRVNAME /mnt/$ONEDRVNAME #v411
    RETVAL1=$?
    ;;
   *)
    /bin/mount $VERB -t $FSTYPE /dev/$ONEDRVNAME /mnt/$ONEDRVNAME
    RETVAL1=$?
    ;;
  esac
  [ "$RETVAL1" -eq 0 ] && exec rox -x "/mnt/$ONEDRVNAME" -d "/mnt/$ONEDRVNAME"
 else
  #mounted...
  MNTPT="`/bin/df | grep "$dPATTERN" | tr -s ' ' | cut -f 6 -d ' '`"
  if [ -L /mnt/home ];then
   [ "`readlink /mnt/home`" = "$MNTPT" ] && MNTPT="/mnt/home"
  fi
  #exec rox -x /mnt/$ONEDRVNAME -d /mnt/$ONEDRVNAME
  exec rox -x "$MNTPT" -d "$MNTPT"
 fi
fi


#NOTE: if pmount already running, don't really want to kill then restart,
# just want to bring the window up if it's minimised ...how?

if [ "`pidof gtkdialog_pmount`" ];then #if pmount running, kill it.
 killall gtkdialog_pmount
 sleep 0.1
fi

exec pmount ${DRV_CATEGORY}

###END###
