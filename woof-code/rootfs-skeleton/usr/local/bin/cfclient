#!/bin/bash

##
#
# Script wrapper for the various X terminals to manage
# several different clients installed on the OS .
# Written and thought by Karl Reimer Godt .
# Feel free to use and or modify it .
# Error reports and improvements welcome .
#
##

## in case script accidentally clicked
[ "`tty`" = 'not a tty' ] && { echo "Want controlling terminal.";exit $?; }

## various variables
### server
crossfire_server_dir=/usr/games/crossfire
crossfire_server_config_dir="$crossfire_server_dir"/etc/crossfire
crossfire_server_tmp_dir="$crossfire_server_dir"/tmp
mkdir -p "$crossfire_server_tmp_dir"

### client
client_bin_dir=/usr/local/bin
client_share_dir=/usr/local/share/crossfire-client
### me
#me_prog=`readlink -e "$0"`
me_prog=`realpath "$0"`
### user home dir
user_dir="$HOME/.crossfire"

## trap for emergency exit
#trap "echo caught signal $?;exit $?" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #0
trap "echo ' Caught exit signal';exit" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
#trap -p

## generate possible database in my case from 1.9.1 upwards; adjust accordingly to your namings
C=0
for version in 1.9.1 1.10.0 1.11.0 "1.11.0-sdl-dmeta2" 1.12.0 "1.12.svn" 1.50.0 "1.50.0-sdl-dmeta2" 1.60.0 "1.60.0-sdl_mixer-dmeta2" 1.70.0 "1.70.0-sdl_mixer-dmeta2" ;
do

short_version="${version//[[:punct:]]/}"

## to use the DEBUG: call script as 'willy's puter$> DEBUG=ON ./this_script'
[ "$DEBUG" ] && echo "short_version='$short_version'"

[[ "$short_version" =~ [[:alpha:]] ]] && {
##bash arrays seems to like [123] and [abc123] but not [123abc]
short_version_nr="${short_version//[[:alpha:]]/}"
short_version_chars="${short_version//[[:digit:]]/}"
short_version="${short_version_chars}${short_version_nr}"
[ "$DEBUG" ] && echo "short_version='$short_version'"
}

[ "$DEBUG" ] && echo "short_version='$short_version'"

## on some bashs [[ "$short_version" =~ '191' ]] works with the single quotes , on some not
if [[ "$short_version" =~ 191 ]] || [[ "$short_version" =~ 110 ]] || [[ "$short_version" =~ 111 ]] ; then
#client_[$short_version]=cfclient-${version}
#client_x_[$short_version]=xcfclient-${version}
#client_x11_[$short_version]=cfclient-x11-${version}
#client_gtk_[$short_version]=gcfclient-${version}
#client_gtk1_[$short_version]=gcfclient1-${version}
#client_gtk1v2_[$short_version]=gcfclient1v2-${version}
#client_gtk2_[$short_version]=gcfclient2-${version}

client_[$C]=cfclient-${version}
client_x_[$C]=xcfclient-${version}
client_x11_[$C]=cfclient-x11-${version}
client_gtk_[$C]=gcfclient-${version}
client_gtk1_[$C]=gcfclient1-${version}
client_gtk1v2_[$C]=gcfclient1v2-${version}
client_gtk2_[$C]=gcfclient2-${version}

else

#client_[$short_version]=crossfire-client-${version}
#client_x_[$short_version]=crossfire-client-x-${version}
#client_x11_[$short_version]=crossfire-client-x11-${version}
#client_gtk_[$short_version]=crossfire-client-gtk-${version}
#client_gtk1_[$short_version]=crossfire-client-gtk1-${version}
#client_gtk1v2_[$short_version]=crossfire-client-gtk1v2-${version}
#client_gtk2_[$short_version]=crossfire-client-gtk2-${version}

client_[$C]=crossfire-client-${version}
client_x_[$C]=crossfire-client-x-${version}
client_x11_[$C]=crossfire-client-x11-${version}
client_gtk_[$C]=crossfire-client-gtk-${version}
client_gtk1_[$C]=crossfire-client-gtk1-${version}
client_gtk1v2_[$C]=crossfire-client-gtk1v2-${version}
client_gtk2_[$C]=crossfire-client-gtk2-${version}

fi
C=$((C+1))
done ## database

[ "$DEBUG" ] && echo "${client_[@]}

${client_x_[@]}

${client_x11_[@]}

${client_gtk_[@]}

${client_gtk1_[@]}

${client_gtk1v2_[@]}

${client_gtk2_[@]}
"

## check for available executable clients on system
for client in ${client_[@]} ${client_x_[@]} ${client_x11_[@]} ${client_gtk_[@]} ${client_gtk1_[@]} ${client_gtk1v2_[@]} ${client_gtk2_[@]} ; do
[ "`which $client`" ] || { echo "$client not in path"; continue; }
CLIENTS_ALL="${CLIENTS_ALL}
`echo $client`"
done ## check

[ "$DEBUG" ] && echo "CLIENTS_ALL='$CLIENTS_ALL'"

## sort the usable database
CLIENTS_ALL=`echo "$CLIENTS_ALL" |sort -d`

[ "$DEBUG" ] && echo "CLIENTS_ALL='$CLIENTS_ALL'"

## introduce myself
echo "
$0 : '`readlink -e $0`' ::
Wrapper to choose the installed crossfire client
if several are defined in this script .
"

## sanity check
[ "$CLIENTS_ALL" ] || { echo "No crossfire-client successfully determined. Please adjust this script.";exit 1; }

## select the client to run
while [ 1 ] ; do
select client_selected in $CLIENTS_ALL ; do echo "
$client_selected chosen"; break ; done ;
[ "$client_selected" ] && break ;
sleep 1  ## to prevent loop consuming the whole cpu
done

#assigned_client=`echo "$CLIENTS" | grep -w ^$client_choose | cut -f2 -d=`
assigned_client="$client_selected"
## another sanity check
which "$assigned_client" || { echo "which '$client_selected' = '`which $assigned_client`' not in PATH ?" >&2;exit $?; }

function_get_version_nr(){
while read line ; do
[ "$line" ] || continue
[[ "$line" =~ [[:alpha:]] ]] && continue
VERSION="$line";break;
done<<EOI
$(echo "$assigned_client" | tr '-' '\n')
EOI

[ "$DEBUG" ] && echo "VERSION='$VERSION'"

## link glade directory ...
if [ "$VERSION" ] ; then
 if [ -d "$client_share_dir"/glade-gtk2-${VERSION} ] ; then
  if [ -d "$client_share_dir"/glade-gtk2 ] ; then
   mv "$client_share_dir"/glade-gtk2 "$client_share_dir"/glade-gtk2-backup
  fi
  ln -sf glade-gtk2-${VERSION} "$client_share_dir"/glade-gtk2
 fi
fi
}

function_get_version_nr  ## also links glade directory for newer gtk2 clients

function_link_sound_server(){

VERSION_LONG=`echo "$assigned_client" | grep -o "${VERSION}.*"`

if [ -f "$client_bin_dir"/cfsndserv ] ; then
 mv "$client_bin_dir"/cfsndserv "$client_bin_dir"/cfsndserv-backup
fi

if [ -f "$client_bin_dir"/cfsndserv_alsa9 ] ; then
 mv "$client_bin_dir"/cfsndserv_alsa9 "$client_bin_dir"/cfsndserv_alsa9-backup
fi

ln -sf "$client_bin_dir/cfsndserv-${VERSION_LONG}" "$client_bin_dir"/cfsndserv
ln -sf "$client_bin_dir/cfsndserv_alsa9-${VERSION_LONG}" "$client_bin_dir"/cfsndserv_alsa9

}

function_link_sound_server

function_restore_configuration_files(){

for onefile in defaults gdefaults gdefaults2 gwinpos gwinpos2 keys "servers.cache" winpos sndconfig msgs ; do
[ -L "$user_dir"/$onefile ] && rm -f "$user_dir"/$onefile
[ -f "$user_dir"/$onefile -a ! -L "$user_dir"/$onefile ] && { rm -f "$user_dir"/${onefile}-backup ; mv "$user_dir"/$onefile "$user_dir"/${onefile}-backup ; }
[ -f "$user_dir"/${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$user_dir"/$onefile
done

for onefile in `ls -1 "$user_dir"/*.pos 2>/dev/null |tr '\n' ' '` ; do
[ -L "$onefile" ] && rm -f "$onefile"
#[ -f "$onefile" -a ! -L "$onefile" ] && { rm -f "$user_dir"/${onefile}-backup ; mv "$onefile" "$user_dir"/${onefile}-backup ; }
[ -f "$onefile" -a ! -L "$onefile" ] && { rm -f "${onefile}"-backup ; mv "$onefile" "${onefile}"-backup ; }
#[ -f ${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$user_dir"/$onefile
[ -f ${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$onefile"
done

for onefile in `ls -1 "$user_dir"/*.pos-* 2>/dev/null |sed 's|\(.*\.pos\)-.*|\1|' |sort -u |tr '\n' ' '` ; do
[ -L "$onefile" ] && rm -f "$onefile"
#[ -f "$onefile" -a ! -L "$onefile" ] && { rm -f "$user_dir"/${onefile}-backup ; mv "$onefile" "$user_dir"/${onefile}-backup ; }
[ -f "$onefile" -a ! -L "$onefile" ] && { rm -f "${onefile}"-backup ; mv "$onefile" "${onefile}"-backup ; }
#[ -f ${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$user_dir"/$onefile
[ -f ${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$onefile"
done

for onefile in `ls -1 "$user_dir"/*.keys 2>/dev/null |tr '\n' ' '` ; do
[ -L "$onefile" ] && rm -f "$onefile"
#[ -f "$onefile" -a ! -L "$onefile" ] && { rm -f "$user_dir"/${onefile}-backup ; mv "$onefile" "$user_dir"/${onefile}-backup ; }
[ -f "$onefile" -a ! -L "$onefile" ] && { rm -f "${onefile}"-backup ; mv "$onefile" "${onefile}"-backup ; }
#[ -f ${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$user_dir"/$onefile
[ -f ${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$onefile"
done

for onefile in `ls -1 "$user_dir"/*.keys-* 2>/dev/null |sed 's|\(.*\.keys\)-.*|\1|' |sort -u |tr '\n' ' '` ; do
[ "$DEBUG" ] && echo "onefile='$onefile'"
[ -L "$onefile" ] && rm -f "$onefile"
#[ -f "$onefile" -a ! -L "$onefile" ] && { rm -f "$user_dir"/${onefile}-backup ; mv "$onefile" "$user_dir"/${onefile}-backup ; }
[ -f "$onefile" -a ! -L "$onefile" ] && { rm -f "${onefile}"-backup ; mv "$onefile" "${onefile}"-backup ; }
#[ -f ${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$user_dir"/$onefile
[ -f ${onefile}-${assigned_client} ] && ln -sf ${onefile}-${assigned_client} "$onefile"
done

for onedir in crossfire-images image-cache sounds ; do
[ -L "$user_dir"/$onedir ] && rm -f "$user_dir"/$onedir
[ -d "$user_dir"/$onedir -a ! -L "$user_dir"/$onedir ] && { rm -rf "$user_dir"/${onedir}-backup ; mv "$user_dir"/$onedir "$user_dir"/${onedir}-backup ; }
[ -d "$user_dir"/${onedir}-${assigned_client} ] && { rm -f "$user_dir"/$onedir ; ln -sf ${onedir}-${assigned_client} "$user_dir"/$onedir ; }
done

[ -f "$user_dir"/crossfire-images-${assigned_client}/bmaps.client ] && cp -au "$user_dir"/crossfire-images-${assigned_client}/bmaps.client "$client_share_dir"/
[ -f "$user_dir"/image-cache-${assigned_client}/bmaps.client ] && cp -au "$user_dir"/image-cache-${assigned_client}/bmaps.client "$client_share_dir"/

}

function_restore_configuration_files

## start server if available and not already running ...
function_start_server(){
    pidof crossfire && return 0
    pidof crossfire-server && return 0

ps | grep crossfire | grep server || {

crossfire_server="$crossfire_server_dir"/bin/crossfire
[ -f "$crossfire_server" ] ||  crossfire_server="$crossfire_server_dir"/bin/crossfire-server

[ -x "$crossfire_server" ] && {

echo starting crossfire server ... >&2

[ -f "$crossfire_server_tmp_dir"/crossfire_server.log ] && mv "$crossfire_server_tmp_dir"/crossfire_server.log "$crossfire_server_tmp_dir"/crossfire_server.log.0

ME_IP_ADDRESS=`ifconfig |grep 'inet addr:' |tail -n1 |awk '{print $2}' |cut -f2 -d:`
echo "ME_IP_ADDRESS='$ME_IP_ADDRESS'"

test -e "$crossfire_server_config_dir"/settings || touch "$crossfire_server_config_dir"/settings
sed -i "s,^metaserver_host .*,metaserver_host ${ME_IP_ADDRESS}," "$crossfire_server_config_dir"/settings

test -e "$crossfire_server_config_dir"/metaserver2 || touch "$crossfire_server_config_dir"/metaserver2
sed -i "s,^localhostname .*,localhostname ${ME_IP_ADDRESS}," "$crossfire_server_config_dir"/metaserver2

DATE="`date`"
test -e "$crossfire_server_config_dir"/news || touch "$crossfire_server_config_dir"/news
sed -i "s!%Reality Date!%Reality Date $DATE!" "$crossfire_server_config_dir"/news

## normal server line server >= 1.10.0
"$crossfire_server" +d -detach -log "$crossfire_server_tmp_dir"/crossfire_server.log
## my version 1.9.1 of the server needs this line
#"$crossfire_server" +d -tmpdir "$crossfire_server_tmp_dir" -log "$crossfire_server_tmp_dir"/crossfire_server.log &


sleep 5
sync
/bin/ps-FULL --no-heading -C crossfire && echo -e "\n Running." || echo -e "\n Not running."
echo ... done ...
  }

 }

}

function_start_server

## ugly note but I think necessary
echo "
[ NOTICE ]
Some clients tend to occupy one CPU core
when no local server is running
or no internet access available at startup
if not configured with --disable-metaserver2 .
Others startup ok but will behave similar if disconnected.
The X11 and GTK frontends are unusable then.
This is a *BUG* .
Please kill the program manually if neccessary:
Example kill macro for the terminal:
(ps | grep client ; kill -9 \`pidof $assigned_client\`)
where [cf]client has to be adjusted to the naming like
gcfclient or crossfire-client-gtk2 .
" >&2

## Export the PATH to be used for scripts so no need to type /WHOLE/PATH/my_script.ext
dn_assigned_client=`dirname $(which "$assigned_client")`

OLD_PATH="$PATH"
## Restricts PATH . If needed, add export PATH='/bin:/sbin' to your scripts please.
export PATH="${dn_assigned_client}:${dn_assigned_client}/../games/crossfire/bin:${dn_assigned_client}/../games/crossfire/scripts:${dn_assigned_client}/../games/crossfire/crossfire-client/scripts:${dn_assigned_client}/../share/crossfire-client/scripts:${crossfire_server_dir}/crossfire-client/scripts:$user_dir/scripts"
[ "$DEBUG" ] && echo "PATH='$PATH'"
for p in `echo $PATH |tr ':' ' '`; do mkdir -p "$p" ; done

## now finally run the choosen client ..
echo "Starting '$assigned_client' and hoping for the best ..."

# Use custom gtkrc file
test -f $HOME/.crossfire/gtkrc-2.0 && { echo using $HOME/.crossfire/gtkrc-2.0; export GTK2_RC_FILES=$HOME/.crossfire/gtkrc-2.0; }

"$assigned_client" $@ 2>>$HOME/crossfire_client."$assigned_client".err.log 1>>$HOME/crossfire_client."$assigned_client".log
STATUS=$((STATUS+$?))

export PATH=$OLD_PATH

function_rename_configuration_files(){

for onefile in defaults gdefaults gdefaults2 gwinpos gwinpos2 keys "servers.cache" winpos sndconfig msgs ; do
if [ -f "$user_dir/${onefile}" -a ! -L "$user_dir/${onefile}" ] ; then
[ -f "$user_dir/${onefile}-${assigned_client}" ] || mv "$user_dir/${onefile}" "$user_dir/${onefile}-${assigned_client}"
fi
done

for onefile in `ls -1 "$user_dir"/*.pos 2>/dev/null |tr '\n' ' '` ; do
[ -L "${onefile}" ] && continue
[ -f "${onefile}-${assigned_client}" -a ! -L "${onefile}-${assigned_client}" ] || mv "${onefile}" "${onefile}-${assigned_client}"
done

for onefile in `ls -1 "$user_dir"/*.keys 2>/dev/null |tr '\n' ' '` ; do
[ -L "${onefile}" ] && continue
[ -f "${onefile}-${assigned_client}" -a ! -L "${onefile}-${assigned_client}" ] || mv "${onefile}" "${onefile}-${assigned_client}"
done

for onedir in "crossfire-images" "image-cache" sounds ; do
if [ -d "$user_dir/$onedir" -a ! -L "$user_dir/$onedir" ] ; then
mv "$user_dir/$onedir" "$user_dir/${onedir}-${assigned_client}"
fi
done

}

function_rename_configuration_files
STATUS=$((STATUS+$?))

echo "Finishing '$me_prog' with exit status '$STATUS'"
exit $STATUS

