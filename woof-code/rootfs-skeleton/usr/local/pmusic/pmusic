#!/bin/sh
#Pmusic
#Copyright 2008,2009,2010
#Sigmund Berglund - Val√•moen, Norway.

#------------------------------
#This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation version 2.

#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. <http://www.gnu.org/licenses/>.
#------------------------------

VERSION="1.3.0" #REMEMBER to set version in $APPDIR/pmusicrc and version upgrade
export AUDIO_FORMATS="\.aiff|\.aac|\.ape|\.asf|\.au|\.flac|\.gsm|\.m4a|\.mp3|\.mp4|\.ogg|\.ra|\.raw|\.shn|\.voc|\.wav|\.wma"
export WORKDIR=$HOME/.pmusic/tmp
#first run
if [ ! -d $WORKDIR ]; then
	mkdir -p $WORKDIR/generated_playlists #makes all dirs in path
	echo end > $WORKDIR/end_while
	echo false > $WORKDIR/SHUFFLE
	echo -e "  $HOME/|    Home directory\n\
  $HOME/my-documents/Podcasts|    My Podcasts\n\
  /usr/share/audio|    Reference sounds" > $WORKDIR/bookmarks
  [ ! -d $HOME/my-documents/Podcasts ] && mkdir -p $HOME/my-documents/Podcasts
fi
#---
export APPDIR=`dirname $0`
[ $APPDIR = '.' ] && export APPDIR=`pwd`
echo $APPDIR > $WORKDIR/APPDIR

export CONFIG=$HOME/.pmusic/pmusicrc
if type gtkdialog3 > /dev/null 2>&1; then export GTKDIALOG=gtkdialog3; else export GTKDIALOG=gtkdialog; fi #puppy specific
#version upgrade
[ ! -f $CONFIG ] && cp -f $APPDIR/pmusicrc $HOME/.pmusic/pmusicrc #no config --> copy 
TMP=`grep VERSION $CONFIG 2> /dev/null`
[ `echo $TMP | sed -e s/^.*\=//g | tr -d "."` -lt 130 > /dev/null 2>&1 ] && \
	cp -f $APPDIR/pmusicrc $HOME/.pmusic/pmusicrc #Older than 1.3.0
#---
. $CONFIG

#set language
TMP="`ls -1 $APPDIR/locals/ | grep ${LANG%.*}`"
. $APPDIR/locals/en_US:english #always run to fill gaps in translation
#fallback to macrolanguage if available (ISO 639-1 two letter code: en, es, fr, etc.)
[ -z $TMP ] && TMP="`ls -1 $APPDIR/locals/ | grep ${LANG%_*}:`" && echo $TMP
[ "$TMP" != "en_US:english" ] && . $APPDIR/locals/$TMP 2> /dev/null 

#parameters
while [ $# != 0 ]; do
	I=1
	while [ $I -lt `echo $# | wc -c` ]; do
		if [ -d "$1" ]; then #add content of directory
			if [ "$RECURSIVE" ]; then MAXDEPTH=100; else MAXDEPTH=1; fi
			find "$1" -maxdepth $MAXDEPTH -name "*" -type f -printf "%p\n" > $WORKDIR/pmusic.dir
			grep -iE "$AUDIO_FORMATS" $WORKDIR/pmusic.dir > $WORKDIR/tmp
			mv $WORKDIR/tmp $WORKDIR/pmusic.dir
			export INDEX="  $WORKDIR/pmusic.dir"
			if [ ! "$ADD_FILE" ]; then $APPDIR/func_store_playlist; $APPDIR/func -new; fi #save last playlist 
			. $APPDIR/func -add
			ADD_FILE=true #in case user wants to add more than 1 song
			sleep 0.2 #be sure the splash screen is gone
		elif [ "`echo $1 | grep "/"`" ]; then #try to open ALL files
			export LOC506="$1" #LOC variables is not yet defined
			if [ ! "$ADD_FILE" ]; then $APPDIR/func_store_playlist; $APPDIR/func -new; fi #save last playlist
			. $APPDIR/func -add
			ADD_FILE=true #in case user wants to add more than 1 song
		fi
		case $1 in
			-a)	ADD_FILE=true; export ADD_TO_TAIL=true
				INDEX="  $2"
				echo "$2" > $WORKDIR/PLAYLIST
				. $APPDIR/func -add
				shift
				;;
			-b) NOGUI=true;;
			-c) echo "$LOC145..." > $WORKDIR/splashtext #LOC variables is not yet defined
				$APPDIR/box_splash &
				$APPDIR/func -play_cd
				;;
			-p) OVERRIDE_PRESET="$2"; shift;;
			-r) RECURSIVE=true;;
			-s) SIGNAL="$2"
				case $SIGNAL in
					next) /usr/local/pmusic/func_player -next;;
					prev) /usr/local/pmusic/func_player -back;;
					pause) /usr/local/pmusic/func_player -play;;
					quit) $APPDIR/func -quit;;
					stop) /usr/local/pmusic/func_player -stop;;
					volup) /usr/local/pmusic/func_mixer -upMono;;
					voldown) /usr/local/pmusic/func_mixer -downMono;;
					mute) /usr/local/pmusic/func_mixer -mute;;
					*) echo 'Pmusic error: Uknown signal';;
				esac
				exit 0;;
			-t) 
				MIN=`echo $2 | cut -d':' -f1`
				SEC=`echo $2 | cut -d':' -f2`
				echo "$[($MIN*60)+$SEC]" > $WORKDIR/SS
				echo true > $WORKDIR/TIMESTAMP
				shift
				;;
			-v|--version) echo Pmusic $VERSION; exit;;
			-h|--help)
echo 'Usage: pmusic [OPTION(S)] [FILE(S) / DIR(S) / URL(S)]

Options
  -a          Add [FILE(S) / DIR(S) / URL(S)] to playlist instead of playing it
  -b          use Pmusic as backend - no GUI
  -c          Loads CD-audio disc into playlist and starts playing
  -h          Show this help message
  -p PRESET   Use This GUI-preset instead of the one defined in rc
              Available GUIs are stored in '$APPDIR'/presets/
  -r          Add/open directories recursively
  -s SIGNAL   Send signal to a running instance of Pmusic
                next    - Play next song in playlist
                mute    - Turn volume On/Off 
                pause   - Pause/Play audio
                prev    - Play previous song in playlist
                quit    - Quit all pmusic processes
                volup   - Increase volume level with 10%
                voldown - Decrease volume level with 10%
  -t xx:xx    Set the start time offset
              This does not work with the -a switch
  -v          Show Pmusic version
  
Supported formats (with working alsa and ffmpeg):'"
$AUDIO_FORMATS"; exit;;
		esac
		shift
		I=$(($I+1))
	done
done
#check if gui exist (open/add from terminal) --> add and quit.
if [ ! -f $WORKDIR/end_while ]; then
	if [ "$ADD_FILE" ]; then
		echo > $WORKDIR/refresh_playlist
		exit 0
	fi
fi

#set browser
if which defaulthtmlviewer > /dev/null 2>&1; then export BROWSER=defaulthtmlviewer
	elif which dillo; then export BROWSER=dillo
	elif which opera; then export BROWSER=opera
	elif which seamonkey; then export BROWSER=seamonkey
	elif which firefox; then export BROWSER=firefox
	elif which konqueror; then export BROWSER=konqueror
fi

#define variables for gui
REPEAT=false; [ -f $WORKDIR/REPEAT ] && REPEAT=($(<"$WORKDIR/REPEAT"))
SHUFFLE=false; [ -f $WORKDIR/SHUFFLE ] && SHUFFLE=($(<"$WORKDIR/SHUFFLE"))
#clear progressbar loop if starting new instance without close previous
echo end > $WORKDIR/end_while
echo end > $WORKDIR/end_while_add
#defaults
grep -c '^' $WORKDIR/playlist > $WORKDIR/PLAYLIST_NR #count lines
echo -n > $WORKDIR/lyrics
echo 0 > $WORKDIR/load_id3
echo $HOME"/Pmusic.m3u" > $WORKDIR/last_added_playlist
rm $WORKDIR/refresh_playlist 2> /dev/null
#---
[ "$OVERRIDE_PRESET" ] && export PRESET=$OVERRIDE_PRESET
[ ! -f "$APPDIR/presets/$PRESET" ] && export PRESET=Classic

#kill older instances of pmusic, and if gtkdialog didn't quit properly
kill -9 `cat $WORKDIR/MY_PID 2> /dev/null` 2> /dev/null
echo $$ > $WORKDIR/MY_PID #store for next instance (new preset or new startup without quit)
ps > $WORKDIR/tmp
for I in `grep -i pmusic $WORKDIR/tmp | grep -E "gtkdialog|index|func_progressbar" | awk '{print $1}'`; do kill -9 $I 2> /dev/null; done
#clean up text in progressbar
! grep aplay $WORKDIR/tmp > /dev/null && echo "pmusic_stop" > $WORKDIR/ffmpeg_output

#splash
if [ "`echo $PRESET | grep -Ev "Navigator|Classic"`" ] && [ "$NOGUI" != "true" ]; then
	echo > $WORKDIR/splashtext
	. $APPDIR/box_splash &
fi
##################################################################
#gui
. $APPDIR/presets/$PRESET
[ $TOOLTIPS = false ] && GUI="`echo "$GUI" | sed 's%tooltip-text%tooltipXXXtext%g'`" #deactivate tooltips
export Pmusic="`echo "$GUI" | sed 's/##.*//'`" #I use double hash (##) for comments. --> as #FF0000

#GTK-theme
if [ -f "$APPDIR/themes/$THEME/gtkrc" ]; then
	if [ "`grep -F 'ONLY_THIS_GTKTHEME=true' $APPDIR/themes/$THEME/themerc 2> /dev/null`" ]; then 
		export GTK2_RC_FILES="$APPDIR/themes/$THEME/gtkrc"
	else
		if [ -f $HOME/.gtkrc-2.0 ]; then
			export GTK2_RC_FILES="$HOME/.gtkrc-2.0" #get active theme
		fi
		[ -f /etc/gtk-2.0/gtkrc ] && GTK_OLD_PUPPY=':/etc/gtk-2.0/gtkrc' #/etc/gtk-2.0/gtkrc is for < Puppy4
		export GTK2_RC_FILES="$GTK2_RC_FILES$GTK_OLD_PUPPY:$APPDIR/themes/$THEME/gtkrc"
	fi
fi
#---
#echo 100 > $WORKDIR/splash #end splash
#run gui
#echo "$Pmusic" > /root/gtk

[ $TRAYAPP = true ] && $APPDIR/func -tray_app &
if [ "$NOGUI" != "true" ]; then
	$GTKDIALOG -p Pmusic -G +"$X"+"$Y"
	$APPDIR/func -quit	
fi

