#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_func"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/local/pmusic/func"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
#Pmusic
#Copyright 2008, 2009, 2010
#Sigmund Berglund
IFS=$'\n'

#reset gtk-theme
if [ -f "$APPDIR/themes/$THEME/gtkrc" ]; then
	if [ "`grep -F 'THEME_ALL_DIALOGS=false' $APPDIR/themes/$THEME/themerc 2> /dev/null`" ]; then 
		if [ -f /etc/gtk-2.0/gtkrc ]; then
			export GTK2_RC_FILES=':/etc/gtk-2.0/gtkrc' #/etc/gtk-2.0/gtkrc is for < Puppy4
		else
			export GTK2_RC_FILES="`grep -m 1 gtkrc $HOME/.gtkrc-2.0 | cut -d'\"' -f2 2> /dev/null`" #get active theme
		fi
	fi
fi
#---

case "$1" in
-play_cd)
	$APPDIR/func_store_playlist
	$APPDIR/func -new
	$APPDIR/func -read_cd
	export AUTOPLAY=true 
	$APPDIR/func -add_all
	;;
-read_cd)
	echo -e "\c" > $WORKDIR/browser
	echo -e "\c" > $WORKDIR/pcd-tracks
	#read internal cd-text info
	cdda2wav dev=$CD_DEVICE -info-only -no-infofile > $WORKDIR/pcd-cddb 2>&1 &
	while [ ! "$BREAK" ]; do
		#is disc an audio-CD
		if [ "`grep 'no audio' $WORKDIR/pcd-cddb`" ] || [ "`grep 'Read TOC size failed' $WORKDIR/pcd-cddb`" ] || [ "`grep 'load cdrom' $WORKDIR/pcd-cddb`" ]; then
			ERROR="$LOC521"
			echo -e "\c" > $WORKDIR/pcd-cddb
			BREAK=true
		fi
		#don't run complete cdda2wav check. kill it when we got enough
		if [ "`grep ISRC $WORKDIR/pcd-cddb`" ] || [ "`grep 'load cdrom' $WORKDIR/pcd-cddb`" ] ; then
			BREAK=true
			for I in `ps | grep cdda2wav | awk '{print $1}'`; do kill -9 $I 2> /dev/null; done
		fi
	done
	[ "`grep 'load cdrom' $WORKDIR/pcd-cddb`" ] && ERROR="$LOC522"
	#if no internal cd-text, try www
	LANG=C wget -S --spider -T 1 puppylinux.com 2> $WORKDIR/pcd-tmp #check internet connection
	if [ "`grep 'CD-Text: not detected' $WORKDIR/pcd-cddb`" ] && [ "`grep 'connected' $WORKDIR/pcd-tmp`" ]; then
		cdda2wav dev=$CD_DEVICE -cddb=1 -info-only -no-infofile > $WORKDIR/pcd-cddb 2>&1 &
		while [ ! "$BREAK2" ]; do
			#don't run complete cdda2wav check. kill it when we got enough
			if [ "`grep ISRC $WORKDIR/pcd-cddb`" ] || [ "`grep 'load cdrom' $WORKDIR/pcd-cddb`" ]; then
				BREAK2=true
				for I in `ps | grep cdda2wav | awk '{print $1}'`; do kill -9 $I 2> /dev/null; done
			fi
		done
	fi
	grep 'Track ' $WORKDIR/pcd-cddb | grep \' | cut -d ':' -f 2- | cut -d '[' -f 1 | cut -c 3- | sed -e "s/.$//" > $WORKDIR/pcd-tracks
#	ALBUM=`grep 'Album title' $WORKDIR/pcd-cddb | cut -d "'" -f 2`
	ARTIST=`grep 'Album title' $WORKDIR/pcd-cddb | cut -d '[' -f 2 | cut -d ']' -f 1 | cut -d ' ' -f 2-`
	#add length
	NR=1
	while read I; do
		COL=$NR
		if [ $COL -gt 95 ]; then COL=$(($NR-95))
		elif [ $COL -gt 90 ]; then COL=$(($NR-90))
		elif [ $COL -gt 85 ]; then COL=$(($NR-85))
		elif [ $COL -gt 80 ]; then COL=$(($NR-80))
		elif [ $COL -gt 75 ]; then COL=$(($NR-75))
		elif [ $COL -gt 70 ]; then COL=$(($NR-70))
		elif [ $COL -gt 65 ]; then COL=$(($NR-65))
		elif [ $COL -gt 60 ]; then COL=$(($NR-60))
		elif [ $COL -gt 55 ]; then COL=$(($NR-55))
		elif [ $COL -gt 50 ]; then COL=$(($NR-50))
		elif [ $COL -gt 45 ]; then COL=$(($NR-45))
		elif [ $COL -gt 40 ]; then COL=$(($NR-40))
		elif [ $COL -gt 35 ]; then COL=$(($NR-35))
		elif [ $COL -gt 30 ]; then COL=$(($NR-30))
		elif [ $COL -gt 25 ]; then COL=$(($NR-25))
		elif [ $COL -gt 20 ]; then COL=$(($NR-20))
		elif [ $COL -gt 15 ]; then COL=$(($NR-15))
		elif [ $COL -gt 10 ]; then COL=$(($NR-10))
		elif [ $COL -gt 5 ]; then COL=$(($NR-5))
		fi
		LENGTH="`grep -m 1 $NR'.(' $WORKDIR/pcd-cddb | cut -d "," -f $COL | cut -d '.' -f 2 | cut -d ' ' -f 2`"
		[ "`echo "$LENGTH" | wc -c`" = "5" ] && LENGTH=0$LENGTH #ensure 5digits
		echo "  cdda:$NR:$LENGTH:$WORKDIR/$ARTIST - $I.wav|$ARTIST - $I" | tr -d '(' >> $WORKDIR/browser
		NR=$(($NR+1))
	done < $WORKDIR/pcd-tracks
	#manually build list if no cd-text info available
	if [ ! "`cat $WORKDIR/browser`" ]; then
		NR=1; LENGTH=0
		while [ "$LENGTH" ]; do
			COL=$NR
			if [ $COL -gt 95 ]; then COL=$(($NR-95))
			elif [ $COL -gt 90 ]; then COL=$(($NR-90))
			elif [ $COL -gt 85 ]; then COL=$(($NR-85))
			elif [ $COL -gt 80 ]; then COL=$(($NR-80))
			elif [ $COL -gt 75 ]; then COL=$(($NR-75))
			elif [ $COL -gt 70 ]; then COL=$(($NR-70))
			elif [ $COL -gt 65 ]; then COL=$(($NR-65))
			elif [ $COL -gt 60 ]; then COL=$(($NR-60))
			elif [ $COL -gt 55 ]; then COL=$(($NR-55))
			elif [ $COL -gt 50 ]; then COL=$(($NR-50))
			elif [ $COL -gt 45 ]; then COL=$(($NR-45))
			elif [ $COL -gt 40 ]; then COL=$(($NR-40))
			elif [ $COL -gt 35 ]; then COL=$(($NR-35))
			elif [ $COL -gt 30 ]; then COL=$(($NR-30))
			elif [ $COL -gt 25 ]; then COL=$(($NR-25))
			elif [ $COL -gt 20 ]; then COL=$(($NR-20))
			elif [ $COL -gt 15 ]; then COL=$(($NR-15))
			elif [ $COL -gt 10 ]; then COL=$(($NR-10))
			elif [ $COL -gt 5 ]; then COL=$(($NR-5))
			fi
			LENGTH="`grep -m 1 $NR'.(' $WORKDIR/pcd-cddb | cut -d "," -f $COL | cut -d '.' -f 2 | cut -d ' ' -f 2`"
			[ "`echo "$LENGTH" | wc -c`" = "5" ] && LENGTH=0$LENGTH #ensure 5digits
			[ "$LENGTH" ] && echo "  cdda:$NR:$LENGTH:$WORKDIR/Track ${NR}.wav|Track ${NR}" | tr -d '(' >> $WORKDIR/browser
			NR=$(($NR+1))
		done 
	fi
 	echo 100 > $WORKDIR/load_id3 #update source-list
	;;
-faq)
	TMP=$LANGUAGE
	[ "$LANGUAGE" = "auto" ] && TMP="`ls -1 /usr/share/doc/pmusic/ | grep $LANG`"
	#first check if faq exist on local system, then try www
	if [ -f /usr/share/doc/pmusic/${TMP} ]; then
		defaulthtmlviewer /usr/share/doc/pmusic/${TMP}
	elif  [ -f /usr/share/doc/pmusic/n_US:pmusic_faq.html ]; then
		defaulthtmlviewer /usr/share/doc/pmusic/en_US:pmusic_faq.html
	else 
		#check internet connection
		LANG=C wget -S --spider -T 1 puppylinux.com 2> $WORKDIR/tmp
		if [ ! "`grep 'connected' $WORKDIR/tmp`" ]; then
			TXT1="<b>$LOC326</b>"
			. $APPDIR/box_ok
			exit
		fi
		#---
		wget --tries=1 --user puppy --password linux --output-document=/usr/share/doc/pmusic/en_US:pmusic_faq.html http://puppylinux.asia/tpp/zigbert/pmusic_faq.html
		defaulthtmlviewer /usr/share/doc/pmusic/en_US:pmusic_faq.html
	fi
	;;
-plugins) #can't start directly from gtkdialog code --> will then use defined gtk-theme
	case $2 in
		podcast-grabber)		ppg-gui.sh &;;
		pmetatagger)			pmetatagger &;;
		pcdripper)				pcdripper &;;
		ripoff)					ripoff &;;
		asunder)				asunder &;;
		zmixer)					zmixer &;;
		alsamixer)				rxvt -e alsamixer &;;
	esac
	;;
-calc_length)
	#calculate length by sum up columns
	MIN=`cut -d'|' -f1 $WORKDIR/playlist | awk -F: '{ SUM += $1} END { print SUM*60 }'`
	SEC=`cut -d'|' -f1 $WORKDIR/playlist | awk -F: '{ SUM += $2} END { print SUM }'`
	if [ ! "$SEC" ]; then #if list is empty
		SEC_TOTAL=00; MIN_TOTAL=0
	else
		MIN_TOTAL=$((($MIN+$SEC)/60))
		SEC_TOTAL=$((($MIN+$SEC)-($MIN_TOTAL*60)))
		[ ${#SEC_TOTAL} -eq 1 ] && SEC_TOTAL="0$SEC_TOTAL" #ensure 2 digits
	fi
	FRAME="$LOC159"; IMG="info"; TXT1="$LOC520"
	TXT2="<b>$MIN_TOTAL:$SEC_TOTAL</b>"
	. $APPDIR/box_ok &
	;;
-update_playlist)
	#update numbering in playlist
	NR=1
	echo -n > $WORKDIR/tmp
	while read I; do
		TMP="`echo $I | cut -d '|' -f 1-2`"
		TMP1="`echo $I | cut -d '|' -f 3 | cut -d ' ' -f 2-`"
		#ensure 3 digits to sort correct
		case ${#NR} in
			1) TMP2=00$NR;;
			2) TMP2=0$NR;;
			3) TMP2=$NR;;
		esac
		#---
		echo "$TMP|$TMP2 $TMP1" >> $WORKDIR/tmp
		NR=$(($NR+1))
	done < $WORKDIR/playlist
	cp $WORKDIR/tmp $WORKDIR/playlist
	case "`cat $WORKDIR/PLAYLIST1234 2> /dev/null`" in
		playlist1) cp $WORKDIR/playlist $WORKDIR/playlist1;;
		playlist2) cp $WORKDIR/playlist $WORKDIR/playlist2;;
		playlist3) cp $WORKDIR/playlist $WORKDIR/playlist3;;
		playlist4) cp $WORKDIR/playlist $WORKDIR/playlist4;;
	esac
	;;





###############################################
#                                             #
#                  R A D I O                  #
#                                             #
###############################################

-radio)
	#check if db exists
	if [  ! -f $WORKDIR/radio ]; then
		$APPDIR/func -radio_build_db &
		exit
	fi
	#---
	cut -d'|' -f2 $APPDIR/radio_categories > $WORKDIR/tmp
	cut -d'|' -f2 $APPDIR/radio_categories > $WORKDIR/tmp1
	sed -i "s/^/  radio:/g" $WORKDIR/tmp
	paste -d'|' $WORKDIR/tmp $WORKDIR/tmp1 | uniq > $WORKDIR/browser
 	echo 100 > $WORKDIR/load_id3 #update source-list
	;;
-radio_build_db)
	#check internet connection
	LANG=C wget -S --spider -T 1 puppylinux.com 2> $WORKDIR/tmp
	if [ ! "`grep 'connected' $WORKDIR/tmp`" ]; then
		TXT1="<b>$LOC326</b>"
		. $APPDIR/box_ok
		exit
	fi
	#box
	echo 0 > $WORKDIR/radio_splash
	echo "" > $WORKDIR/radio_progresstext #text in progressbar
	echo -n > $WORKDIR/radio_tmp2
	echo "$LOC490" > $WORKDIR/radio_splashtext
	export pmusic_radio='
<window title="Pmusic" icon-name="gtk-media-stop">
<vbox>
 <frame '$LOC222'>
  '"$SPLASH
  <text>
   <input file>$WORKDIR/radio_splashtext</input>
   <variable>TXT</variable>
  </text>
 </frame>
 <progressbar>
  <input>"'while [ "$I" != "100" ]; do I=`cat '$WORKDIR'/radio_splash`; J=`cat '$WORKDIR'/radio_progresstext`; [ -f '$WORKDIR'/radio_tmp2 ] && NR=`wc -l '$WORKDIR'/radio_tmp2 | cut -d" " -f1`; echo $I; echo "$J (${I}% - $NR added)"; usleep 500000; done</input>
  <action type="exit">cancel</action>
 </progressbar>
 <hbox>  
  <button>
   <input file stock="gtk-cancel"></input>
   <variable>BUTTON_CANCEL</variable>
   <label>'$LOC_CANCEL'</label>
  <action type="exit">cancel</action>
  </button>
  <button>
   <input file stock="gtk-execute"></input>
   <variable>BUTTON_OK</variable>
   <label>'$LOC491'</label>
   <action>'$APPDIR'/func -radio_build_db2 &</action>
   <action>disable:BUTTON_CANCEL</action>
   <action>disable:BUTTON_OK</action>
  </button>
 </hbox>
</vbox></window>'
	$GTKDIALOG -p pmusic_radio --center
	;;
-radio_build_db2)
	#for percent
	TOTAL="`wc -l $APPDIR/radio_categories | cut -d' ' -f1`"
	COUNT=0
	#---
	echo -n > $WORKDIR/radio_tmp2
	#start loop
	while read I; do
		[ ! "$I" ] && continue
		CATEGORY_NAME="`echo "$I" | cut -d'|' -f2`"
		CATEGORY_URL="`echo "$I" | cut -d'|' -f1`"
		#download html code
		LANG=C wget --tries=1 -O $WORKDIR/radio_wget $CATEGORY_URL
		while read J; do
			[ ! "`echo "$J" | grep -F '.m3u'`" ] && continue #we are only looking for lines with m3u information
			SOURCE="`grep -B 10 -A 2 "$J" $WORKDIR/radio_wget`" #find more code for current radio station
			NAME="`echo "$SOURCE" | grep -F '<b>' | awk -F '<b>' '{print $2}' | awk -F '</b>' '{print $1}'`"
			#strip URL to hold only 1 URL
			URL="`echo "$J"`"
			while [ "`echo "$URL" | grep -F '.m3u'`" ]; do
				echo "$URL" > $WORKDIR/radio_tmp #keep backup of last working url
				URL="`echo "$URL" | cut -d' ' -f2-`"
			done
			URL="`cut $WORKDIR/radio_tmp -d'"' -f2`" #'
			echo "  ${URL}|$NAME|$CATEGORY_NAME" >> $WORKDIR/radio_tmp2
		done < $WORKDIR/radio_wget
		#update progressbar
		COUNT=$(($COUNT+1))
		echo $(($COUNT*100/$TOTAL)) > $WORKDIR/radio_splash
		echo "$CATEGORY_NAME" > $WORKDIR/radio_progresstext
	done < $APPDIR/radio_categories
	#post cleanups
	grep -F 'http://' $WORKDIR/radio_tmp2 | grep -v -F '|Listen Live' | grep -v -F '//mms' > $WORKDIR/radio
	rm $WORKDIR/radio_*
	cat $WORKDIR/radio >> $HOME/.pmusic/index_all #add radios to search-db
	echo 100 > $WORKDIR/radio_splash
	;;





###############################################
#                                             #
#             B O O K M A R K S               #
#                                             #
###############################################

-bookmark_playing)
	NAME="`cut -d'|' -f1 $WORKDIR/ffmpeg_NOW_PLAYING`"
	FILE="`cut -d'|' -f2 $WORKDIR/ffmpeg_NOW_PLAYING`"
	#do NOT run gui if playing URL
	if [ ! -f "$FILE" ]; then
		#Do not add if already exist
		[ ! "`grep -wF "  $FILE|" $WORKDIR/bookmarks`" ] &&	echo "  $FILE|    $NAME" >> $WORKDIR/bookmarks
		exit
	fi
	#---
	export S='<window title="Pmusic - '$LOC136'" icon-name="gtk-media-stop">
<vbox>
 <frame>
  <hbox>
   <text><label>'$LOC461'</label></text>
   <entry>
    <variable>NAME</variable>
    <default>'$NAME'</default>
   </entry>
  </hbox>
  <text><label>""</label></text>
  <text><label>'$LOC468'</label></text>
  <checkbox>
   <variable>CHK_TIMESTAMP</variable>
   <label>'$LOC469'</label>
  </checkbox>
 </frame>
 <hbox><button cancel></button><button ok></button></hbox>
</vbox>
</window>'
	for STATEMENTS in  $($GTKDIALOG -p S); do
		eval $STATEMENTS
	done
	if [ $EXIT = OK ]; then
		if [ $CHK_TIMESTAMP = true ]; then
			TIME="`cut -d'|' -f2 $WORKDIR/OLD_TIME`"
			echo "  "'['$TIME']'" $FILE|    "'['$TIME']'" $NAME" >> $WORKDIR/bookmarks
		else
			echo "  $FILE|    $NAME" >> $WORKDIR/bookmarks
		fi
	fi
	;;
-add_bookmark) #quick solution with no dialog
	if [ ! "`grep -wF "  $SEARCH|" $WORKDIR/bookmarks`" ]; then #does it already exist
		TMP="`basename "$SEARCH"`"
		echo "  $SEARCH|    $TMP" >> $WORKDIR/bookmarks
	fi
	;;
-show_bookmarks)
  	$APPDIR/func -kill_browser_id3 #kill ongoing process
	echo -e "  bookmarks|$LOC241" > $WORKDIR/browser
	cat $WORKDIR/bookmarks >> $WORKDIR/browser
	echo 100 > $WORKDIR/load_id3
	;;
-bookmark_add)
	TMP="`grep -wF "  $BOOKMARK_PATH|" $WORKDIR/bookmarks`"
	if [ "$TMP" ]; then
		#rename
		TMP="`grep -wFB 1000 "  $BOOKMARK_PATH|" $WORKDIR/bookmarks | grep -vFw "  $BOOKMARK_PATH|"`"
		TMP1="`grep -wFA 1000 "  $BOOKMARK_PATH|" $WORKDIR/bookmarks | grep -vFw "  $BOOKMARK_PATH|"`"
		echo "$TMP" > $WORKDIR/bookmarks 
		echo "  $BOOKMARK_PATH|    $BOOKMARK_NAME" >> $WORKDIR/bookmarks
		echo "$TMP1" >> $WORKDIR/bookmarks 
	else
		#add new bookmark
		echo "  $BOOKMARK_PATH|    $BOOKMARK_NAME" >> $WORKDIR/bookmarks
	fi
	;;
-bookmark_delete)
	grep -vwF "  $BOOKMARK_PATH|    $BOOKMARK_NAME" $WORKDIR/bookmarks > $WORKDIR/tmp
	mv -f $WORKDIR/tmp $WORKDIR/bookmarks
	;;
-bookmark_move)
	TMP=($(<"$WORKDIR/PRESS_EVENT"))
	[ "$TMP" = "$BOOKMARK" ] && exit
	[ "$TMP" = "" ]			 && exit
	PRESS_EVENT="`grep -Fwm1 $TMP $WORKDIR/bookmarks`"
	grep -Fv "$PRESS_EVENT" $WORKDIR/bookmarks > $WORKDIR/tmp
	if [ "$BOOKMARK" = "" ]; then #move to end of list
		mv -f $WORKDIR/tmp $WORKDIR/tmp1
		echo "$PRESS_EVENT" >> $WORKDIR/tmp1
	else #normal move
		grep -Fm1 -B500 "$BOOKMARK" $WORKDIR/tmp | grep -Fv "$BOOKMARK" > $WORKDIR/tmp1
		echo "$PRESS_EVENT" >> $WORKDIR/tmp1
		grep -Fm1 -A500 "$BOOKMARK" $WORKDIR/tmp >> $WORKDIR/tmp1
	fi
	mv -f $WORKDIR/tmp1 $WORKDIR/bookmarks
	;;
-manage_bookmarks)
	echo -n > $WORKDIR/BOOKMARK_PATH
	echo -n > $WORKDIR/BOOKMARK_NAME

	export Pmusic_bookmarks="	
<window title=\"Pmusic - $LOC241\" icon-name=\"gtk-media-stop\">
<vbox>
<frame>

 <hbox>
  <text width-request=\"100\"><label>$LOC460</label></text>
  <entry>
   <variable>BOOKMARK_PATH</variable>
   <input>cat $WORKDIR/BOOKMARK_PATH</input>
  </entry>
  <button width-request=\"30\">
   <input file stock=\"gtk-open\"></input>"'
   <action>GET_OUTDIR="true"; TITLE="- $LOC309"; . $APPDIR/box_chooser; [ "$EXIT" = "OK" ] && echo -n "$CHOOSER" > $WORKDIR/BOOKMARK_PATH</action>'"
   <action>refresh:BOOKMARK_PATH</action>
  </button>
 </hbox>
 <hbox tooltip-text=\"$LOC465\">
  <text width-request=\"100\"><label>$LOC461</label></text>
  <entry activates-default=\"true\"><variable>BOOKMARK_NAME</variable><input>cat $WORKDIR/BOOKMARK_NAME</input></entry>
  <text width-request=\"30\"><label>\"\"</label></text>
 </hbox>


 <hbox>
  <button tooltip-text=\"$LOC463\" can-default=\"true\" has-default=\"true\" use-stock=\"true\">
   <input file icon=\"gtk-add\"></input>"'
   <action>. $APPDIR/func -bookmark_add</action>'"
   <action>refresh:BOOKMARK</action>
  </button>
  <button tooltip-text=\"$LOC464\">
   <variable>BUTTON_REMOVE_BOOKMARK</variable>
   <visible>disabled</visible>
   <input file icon=\"gtk-remove\"></input>"'
   <action>. $APPDIR/func -bookmark_delete</action>'"
   <action>refresh:BOOKMARK</action>
  </button>
  <text width-request=\"30\"><label>\"\"</label></text>
 </hbox>



 <tree hover-selection=\"true\" tooltip-text=\"$LOC462\">
  <label>$LOC460|$LOC461</label>
  <variable>BOOKMARK</variable>
  <input>cat $WORKDIR/bookmarks</input>
  <width>400</width><height>250</height>"'
  <action signal="button-press-event">echo $BOOKMARK > $WORKDIR/PRESS_EVENT</action>
  <action signal="button-release-event">echo $BOOKMARK > $WORKDIR/BOOKMARK_PATH</action>
  <action signal="button-release-event">grep -Fw -m1 "$BOOKMARK|" $WORKDIR/bookmarks | cut -d"|" -f2 | cut -d" " -f5- > $WORKDIR/BOOKMARK_NAME</action>
  <action signal="button-release-event">refresh:BOOKMARK_PATH</action>
  <action signal="button-release-event">refresh:BOOKMARK_NAME</action>
  <action signal="button-release-event">. $APPDIR/func -bookmark_move</action>
  <action signal="button-release-event">refresh:BOOKMARK</action>
  <action signal="button-release-event">enable:BUTTON_REMOVE_BOOKMARK</action>
 </tree>
</frame>
  <hbox>
   <button ok></button>
  </hbox>
</vbox>
</window>'
	[ $TOOLTIPS = false ] && Pmusic_bookmarks="`echo "$Pmusic_bookmarks" | sed 's%tooltip-text%tooltipXXXtext%g'`" #deactivate tooltips
	$GTKDIALOG -p Pmusic_bookmarks
	;;





############     Misc      ##############

-show_add_window) #gui launches from gtkdialog code
	rm $WORKDIR/end_while_add 2> /dev/null #open for new progressbar loop
	ADD_MODE="$2"
	[ "$ADD_MODE" = "-auto" ] && ADD_MODE='-browse'
	case "$ADD_MODE" in
	-blank)
		echo '|Please wait...' > $WORKDIR/browser
		;;
	-browse)
		INDEX=($(<"$WORKDIR/filebrowser_dir"))
		[ ! "`echo "$INDEX" | grep "^/"`" ] && INDEX=$HOME
		. $APPDIR/func -browse
		;;
	-source)
		$APPDIR/func -kill_browser_id3 & #kill ongoing process
		echo -e "  index|Index\n  songs|    $LOC223\n  collections|    $LOC224\n\n  radio|$LOC222\n  cd_audio|CD-audio\n  file|File\n\n  recent|$LOC225" > $WORKDIR/browser
		#recent played
		tail -n 3 $HOME/.pmusic/index_recent | cat -b | sort -r | cut -c8- | sed -e "s/|/|    /g" >> $WORKDIR/browser
		echo -e "\n  most_played|$LOC226" >> $WORKDIR/browser
		sort -r $HOME/.pmusic/index_most_played | cut -d'|' -f2- | head -n 3 | sed -e "s/|/|    /g" >> $WORKDIR/browser
		echo -e "\n  bookmarks|$LOC227" >> $WORKDIR/browser
		cat $WORKDIR/bookmarks >> $WORKDIR/browser
		echo > $WORKDIR/filebrowser_dir
		;;
	esac
	;;
-playlist_select)
	PLAYLIST_PRESS_EVENT=($(<"$WORKDIR/PLAYLIST_PRESS_EVENT"))
	PRESS_EVENT="`grep -F "$PLAYLIST_PRESS_EVENT" $WORKDIR/playlist`"
	RELEASE_EVENT="`grep -F "$PLAYLIST" $WORKDIR/playlist`"
	#remove song from list
	if [ $BUTTON = 3 ]; then
		$APPDIR/func -remove_from_list
		exit
	fi
	#move song in playlist
	if [ "$RELEASE_EVENT" != "$PRESS_EVENT" ]; then
		grep -Fv "$PRESS_EVENT" $WORKDIR/playlist > $WORKDIR/tmp
		if [ `echo "$RELEASE_EVENT" | wc -l` -gt 1 ]; then #move last. RELEASE_EVENT includes all songs if nothing is choosen
			mv -f $WORKDIR/tmp $WORKDIR/tmp1
			echo "$PRESS_EVENT" >> $WORKDIR/tmp1
		else #normal move
			grep -Fm1 -B500 "$RELEASE_EVENT" $WORKDIR/tmp | grep -vF "$RELEASE_EVENT" > $WORKDIR/tmp1
			echo "$PRESS_EVENT" >> $WORKDIR/tmp1
			grep -Fm1 -A500 "$RELEASE_EVENT" $WORKDIR/tmp >> $WORKDIR/tmp1
		fi
		mv -f $WORKDIR/tmp1 $WORKDIR/playlist
	else #play
		if [ "$PLAYLIST_PRESS_EVENT" ]; then
			echo 0 > $WORKDIR/SS
			$APPDIR/func_player -stop
			$APPDIR/func_player -play
			. $APPDIR/func -song_info
		fi
	fi
	;;
-kill_browser_id3)
	if [ "$ID3_BROWSER" = "true" ]; then
		echo 0 > $WORKDIR/load_id3
		for I in `ps | grep 'browse_id3' | awk '{print $1}'`; do kill -9 $I 2> /dev/null; done
	fi
	;;
-browse)
	$APPDIR/func -kill_browser_id3 #kill ongoing process
	TMP="`dirname "$INDEX"`"
    [ "$INDEX" = ".." ] && INDEX="$TMP"
	if [ "$INDEX" != "/" ]; then echo "  $TMP|.." > $WORKDIR/browser; else echo -n > $WORKDIR/browser; fi
	find "$INDEX" -mindepth 1 -maxdepth 1 -type d -printf "  %p|/%f/\n" | grep -v '/\.' | sort >> $WORKDIR/browser
	find "$INDEX" -maxdepth 1 -type l -printf  "  %l|/%f/\n" | sort >> $WORKDIR/browser
	find "$INDEX" -maxdepth 1 -type f -printf "  %p|%f\n" | grep -iE "$AUDIO_FORMATS|\.m3u|\.pls" | sort >> $WORKDIR/browser
	echo "$INDEX" > $WORKDIR/filebrowser_dir #remember path for next time
	echo 100 > $WORKDIR/load_id3
	sleep 0.1 #wait for <table> to refresh
	$APPDIR/func -browse_id3 &
	;;
-browse_id3)
	if [ ! "`cut $WORKDIR/browser -d '|' -f2 | grep -vE "\.\.|\/"`" ] || [ "$ID3_BROWSER" != "true" ]; then
#		echo 100 > $WORKDIR/load_id3
		exit #no files in dir
	fi
	echo -n > $WORKDIR/tmp_id3
	echo 0 > $WORKDIR/load_id3
	cp $WORKDIR/browser $WORKDIR/browser_old #keep original for refresh-field-check
	cut -c 3- $WORKDIR/browser > $WORKDIR/tmp
	TOTAL=`grep -c '^' $WORKDIR/browser` #count lines
	COUNT=0
	while read I; do
		FILE="`echo "$I" | cut -d '|' -f 1`"
		ID3="`id3info "$FILE"`"
		ID3_ARTIST="`echo "$ID3" | grep -Fm1 'Lead performer' | cut -d ':' -f 2- | cut -b 2-`"
		if [ "$ID3_ARTIST" ] && [ "$ID3_ARTIST" != " " ]; then
			ID3_TITLE="`echo "$ID3" | grep -Fm1 'Title' | cut -d ':' -f 2- | cut -b 2-`"
			ID3_ALBUM="`echo "$ID3" | grep -Fm1 'Album' | cut -d ':' -f 2- | cut -b 2-`"
			ID3_TRACK="`echo "$ID3" | grep -Fm1 'Track' | cut -d ':' -f 2- | cut -b 2-`"
			ID3_YEAR="`echo "$ID3" | grep -Fm1 'Year' | cut -d ':' -f 2- | cut -b 2-`"
			#genre
			TMP="`echo "$ID3" | grep -Fm1 'Content' | cut -d '(' -f 3 | cut -d ')' -f 1`"
			if [ $TMP -eq $TMP 2> /dev/null ]; then #check if number
				ID3_GENRE="`grep -Fm1 "^$TMP|" $APPDIR/id3_genre | cut -d '|' -f 2`"
			else
				ID3_GENRE="`echo "$ID3" | grep -Fm1 'Content' | cut -d ':' -f 2- | cut -b 2-`"
			fi
			#---
			echo "  $FILE|$ID3_TITLE|$ID3_ARTIST|$ID3_ALBUM|$ID3_TRACK|$ID3_YEAR|$ID3_GENRE" >> $WORKDIR/tmp_id3
		else
			echo "  $I" >> $WORKDIR/tmp_id3
		fi
		#update progress bar
		PERCENT=$(($COUNT*100/$TOTAL))
		PERCENT=$(($PERCENT))
		echo "$LOC311" > $WORKDIR/splashtext
		echo $PERCENT > $WORKDIR/load_id3
		COUNT=$(($COUNT+1))
	done < $WORKDIR/tmp
	[ $TOTAL -gt 0 ] && echo 100 > $WORKDIR/load_id3
	#if nothing has changed during meta-load loop, refresh <table>
	[ ! "`diff $WORKDIR/browser $WORKDIR/browser_old`" ] &&  mv -f $WORKDIR/tmp_id3 $WORKDIR/browser
	;;
-index_sort_file)
	sort --output=$WORKDIR/tmp $WORKDIR/browser
	cp -f $WORKDIR/tmp $WORKDIR/browser
	;;
-index_sort_title)
	sort -t'|' -k2 --output=$WORKDIR/tmp $WORKDIR/browser
	mv -f $WORKDIR/tmp $WORKDIR/browser
	;;
-index_sort_artist)
	sort -t'|' -k3 --output=$WORKDIR/tmp $WORKDIR/browser
	mv -f $WORKDIR/tmp $WORKDIR/browser
	;;
-index_sort_album)
	sort -t'|' -k4 --output=$WORKDIR/tmp $WORKDIR/browser
	mv -f $WORKDIR/tmp $WORKDIR/browser
	;;
-index_sort_track)
	sort -n -t'|' -k5 --output=$WORKDIR/tmp $WORKDIR/browser
	mv -f $WORKDIR/tmp $WORKDIR/browser
	;;
-index_sort_year)
	sort -n -t'|' -k6 --output=$WORKDIR/tmp $WORKDIR/browser
	mv -f $WORKDIR/tmp $WORKDIR/browser
	;;
-index_sort_genre)
	sort -t'|' -k7 --output=$WORKDIR/tmp $WORKDIR/browser
	mv -f $WORKDIR/tmp $WORKDIR/browser
	;;
-about)
	. $APPDIR/gui_about
	$GTKDIALOG -p Pmusic_about
	;;
-undo)
	$APPDIR/func_store_playlist
	PLAYLIST_NAME=($(<"$WORKDIR/PLAYLIST_NAME"))
	[ ! "$PLAYLIST_NAME" ] && PLAYLIST_NAME="`ls $HOME/.pmusic/storage_playlist/ | tail -n 1`"
	[ -s $WORKDIR/playlist ] && PLAYLIST_NAME="`ls $HOME/.pmusic/storage_playlist/ | grep --before-context=1 -x "$PLAYLIST_NAME" | head -n 1`"
	cp $HOME/.pmusic/storage_playlist/"$PLAYLIST_NAME" $WORKDIR/playlist
	echo "$PLAYLIST_NAME" > $WORKDIR/PLAYLIST_NAME
	;;
-redo)
	PLAYLIST_NAME=($(<"$WORKDIR/PLAYLIST_NAME"))
	TMP="`ls $HOME/.pmusic/storage_playlist/ | grep --after-context=1 -x "$PLAYLIST_NAME" | tail -n 1`"
	cp $HOME/.pmusic/storage_playlist/"$TMP" $WORKDIR/playlist
	echo "$TMP" > $WORKDIR/PLAYLIST_NAME
	;;
-search_for_song_in_playlists)
	SELECTION=($(<"$WORKDIR/PLAYLIST"))
	if [ ! "$SELECTION" ]; then
		TXT1="<b>$LOC501</b>"
		. $APPDIR/box_ok
		exit
	fi
	echo -n > $WORKDIR/song_info
	echo "$LOC500..." > $WORKDIR/splashtext
	$APPDIR/box_splash_progress &
	#---
	COUNT=1
	TMP=`grep -c '^' $HOME/.pmusic/index_playlists`
	TMP_SONG="`basename "$SELECTION"`"
	cut -c 3- $HOME/.pmusic/index_playlists | cut -d '|' -f 1 > $WORKDIR/tmp
	while read I; do
		grep -l "$TMP_SONG" "$I" >> $WORKDIR/song_info
		#update progress
		echo $(($COUNT*100/$TMP)) > $WORKDIR/splash
		COUNT=$(($COUNT+1))
	done < $WORKDIR/tmp
	echo 100 > $WORKDIR/splash #reset progress bar
	FRAME="$LOC254":
	IMG="dialog-info"
	[ ! -s $WORKDIR/song_info ] && echo "$LOC255" > $WORKDIR/song_info
	TXT1=($(<"$WORKDIR/song_info"))
	. $APPDIR/box_ok
	;;
-edit_tags)
	SELECTION=($(<"$WORKDIR/PLAYLIST"))
	if [ ! "$SELECTION" ]; then
		TXT1="<b>$LOC501</b>"
		. $APPDIR/box_ok
		exit
	fi
	echo -n > $WORKDIR/song_info
	echo 'Bitrate: unknown
Frequency: unknown' > $WORKDIR/id3_info
	if [ "`echo "$SELECTION" | grep -iE "\.ape|\.mp3|\.ogg|\.wma"`" ]; then
		ID3="`id3info "$SELECTION"`"
		ID3_ARTIST="`echo "$ID3" | grep -Fm1 'Lead performer' | cut -d ':' -f 2- | cut -b 2-`"
		ID3_TITLE="`echo "$ID3" | grep -Fm1 'Title' | cut -d ':' -f 2- | cut -b 2-`"
		ID3_ALBUM="`echo "$ID3" | grep -Fm1 'Album' | cut -d ':' -f 2- | cut -b 2-`"
		ID3_YEAR="`echo "$ID3" | grep -Fm1 'Year' | cut -d ':' -f 2- | cut -b 2-`"
		ID3_TRACK="`echo "$ID3" | grep -Fm1 'Track number' | cut -d ':' -f 2- | cut -b 2-`"
		#genre
		TMP="`echo "$ID3" | grep -Fm1 'Content' | cut -d ':' -f 2- | cut -b 3- | cut -d ')' -f 1`"
		TMP1="`grep "^$TMP|" $APPDIR/id3_genre | cut -d '|' -f 1`"
		TMP2="`grep "^$TMP|" $APPDIR/id3_genre | cut -d '|' -f 2`"
		[ "$TMP1" ] && ID3_GENRE="$TMP1 - $TMP2"
		[ ! "$TMP1" ] && ID3_GENRE="`echo "$ID3" | grep -Fm1 'Content' | cut -d ':' -f 2-`"
		#---
		ID3_COMMENT="`echo "$ID3" | grep -Fm1 'Comments' | grep -v ID3v1 | cut -d ':' -f 3- | cut -b 2-`"
		echo "$ID3" | tail -n 3 > $WORKDIR/id3_info
		VISIBLE_ID3=enabled
	else
		VISIBLE_ID3=disabled
	fi
	export ID3_GENRES=`awk -F "|" '{print "<item>"$1" - "$2"</item>"}' $APPDIR/id3_genre` #build id3 genres
	export Pmusic_info="
<window title=\"Pmusic - $LOC131\">
<vbox>
 <frame $LOC_INFO>
  <text use-markup=\"true\"><label>\"<b>$SELECTION</b>\"</label></text>
  <text><input file>$WORKDIR/id3_info</input></text>
 </frame>
  <frame $LOC141>
  <vbox>
   <hbox>
    <text width-request=\"100\"><label>$LOC_ARTIST</label><visible>$VISIBLE_ID3</visible></text>
    <entry>
     <variable>ID3_ARTIST</variable>
     <input>echo \"$ID3_ARTIST\"</input>
     <visible>$VISIBLE_ID3</visible>
    </entry>
   </hbox>
   <hbox>
    <text width-request=\"100\"><label>$LOC_TITLE</label><visible>$VISIBLE_ID3</visible></text>
    <entry>
     <variable>ID3_TITLE</variable>
     <input>echo \"$ID3_TITLE\"</input>
     <visible>$VISIBLE_ID3</visible>
    </entry>
   </hbox>
   <hbox>
    <text width-request=\"100\"><label>$LOC_ALBUM</label><visible>$VISIBLE_ID3</visible></text>
    <entry>
     <variable>ID3_ALBUM</variable>
     <input>echo \"$ID3_ALBUM\"</input>
     <visible>$VISIBLE_ID3</visible>
    </entry>
   </hbox>
   <hbox>
    <text width-request=\"100\"><label>$LOC_YEAR</label><visible>$VISIBLE_ID3</visible></text>
    <entry>
     <variable>ID3_YEAR</variable>
     <input>echo \"$ID3_YEAR\"</input>
     <visible>$VISIBLE_ID3</visible>
    </entry>
   </hbox>
   <hbox>
    <text width-request=\"100\"><label>$LOC_TRACK</label><visible>$VISIBLE_ID3</visible></text>
    <entry>
     <variable>ID3_TRACK</variable>
     <input>echo \"$ID3_TRACK\"</input>
     <visible>$VISIBLE_ID3</visible>
    </entry>
   </hbox>
   <hbox>
    <text width-request=\"100\"><label>$LOC253</label><visible>$VISIBLE_ID3</visible></text>
    <entry>
     <variable>ID3_COMMENT</variable>
     <input>echo \"$ID3_COMMENT\"</input>
     <visible>$VISIBLE_ID3</visible>
    </entry>
   </hbox>
   <hbox>
    <text width-request=\"170\"><label>$LOC_GENRE</label><visible>$VISIBLE_ID3</visible></text>
    <combobox>
     <variable>ID3_GENRE</variable>
     <item>$ID3_GENRE</item>
     $ID3_GENRES
     <visible>$VISIBLE_ID3</visible>
    </combobox>
   </hbox>
  </vbox>
  </frame>
 <hbox>
  <button cancel></button>
  <text><label>\"     \"</label></text>
  <button>
   <label>$LOC252</label>
   <input file icon=\"gtk-clear\"></input>
   <visible>$VISIBLE_ID3</visible>
   <action type=\"exit\">clear_tag</action>
  </button>
  <button>
   <label>$LOC256</label>
   <input file icon=\"gtk-save\"></input>
   <action type=\"exit\">save</action>
  </button>
 </hbox>
</vbox>
</window>"
	[ $TOOLTIPS = false ] && Pmusic_info="`echo "$Pmusic_info" | sed 's%tooltip-text%tooltipXXXtext%g'`" #deactivate tooltips
	I=$IFS; IFS=""
	for STATEMENTS in $($GTKDIALOG -p Pmusic_info --center); do
		eval $STATEMENTS
	done
	IFS=$I
	case $EXIT in
		save)
			ID3_GENRE="`echo "$ID3_GENRE" | awk -F " - " '{print $1}'`"
			id3tag -a "$ID3_ARTIST" -s "$ID3_TITLE" -A "$ID3_ALBUM" -y "$ID3_YEAR" -t$ID3_TRACK -g "$ID3_GENRE" -c "$ID3_COMMENT" "$SELECTION"
			;;
		clear_tag)
			id3tag -a ' ' -s ' ' -A ' ' -y ' ' -t99 -g '148' -c ' ' "$SELECTION"
			;;
	esac
	;;
-song_info)
	SELECTION=($(<"$WORKDIR/PLAYLIST"))
	TMP=`id3info "$SELECTION"`
	echo -e "$SELECTION\n\n" > $WORKDIR/id3_info
	echo -e "$TMP\n\n" | tail -n 5 >> $WORKDIR/id3_info
	echo "$TMP" | grep '===' | cut -d ' ' -f 3- >> $WORKDIR/id3_info
	;;
-copy_files)
	cd $HOME
	S='
<window title="Pmusic - '$LOC106'" icon-name="gtk-media-stop">
 <vbox>
  <frame '$LOC299'>
   <hbox>
    <text><label>'$LOC291'</label></text>
    <entry accept="directory">
     <variable>COPYDIR</variable>
     <input>echo $HOME</input>
    </entry>
    <button>
     <input file icon="gtk-open"></input>
     <action type="fileselect">COPYDIR</action>
     <action>refresh:COPYDIR</action>
    </button>
   </hbox>
   <checkbox>
    <label>'$LOC292'</label>
    <variable>ADD_NUMBERING</variable>
   </checkbox>
  </frame>
  <frame '$LOC297'>
   <checkbox>
    <label>'$LOC298'</label>
    <variable>CHK_OUTPUT_STREAM</variable>
    <action>if true enable:COPY_BITRATE</action>
    <action>if true enable:COPY_SAMPLE</action>
    <action>if true enable:COPY_CHANNEL</action>
    <action>if true enable:COPY_FORMAT</action>
    <action>if true enable:TXT_COPY_BITRATE</action>
    <action>if true enable:TXT_COPY_SAMPLE</action>
    <action>if true enable:TXT_COPY_CHANNEL</action>
    <action>if true enable:TXT_COPY_FORMAT</action>
    <action>if false disable:COPY_BITRATE</action>
    <action>if false disable:COPY_SAMPLE</action>
    <action>if false disable:COPY_CHANNEL</action>
    <action>if false disable:COPY_FORMAT</action>
    <action>if false disable:TXT_COPY_BITRATE</action>
    <action>if false disable:TXT_COPY_SAMPLE</action>
    <action>if false disable:TXT_COPY_CHANNEL</action>
    <action>if false disable:TXT_COPY_FORMAT</action>
   </checkbox>
   <hbox>
    <text><variable>TXT_COPY_FORMAT</variable><visible>disabled</visible><label>'$LOC293'</label></text>
    <combobox>
     <variable>COPY_FORMAT</variable>
     <visible>disabled</visible>
	 <item></item>
	 <item>aiff</item>
	 <item>asf</item>
	 <item>au</item>
	 <item>flac</item>
	 <item>mp3</item>
	 <item>ogg</item>
	 <item>rm</item>
	 <item>voc</item>
	 <item>wav</item>
    </combobox>
   </hbox>
   <hbox>
    <text><variable>TXT_COPY_BITRATE</variable><visible>disabled</visible><label>'$LOC294'</label></text>
    <hbox width-request="80">
     <entry><variable>COPY_BITRATE</variable><visible>disabled</visible><default>192000</default></entry>
    </hbox>
   </hbox>
   <hbox>
    <text><variable>TXT_COPY_SAMPLE</variable><visible>disabled</visible><label>'$LOC295'</label></text>
    <hbox width-request="80">
     <entry><variable>COPY_SAMPLE</variable><visible>disabled</visible><default>44100</default></entry>
    </hbox>
   </hbox>
   <hbox>
    <text><variable>TXT_COPY_CHANNEL</variable><visible>disabled</visible><label>'$LOC296'</label></text>
    <hbox width-request="80">
     <entry><variable>COPY_CHANNEL</variable><visible>disabled</visible><default>2</default></entry>
    </hbox>
   </hbox>
  </frame>
  <hbox>
   <button><input file icon="gtk-cancel"></input><label>'$LOC_CANCEL'</label></button>
   <text width-request="50"><label>""</label></text>'
   [ -f /usr/bin/pburn ] && S=$S'<button>
    <input file>/usr/local/pburn/pburn20.png</input>
    <label>'$LOC289'</label>
    <action>$APPDIR/func -burn &</action>
   </button>'
   S=$S'
   <button can-default="true" has-default="true" use-stock="true">
    <input file icon="gtk-save-as"></input>
    <label>'$LOC290'</label>
    <action type="exit">ok</action>
   </button>
  </hbox>
 </vbox>
</window>'
	export pmusic_copy="$S"
	[ $TOOLTIPS = false ] && pmusic_copy="`echo "$pmusic_copy" | sed 's%tooltip-text%tooltipXXXtext%g'`" #deactivate tooltips
	I=$IFS; IFS=""
	for STATEMENTS in $($GTKDIALOG -p pmusic_copy --center); do
		eval $STATEMENTS
	done
	IFS=$I
	if [ $EXIT = "ok" ]; then
		#splash
		echo "$LOC142..." > $WORKDIR/splashtext
		$APPDIR/box_splash &
		#---
		cut -d '|' -f 3 $WORKDIR/playlist > $WORKDIR/tmp
		TMP="`echo "$COPYDIR""/" | sed -e s%//%/%g`" #be sure to end with one /
		COPYDIR="$TMP"
		
		echo -n > $WORKDIR/exec_copy
		while read I; do
			FILE="`echo $I | cut -d ' ' -f 2-`"
			#CD-audio
			if [ "`echo $I | grep -F cdda:`" ]; then
				pmusic -s stop
				CDDA_TRACK="`echo $I | cut -d: -f 2`" 
				FILE="`echo $I | cut -d: -f 5-`"
				echo "hdparm -E$CD_SPEED $CD_DEVICE" >> $WORKDIR/exec_copy #set speed of cd device
				echo "cdda2wav dev=$CD_DEVICE -t $CDDA_TRACK -Owav \"$FILE\"" >> $WORKDIR/exec_copy
			fi
			#---
			TARGET="`basename "$FILE"`"
			[ $ADD_NUMBERING = true ] && TARGET="`echo $I | cut -d ' ' -f 1`"_"`basename "$FILE"`"
			if [ "$COPY_FORMAT" ]; then
				NAME="`echo "$TARGET" | sed -e 's/\.[^\.]*$//'`" #remove extension
				if [ -f "$COPYDIR""$NAME.$COPY_FORMAT" ]; then #already exist
					IMG=warning; FRAME="$LOC_WARNING"; TXT1="<b>$COPYDIR$NAME.$COPY_FORMAT $LOC503</b>"; TXT2="$LOC504"
					sleep 1
					. $APPDIR/box_yesno
					if [ $EXIT != yes ]; then continue; fi
				fi
				[ "$CHK_OUTPUT_STREAM" = "true" ] && OUTPUT_STREAM="-ac $COPY_CHANNEL -ar $COPY_SAMPLE -ab $COPY_BITRATE"
				echo -n "ffmpeg -i \"" >> $WORKDIR/exec_copy
				echo -n "$FILE" | sed -e 's/`/\\\`/g' -e 's/"/\\\"/g' >> $WORKDIR/exec_copy #allow ` and " in filename 
				echo -n "\" -f $COPY_FORMAT $OUTPUT_STREAM -y \"" >> $WORKDIR/exec_copy
				echo -n "$COPYDIR$NAME.$COPY_FORMAT" | sed -e 's/`/\\\`/g' -e 's/"/\\\"/g' >> $WORKDIR/exec_copy #allow ` and " in filename 
				echo "\"" >> $WORKDIR/exec_copy 
			else
				if [ -f "$COPYDIR""$TARGET" ]; then #already exist
					IMG=warning; FRAME="$LOC_WARNING"; TXT1="<b>$FILE $LOC503</b>"; TXT2="$LOC504"
					sleep 1
					. $APPDIR/box_yesno
					if [ $EXIT != yes ]; then continue; fi
				fi
				echo -n "cp -f \"" >> $WORKDIR/exec_copy
				echo -n "$FILE" | sed -e 's/`/\\\`/g' -e 's/"/\\\"/g' >> $WORKDIR/exec_copy #allow ` and " in filename 
				echo -n "\" \"" >> $WORKDIR/exec_copy 
				echo -n "$COPYDIR$TARGET" | sed -e 's/`/\\\`/g' -e 's/"/\\\"/g' >> $WORKDIR/exec_copy #allow ` and " in filename 
				echo "\"" >> $WORKDIR/exec_copy
			fi
			echo "rm \"$FILE\"" >> $WORKDIR/exec_copy #ripped CD-audio track
		done < $WORKDIR/tmp
		
		chmod 700 $WORKDIR/exec_copy
		$WORKDIR/exec_copy
		echo 100 > $WORKDIR/splash #reset progress bar
	fi
	;;
-time_format)
	if [ -f $WORKDIR/ffmpeg_TIME_FORMAT ]; then
		rm $WORKDIR/ffmpeg_TIME_FORMAT
	else
		echo remain > $WORKDIR/ffmpeg_TIME_FORMAT
	fi
	;;
-burn)
	cut -d '|' -f 3 $WORKDIR/playlist | cut -d ' ' -f 2- | grep -vF "('\|cdda:\|://\|')" > $WORKDIR/tmp #do not include CD tracks and streams
	$APPDIR/func_player -stop #avoid ffmpeg crash
	export BROWSER_DIR=""
	pburn -i $WORKDIR/tmp
	;;
-show_location)
	TMP=($(<"$WORKDIR/ffmpeg_NOW_PLAYING"))
	TMP2="`echo "$TMP" | cut -d'|' -f2`"
	DIRECTORY="`dirname "$TMP2"`"
	rox -d "$DIRECTORY" &
	;;
-preferences)
	case $2 in
		-playlist)		PAGE_NR=3;;
		*)				PAGE_NR=0;;
	esac
	export THEMES=`ls "$APPDIR"/themes | awk '{print "<item>"$1"</item>"}'` #make theme list
	export LANGUAGES=`ls "$APPDIR"/locals | awk '{print "<item>"$1"</item>"}'`
	export PRESETS=`ls "$APPDIR"/presets | grep -v Navigator | awk '{print "<item>"$1"</item>"}'`
	export SPEAKERS=`amixer controls | grep 'Playback Volume' | cut -d "'" -f 2 | sed -e "s/ Playback Volume//g" | tr -s ' ' '_' | awk '{print "<item>"$1"</item>"}' | tr -s '_' ' '`
	export CD_DEVICES="<item>/dev/`ls -1 /sys/block 2> /dev/null | grep -E '^scd|^sr' | tr '\n' ' '``ls -1 /proc/ide 2> /dev/null | grep '^hd' | tr '\n' ' '`</item>"
	
	export Pmusic_preferences="
<window title=\"Pmusic - $LOC103\" icon-name=\"gtk-media-stop\">
<vbox>
 <notebook page=\"$PAGE_NR\" labels=\"$LOC260|$LOC263|$LOC273|$LOC261|$LOC220\">
  <frame $LOC260>
   <text width-chars=\"1\" height-request=\"5\"><label>\"\"</label></text>
   <hbox>
    <text><label>$LOC270</label></text>
    <combobox>
     <variable>LANGUAGE</variable>
     <item>$LANGUAGE</item>
     <item>auto</item>
     $LANGUAGES
    </combobox>
    <button width-request=\"45\">
     <label>www</label>
     <action>$BROWSER http://www.murga-linux.com/puppy/viewtopic.php?p=259090 &</action>
    </button>
   </hbox>
   <hbox>
    <text><label>$LOC262</label></text>
    <combobox>
     <variable>THEME</variable>
     <item>$THEME</item>
     <item>$LOC277</item>
     $THEMES
    </combobox>
    <button width-request=\"45\">
     <label>www</label>
     <action>$BROWSER http://www.murga-linux.com/puppy/viewtopic.php?t=47639 &</action>
    </button>
   </hbox>
   <hbox>
    <text><label>$LOC180</label></text>
    <combobox>
     <variable>PRESET</variable>
     <item>$PRESET</item>
     $PRESETS
    </combobox>
    <button width-request=\"45\">
     <label>www</label>
     <action>$BROWSER http://www.murga-linux.com/puppy/viewtopic.php?p=313250#313250 &</action>
    </button>
   </hbox>

    <text height-request=\"20\"><label>\"\"</label></text>

   <hbox tooltip-text=\"$LOC513\">
    <text><label>$LOC272</label></text>
    <combobox>
     <variable>SPEAKER</variable>
     <item>$SPEAKER</item>
     $SPEAKERS
    </combobox>
    <text width-request=\"45\"><label>\"\"</label></text>
   </hbox>
   
   
   
   <hbox>
    <text><label>$LOC800</label></text>
    <combobox>
     <variable>CD_DEVICE</variable>
     <item>$CD_DEVICE</item>
     $CD_DEVICES
    </combobox>
    <text width-request=\"45\"><label>\"\"</label></text>
   </hbox>
   <hbox tooltip-text=\"$LOC802\">
    <text><label>$LOC801</label></text>
    <combobox>
     <variable>CD_SPEED</variable>
     <item>$CD_SPEED</item>
     <item>1</item>
     <item>2</item>
     <item>4</item>
     <item>8</item>
     <item>16</item>
     <item>24</item>
     <item>32</item>
     <item>48</item>
     <item>56</item>
    </combobox>
    <text width-request=\"45\"><label>\"\"</label></text>
   </hbox>
  </frame>
  <frame $LOC263>
   <text width-chars=\"1\" height-request=\"5\"><label>\"\"</label></text>
   <checkbox><label>$LOC275</label><variable>TOOLTIPS</variable><default>$TOOLTIPS</default></checkbox>
   <checkbox><label>$LOC279</label><variable>TRAYAPP</variable><default>$TRAYAPP</default></checkbox>
   <checkbox><label>$LOC265</label><variable>CONVERT_UNDERSCORE</variable><default>$CONVERT_UNDERSCORE</default></checkbox>
   <checkbox><label>$LOC266</label><variable>CONVERT_20</variable><default>$CONVERT_20</default></checkbox>
  </frame>
  <frame $LOC273>
   <text height-request=\"5\"><label>\"\"</label></text>
   <checkbox>
    <label>$LOC264</label>
    <variable>HIGH_CPU</variable>
    <default>$HIGH_CPU</default>
   </checkbox>
   <text height-request=\"5\"><label>\"\"</label></text>
   <hbox>
    <text><label>$LOC271</label></text>
    <hbox>
    <entry width-request=\"30\">
     <variable>GAP</variable>
     <default>\"$GAP\"</default>
    </entry>
   </hbox>
   </hbox>
  </frame>
  <frame $LOC261>
   <text><label>$LOC268</label></text>
   <entry activates-default=\"true\"><variable>PLAYLIST1_NAME</variable><input>echo '$PLAYLIST1_NAME'</input></entry>
   <entry activates-default=\"true\"><variable>PLAYLIST2_NAME</variable><input>echo '$PLAYLIST2_NAME'</input></entry>
   <entry activates-default=\"true\"><variable>PLAYLIST3_NAME</variable><input>echo '$PLAYLIST3_NAME'</input></entry>
   <entry activates-default=\"true\"><variable>PLAYLIST4_NAME</variable><input>echo '$PLAYLIST4_NAME'</input></entry>
   <text><label>\"\"</label></text>
   <checkbox>
    <label>$LOC278</label>
    <variable>ID3_PLAYLIST</variable>
    <default>$ID3_PLAYLIST</default>
   </checkbox>
  </frame>
  <frame $LOC220>
   <checkbox>
    <label>$LOC274</label>
    <variable>ID3_BROWSER</variable>
    <default>$ID3_BROWSER</default>
   </checkbox>
   <text><label>\"\"</label></text>
   <hbox>
    <button>
     <input file stock=\"gtk-refresh\"></input>
     <label>$LOC269</label>
     <action>$APPDIR/func -radio_build_db &</action>
    </button>
   </hbox>
   <text><label>\"\"</label></text>
   <hbox>
    <vbox>
    <button>
     <input file stock=\"gtk-clear\"></input>
     <label>$LOC276 '$LOC226'</label>
     <action>rm -f $HOME/.pmusic/index_most_played</action>
    </button>
    <button>
     <input file stock=\"gtk-clear\"></input>
     <label>$LOC276 '$LOC225'</label>
     <action>rm -f $HOME/.pmusic/index_recent</action>
    </button>
    </vbox>
   </hbox>
  </frame>
 </notebook>
 <hbox>
  <button cancel></button>
  <button ok></button>
 </hbox>
</vbox>
</window>"
	[ $TOOLTIPS = false ] && Pmusic_preferences="`echo "$Pmusic_preferences" | sed 's%tooltip-text%tooltipXXXtext%g'`" #deactivate tooltips
	I=$IFS; IFS=""
	for STATEMENTS in $($GTKDIALOG -p Pmusic_preferences); do
		eval $STATEMENTS
	done
	IFS=$I
	if [ "$EXIT" = "OK" ]; then
		$APPDIR/func -write_config
		$APPDIR/func -update_playlist
		killall pmusic_tray
		pmusic #new start to load changed settings
	fi
	;;
-write_config)
	echo "#Pmusic config"								 > $CONFIG
	echo "export VERSION=$VERSION"						>> $CONFIG
	echo "export TOOLTIPS=$TOOLTIPS"					>> $CONFIG
	echo "export TRAYAPP=$TRAYAPP"						>> $CONFIG
	echo "export THEME=\"$THEME\""						>> $CONFIG
	echo "export LANGUAGE=$LANGUAGE"					>> $CONFIG
	echo "export PRESET=$PRESET"						>> $CONFIG
	echo "export SPEAKER=$SPEAKER"						>> $CONFIG
	echo "export HIGH_CPU=$HIGH_CPU"					>> $CONFIG
	echo "export GAP=$GAP"								>> $CONFIG
	echo "export CD_SPEED=$CD_SPEED"					>> $CONFIG
	echo "export CD_DEVICE=$CD_DEVICE"					>> $CONFIG
	echo "export PLAYLIST1_NAME=\"$PLAYLIST1_NAME\""	>> $CONFIG
	echo "export PLAYLIST2_NAME=\"$PLAYLIST2_NAME\""	>> $CONFIG
	echo "export PLAYLIST3_NAME=\"$PLAYLIST3_NAME\""	>> $CONFIG
	echo "export PLAYLIST4_NAME=\"$PLAYLIST4_NAME\""	>> $CONFIG
	echo "export ID3_BROWSER=$ID3_BROWSER"				>> $CONFIG
	echo "export ID3_PLAYLIST=$ID3_PLAYLIST"			>> $CONFIG
	echo "export CONVERT_20=$CONVERT_20"				>> $CONFIG
	echo "export CONVERT_UNDERSCORE=$CONVERT_UNDERSCORE" >> $CONFIG
	XWININFO=`xwininfo -stats -name Pmusic`
	HEIGHT=`echo "$XWININFO" | grep 'Height:' | awk '{print $2}'`
	WIDTH=`echo "$XWININFO" | grep 'Width:' | awk '{print $2}'`
	X1=`echo "$XWININFO" | grep 'Absolute upper-left X' | awk '{print $4}'`
	Y1=`echo "$XWININFO" | grep 'Absolute upper-left Y' | awk '{print $4}'`
	X2=`echo "$XWININFO" | grep 'Relative upper-left X' | awk '{print $4}'`
	Y2=`echo "$XWININFO" | grep 'Relative upper-left Y' | awk '{print $4}'`
	X=$(($X1-$X2))
	Y=$(($Y1-$Y2)) 
	echo '#geometry'									>> $CONFIG
	echo "export HEIGHT=\"$HEIGHT\""					>> $CONFIG
	echo "export WIDTH=\"$WIDTH\""						>> $CONFIG
	echo "export X=\"$X\""								>> $CONFIG
	echo "export Y=\"$Y\""								>> $CONFIG
	echo 'export FIRST_RUN=false'						>> $CONFIG
	;;
-tray_app)
	TMP="`ps`"
	[ ! "`echo "$TMP" | grep pmusic_tray`" ] && $APPDIR/pmusic_tray &
	;;
-quit)
	#end all processes
	. $APPDIR/func -update_playlist
	echo end > $WORKDIR/end_while
	echo end > $WORKDIR/end_while_add
	rm $WORKDIR/*.wav 2> /dev/null #cd-audio
	rm $WORKDIR/*.inf 2> /dev/null #cd-audio
	for I in `ps | grep Pmusic | grep gtkdialog | awk '{print $1}'`; do kill -9 $I 2> /dev/null; done
	for I in `ps | grep -i pmusic | grep index | awk '{print $1}'`; do kill -9 $I 2> /dev/null; done
	for I in `ps | grep aplay | awk '{print $1}'`; do kill -9 $I 2> /dev/null; done
	for I in `ps | grep pmusic | grep playing | awk '{print $1}'`; do kill -9 $I 2> /dev/null; done
	killall pmusic_tray
	killall cdda2wav
	exit 0
	;;
-show_playlist1234)
	[ ! -f $WORKDIR/playlist1 ] && echo -n > $WORKDIR/playlist1
	[ ! -f $WORKDIR/playlist2 ] && echo -n > $WORKDIR/playlist2
	[ ! -f $WORKDIR/playlist3 ] && echo -n > $WORKDIR/playlist3
	[ ! -f $WORKDIR/playlist4 ] && echo -n > $WORKDIR/playlist4
	PLAYLIST1234=($(<"$WORKDIR/PLAYLIST1234"))
	cp $WORKDIR/playlist $WORKDIR/"$PLAYLIST1234"
	[ $RADIO_PLAYLIST1 = true ] && cp $WORKDIR/playlist1 $WORKDIR/playlist
	[ $RADIO_PLAYLIST2 = true ] && cp $WORKDIR/playlist2 $WORKDIR/playlist
	[ $RADIO_PLAYLIST3 = true ] && cp $WORKDIR/playlist3 $WORKDIR/playlist
	[ $RADIO_PLAYLIST4 = true ] && cp $WORKDIR/playlist4 $WORKDIR/playlist
	;;
-rename)
	PLAYLIST=($(<"$WORKDIR/PLAYLIST"))
	if [ -z "$PLAYLIST" ] || [ "`echo "$PLAYLIST" | grep "»»» Pmusic «««"`" ]; then
		TXT1="<b>$LOC501</b>"
		. $APPDIR/box_ok
	else
		FILE="`basename "$PLAYLIST" | sed -e 's/\.[^\.]*$//'`"
		EXTENSION="`basename "$PLAYLIST" | sed -e "s/^.*\.//g"`"
		DIR="`dirname "$PLAYLIST"`"
		FRAME="$LOC132"; IMG="convert"; TXT1="$FILE"; DEFAULT="$FILE"
		. $APPDIR/box_input
		if [ $EXIT = "ok" ]; then
			#check if already exist
			if [ -f "$DIR"/"$INPUT"."$EXTENSION" ]; then
				TXT1="$DIR"/"$INPUT"."$EXTENSION $LOC503"
				. $APPDIR/box_ok #error
				exit			
			fi
			#---
			echo > $WORKDIR/error
			mv "$DIR"/"$FILE"."$EXTENSION" "$DIR"/"$INPUT"."$EXTENSION" 2> $WORKDIR/error
			TXT1=($(<"$WORKDIR/error"))
			if [ -n "$TXT1" ]; then
				. $APPDIR/box_ok #error
			else #update playlist
				NAME="`grep -Fm 1 " $PLAYLIST" $WORKDIR/playlist | cut -d'|' -f2`"
				#running sed directly gives problems with special chars
				echo "sed -i -e 's%|$NAME|%|$INPUT|%g' $WORKDIR/playlist" > $WORKDIR/exec3
				echo "sed -i -e 's%$DIR/$FILE.$EXTENSION%$DIR/$INPUT.$EXTENSION%' $WORKDIR/playlist" >> $WORKDIR/exec3
				sed -i 's/\&/\\\&/g' $WORKDIR/exec3
				chmod 777 $WORKDIR/exec3
				$WORKDIR/exec3
			fi
		fi
	fi
	;;
-copy)
	PLAYLIST=($(<"$WORKDIR/PLAYLIST"))
	if [ -z "$PLAYLIST" ] || [ "`echo "$PLAYLIST" | grep "»»» Pmusic «««"`" ]; then
		TXT1="<b>$LOC501</b>"
		. $APPDIR/box_ok
	else
		FRAME="$LOC133"; IMG="copy"; TXT1="$PLAYLIST"; DEFAULT="$PLAYLIST"
		. $APPDIR/box_input
		if [ $EXIT = "ok" ]; then
			echo > $WORKDIR/error
			cp "$PLAYLIST" "$INPUT" 2> $WORKDIR/error
			TXT1=($(<"$WORKDIR/error"))
			[ -n "$TXT1" ] && . $APPDIR/box_ok #error
		fi
	fi
	;;
-delete)
	PLAYLIST=($(<"$WORKDIR/PLAYLIST"))
	if [ -z "$PLAYLIST" ] || [ "`echo "$PLAYLIST" | grep "»»» Pmusic «««"`" ]; then
		TXT1="<b>$LOC501</b>"
		. $APPDIR/box_ok
	else
		FRAME="$LOC134"; IMG="clear"; TXT1="$PLAYLIST"
		. $APPDIR/box_yesno
		if [ $EXIT = "yes" ]; then
			echo > $WORKDIR/error
			rm "$PLAYLIST" 2> $WORKDIR/error
			TXT1=($(<"$WORKDIR/error"))
			if [ -n "$TXT1" ]; then
				. $APPDIR/box_ok #error
			else
				. $APPDIR/func -remove_from_list
			fi
		fi
	fi
	;;
-set_SAVEFILE)
	echo "$CHOOSER" > $WORKDIR/SAVEFILE
	;;
-save)
	export pmusic_save="
	<window title=\"Pmusic - $LOC102\" icon-name=\"gtk-save\">
	 <vbox>
	  <frame $LOC102>
	   <hbox>
	    <text><label>$LOC281</label></text>
	    <entry accept=\"file\" width-request=\"300\">
	     <variable>SAVEFILE</variable>
	     <input>cat $WORKDIR/last_added_playlist</input>
	    </entry>
	    <button>
	     <input file icon=\"gtk-open\"></input>
	     <action type=\"fileselect\">SAVEFILE</action>
	     <action>refresh:SAVEFILE</action>
	    </button>
	   </hbox>
	   <checkbox tooltip-text=\"$LOC283\">
	    <label>$LOC282</label>
	    <variable>SAVE_PATH</variable>
	    <default>true</default>
	   </checkbox>
	   <checkbox tooltip-text=\"$LOC285\">
	    <label>$LOC284</label>
	    <variable>SAVE_BOOKMARK</variable>
	   </checkbox>
	  </frame>
	  <hbox>
	   <button><input file icon=\"gtk-cancel\"></input><label>$LOC_CANCEL</label></button>
	   <button can-default=\"true\" has-default=\"true\" use-stock=\"true\">
	    <input file icon=\"gtk-ok\"></input>
	    <label>$LOC_OK</label>
	    <action type=\"exit\">ok</action>
	   </button>
	  </hbox>
	 </vbox>
	</window>"
#	[ $TOOLTIPS = false ] && pmusic_save="`echo "$pmusic_save" | sed 's%tooltip-text%tooltipXXXtext%g'`" #deactivate tooltips
	I=$IFS; IFS=""
	for STATEMENTS in $($GTKDIALOG -p pmusic_save --center); do
		eval $STATEMENTS
	done
	IFS=$I
	if [ "$EXIT" = "ok" ]; then
		SAVEFILE=`echo "$SAVEFILE" | sed -e "s%\.m3u%%g"` #remove extension if exist.
		if [ -s "$SAVEFILE".m3u ]; then #already exist
			IMG=warning
			FRAME="$LOC_WARNING"
			TXT1="<b>$SAVEFILE.m3u $LOC503</b>"
			TXT2="$LOC504"
			. $APPDIR/box_yesno
			if [ $EXIT = no ]; then 
				echo -n > $WORKDIR/SAVEFILE
			fi
		fi
		if [ "$SAVEFILE" ]; then
			if [ $SAVE_PATH = true ]; then #keep path
				echo "`cut -d '|' -f 3 $WORKDIR/playlist | cut -d ' ' -f 2-`" > "$SAVEFILE".m3u
			else #remove path and numbering
				echo -n > $WORKDIR/tmp
				while read I; do
					TMP="`echo "$I" | cut -d ' ' -f 2-`"
					basename "$TMP" >> $WORKDIR/tmp
				done < $WORKDIR/playlist
				cp $WORKDIR/tmp "$SAVEFILE".m3u
			fi
			echo "$SAVEFILE".m3u > $WORKDIR/last_added_playlist
		fi
		if [ "$SAVE_BOOKMARK" = "true" ]; then
			export SEARCH="$SAVEFILE".m3u
			$APPDIR/func -add_bookmark
		fi
	fi
	;;
-open_all)
	export add_all="
<window title=\"Pmusic\">
 <vbox>
  <frame $LOC230>
   <pixmap icon_size=\"6\"><input file stock=\"gtk-add\"></input></pixmap>
   <text><label>\"\"</label></text>
   <text use-markup=\"true\"><label>\"$LOC516\"</label></text>
   <text><label>\"\"</label></text>
   <checkbox>
    <label>$LOC517</label>
    <variable>ADD_RECURSIVELY</variable>
   </checkbox>
  </frame>
  <hbox>
   <button cancel></button>
   <button can-default=\"true\" has-default=\"true\" use-stock=\"true\">
    <input file icon=\"gtk-apply\"></input>
    <label>$LOC230</label>
    <action type=\"exit\">ok</action>
   </button>
  </hbox>
 </vbox>
</window>"
	I=$IFS; IFS=""
	for STATEMENTS in  $($GTKDIALOG -p add_all --center); do
		eval $STATEMENTS
	done
	IFS=$I
	if [ $EXIT = "ok" ]; then
		if [ $ADD_RECURSIVELY = true ]; then MAXDEPTH=100; else MAXDEPTH=1; fi
		TMP="`cut -b 3- $WORKDIR/filebrowser_dir`"
		find -P "$TMP" -maxdepth $MAXDEPTH -printf "%p\n" | grep -i --extended-regexp "$AUDIO_FORMATS" | sort > $WORKDIR/pmusic.m3u
		INDEX="  $WORKDIR/pmusic.m3u"
		. $APPDIR/func -add
	fi
	;;
-add_random)
	FRAME="$LOC232"; IMG="add"; TXT1="$LOC514"; DEFAULT="1"
	. $APPDIR/box_input
	if [ $EXIT = "ok" ]; then
		COUNT=0
		echo -n > $WORKDIR/pmusic.m3u
		cut -d '|' -f 1 $WORKDIR/browser | cut -c 3- > $WORKDIR/tmp
		LINES=($(<"$WORKDIR/tmp"))
		n=${#LINES[@]}
		while [ $COUNT -lt $INPUT ]; do
			r=$((RANDOM % n))
			echo "${LINES[r]}" >> $WORKDIR/pmusic.m3u
			COUNT=$(($COUNT+1))
		done
		echo 100 > $WORKDIR/splash #reset progress bar
		INDEX="  $WORKDIR/pmusic.m3u"
		ADD_MORE=true #add to tail. This is faster
		. $APPDIR/func -add
	fi
	;;
-add_all)
	if [ "`grep -c '^' $WORKDIR/browser`" -gt 200 ]; then
		IMG=dialog-warning
		FRAME="$LOC_WARNING"
		TXT1="<b>$LOC510</b>"
		TXT2="$LOC511 $TMP $LOC512"
		. $APPDIR/box_yesno
		[ $EXIT = no ] && exit
	fi
	cut -d'|' -f 1 $WORKDIR/browser | cut -c 3- > $WORKDIR/tmp
	echo -n > $WORKDIR/pmusic.m3u
	while read I; do
		echo "$I" >> $WORKDIR/pmusic.m3u
	done < $WORKDIR/tmp
	export INDEX="  $WORKDIR/pmusic.m3u"
	ADD_MORE=true #add to tail. This is faster
	. $APPDIR/func -add
	;;
-add)
	echo $SEARCH > $WORKDIR/filebrowser_dir #override startup setting; show last search in field
	INDEX="`echo "$INDEX" | cut -c 3-`"
	#directory - browse instead of add
	if [ "`file -L "${INDEX}" | grep " directory$"`" ]; then
		. $APPDIR/func -browse
		exit
	fi
	#define input
	case $INDEX in
	index)			$APPDIR/func -update_index;			exit;;
	songs)			$APPDIR/func -index_songs;			exit;;
	collections)	$APPDIR/func -index_playlists;		exit;;
	radio)			$APPDIR/func -radio;				exit;;
	cd_audio)		$APPDIR/func -read_cd;				exit;;
	recent)			$APPDIR/func -index_recent;			exit;;
	most_played)	$APPDIR/func -index_most_played; 	exit;;
	bookmarks)		$APPDIR/func -manage_bookmarks;		exit;;
	null)			exit;;
	file)			INDEX=($(<"$WORKDIR/filebrowser_dir"))
					[ ! "`echo "$INDEX" | grep "^/"`" ] && INDEX=$HOME
					. $APPDIR/func -browse
					exit;;
	radio:*)
		TMP="`echo "$INDEX" | cut -d: -f2`"
		grep "|$TMP"$ $WORKDIR/radio | cut -d'|' -f1-2 > $WORKDIR/browser
		echo 100 > $WORKDIR/load_id3
		;;
	cdda:*)
		echo "$INDEX" > $WORKDIR/songs_in_list
		;;
	*://*) #streaming
		ID3_PLAYLIST=false
		LENGTH='59:59'
		echo "$INDEX" > $WORKDIR/songs_in_list
		;;
	*.m3u*|*.dir*|*.album*)
		echo "$LOC506..." > $WORKDIR/splashtext
		$APPDIR/box_splash_progress &
		echo "$INDEX" > $WORKDIR/last_added_playlist
		grep -v '#EXT' "$INDEX" | sed -e "s%\r%%g" > $WORKDIR/tmp #remove metadata of playlist
		#check if path is valid in playlist
		echo -n > $WORKDIR/songs_in_list
		while read I; do
			case $I in
				cdda:*) #CD-audio
					echo "$I" >> $WORKDIR/songs_in_list
					;;
				*://*) #streaming
					echo "$I" >> $WORKDIR/songs_in_list
					;;
				*/*) #path is defined in playlist
					if [ -s "$I" ]; then #path exist, use path in playlist
						echo "$I" >> $WORKDIR/songs_in_list
					else #Use current dir
						TMP="`dirname "$INDEX"`"
						echo "$TMP/$I" >> $WORKDIR/songs_in_list
					fi;;
				*) #no path for files in list. Use current dir
					TMP="`dirname "$INDEX"`"
					echo "$TMP/$I" >> $WORKDIR/songs_in_list;;
			esac
		done < $WORKDIR/tmp
		;;
	*.pls*) #gxine playlist
		echo "$LOC506..." > $WORKDIR/splashtext
		$APPDIR/box_splash_progress &
		echo "$INDEX" > $WORKDIR/last_added_playlist
		grep 'File' "$INDEX" | cut -d '=' -f 2 > $WORKDIR/songs_in_list #use only FileX=
		;;
	*/*) #single file
		#check for timestamp from bookmark
		TMP="`echo "$INDEX" | grep -E ":??] /"`"
		if [ "$TMP" ]; then
			INDEX="`echo "$TMP" | awk -F '] ' '{print $2}'`"
			TIME="`echo "$TMP" | awk -F '] ' '{print $1}' | cut -d'[' -f2`"
			MIN=`echo $TIME | cut -d':' -f1`
			SEC=`echo $TIME | cut -d':' -f2`
			echo "$[($MIN*60)+$SEC]" > $WORKDIR/SS
			$APPDIR/func_store_playlist
			$APPDIR/func -new
			echo true > $WORKDIR/TIMESTAMP
		fi
		#---
		echo "$INDEX" > $WORKDIR/songs_in_list
		;;
	*) #search string
		SEARCH="$INDEX"
		. $APPDIR/func -search_refresh
		;;
	esac
	#if nothing in playlist, play added song
	[ ! -s $WORKDIR/playlist ] && AUTOPLAY=true 
	#---
	SELECTION=($(<"$WORKDIR/PLAYLIST"))
	COUNT=1
	#add
	while read I; do
		#use metatag or filename in playlist
		if [ "$ID3_PLAYLIST" = "true" ] && [ "`echo "$I" | cut -d'|' -f3`" ]; then
			ID3="`id3info "$I"`"
			ID3_ARTIST="`echo "$ID3" | grep -Fm1 'Lead performer' | cut -d ':' -f 2- | cut -b 2-`"
			ID3_TITLE="`echo "$ID3" | grep -Fm1 'Title' | cut -d ':' -f 2- | cut -b 2-`"
			if [ "$ID3_ARTIST" ] && [ "$ID3_ARTIST" != " " ] && [ "$ID3_ARTIST" != "unknown" ]; then
				NAME="$ID3_ARTIST - $ID3_TITLE"
			else #use filename
				NAME="`basename "$I" | sed -e 's/\.[^\.]*$//'`"
			fi
		else #use filename
			if [ "`echo $I | grep -F '://'`" ] && [ "`grep "$I" $WORKDIR/bookmarks`" ]; then #URL - show title from bookmarks
				NAME="`grep "$I" $WORKDIR/bookmarks | cut -d'|' -f2 | cut -c 5-`"
			elif [ "`echo $I | grep -F '://'`" ] && [ "`grep "$I" $WORKDIR/radio`" ]; then #URL - show title from bookmarks
				NAME="`grep -m1 "$I" $WORKDIR/radio | cut -d'|' -f2`"
			elif [ "`echo $I | grep -F 'cdda:'`" ]; then #CD audio
				TMP="`echo "$I" | cut -d: -f5-`"
				NAME="`basename "$TMP" | sed -e 's/\.[^\.]*$//'`"
			else #use filename/URL
				NAME="`basename "$I" | sed -e 's/\.[^\.]*$//'`"
			fi
		fi
		#convert underscores and %20
		[ $CONVERT_UNDERSCORE = true ] && NAME="`echo "$NAME" | tr '_' ' '`"
		[ $CONVERT_20 = true ] && NAME="`echo "$NAME" | sed 's/%20/ /g'`"
		#define unique songnr (not line number)
		PLAYLIST_NR=($(<"$WORKDIR/PLAYLIST_NR"))
		TMP=$(($PLAYLIST_NR+1))
		echo $TMP > $WORKDIR/PLAYLIST_NR
		case ${#TMP} in
			1) TMP2=00$TMP;; #ensure 3 digits to sort correct
			2) TMP2=0$TMP;;
			3) TMP2=$TMP;;
		esac
		PLAYLIST_NR=$TMP2
		#get length
		if [ "`echo "$I" | grep -F 'cdda:'`" ]; then #cd-audio is read by cdda2wav
			LENGTH="`echo "$I" | cut -d'|' -f1 | cut -d: -f3-4`"
		elif [ ! "`echo "$I" | grep -F '://'`" ]; then #www streams misses length information
			ffmpeg -i "$I" 2> $WORKDIR/tmp1
			grep Duration $WORKDIR/tmp1 | awk '{print $2}' | cut -d"." -f1 > $WORKDIR/tmp2
			if [ "`grep ':' $WORKDIR/tmp2`" ] && [ `cut -d":" -f1 $WORKDIR/tmp2` != 00 ]; then #time is above 59:59
				HOUR=`cut -d":" -f1 $WORKDIR/tmp2 | sed -e "s/^0//"`
				MIN=`cut -d":" -f2 $WORKDIR/tmp2 | sed -e "s/^0//"`
				SEC=`cut -d":" -f3 $WORKDIR/tmp2`
				MIN_HOUR=$(($HOUR*60))
				MIN=$(($MIN_HOUR+$MIN))
				LENGTH="$MIN:$SEC"
			else
				LENGTH=`cut -d":" -f2- $WORKDIR/tmp2`
			fi
		fi
		
		#---
		LINE_SELECTED="`grep "$SELECTION" $WORKDIR/playlist`" 
		NR=`echo "$LINE_SELECTED" | cut -d'|' -f3 | cut -d' ' -f1`
		[ ! "$NR" ] && NR=0
		if [ "$ADD_MORE" != "true" ] && [ "$ADD_TO_TAIL" != "true" ] && [ "$SELECTION" ] && [ $NR -lt `grep -c '^' $WORKDIR/playlist` ]; then #add the song after selection. This is slower, so do not use for multiple adds.
			NR=$(($NR+1))
			LINE_NEW="$LENGTH|$NAME|$PLAYLIST_NR $I"
			#do not add same song twice
			[ "`grep -w --before-context=1 "$LINE_SELECTED" $WORKDIR/playlist | head -n 1 | cut -d '|' -f 2-`" != "`echo $LINE_NEW | cut -d '|' -f 2-`" ] && sed -i $NR\i\\"$LINE_NEW" $WORKDIR/playlist
		else #add at the end of list
			[ ! "`tail -n 1 $WORKDIR/playlist | grep -w "$NAME"`" ] && echo "$LENGTH|$NAME|$PLAYLIST_NR $I" >> $WORKDIR/playlist  #do not add same song twice
		fi
		TMP=`grep -c '^' $WORKDIR/songs_in_list`
		echo $(($COUNT*100/$TMP)) > $WORKDIR/splash #update progressbar
		COUNT=$(($COUNT+1))
	done < $WORKDIR/songs_in_list
	#if nothing was previously in playlist, play added song.
	if [ "$AUTOPLAY" = "true" ]; then
		$APPDIR/func_player -stop
		head -n 1 $WORKDIR/playlist | cut -d '|' -f 3 > $WORKDIR/PLAYLIST
		$APPDIR/func_player -play
	fi
	echo 100 > $WORKDIR/splash #be sure to close progress dialog
	;;
-new)
	echo -n > $WORKDIR/playlist
	echo -n > $WORKDIR/PLAYLIST_PRESS_EVENT
	echo 000 > $WORKDIR/PLAYLIST_NR
	;;
-repeat)
	echo "$REPEAT" > $WORKDIR/REPEAT
	;;
-shuffle)
	echo "$SHUFFLE" > $WORKDIR/SHUFFLE
	;;
-remove_from_list)
	#call from menu shows info-box
	if [ "$2" = "-message" ]; then
		TXT1="$LOC518"; IMG="dialog-info"; FRAME="$LOC_INFO"
		. $APPDIR/box_ok
	fi
	#---
	if [ "$PLAYLIST" ]; then
		grep -vF "$PLAYLIST" $WORKDIR/playlist > $WORKDIR/tmp
		mv -f $WORKDIR/tmp $WORKDIR/playlist
	fi
	;;





	
##############      Search      ################

-search)
	$APPDIR/func -kill_browser_id3 & #kill ongoing process
	kill -9 `ps | grep pmusic | grep search2 | awk '{print $1}'` #kill ongoing search
	case $SEARCH in
		*/*) echo ;;
		*) $APPDIR/func -search2 &;;
	esac
	;;
-search2)
	echo -n "cat $HOME/.pmusic/index_all " > $WORKDIR/tmp
	IFS=" "
	for I in $SEARCH; do
		echo -n "| grep -i $I " >> $WORKDIR/tmp
	done
	echo "> $WORKDIR/browser" >> $WORKDIR/tmp
	chmod 700 $WORKDIR/tmp
	$WORKDIR/tmp #execute
	#refresh browser field only if small amount of hits
	[ `grep -c '^' $WORKDIR/browser` -lt 100 ] && echo 100 > $WORKDIR/load_id3
	;;
-search_refresh) #call from button
	case $SEARCH in
		*http://*)
			INDEX="  $SEARCH"
			. $APPDIR/func -add
			echo > $WORKDIR/refresh_playlist
			;;
		*/*) #if file --> add to playlist
			if [ -f "$SEARCH" ]; then
				INDEX="  $SEARCH"
				. $APPDIR/func -add
				echo > $WORKDIR/refresh_playlist
			else #browse
				INDEX="$SEARCH"
				. $APPDIR/func -browse
			fi
			;;
		*) #search
			#if only one song in list --> add to playlist 
			if [ `wc -l $WORKDIR/browser | awk '{print $1}'` -lt 2 ]; then
				INDEX="`cut -d'|' -f1 $WORKDIR/browser`"
				. $APPDIR/func -add
				echo > $WORKDIR/refresh_playlist
			#else, search
			else
				[ ! -s $HOME/.pmusic/index_alphabetic ] && $APPDIR/func -update_index
				. $APPDIR/func -search
			fi
			;;
	esac
	;;




##############       Misc        #################
-update_index)
	if [ "`cat $WORKDIR/USE_TAGS 2> /dev/null`" = "true" ]; then
		USE_TAGS=true
		VISIBLE_INDEX_CHANGES=enabled
	else
		USE_TAGS=false
		VISIBLE_INDEX_CHANGES=disabled
	fi
	echo 0 > $WORKDIR/index_splash #reset progress bar
	echo ' ' > $WORKDIR/splashtext
	export Pmusic_index="	
<window title=\"Pmusic - $LOC104\"  icon-name=\"gtk-media-stop\">
<vbox>
<text use-markup=\"true\"><label>\"<b>$LOC301</b>\"</label></text>
<notebook labels=\" $LOC314 | $LOC317 | $LOC315 \">
 <vbox>
  <frame $LOC302>
    <tree headers_visible=\"false\">
     <label>a</label>
     <variable>INDEX_SOURCE</variable>
     <input>cat $HOME/.pmusic/index_directories</input>
     <width>250</width><height>150</height>
     <action signal=\"button-release-event\">enable:BUTTON_REMOVE</action>
    </tree>
    <hbox>
     <button>
      <input file icon=\"gtk-add\"></input>
      <action>. $APPDIR/func -add_to_indexlist</action>
      <action>refresh:INDEX_SOURCE</action>
     </button>
     <button>
      <variable>BUTTON_REMOVE</variable>
      <visible>disabled</visible>
      <input file icon=\"gtk-remove\"></input>
      <action>. $APPDIR/func -remove_from_indexlist</action>
      <action>refresh:INDEX_SOURCE</action>
     </button>
   </hbox>
  </frame>
  </vbox>
 <vbox>
  <frame $LOC317>
   <checkbox><label>$LOC265</label><variable>CONV_UNDERSCORE</variable><default>true</default></checkbox>
   <checkbox><label>$LOC266</label><variable>CONV_20</variable><default>true</default></checkbox>
  </frame>
  <frame $LOC303>
   <checkbox>
    <label>$LOC304</label>
    <variable>USE_TAGS</variable>
    <default>$USE_TAGS</default>
    <action>if true enable:INDEX_CHANGES</action>
    <action>if false disable:INDEX_CHANGES</action>
   </checkbox>
   <checkbox>
    <visible>$VISIBLE_INDEX_CHANGES</visible>
    <label>$LOC307</label>
    <variable>INDEX_CHANGES</variable>
   </checkbox>
   <text><label>\"\"</label></text>
   <text><label>$LOC310</label></text>
   <hbox>
    <text>
     <label>$LOC305</label>
    </text>
    <combobox>
     <variable>INDEX_DIR</variable>
     <item>$LOC306</item>
     <item>../$LOC_ARTIST - $LOC_ALBUM/$LOC223</item>
     <item>../$LOC_ARTIST/$LOC_ALBUM/$LOC223</item>
     <item>../$LOC_ARTIST/$LOC223</item>
    </combobox>
   </hbox>
  </frame>
 </vbox>
 <vbox>
  <text><label>\"\"</label></text>
  <hbox height-request=\"20\">
   <text use-markup=\"true\"><label>\"<b>$LOC316 : </b>\"</label></text>
   <text width-request=\"200\"><input>find $HOME/.pmusic/index_alphabetic -printf \"%t\n\"</input></text>
  </hbox>
  <text><label>\"\"</label></text>
  <hbox height-request=\"20\">
   <text use-markup=\"true\"><label>\"<b>$LOC223 : </b>\"</label></text>
   <text width-request=\"200\"><input>\"wc -l $HOME/.pmusic/index_alphabetic | cut -d' ' -f1\"</input></text>
  </hbox>
  <hbox height-request=\"20\">
   <text use-markup=\"true\"><label>\"<b>$LOC224 : </b>\"</label></text>
   <text width-request=\"200\"><input>\"wc -l $HOME/.pmusic/index_playlists |  cut -d' ' -f1\"</input></text>
  </hbox>
 </vbox>
</notebook>
 <hbox>
  <button>
   <input file icon=\"gtk-cancel\"></input>
   <label>$LOC_CANCEL</label>
   <action>echo cancel > $WORKDIR/update_index_cancel</action>
   <action type=\"exit\">cancel</action>
  </button>
  <button can-default=\"true\" has-default=\"true\" use-stock=\"true\">
   <input file icon=\"gtk-apply\"></input>
   <label>$LOC308</label>
   <action>$APPDIR/func_index &</action>
  </button>
 </hbox>
 <progressbar>
  <input>"'while [ "$I" != "100" ]; do I=`cat $WORKDIR/index_splash`; echo $I; cat $WORKDIR/splashtext;  sleep 1; done'"</input>
  <action type=\"exit\">cancel</action>
 </progressbar>
</vbox>
</window>"
	I=$IFS; IFS=""
	for STATEMENTS in  $($GTKDIALOG -p Pmusic_index --center); do
		eval $STATEMENTS
	done
	IFS=$I
	if [ "$EXIT" = "cancel" ]; then
		for I in `ps | grep update_index | awk '{print $1}'`; do kill -9 $I; done
		for I in `ps | grep func_index | awk '{print $1}'`; do kill -9 $I; done
	fi
	;;
-add_to_indexlist)
	GET_OUTDIR="true"; TITLE="- $LOC309"; . $APPDIR/box_chooser
	if [ "$EXIT" = "OK" ]; then
		if [ ! -d "$CHOOSER" ]; then #dir not found
			TXT1="<b>$CHOOSER $LOC507</b>"
			. $APPDIR/box_ok
		else
			echo "$CHOOSER" >> $HOME/.pmusic/index_directories
		fi
	fi
	;;
-remove_from_indexlist)
	grep -vx "$INDEX_SOURCE" $HOME/.pmusic/index_directories > $WORKDIR/tmp
	mv -f $WORKDIR/tmp $HOME/.pmusic/index_directories
	;;
-index_songs)
 	$APPDIR/func -kill_browser_id3 #kill ongoing process
	[ ! -s $HOME/.pmusic/index_alphabetic ] && $APPDIR/func -update_index #there's no index
	cp $HOME/.pmusic/index_alphabetic $WORKDIR/browser
 	echo 100 > $WORKDIR/load_id3
	;;
-index_playlists)
  	$APPDIR/func -kill_browser_id3 #kill ongoing process
	[ ! -s $HOME/.pmusic/index_alphabetic ] && $APPDIR/func -update_index
	cp $HOME/.pmusic/index_playlists $WORKDIR/browser
 	echo 100 > $WORKDIR/load_id3
	;;
-index_recent)
  	$APPDIR/func -kill_browser_id3 #kill ongoing process
	NR=1000
	#reverse list to get last item on top.
	echo -n > $WORKDIR/tmp
	while read I; do
		echo "$NR|$I" >> $WORKDIR/tmp
		NR=$(($NR+1))
	done < $HOME/.pmusic/index_recent
	sort -r $WORKDIR/tmp | cut -d '|' -f 2- > $WORKDIR/browser
	tail -n 1000 $WORKDIR/tmp | cut -d '|' -f 2- > $HOME/.pmusic/index_recent #keep only the last 1000
 	#---
 	echo 100 > $WORKDIR/load_id3
	;;
-index_most_played)
  	$APPDIR/func -kill_browser_id3 #kill ongoing process
	tail -n 1000 $HOME/.pmusic/index_most_played | sort -r > $WORKDIR/tmp
	cut -d '|' -f 2- $WORKDIR/tmp > $WORKDIR/browser
 	echo 100 > $WORKDIR/load_id3
	;;
esac
# Very End of this file 'usr/local/pmusic/func' #
###END###
