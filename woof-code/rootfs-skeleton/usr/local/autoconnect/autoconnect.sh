#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_autoconnect.sh"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/local/autoconnect/autoconnect.sh"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in 1; do shift; done; }

_trap

}
# End new header
#

# $1 // scan_open_networks=yes // everything else: off

# autoconnect by urban soul
AC_VERSION="0.4 2008-04-01"
# Version history: 
# 0.1 orig release 
# 0.2 test ESSID also, generate user skript
# 0.3 set priority by TITLE numbering in /etc/WAG/profile-conf  (change in "main")
# 0.4 try harder (three times) to get scan results; make open networks optional (default = off)

# todo: 
# - autogenerate script for user [done]
### this is a fallback strategy: in case the wizard doesn't succeed, user can edit the generated script.
# - test ESSID also in case profile has no AP_MAC [done]
# - add text2speech fun [done]
# - scan for open networks [done]
# - hotplug action: autoconnect if interface is plugged in
# - set priority for profiles [done] 
# - scan at least 2 times before exit for each found interface
# - make connecting to open networks optional [done]

. /usr/sbin/wag-profiles.sh

#=============================================================================
ipConfig() 
{ 
 dhcpcd -k &> /dev/null 
 rm /etc/dhcpc/dhcpcd-*.pid &> /dev/null
 dhcpcd $INTERFACE
 AC_IP_CONFIG="  
 dhcpcd -k &> /dev/null
 rm /etc/dhcpc/dhcpcd-*.pid &> /dev/null
 dhcpcd $INTERFACE"
} # end ifConfig # to do: test for static IP config 

#=============================================================================
testConfig()
{
 if  ping -c 1 google.com | grep -q "bytes from" ; then ##search positive statement##
 	echo "---------------> connected! <-------------------"
 	samawa "connnected"
 	sleep 4
 	AC_TEST_CONFIG="###configuration successfully testet on $(date +%Y%m%d) ###"
 	return 0
 else 
 	echo "Error: cannot ping google.com." 
 	AC_TEST_CONFIG="###configuration marked as not working on $(date +%Y%m%d) ###"
 	return 1
 fi
} # end testConfig

#=============================================================================
samawa() 
{
 #if [ -e flite ] ; then exec speak $1 ; fi # flite
 if [ -e freetts.jar ] && [ -e java ] ; then exec java -jar freetts.jar -text $1 ; fi # my favourite: sounds real BAAD 
 if [ -e talk ] ; then exec talk $1 ; fi # festival en
 if [ -e speak ] ; then exec speak $1 ; fi # festival de
 # what else?
} # end samawa

#=============================================================================
makeSkript ()
{	
	if [ ! -d /etc/WAG/autoconnect ] ; then mkdir /etc/WAG/autoconnect ; fi
	case ${PROFILE_ENCRYPTION} in
		WPA|WPA2) # urban: make clickable sh file for wpa connection regardless of prior success
			echo -e "#!/bin/sh
 			#generated by autoconnect ver. $VERSION
 			#useScript=no 
 			echo \" $(cat /etc/wpa_supplicant$PROFILE_WPA_TYPE.conf) \" > /tmp/AC
 			wpa_supplicant -i ${INTERFACE} -D ${PROFILE_WPA_DRV} -c /tmp/AC -B
 			$(which wpa_connect.sh) ${INTERFACE} ${PROFILE_WPA_DRV} $PROFILE_WPA_TYPE
 			${AC_IP_CONFIG}
 			${AC_TEST_CONFIG}			
 			" > /etc/WAG/autoconnect/"$PROFILE_TITLE".sh
			;;
		*)	
			echo -e "#!/bin/sh
 			#generated by autoconnect ver. $VERSION
 			#useScript=no 
 			$(cat /tmp/wag-profiles_iwconfig.sh) 
 			${AC_IP_CONFIG}
 			${AC_TEST_CONFIG}
 			" > /etc/WAG/autoconnect/"$PROFILE_TITLE".sh			
			;;		
	esac
	chmod 777 /etc/WAG/autoconnect/"$PROFILE_TITLE".sh
	echo writing file /etc/WAG/autoconnect/$PROFILE_TITLE.sh  
	if [ "$1" -eq "0" ] ; then exit 0 ; fi # testConfig returns "0" if success
} # end makeSkript

#=============================================================================
useThisProfile() 
{
	PROFILE=`grep $TITLE /etc/WAG/profile-conf | cut -d= -f2 | tr -d '"'`
	echo "using profile $PROFILE"
	if grep -q useScript=yes /etc/WAG/autoconnect/"$PROFILE.sh"  
	# user must edit 'no' to 'yes' in order to use custom script 
		then 
			echo "now executing /etc/WAG/autoconnect/"$PROFILE".sh"
			exec /etc/WAG/autoconnect/"$PROFILE".sh # -> use it 
		else
			loadProfileData $PROFILE
			sleep 1
			useProfile
			ipConfig
			testConfig
			makeSkript $?
	fi
} # end useThisProfile

#=============================================================================
getInterface() # use code from net-setup ?!
{
 	sleep 1 	# rt73 needs this 
	if cat /proc/net/wireless | grep -Eo '.+:' | grep -Eoq '[^: ][[:alnum:]]+' ; then 
	INTERFACE=`cat /proc/net/wireless | grep -Eo '.+:' | grep -Eo '[^: ][[:alnum:]]+'`
	echo "$INTERFACE" > /tmp/AC_IF
	echo "found wireless interface $INTERFACE." 
	echo scanning ...
	ifconfig $INTERFACE up  
	else 
	echo "wireless interface NOT FOUND. Please load appropriate driver"
	sleep 10
	exit 2 
	fi	
	sleep 2 
	clear	
} # end getInterface

############
### main ###
############

echo "this is autoconnect version $AC_VERSION"
getInterface	
GREP_SSID="grep -Eo [0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}"

for LOP in 1 2 3 ; do #rescan at least three times... natation looks funny...
echo "`iwlist $INTERFACE scan | grep 'Cell\|ESSID\|Encryption'`" > /tmp/AC_SCANALL
sleep 1 # this is needed for iwlist, rescanning to quickly might crash driver.	

	TITLE_LIST=`cat /etc/WAG/profile-conf | grep -Eo "TITLE[0-9]+" `
	for TITLE in ${TITLE_LIST} ; do
	clear
	cat /tmp/AC_SCANALL | grep -A 2 'Cell' | grep ESSID | grep -Eo '".+"' | tr -d '"' # verbose
	echo --------------------------- 
	ifconfig $INTERFACE up # in case prev. dhcpcd failed
	ONE_SSID=`cat /etc/WAG/profile-conf | grep -A 11 $TITLE | grep AP_MAC | cut -d= -f2 | tr -d '"'` 
	if [ "$ONE_SSID" = "" ]  
	then echo "pass $LOP : check $TITLE -> MAC ADDRESS" #not set... 
	else echo "pass $LOP : check $TITLE -> $ONE_SSID"	
		if grep -q "$ONE_SSID" /tmp/AC_SCANALL # ... test SSID
		then 
		useThisProfile
		fi
	fi
	sleep 1 
	done
		 
	# else test profile-ESSID
	
	for TITLE in ${TITLE_LIST} ; do
	clear
	cat /tmp/AC_SCANALL | grep -A 2 'Cell' | grep ESSID | grep -Eo '".+"' | tr -d '"' # verbose
	ifconfig $INTERFACE up # in case prev. dhcpcd failed
	ONE_ESSID=`cat /etc/WAG/profile-conf | grep -A 4 $TITLE | grep ESSID | cut -d= -f2 | tr -d '"'` 
	echo --------------------------- 
	echo "pass $LOP : check $TITLE -> $ONE_ESSID"	
		if grep -q "$ONE_ESSID" /tmp/AC_SCANALL # ... test ESSID 
		then useThisProfile
		fi
	sleep 1 
	done
	
	# finally look for open networks  
	if [ $1 = "scan_open_networks=yes" ] ; then # make this optional
			CELL_LIST=`cat /tmp/AC_SCANALL | grep -Eo "Cell [0-9]+" | cut -f2 -d " "`
			for CELL in ${CELL_LIST} ; do
			clear
			ifconfig $INTERFACE up # in case prev. dhcpcd failed
			SCAN1=`cat /tmp/AC_SCANALL | grep -A 2 "Cell $CELL" | grep ESSID | grep -Eo '".+"' | tr -d '"'` 
			cat /tmp/AC_SCANALL | grep -A 2 'Cell' | grep ESSID | grep -Eo '".+"' | tr -d '"' # verbose
			echo --------------------------- 
			echo "pass $LOP : scanning for open networks"
				if [ "`cat /tmp/AC_SCANALL | grep -A 2 "Cell $CELL" | grep -Eo "off"`" == "off" ] ; then
				samawa "open network found. E S S I D $SCAN1. trying to connect."
				echo "connecting to open network $SCAN1"		
				iwconfig $INTERFACE essid "$SCAN1"
				iwconfig $INTERFACE mode Managed
				ifconfig $INTERFACE up
				ipConfig
				testConfig	
				fi
			done
	fi
done	
exit 1 
# "0" means we are connected, "1" means we are not connected, "2" means no interface	
# end autoconnect.sh
			

# Very End of this file 'usr/local/autoconnect/autoconnect.sh' #
###END###
