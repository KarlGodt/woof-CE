#!/bin/sh
#Exit from X, will cause return to xwin.

  _TITLE_=pup_wmexit
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Script to handle pup_event_frontend_d, wmexitmode.txt and
kill windowmanager and X"

MY_SELF="$0"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG=""
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
    for i in `seq 1 1 $DO_SHIFT`; do shift; done; }
_trap
}

yaf-splash -bg green "Exiting to prompt now ..." & yPID=$!
sleep 1

echo "exit" > /tmp/wmexitmode.txt
killall pup_event_frontend_d

__old_pup_event__(){  #BEGIN
#/sbin/pup_event_frontend_d will quit if this file exists...
echo -n "exit" > /tmp/wmexitmode.txt

#give time for /sbin/pup_event_frontend_d to quit.
#w478 testing 2.6.18.1 kernel, pup_event_frontend_d did not exit when it
#detected /tmp/wmeximode.txt, but became 'defunct'...
KCNT=0
PSPEFD="`ps -C pup_event_frontend_d | grep 'pup_event_front' | grep -vE 'defunct|grep'`"
#while [ "`pidof pup_event_frontend_d`" != "" ];do
while [ "$PSPEFD" != "" ];do
 sleep 0.5
 KCNT=`expr $KCNT + 1`
 [ $KCNT -gt 60 ] && { _warn "pup_event_frontend_d did not stop"; break; } #30 secs.
 PSPEFD="`ps -C pup_event_frontend_d | grep 'pup_event_front' | grep -vE 'defunct|grep'`"
done
sleep 0.2
}  ###__old_pup_event__(){  #END

_sync

if [ "`pidof xfce4-panel`" != "" ];then
 #killall xfce4-panel
 kill `pidof xfce4-panel`
 exit $?
fi

[ "$*" ] && {
NEXTWM="$*"
}

#w003
#CURRENTWM="`cat /etc/windowmanager`"
_test_frs /etc/windowmanager && read CURRENTWM </etc/windowmanager

if [ "$CURRENTWM" = 'enlightenment_start' ];then
:
_pidof $QUIET tempget && killall tempget
fi

_pidof $QUIET "$CURRENTWM" && kill -9 `pidof "$CURRENTWM"` || kill -9 `pidof $CURRENTWM` 2>$ERR
sleep 1

##exec killall $PREVIOUSWM
##exec killall X
_pidof $QUIET X && killall X     #default is SIGTERM.
sleep 1
exec killall -9 X 1>$OUT 2>$ERR  #make sure X is killed.

###END###
