#!/bin/ash
#Exit from X, will cause return to xwin.

test -f /etc/rc.d/f4puppy5 && . /etc/rc.d/f4puppy5
# BATCHMARKER01 - Marker for Line-Position to bulk insert code into.

pidof -o $$ -o %PPID "${0##*/}" >>$OUT && { echo "$0 already running."; exit 1; }

yaf-splash -timeout 5 -bg green -text "Exiting to prompt now..." &

DISP=${DISPLAY%.*}
#/sbin/pup_event_frontend_d will quit if this file exists...
#echo "exit" > /tmp/wmexitmode.txt
#echo "exit" > /tmp/xwin/wmexitmode.txt     ##+++2011-11-07
echo "exit" > /tmp/xwin/wmexitmode."$DISP" ##+++2015-12-29


#give time for /sbin/pup_event_frontend_d to quit.
#w478 testing 2.6.18.1 kernel, pup_event_frontend_d did not exit when it
#detected /tmp/wmeximode.txt, but became 'defunct'...
echo -n "    ...Waiting for pup_event_frontend_d to stop"
if test -f /var/run/pup_event_frontend_d.pid."$DISP"
then read pupPID </var/run/pup_event_frontend_d.pid."$DISP"
     rm $VERB -f  /var/run/pup_event_frontend_d.pid."$DISP"
fi
  if test "$pupPID"
  then kill -15 $pupPID
  else killall pup_event_frontend_d
  fi
sleep 1

_wait_for_frontend_d(){
KCNT=0
PSPEFD="`_command ps -C pup_event_frontend_d | grep 'pup_event_front' | grep -vE 'ps|defunct|grep'`"
#while [ "`pidof pup_event_frontend_d`" != "" ];do
while [ "$PSPEFD" != "" ];do
 #sleep 0.5
 sleep 1s
 KCNT=`expr $KCNT + 1`
 [ $KCNT -gt 30 ] && break #30 secs.
 PSPEFD="`_command ps -C pup_event_frontend_d | grep 'pup_event_front' | grep -vE 'ps|defunct|grep'`"
 echo -ne "\r $KCNT "
done
sleep 0.2
}

_sync
echo

if [ "`pidof xfce4-panel`" ];then
 #killall xfce4-panel
 kill `pidof xfce4-panel`
 exit $?
fi

#pidof tempget && killall tempget

TTY=`busybox ps -o tty,args | grep "xinit" | grep -w "$DISP" | grep -vE 'grep|ps' | awk '{print $1}' | head -n1`

#w003
#CURRENTWM="`cat /etc/windowmanager`"
#DISP=${DISPLAY%.*}

for i in ".$DISP" ""
do
unset CURRENTWM
test -f /etc/windowmanager$i && read CURRENTWM </etc/windowmanager$i
#test "$CURRENTWM" && kill -9 `pidof "$CURRENTWM"` && break
test "$CURRENTWM" && break
done

case $CURRENTWM in enlightenment_start) CURRENTWM=enlightenment;; esac

busybox ps -o tty,pid,args | grep -w "$CURRENTWM" | grep "^$TTY " | grep -vE 'grep|ps|xwin|xinit'
pidCW=`busybox ps -o tty,pid,args | grep -w "$CURRENTWM" | grep "^$TTY " | grep -vE 'grep|ps|xwin|xinit' | awk '{print $2}'`

for oneP in $pidCW; do kill -15 $oneP; sleep 1; done
##exec killall $CURRENTWM
sleep 1
wait

#FGC=`fgconsole`
#FGC=`busybox ps -o tty,args | grep -w "X" | grep -w "$DISP" | grep -vE 'grep|ps|xinit' | head -n1 | awk '{print $1}'`

_get_current_x(){
test "$DISP" || return 1
#logfile is /tmp/xwin/Xerrs.Xorg.$DISP.log, so not filtering xwin
busybox ps -o pid,args | grep -w 'X' | grep -w "$DISP" | grep -vE 'grep|ps|xinit' >&2
busybox ps -o pid,args | grep -w 'X' | grep -w "$DISP" | grep -vE 'grep|ps|xinit' | awk '{print $1}'
}

curX=`_get_current_x` || _exit 1 "_get_current_x returned non-zero"

if test "$curX"; then
kill -15 `_get_current_x`
else
#assume xinit has killed X when .xinitrc ends by killing windowmanager
##exec killall X
#killall X #default is SIGTERM.
sleep 1
#exec killall -9 X #make sure X is killed.
fi

