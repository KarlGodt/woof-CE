#!/bin/sh
# FFConvert - a frontend of ffmpeg
# 20 Jul 2010 by shinobar <shino@pos.to>
VERSION="1.0"
CREDIT="FFConvert v.$VERSION"
TITLE=$CREDIT
SOURCEFILE=""
[ "$1" ] && [ -f "$1" ] && SOURCEFILE="$1"
# additional options
DEFVPREFIRST="fastfirstpass"
DEFVPREFINAL="hq"
ADDOPTIONS=""
X264OPTIONS="-threads 0"
CONFFILE="$HOME/.config/ffconvert/ffconvert.rc"
DATADIR="/usr/share"
PRESETFILE="$DATADIR/ffconvert/preset"
PRESETDIR="$DATADIR/ffconvert/preset.d"
USERPRESETDIR="$HOME/.config/ffconvert/presets"
ICONS="/usr/local/lib/X11/mini-icons"
ONLINEDOC="http://ffmpeg.org/ffmpeg-doc.html"
TEXTVIEWER="defaulttextviewer"
#PLAYER="defaultmediaplayer"
for P in defaultmediaplayer ffplay mplayer gxine; do
  which "$P" &>/dev/null && PLAYER=$P && break
done
#which ffplay &>/dev/null && PLAYER="ffplay"
if [ "$BROWSER" = "" ];then
  for P in defaultbrowser defaulthtmlviewer firefox google-chrome seamonkey gtkmoz; do
    which "$P" &>/dev/null && BROWSER=$P && break
  done
fi
MYNAME=$(basename $0)
export TEXTDOMAIN=$MYNAME
export DIALOG
waitsplash() {
  [ "$XPID" != "" ] && kill $XPID >/dev/null 2>&1
  XPID=""
  #LANG=$LANGORG	# recover lang environment
  [ "$1" = "start" -o "$1" = "progress" ] || return
  PBAR=""
  if [ "$1" = "progress" ]; then
    PBAR="<progressbar>
      <input>while [ -f $COUNTFILE ]; do tail -n 1 $COUNTFILE; sleep 1; done</input>
     </progressbar>"
  fi
  shift	# remove $1
  S=$(gettext "Wait a moment ...")
  [ "$*" ] && S="$*\\n$S"
  DIALOG="<window title=\"$TITLE\" $TITLEICON><vbox>
  <hbox>
  <pixmap><input file>$ICONS/mini-clock.xpm</input></pixmap>
  <text><input>echo -e -n \"$S\"</input></text>
  </hbox>
  $PBAR
  </vbox></window>"
  gtkdialog3 -p DIALOG  >/dev/null &
  XPID=$!
  #LANG=C	# to be faster
}

errmsg () {
  #echo $0 $@ >&2
  [ "$XPID" != "" ] && kill $XPID >/dev/null 2>&1
  MARK="error"
  TIMEOUT=0
  BUTTONS="<hbox>$EXTRABUTTON<button ok></button></hbox>"
  case "$1" in
   error)  MARK="error";shift;;
   warning) MARK="warning";shift;;
   info) MARK="info";shift;;
   yesno) MARK="question";shift
		[ "$YESLABEL" ] || YESLABEL=$(gettext "Yes")
		[ "$NOLABEL" ] || NOLABEL=$(gettext "No")
		[ "$YESSYMBOL" ] || YESSYMBOL="gtk-yes"
		[ "$NOSYMBOL" ] || NOSYMBOL="gtk-no"
		BUTTONS="<hbox>
    <button><label>$YESLABEL</label><input file stock=\"$YESSYMBOL\"></input><action>EXIT:Yes</action></button>
    $EXTRABUTTON
	<button><label>$NOLABEL</label><input file stock=\"$NOSYMBOL\"></input><action>EXIT:No</action></button></hbox>"
		;;
   timeout) MARK="info";shift
            if echo "$1" | grep -q '^[0-9][0-9]*$'; then
              TIMEOUT=$1; shift
            else
              TIMEOUT=10
            fi
            [ $TIMEOUT -lt 5 ] && BUTTONS=""
            ;;
  esac
  ERRMSG="$*"
  [ "$ERRMSG" = "" ] && ERRMSG=$(gettext "An error occured")
  DIALOG="<window title=\"$TITLE\" $TITLEICON><vbox>
    <hbox>
    <pixmap  icon_size=\"5\"><input file stock=\"gtk-dialog-$MARK\"></input></pixmap>
    <text><input>echo -e -n \"$ERRMSG\"</input></text>
    </hbox>
	$BUTTONS
	</vbox></window>"
  if [ $TIMEOUT -eq 0 ]; then
   gtkdialog3 -p DIALOG
   return
  else
   gtkdialog3 -p DIALOG  >/dev/null &
   XPID=$!
   for I in $(seq 1 $TIMEOUT);do
     # 28feb10 to see exact PID
     ps | grep -qw "^[[:blank:]]*$XPID" || break
     sleep 1
   done
   [ "$XPID" != "" ] && kill $XPID && XPID=""
  fi
}

waitsplash start $(printf "$(gettext 'Launching %s')" "$CREDIT")

# check ffmpeg ability
FALL=$(ffmpeg -formats 2>/dev/null)
N1=$(echo "$FALL"|cat -n| grep 'Codecs:'|cut -f1| tr -dc '[0-9]')
N2=$(echo "$FALL"|cat -n| grep 'Supported file protocols:'|cut -f1| tr -dc [0-9])
if [ "$N1" ]; then
  FORMATS=$(echo "$FALL"| head -n $(($N1 - 1))| grep '^[ D]*E'|sed -e 's/^[ A-Z]*[ ]//' |cut -d ' ' -f1)
  if [ "$N2" ]; then
    CODECS=$(echo "$FALL"| head -n $(($N2 - 1))|tail -n $(($N2 - $N1)))
  fi
else
  FORMATS=$(echo "$FALL"| grep '^[ D]*E'|sed -e 's/^[ A-Z]*[ ]*//' |cut -d ' ' -f1)
  CODECS=$(ffmpeg -codecs 2>/dev/null)
fi
VCODECS=$(echo "$CODECS"|grep '^[ D]*EV'|sed -e 's/^[ A-Z]*[ ]*//' |cut -d ' ' -f1)
ACODECS=$(echo "$CODECS"|grep '^[ D]*EA'|sed -e 's/^[ A-Z]*[ ]*//' |cut -d ' ' -f1)
#echo "$FORMATS" >&2
#echo "$CODECS" >&2
H264=$(echo "$VCODECS" | grep 'libx264')
AAC=$(echo "$ACODECS" | grep 'libfaac')
MP3=$(echo "$ACODECS" | grep 'libmp3lame')
CUSTOM=$(gettext 'Custom'|tr ' ' '@')
COPY=$(gettext 'Copy'|tr ' ' '@')
NONE=$(gettext 'None'|tr ' ' '@')
SAME=$(gettext 'Same as source'|tr ' ' '@')
NOSPEC=$(gettext 'Not specify'|tr ' ' '@')
MONO=$(gettext 'mono')
STEREO=$(gettext 'stereo')
#[ "$DEFDIR" ] && DEFAULTDIR="<default>$DEFDIR</default>" || DEFAULTDIR=""
#[ "$DEFOPTIONS" ] && DEFAULTOPTIONS="<default>$DEFOPTIONS</default>" || DEFAULTOPTIONS=""

# load conf
[ -f "$CONFFILE" ] && source "$CONFFILE"
DEFPRESET=$(echo "$DEFPRESET"|tr '_ ' '@')
[ "$DEFPRESET" ] || DEFPRESET="@"
DEFVCODEC=$(echo "$DEFVCODEC"|tr ' ' '@')
DEFQUALITY=$(echo "$DEFQUALITY"|tr ' ' '@')
DEFVBITRATE=$(echo "$DEFVBITRATE"|tr ' ' '@')
DEFSCREEN=$(echo "$DEFSCREEN"|tr ' ' '@')
DEFASPECT=$(echo "$DEFASPECT"|tr ' ' '@')
DEFFRAMERATE=$(echo "$DEFFRAMERATE"|tr ' ' '@')
DEFACODEC=$(echo "$DEFACODEC"|tr ' ' '@')
DEFSAMPLEING=$(echo "$DEFSAMPLEING"|tr ' ' '@')
DEFCHANNEL=$(echo "$DEFCHANNEL"|tr ' ' '@')

EXTRABUTTON=""
#THUMBNAILSIZE="128x96"	### enable thumbnail
THUMBNAILPOS=10
THUMBNAIL="/tmp/${MYNAME}_thumbnail.png"
MAKETHUMB="ffmpeg -i \$FILE1 -vcodec png -s $THUMBNAILSIZE -ss $THUMBNAILPOS -dframes 1 -an $THUMBNAIL &>/dev/null;"
SHOWTHUMB="<pixmap><input file>$THUMBNAIL</input></pixmap>"
if [ "$THUMBNAILSIZE" = "" ]; then
  MAKETHUMB=""
  SHOWTHUMB=""
fi
export INFO_DIALOG="<window title=\"$TITLE $(gettext 'Source')\"><vbox>
$SHOWTHUMB
<text><input>ffmpeg -i  \"\$FILE1\" 2>&1 |grep -E '(#|Duration)' || echo \$(printf \"\$(gettext 'No video nor audio stream in %s.')\" \"\$FILE1\")</input></text>
<hbox><button ok></button></hbox></vbox></window>"


# presets
[ -d "$PRESETDIR" ] && PRESETS=$(cd "$PRESETDIR";ls|tr '_ ' '@') || PRESETS=""
PRESETS2=$(cat "$PRESETFILE"| cut -d',' -f1|tr ' ' '@')
if [ "$PRESETS2" ]; then
  PRESETS="$PRESETS
$PRESETS2"
fi
USERPRESETS=""
#[ -d "$USERPRESETDIR" ] && USERPRESETS=$(cd "$USERPRESETDIR";ls|tr '_ ' '@') || USERPRESETS=""
#[ "$DEFPRESET" ] || DEFPRESET="@"
#PRESETCOMBO=$(make_combo $DEFPRESET $USERPRESETS $PRESETS)
user_presets() {
 [ -d "$USERPRESETDIR" ] && (cd "$USERPRESETDIR";ls|tr '_ ' '@')
}
make_dialog2() {
  IMVISIBLE="<visible>disabled</visible>"
  [ -e "$SOURCEFILE" ] && IMVISIBLE="" 
 # user presets
 USERPRESETS=$(user_presets)
 echo "<window title=\"$CREDIT\" icon-name=\"gtk-convert\">
<vbox>
  <hbox>
	<text><label>$(gettext 'Source file')</label></text>
      <entry tooltip-text=\"$(gettext 'Type or drag the source video file here.')\" editable=\"true\" accept=\"filename\">
        <variable>FILE1</variable>
        $(make_default \"$SOURCEFILE\")
        <action>enable:INFO_BUTTON</action>
        <action>enable:PLAY_BUTTON</action>
        <action>enable:CONVERT_BUTTON</action>
      </entry>
      <button tooltip-text=\"$(gettext 'Browse and select the source video file.')\">
        <input file stock=\"gtk-open\"></input>
        <variable>FILE_BROWSE_FILENAME</variable>
		<action type=\"fileselect\">FILE1</action>
      </button>
      <button tooltip-text=\"$(gettext 'Property of the source video file.')\" >
        <label>$(gettext 'Info.')</label><input file stock=\"gtk-info\"></input>
        <variable>INFO_BUTTON</variable>$IMVISIBLE
        <action>[ \"\$FILE1\" ] && ($MAKETHUMB gtkdialog3 -p INFO_DIALOG >/dev/null &)</action>
      </button>
      <button tooltip-text=\"$(gettext 'Play back the source video file.')\" >
        <label>$(gettext 'Play')</label><input file stock=\"gtk-media-play\"></input>
        <variable>PLAY_BUTTON</variable>$IMVISIBLE
        <action>[ \"\$FILE1\" ] && $PLAYER \$FILE1 &>/dev/null &</action>
      </button>
   </hbox>
   <hbox>
   <checkbox tooltip-text=\"$(gettext 'Tik if you want to convert all files with same extention in the same directory.')\" >
   <variable>WHOLEDIR1</variable>
   <label>$(gettext 'All files in the same directory')</label>
   $(make_default \"$DEFWHOLEDIR\")
   </checkbox>
   <checkbox tooltip-text=\"$(gettext 'Tik to overwrite the destination files if they are exist.')\" >
   <variable>OVERWRITE1</variable>
   <label>$(gettext 'Overwrite files')</label>
   $(make_default \"$DEFOVERWRITE\")
   </checkbox>
   </hbox>
   <hbox>
	<text><label>$(gettext 'Dest. dir.')</label></text>
      <entry tooltip-text=\"$(gettext 'Type or select the destination directory here.')\" editable=\"true\" accept=\"directory\">
        <variable>DIR1</variable>
		$(make_default \"$DEFDIR\")
      </entry>
      <button tooltip-text=\"$(gettext 'Browse and select the destination directory.')\">
        <input file stock=\"gtk-directory\"></input>
        <variable>FILE_BROWSE_DIRECTORY</variable>
        <action type=\"fileselect\">DIR1</action>
      </button>
   </hbox>
   <hbox>
      <text><label>$(gettext 'Preset')</label></text>
      <combobox tooltip-text=\"$(gettext 'Select preset options.')\"  width-request=\"320\">
        <variable>PRESET1</variable>
        $(make_combo $DEFPRESET $USERPRESETS $PRESETS)
      </combobox>
      <button tooltip-text=\"$(gettext 'Load preset options.')\">
        <input file stock=\"gtk-apply\"></input>
        <label>$(gettext 'Load')</label>
        <variable>PRESET_BUTTON</variable>
		<action>EXIT:Preset</action>
      </button>
      <button tooltip-text=\"$(gettext 'Save preset options.')\">
        <input file stock=\"gtk-save-as\"></input>
        <label>$(gettext 'Save')</label>
        <variable>SAVE_BUTTON</variable>
		<action>EXIT:Save</action>
      </button></hbox>

<hbox>"
if [ "$VDISABLE" = "" ]; then
  echo "<frame $(gettext 'Video')>
<hbox>
<text><label>$(gettext 'Codec')</label></text>
<combobox>
<variable>VCODEC1</variable>
$(make_combo - $DEFVCODEC $COPY $NONE $H264 mpeg4 $VCODECS)
$VVISIBLE
</combobox>
</hbox>
<hbox>
<text><label>$(gettext 'Quality')</label></text>
<combobox>
<variable>QUALITY1</variable>
$(make_combo - $DEFQUALITY $SAME $NOSPEC  $(seq 2 1 31))
</combobox>
</hbox>
<hbox>
<text><label>$(gettext 'Bitrate') (kbps)</label></text>
<combobox>
<variable>VBITRATE1</variable>
$(make_combo - $DEFVBITRATE 200 500 1000 1150 $(seq 1500 500 8000) $(seq 10000 2000 20000))
</combobox>
</hbox>
<hbox>
<text><label>$(gettext 'Screen size')</label></text>
<combobox>
<variable>SCREEN1</variable>
$(make_combo - $DEFSCREEN $SAME 128x96 160x120 176x144 320x200 320x240 320x480 352x240 352x288 352x480 352x576 640x350 640x480 704x576 720x360 720x480 720x576 800x600 852x480 1024x768 1280x720 1280x1024 1366x768 1600x1024 1600x1200 1920x1080 1920x1200 2048x1536 2560x1600 2560x2048 3200x2048 3840x2400 5120x4096 6400x4096 7680x4800)
</combobox>
</hbox>
<hbox>
<text><label>$(gettext 'Aspect')</label></text>
<combobox>
<variable>ASPECT1</variable>
$(make_combo - $DEFASPECT $NOSPEC 4:3 16:9)
</combobox>
</hbox>
<hbox>
<text><label>$(gettext 'Frame rate')(fps)</label></text>
<combobox>
<variable>FRAMERATE1</variable>
$(make_combo - $DEFFRAMERATE $SAME 15 24 25 29.97 30 59.94)
</combobox>
</hbox>
<hbox>
	<text><label>$(gettext 'Adv. options')</label></text>
      <entry tooltip-text=\"$(gettext 'Type additional options for video codec here.')\" editable=\"true\">
        <variable>VOPTIONS1</variable>
        $(make_default $DEFVOPTIONS)
      </entry>
   </hbox>
</frame>"
fi
echo "<vbox>
<frame $(gettext 'Audio')>"
if [ "$ADISABLE" = "" ]; then
  echo "<hbox>
<text><label>$(gettext 'Codec')</label></text>
<combobox>
<variable>ACODEC1</variable>
$(make_combo - $DEFACODEC $COPY $NONE $AAC $MP3 mp2 $ACODECS)
$AVISIBLE
</combobox>
</hbox>
<hbox>
<text><label>$(gettext 'Bitrate')(kbps)</label></text>
<combobox>
<variable>ABITRATE1</variable>
$(make_combo $DEFABITRATE 64 96 128 192 224 256 384 448)
</combobox>
</hbox>
<hbox>
<text><label>$(gettext 'Sampling')(Hz)</label></text>
<combobox>
<variable>SAMPLING1</variable>
$(make_combo $DEFSAMPLING $SAME 44100 48000)
</combobox>
</hbox>
<hbox>
	<text><label>$(gettext 'Channels')</label></text>
      <combobox tooltip-text=\"$(gettext 'Select the number of audio channel.')\" editable=\"true\">
        <variable>CHANNEL1</variable>
        $(make_combo $DEFCHANNEL $SAME $MONO $STEREO)
      </combobox>
   </hbox>
   <hbox>
	<text><label>$(gettext 'Adv. options')</label></text>
      <entry tooltip-text=\"$(gettext 'Type additional options for audio codec here.')\" editable=\"true\">
        <variable>AOPTIONS1</variable>
        $(make_default $DEFAOPTIONS)
      </entry>
   </hbox>"
else
  echo "<text><input>echo -en \"$(gettext 'No audio stream')\"</input></text>"
fi
echo "</frame>
<hbox><text><label>$(gettext 'File format')</label></text>
<combobox tooltip-text=\"$(gettext 'Select the target file format.')\" >
<variable>FORMAT1</variable>
$(make_combo - $DEFFORMAT avi mpeg mp3 mp4 $FORMATS)
</combobox>
</hbox>
<hbox>
<text><label>$(gettext 'Processing')</label></text>
<combobox tooltip-text=\"$(gettext '1-pass for quick, 2-pass for slow but high quality.')\">
<variable>PASS1</variable>
$(make_combo - $DEFPASS 2-pass 1-pass)
</combobox>
</hbox>
</vbox>
</hbox>

<hbox>
    <button>
        <label>$(gettext 'Convert')</label><input file stock=\"gtk-convert\"></input>
        <variable>CONVERT_BUTTON</variable>$IMVISIBLE
        <action>EXIT:OK</action>
    </button>
    <button tooltip-text=\"$(gettext 'Browse the ffmpeg document on the internet.')\">
        <input file stock=\"gtk-help\"></input>
		<action>$BROWSER $ONLINEDOC &>/dev/null &</action>
    </button>
    <button><label>$(gettext 'Quit')</label><input file stock=\"gtk-quit\"></input><action>EXIT:Abort</action></button>
</hbox>
</vbox>
</window>"
}
make_combo() {
	LANG=C	# for speed up
  ADDNULL=""
  [ "$1" = '-' ] && ADDNULL="yes" && shift
  CHOICE=""
  LIST="$@"
  [ "$ADDNULL" = "" ] || echo "$@" | grep -q "$NULL" || LIST="$@ $NULL"
for ONEITEM in $LIST;do
  NEWITEM=$(echo $ONEITEM|tr '@' ' ')
  echo "$CHOICE" | grep -q "<item>$NEWITEM</item>" && continue
  CHOICE="$CHOICE
  <item>$NEWITEM</item>"
done
  echo "$CHOICE"
}
make_default() {
	P="$@";# echo $P >&2
	[ "$P" != "" -a "$P" != '""'  ] || return
	echo -n "<default>$P</default>"
}

load_preset() {
    # load preset
    PRESETLINE=""
    if [ "$PRESET1" ]; then
      F=$(echo "$PRESET1"| tr '@ /' '_')
      for D in "$USERPRESETDIR" "$PRESETDIR"; do
         [ -f "$D/$F" ] && PRESETLINE=$(grep -v '^#' $D/$F| head -n 1) && break
      done
      if [ "$PRESETLINE" = "" -a -f  "$PRESETFILE" ]; then
         PRESETLINE=$(grep "^$PRESET1[, ]" "$PRESETFILE"| cut -d',' -f2)
      fi
    fi
    if [ "$PRESETLINE" ]; then
       opt2defvar $PRESETLINE
       DEFPRESET=$(echo "$PRESET1"| tr ' ' '@')
       return 0
    else
      errmsg $(gettext 'No preset found.')
      return 1
    fi
}
# save new preset
save_preset() {
      NEWPRESET=$(echo "$PRESET1"| tr '_ ' '@')
      USERPRESETS=$(user_presets) 
      [ "$USERPRESETS" ] && echo "$USERPRESETS"| grep -qx "$NEWPRESET" && DUPE="yes" || DUPE=""
      NEWPRESET=$(echo "$NEWPRESET"|tr '@_' ' ')
      MSG=$(gettext 'Save as the new preset?')
      [ "$DUPE" ] && MSG=$(gettext 'Same name already exists.\nReplace the preset?')
      MAIN_DIALOG="<window title=\"$CREDIT\" icon-name=\"gtk-save-as\"><vbox>
    <hbox>
    <text><label>$(gettext 'Preset name')</label></text>
    <entry tooltip-text=\"$(gettext 'Type new preset name to save.')\">
    <variable>NEWPRESET1</variable>
    $(make_default \"$NEWPRESET\")
    </entry>
    </hbox>
    <text><input>echo -en \"$MSG\"</input></text>
    <hbox>
    <button ok></button>
    <button cancel></button>
    </hbox>
    </vbox></window>"
    eval $(gtkdialog3)
    [ "$EXIT" = "OK" ] || return
    var2opt
    F=$(echo "$NEWPRESET1"| tr '@ /' '_')
    PRESET1=$(echo "$F"| tr '_' ' ')
    if [ "$USERPRESETDIR" ]; then
      mkdir -p "$USERPRESETDIR"
      F="$USERPRESETDIR/$F"
    fi
    echo -n "$OPTSAVE" > $F
}
source_property() {
  SRCINFO=$(ffmpeg -i "$FILE1" 2>&1 |grep -E '(#|Duration)')
  VSTREAM=$(echo "$SRCINFO"|grep 'Stream .*Video')
  ASTREAM=$(echo "$SRCINFO"|grep 'Stream .*Audio')
  if [ "$VSTREAM" = "" -a "$ASTREAM" = "" ]; then
    [ "$1" = "skip" ] || errmsg $(printf "$(gettext 'No video nor audio stream in %s.')" "$FILE1")
    return 1
  fi
  [ "$VSTREAM" ] && NOVIDEO="" || NOVIDEO="true"
  [ "$ASTREAM" ] && NOAUDIO="" || NOAUDIOO="true"
  #[ "$NOVIDEO" ] && DEFVCODEC="$NONE" && VCODEC1="$NONE"
  #[ "$NOAUDIO" ] && DEFACODEC="$NONE" && ACODEC1="$NONE"
  return 0
}
target2defvar() {
 	case "$1" in
	*vcd) DEFFORMAT=mpeg
	    DEFVCODEC=mpeg1video
	    DEFVBITRATE=1150
	    DEFACODEC=mp2
	    DEFABITRATE=224
	    DEFSAMPLING=44100
	    CHANNEL=2
	    DEFSCREEN=352x240
	    DEFFRAMERATE=29.97
		;;
	*dvd)  DEFFORMAT=mpeg
	    DEFVCODEC=mpeg2video
	    DEFVBITRATE=6000
	    DEFACODEC=ac3
	    DEFABITRATE=448
	    DEFSAMPLING=48000
	    CHANNEL=2
	    DEFSCREEN=720x480
	    DEFFRAMERATE=29.97
		;;
	esac 
	case "$1" in
	pal-vcd) DEFSCREEN=352x288
	    DEFFRAMERATE=25
		;;
	pal-dvd) DEFSCREEN=720x576
	    DEFFRAMERATE=25
		;;
	esac
  case "$CHANNEL" in
  1) DEFCHANNEL=$MONO;;
  2) DEFCHANNEL=$STEREO;;
  *) DEFCHANNEL=$CHANNEL;;
  esac
}
opt2defvar() {
  [ $# -gt 0 ] || return
  DEFVOPTIONS=""
  DEFAOPTIONS=""
  VAFLAG="V"
  VDISABLE=""
  ADISABLE=""
  #[ "$VDISABLE" ] && VAFLAG="A"
  #[ "$ADISABLE" ] && VAFLAG="V"
  while [ $# -gt 0 ]; do
    case "$1" in
    -f) shift; DEFFORMAT=$1;;
    -target) shift; target2defvar "$1";;
    -vcodec) shift; DEFVCODEC=$1;;
    -acodec) shift; DEFACODEC=$1;;
    -vn) VAFALG="A";DEFVCODEC=$NONE;VDISABLE="true";;
    -an) VAFLAG="V";DEFACODEC=$NONE;ADISABLE="true";;
    -qscale) shift; DEFQUALITY=$1;;
    -sameq) DEFQUALITY=$SAME;;
    -b) shift; DEFVBITRATE=$(echo "$1"|tr -dc '0-9');;
    -s) shift; DEFSCREEN=$1;;
    -r) shift; DEFFRAMERATE=$(echo "$1"|tr -dc '0-9.');;
    -ab) shift; DEFABITRATE=$(echo "$1"|tr -dc '0-9');;
    -ar) shift; DEFSAMPLING=$(echo "$1"|tr -dc '0-9');;
    -ac) shift; CHANNEL=$1;;
    -aspect)  shift;DEFASPECT=$(echo "$1"|tr -dc '0-9.:');;
    -aframes|-aq|-alang|-atag|-absf) DEFAOPTIONS="$DEFAOPTIONS $1 $2";shift;;
    -newaudio) DEFAOPTIONS="$DEFAOPTIONS $1";;
    *) [ "$VAFLAG" = "V" ] && DEFVOPTIONS="$DEFVOPTIONS $1" ||  DEFAOPTIONS="$DEFAOPTIONS $1"
		;;
    esac
    shift
  done
  case "$CHANNEL" in
  1) DEFCHANNEL=$MONO;;
  2) DEFCHANNEL=$STEREO;;
  *) DEFCHANNEL=$CHANNEL;;
  esac
}
var2opt() {
PASS=$(echo $PASS1 |tr -dc '1-2')
case "$ACODEC1" in
"$COPY") AOPTIONS="-acodec copy";;
"$NONE") AOPTIONS="-an";;
*) AB=$(echo $ABITRATE1 |tr -dc '0-9.')
	[ "$AB" ] && AB="-ab ${AB}k"
	AR=$(echo "$SAMPLING1"| tr -dc '0-9.k')
	[ "$AR" ] && AR="-ar $AR"
	[ "$SAMPLING1" = "$COPY" ] && AR=""
	case $(echo "$CHANNEL1"|tr ' ' '@') in
	$MONO) AC="-ac 1";;
	$STEREO) AC="-ac 2";;
	*) AC=$(echo "$CHANNEL1"| tr -dc '0-9')
	  [ "$AC" ] && AC="-ac $AC"
		;;
	esac
	[ "$CHANNEL" ] && AC="-ac $CHANNEL"
	[ "$CHANNEL" = "$COPY" ] && AC=""
	AOPTIONS="-acodec $ACODEC1 $AB $AR $AC $AOPTIONS1"
	;;
esac
case "$VCODEC1" in
"$COPY") PASS=1; VOPTIONS="-vcodec copy";;
"$NONE") PASS=1; VOPTIONS="-vn";;
*)  VB=$(echo $VBITRATE1 |tr -cd '[0-9.]')
	[ "$VB" ] && VB="-b ${VB}k"
	Q=$(echo $QUALITY1|tr -cd '[0-9.]')
	if [ "$Q" ]; then
		Q="-qscale  $Q"
	else
		[ "$VB" ] || Q="-sameq"
	fi
	S=$(echo $SCREEN1|tr -cd '[0-9x]')
	[ "$S" ] && S="-s $S"
	A=$(echo $ASPECT1|tr -cd '[0-9.:]')
	[ "$A" ] && A="-aspect $A"
	R=$(echo $FRAMERATE1|tr -cd '[0-9.]')
	[ "$R" ] && R="-r $R"
    [ "$VCODEC1" = "libx264" ] &&  ADDOPTIONS="$ADDOPTIONS $X264OPTIONS"
	for D in $HOME/.ffmpeg /usr/share/ffmpeg ; do
		FOUND="yes"
		[ -f $D/$VCODEC1-$DEFVPREFIRST.ffpreset ] && break
		FOUND=""
	done
	[ "$FOUND" ] && VPREFIRST="-vpre $DEFVPREFIRST" || VPREFIRST=""
	for D in $HOME/.ffmpeg /usr/share/ffmpeg ; do
		FOUND="yes"
		[ -f $D/$VCODEC1-$DEFVPREFINAL.ffpreset ] && break
		FOUND=""
	done
	[ "$FOUND" ] && VPREFINAL="-vpre $DEFVPREFINAL" || VPREFINAL=""
	VOPT="$Q $VB $S $A $R $VOPTIONS1"
	VOPTFIRST="-vcodec $VCODEC1 $VPREFIRST $ADDOPTIONS $VOPT -an"
	VOPTFINAL="-vcodec $VCODEC1 $VPREFINAL $ADDOPTIONS $VOPT"
	VOPTIONS="-vcodec $VCODEC1 $VOPT"
 	;;
esac
OPTFIRST="-i \"$FILE1\" -y -f $FORMAT1 $VOPTFIRST -an /dev/null "
OPTFINAL="-i \"$FILE1\" -y -f $FORMAT1 $VOPTFINAL $AOPTIONS \"$DESTFILE\""
OPTSAVE="-f $FORMAT1 $VOPTIONS $AOPTIONS"
}
var2def() {
#THUMBNAILSIZE="128x96"
DEFDIR="$DIR1"
DEFPRESET=$(echo "$PRESET1"| tr ' ' '@')
DEFFORMAT="$FORMAT1"
DEFVCODEC="$VCODEC1"
#DEFVPREFIRST="$DEFVPREFIRST"
#DEFVPREFINAL="$DEFVPREFINAL"
#ADDOPTIONS="$ADDOPTIONS"
#X264OPTIONS="$X264OPTIONS"
DEFQUALITY="$QUALITY1"
DEFVBITRATE="$VBITRATE1"
DEFSCREEN="$SCREEN1"
DEFASPECT="$ASPECT1"
DEFFRAMERATE="$FRAMERATE1"
DEFVOPTIONS="$VOPTIONS1"
DEFACODEC="$ACODEC1"
DEFABITRATE="$ABITRATE1"
DEFSAMPLEING="$SAMPLING1"
DEFCHANNEL="$CHANNEL1"
DEFAOPTIONS="$AOPTIONS1"
DEFPASS="$PASS1"
}
# save conf
save_conf() {
  mkdir -p $(dirname "$CONFFILE")
  cat <<EOF > "$CONFFILE"
#THUMBNAILSIZE="128x96"
#DEFWHOLEDIR="$WHOLEDIR1"
#DEFOVERWRITE="$OVERWRITE1"
DEFDIR="$DIR1"
DEFPRESET="$PRESET1"
DEFFORMAT="$FORMAT1"
DEFVCODEC="$VCODEC1"
#DEFVPREFIRST="$DEFVPREFIRST"
#DEFVPREFINAL="$DEFVPREFINAL"
#ADDOPTIONS="$ADDOPTIONS"
#X264OPTIONS="$X264OPTIONS"
DEFQUALITY="$QUALITY1"
DEFVBITRATE="$VBITRATE1"
DEFSCREEN="$SCREEN1"
DEFASPECT="$ASPECT1"
DEFFRAMERATE="$FRAMERATE1"
DEFVOPTIONS="$VOPTIONS1"
DEFACODEC="$ACODEC1"
DEFABITRATE="$ABITRATE1"
DEFSAMPLING="$SAMPLING1"
DEFCHANNEL="$CHANNEL1"
DEFAOPTIONS="$AOPTIONS1"
DEFPASS="$PASS1"
EOF
}
keep_entry() {
  SOURCEFILE="$FILE1"
  DEFDIR="$DIR1"
  DEFWHOLEDIR="$WHOLEDIR1"
  DEFOVERWRITE="$OVERWRITE1"
}

#echo "$MAIN_DIALOG" >&2
#waitsplash stop
# phase 1
export MAIN_DIALOG	#="$DIALOG1"
while true; do
  MAIN_DIALOG=$(make_dialog2)
  waitsplash stop
  eval $(gtkdialog3)
  rm -f $THUMBNAIL $LOGFILE
  [ "$INFOPID" ] && XPID=$(cat $INFOPID 2>/dev/null)
  [ "$XPID" ] && kill $XPID
  XPID=""
  if [ "$EXIT" = "Preset" ]; then
    waitsplash start
    keep_entry
    load_preset
    continue
  fi
  if [ "$EXIT" = "Save" ]; then
    keep_entry
    save_preset
    var2def
    continue
  fi
  [ "$EXIT" = "OK" ] || exit
  # validity check
  WHOLEDIR="$WHOLEDIR1"
  if [ -d "$FILE1" ]; then
    MSG=$(printf "$(gettext '%s is a directory.')" "$FILE1")
    MSG="$MSG\\n$(gettext 'Convert all files in this directory?')"
    eval $(errmsg yesno "$MSG")
    echo $EXIT
    [ "$EXIT" = "Yes" ] || continue
    WHOLEDIR="true"
    SRCDIR="$FILE1"
    SOURCES=$(cd "$SRCDIR";ls|tr ' ' '/')
  elif [ ! -f "$FILE1" ]; then
   if [ "$FILE1" ]; then
     errmsg $(printf "$(gettext '%s not found.')" "$FILE1")
   else
     errmsg $(gettext 'Souce file not specified.')
   fi
   continue
  else
    source_property || continue 
    [ "$NOVIDEO" ] && DEFVCODEC="$NONE" && VCODEC1="$NONE"
    [ "$NOAUDIO" ] && DEFACODEC="$NONE" && ACODEC1="$NONE"
    SRCDIR=$(dirname "$FILE1")
    B=$(basename "$FILE1")
    E=$(echo "$B"| cut -d'.' -f2)
    SOURCES=$(echo "$B"|tr ' ' '/')
   # look up whole directory
   if [ "$WHOLEDIR1" = "true" ]; then
     echo "cd \"$SRCDIR\";ls \"*.$E\""
     SOURCES=$(cd "$SRCDIR";ls *.$E | grep -v "$B"|tr ' ' '/')
     SOURCES="$B
$SOURCES"
   fi
  fi
  # destination
  DESTDIR="$DIR1"
  if [ ! -d "$DIR1" ]; then
   if [ "$DIR1" ]; then
     if [ -f "$DIR1" ]; then
       errmsg $(printf "%s is not a directory." "$DIR1")
     else
		ERRMSG=$(printf "%s not exists." "$DIR1")
		ERRMSG="$ERRMSG\\n$(gettext 'Create new directory?')"
		eval $(errmsg yesno $ERRMSG)
		[ "$EXIT" = "Yes" ] || continue
		mkdir -p "$DIR1"
		break
     fi
   else
     DESTDIR="$SRCDIR"
     break
     #errmsg $(gettext 'Destination directory not specified.')
   fi
   continue
  fi
  break
done
# save conf
save_conf
# extention
EXT1=$FORMAT1
case $FORMAT1 in
  mpeg|dvd|svcd|vcd) EXT1="mpg";;
  ipod) EXT1="mp4";;
  ogg) EXT1="ogv"
     [ "$VCODEC1" = "$NONE" ] && EXT1="oga"
  ;;
esac
# convert loop
NFILES=$(echo "$SOURCES"| wc -l)
REST=$NFILES
NCONV=0
for ITEM in $SOURCES; do
 BASE1=$(echo $ITEM|tr '/' ' ')
 SRCFILE="$BASE1"
 [ "$SRCDIR" ] && SRCFILE="$SRCDIR/$BASE1"
 FILE1="$SRCFILE"
 # source validity
 SKIP=""
 [ $NFILES -gt 1 ] && SKIP="skip"
 source_property $SKIP
 if [ $? != 0 ]; then
   REST=$(expr $REST - 1)
   continue
 fi
 # destination
 ROOT1=$(echo "$BASE1"| cut -d'.' -f1)
 DESTFILE="$DESTDIR/$ROOT1.$EXT1"
 [ "$SRCFILE" = "$DESTFILE" ] && DESTFILE="$DESTDIR/${ROOT1}_cvt.$EXT1"
 if [ -s "$DESTFILE" ]; then
   if [ "$OVERWRITE1" != "true" -a $NFILES -gt 1 ]; then
    continue
   fi
   if [ $NFILES -eq 1 ]; then
     EXTRABUTTON=""
     ERRMSG=$(printf "$(gettext '%s already exists.')" "$DESTFILE")
     ERRMSG="$ERRMSG\\n$(gettext 'Replace it?')"
     YESLABEL="$(gettext 'Replace')"
     NOLABEL="$(gettext 'Quit')"
     NOSYMBOL="gtk-quit"
   eval $(errmsg yesno $ERRMSG)
   [ "$EXIT" = "Yes" ] || exit
   fi
 fi
 # make options
 var2opt
 # prepair work space
 ROOT2=$(echo "$ROOT1"|tr ' ' '_')
 WORKDIR="$DESTDIR/ffconvert_tmp_$ROOT2"
 CMDFILE="/tmp/ffconvert_$ROOT2.sh"
 TMPFILE="/tmp/ffconvert_$ROOT2.tmp"
 # generate command
 echo '#!/bin/sh' > "$CMDFILE"
 if [ "$PASS" = "2" ]; then
  mkdir -p "$WORKDIR"
  echo "cd \"$WORKDIR\"
ffmpeg -pass 1 $OPTFIRST && ffmpeg -pass 2 $OPTFINAL" >> "$CMDFILE"
 else
 echo "ffmpeg $OPTFINAL" >> "$CMDFILE"
 fi
 echo "STATUS=\$?
echo -n \$STATUS > \"$TMPFILE\"
[ \"\$STATUS\" = \"0\" ] && exit
cat \"$CMDFILE\" | grep '^ffmpeg'
echo -n $(gettext 'Press [ENTER] to exit :')
read REP"  >> "$CMDFILE"
 cat "$CMDFILE" >&2	# for debugging
 chmod +x "$CMDFILE"
 rxvt -bg orange -fg black -geometry 80x14 -e "$CMDFILE"
 rm -fR "$WORKDIR"
#(cd "$DESTDIR"; rm -f $ROOT1*.log *_2pass.log*)
#rm -f "$CMDFILE"
 STATUS=$(cat "$TMPFILE")
 rm -f "$TMPFILE"
 REST=$(expr $REST - 1)
 if [ "$STATUS" != "0" ]; then
  rm -f "$DESTFILE"
  MSG1=$(gettext 'An error occured.')
  MSG2=$(printf "$(gettext 'You can check the generated command in %s.')" "$CMDFILE")
  EXTRABUTTON="<button><input file stock=\"gtk-file\"></input><label>$(gettext 'Look up')</label><action>$TEXTVIEWER \"$CMDFILE\" &</action></button>"
  if [ $REST -gt 0 ]; then
    MSG3=$(gettext 'Skip this file and continue?')
    YESLABEL="$(gettext 'Skip')"
    NOLABEL="$(gettext 'Quit')"
    NOSYMBOL="gtk-quit"
    eval $(errmsg yesno "$MSG1\\n$MSG2\\n\\n$MSG3")
    rm -f "$CMDFILE"
    [ "$EXIT" = "Yes" ] || exit 1
  else
    errmsg "$MSG1\\n$MSG2"
    rm -f "$CMDFILE"
    exit 1
  fi
 else
   NCONV=$(expr $NCONV + 1)
 fi
 rm -f "$CMDFILE"
done
EXTRABUTTON=""
if [ $NCONV -eq 0 ]; then
  errmsg $(gettext 'No files converted.')
  exit
fi
if [ $NCONV -gt 1 ]; then
   EXTRABUTTON="<button><input file stock=\"gtk-open\"></input><label>$(gettext 'Brawse')</label><action>EXIT:Brawse</action></button>"
  eval $(errmsg info $(printf "$(gettext '%s files successfully converted in %s.')" $NCONV "$DESTDIR"))
  [ "$EXIT" = "Brawse" ]  && exec rox "$DESTDIR"
  exit
fi
EXTRABUTTON="<button><input file stock=\"gtk-media-play\"></input><label>$(gettext 'Play')</label><action>EXIT:Play</action></button>"
eval $(errmsg info $(printf "$(gettext 'Successfully converted into %s.')"  "$DESTFILE"))
[ "$EXIT" = "Play" ] && exec $PLAYER "$DESTFILE" &>/dev/null
