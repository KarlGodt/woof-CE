#!/bin/sh
#By BarryK 2006 for Puppy Linux v2.13+
# Passed param is file to be converted.
# Converts a .pet file to .tar.gz.
# cp /tmp/xerrs.log /tmp/pet2tgz-xerrs.log.bak

########################################################################
#
# ADDS/CHANGES by Karl Godt :
#
# TOTAL TODO
#
# /dev/sda1:
# UUID="0C18A53918A52326"
# /dev/sda7:
# UUID="2dfe19a9-7a5c-48aa-9e81-3758c67b12f6"
# /dev/sda9:
# UUID="e29717d3-b775-4dc8-9643-42a862f2b34f"
# /dev/sda2:
# LABEL="2nd"
# UUID="a4f28ea3-eede-49f8-93ca-dbeefe8f72fa"
# /dev/sda10:
# UUID="193a7e6b-8626-493e-8b77-940211a8fc9d"
# /dev/sda6:
# LABEL="1stLogicalPartit"
# UUID="8efb5611-ffb4-41ca-b8ef-8e64769ce9ef"
# /dev/sda3:
# LABEL="3rd"
# UUID="f711a43e-c5dc-4f92-84dc-6824feeb690c"
# /dev/sda11:
# LABEL="store"
# UUID="51600f00-d3cc-4fba-ba77-c34b0c94502c"
# /dev/sda8:
# UUID="7b5cd9dd-54c7-4d03-af79-566588111fcb"
# /dev/sda5:
# LABEL="1stSWAP"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.9-i586-dpup005-Celeron2G
# SATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# PDEV1='sda2'
# Linux·puppypc·2.6.30.9-i586-dpup005-Celeron2G·#6·SMP·Sat·Jan·15·13:35:51·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Sa·21.·Apr·19:35:49·GMT+1·2012
#

#/root/Choices/MIME-types/application_x-xz-compressed-tar
#/root/Choices/MIME-types/application_x-lzma-compressed-tar
##! /bin/sh
#exec pupzip "$1"

#/root/my-roxapps/unknown_mime_handler.sh
##!/bin/bash
#
#EXT=`echo "$@" |rev|cut -f1 -d'.'|rev`
#
#case $EXT in
#lapet|xzpet|lopet|b2pet)
#exec /usr/local/petget/petget "$@"
#;;
#here comes the additiopnal handlers
#*)
#xmessage -bg red "'$0' needs to be adjusted
#to handle '$EXT'
#
#You can alternatively right click
#'$@'
#and 'Set run action' in the sub-menu
#of the filebrowser."
#;;
#esac

#/usr/local/lib/xarchive/wrappers/tar-wrap.sh
#XZ_EXTS="tar.xz"
#LZO_EXT="tar.lzo tar.lzop"
#LZA_EXT="tar.lza tar.lzma tar.lz"
##+++2012-04-03
#for ext in $XZ_EXTS; do echo $ext >>/tmp/xarchive_errs.log
#   expr "$lc_archive" : ".*\."$ext"$" >>/tmp/xarchive_errs.log
#    if [ $(expr "$lc_archive" : ".*\."$ext"$") -gt 0 ]; then
#       echo "greater '0'" >>/tmp/xarchive_errs.log
#        DECOMPRESS="xz -dc" #-d, --decompress    force decompression
#                           #-c, --stdout        write to standard output and don't delete input files
#        COMPRESS="xz -zc"  #-z, --compress      force compression
#        TAR_COMPRESS_OPT="--use-compress-prog=xz"
#        else echo "NOT greater '0'" >>/tmp/xarchive_errs.log
#
#    fi
#done
##+++2012-04-03
##+++2012-04-22
#for ext in $LZO_EXT; do echo $ext >>/tmp/xarchive_errs.log
#   expr "$lc_archive" : ".*\."$ext"$" >>/tmp/xarchive_errs.log
#    if [ $(expr "$lc_archive" : ".*\."$ext"$") -gt 0 ]; then
#       echo "greater '0'" >>/tmp/xarchive_errs.log
#        DECOMPRESS="lzop -dc" #-d, --decompress    force decompression
#                           #-c, --stdout        write to standard output and don't delete input files
#        COMPRESS="lzop -zc"  #-z, --compress      force compression
#        TAR_COMPRESS_OPT="--use-compress-prog=lzop"
#        else echo "NOT greater '0'" >>/tmp/xarchive_errs.log
#
#    fi
#done
#for ext in $LZA_EXT; do echo $ext >>/tmp/xarchive_errs.log
#   expr "$lc_archive" : ".*\."$ext"$" >>/tmp/xarchive_errs.log
#    if [ $(expr "$lc_archive" : ".*\."$ext"$") -gt 0 ]; then
#       echo "greater '0'" >>/tmp/xarchive_errs.log
#        DECOMPRESS="lzma -dc" #-d, --decompress    force decompression
#                           #-c, --stdout        write to standard output and don't delete input files
#        COMPRESS="lzma -zc"  #-z, --compress      force compression
#        TAR_COMPRESS_OPT="--use-compress-prog=lzma"
#        else echo "NOT greater '0'" >>/tmp/xarchive_errs.log
#
#    fi
#done
##+++2012-04-22





########################################################################

usage (){
    echo "
$0 [-g|-b|-l|-h|-s|-S|-X|-x] TARFILE.Cpet
    -g) gzip (default) '`which gzip`'
    -b) bzip2          '`which bzip2`'
    -h) help: show this usage
    -l) lzop           '`which lzop`'
    -L) lzma           '`which lzma`'
    -s) squashfs3 gz   '`which mksquashfs3`'
    -S) squashfs4 gz   '`which mksquashfs4`'
    -X) squashfs4 xz   '`which mksquashfs4`'
    -x) xz             '`which xz`'
    -z) zip            '`which zip`'
    -Z) compress       '`which compress`'
    Script to create a .tar from a .pet of the above compressions.
    Without option given, defaults to the old and proven gzip
    compression.
    -d) debug through 'set -x'
    -v) verbose output and options to binaries
    "
    exit $1
}

OUTPUT=/dev/null;ERR=/dev/null
while getopts gbhlLsSXxZzdv opt;do
case $opt in
g) COMPRESS_BIN='gzip'; OPT='-g';EXT='gz'; PET_EXT='pet';;
b) COMPRESS_BIN='bzip2';OPT='-b';EXT='bz2';PET_EXT='b2pet';;
h) usage 0;;
l) COMPRESS_BIN='lzop';OPT='-l';EXT='lzo'; PET_EXT='lopet';;
L) COMPRESS_BIN='lzma';OPT='-L';EXT='lzma';PET_EXT='lapet';;
s) COMPRESS_BIN='mksquashfs3';PET_EXT='s3pet';;
S) COMPRESS_BIN='mksquashfs4';PET_EXT='s4pet';;
X) COMPRESS_BIN='mksquashfs4';COMPRESS_OPT='xz';PET_EXT='s4xpet';;
x) COMPRESS_BIN='xz'; OPT='-x';EXT='xz'; PET_EXT='xzpet';;
z) COMPRESS_BIN='zip';OPT='-z';EXT='.zip';PET_EXT='.zipet';;
Z) COMPRESS_BIN='compress';OPT='-Z';EXT='.Z';PET_EXT='.Zpet'
if [ ! "`which $COMPRESS_BIN`" ];then
COMPRESS_BIN='tar'
[ "`$COMPRESS_BIN --help |grep -w '\-Z'`" ] || COMPRESS_BIN='';fi
;;
d) set -x;;
v) VERBOSE='-v';LONG_VERBOSE='--verbose';OUTPUT=/dev/stdout;ERR=/dev/stderr;;
*) usage 1;;
esac;done

#[ "$2" ] && chmod +w "$2" || chmod +w "$1"
while [ "$2" ];do shift;done #leave only the last argument
echo "$1"
[ -e "$1" ] || { echo "'$1' seems not to exist";exit 1; }
[ -f "$1" ] || { echo "'$1' not a regular file ?";exit 1; }
[ -s "$1" ] || { echo "'$1' appears to be empty ?";exit 1; }
PET_EXT_AUTO="${1##*\.}"
case $PET_EXT_AUTO in
pet)  COMPRESS_BIN='gzip';    OPT='-g';EXT='gz';  PET_EXT='pet';;
xzpet)COMPRESS_BIN='xz';      OPT='-x';EXT='xz';  PET_EXT='xzpet';;
lapet)COMPRESS_BIN='lzma';    OPT='-L';EXT='lzma';PET_EXT='lapet';;
lopet)COMPRESS_BIN='lzop';    OPT='-l';EXT='lzo'; PET_EXT='lopet';;
b2pet)COMPRESS_BIN='bzip2';   OPT='-b';EXT='bz2'; PET_EXT='b2pet';;
Zpet) COMPRESS_BIN='compress';OPT='-z';EXT='.Z';  PET_EXT='.Zpet'
if [ ! "`which $COMPRESS_BIN`" ];then
COMPRESS_BIN='tar'
["`$COMPRESS_BIN --help |grep -w '\-Z'`" ] || COMPRESS_BIN='';fi
;;
esac

[ ! "$COMPRESS_BIN" ] && { COMPRESS_BIN='gzip';OPT='-g';EXT='gz';PET_EXT='pet'; }
[ "`which $COMPRESS_BIN`" ] || { echo "'$COMPRESS_BIN' apparenty not installed (in the PATH)";exit 1; }

chmod +w "$1" #make it writable.

FULLSIZE=`stat --format=%s "${1}"`
echo $FULLSIZE
ORIGSIZE=`expr $FULLSIZE - 32`
echo $ORIGSIZE
##doing it this way have to remove dd stdout msg (preceded by a '+')...
##um, cut and sed are really intended for working on text files, may have to
##do this differently (in case have a corrupted file with non-char bytes on end)...
#MD5SUM="`dd if="${1}" bs=1 skip=${ORIGSIZE} 2>/dev/null | cut -f 1 -d '+' | sed -e 's/[^0-9a-zA-Z]/0/g'`" #md5sum to stdout.
#do it this indirect way instead...
dd if="${1}" of=/tmp/petmd5sum bs=1 skip=${ORIGSIZE} 2>$ERR
sync
MD5SUM="`md5sum /tmp/petmd5sum | cut -f 1 -d ' '`"
echo "MD5SUM='$MD5SUM'"
#truncate is a little app I wrote. format: truncate newsize filename
truncate $ORIGSIZE "$1"
[ $? -ne 0 ] && { echo "ERR $?";exit 1; }
sync
#NEWMD5SUM="`md5sum "$1" | cut -f 1 -d ' '`"
md5sum "$1" | cut -f 1 -d ' ' > /tmp/newpetmd5sum
sync
#get rid of trailing newline char...
truncate 32 /tmp/newpetmd5sum
NEWMD5SUM="`md5sum /tmp/newpetmd5sum | cut -f 1 -d ' '`"
echo $NEWMD5SUM=NEWMD5SUM
rm -f /tmp/petmd5sum
rm -f /tmp/newpetmd5sum
#NEWNAME="`echo -n "${1}" | sed -e 's/\\.pet$/\\.tar\\.gz/g'`"
echo "PET_EXT='$PET_EXT' EXT='$EXT'"
NEWNAME="`echo -n "${1}" | sed -e "s|\.${PET_EXT}|\.tar\.${EXT}|"`"
echo "NEWNAME='$NEWNAME'"
mv -f "$1" "$NEWNAME"
[ "$MD5SUM" = "$NEWMD5SUM" ] || { echo 'md5sum not equal';exit 1; }
exit 0

