#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_pet2tgz"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/bin/pet2tgz"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || . /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP='1'; TWO_VERSION='1'; TWO_VERBOSE='1'; TWO_DEBUG='1'; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
#By BarryK 2006 for Puppy Linux v2.13+
# Passed param is file to be converted.
# Converts a .pet file to .tar.gz.
# cp /tmp/xerrs.log /tmp/pet2tgz-xerrs.log.bak

########################################################################
#
# ADDS/CHANGES by Karl Godt :
#
# TOTAL TODO
#
#
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.9-i586-dpup005-Celeron2G
# SATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# PDEV1='sda2'
# Linux·puppypc·2.6.30.9-i586-dpup005-Celeron2G·#6·SMP·Sat·Jan·15·13:35:51·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Sa·21.·Apr·19:35:49·GMT+1·2012
#

#/root/Choices/MIME-types/application_x-xz-compressed-tar
#/root/Choices/MIME-types/application_x-lzma-compressed-tar
##! /bin/sh
#exec pupzip "$1"

#/root/my-roxapps/unknown_mime_handler.sh
##!/bin/bash
#
#EXT=`echo "$@" |rev|cut -f1 -d'.'|rev`
#
#case $EXT in
#lapet|xzpet|lopet|b2pet)
#exec /usr/local/petget/petget "$@"
#;;
#here comes the additiopnal handlers
#*)
#xmessage -bg red "'$0' needs to be adjusted
#to handle '$EXT'
#
#You can alternatively right click
#'$@'
#and 'Set run action' in the sub-menu
#of the filebrowser."
#;;
#esac

#/usr/local/lib/xarchive/wrappers/tar-wrap.sh
#XZ_EXTS="tar.xz"
#LZO_EXT="tar.lzo tar.lzop"
#LZA_EXT="tar.lza tar.lzma tar.lz"
##+++2012-04-03
#for ext in $XZ_EXTS; do echo $ext >>/tmp/xarchive_errs.log
#   expr "$lc_archive" : ".*\."$ext"$" >>/tmp/xarchive_errs.log
#    if [ $(expr "$lc_archive" : ".*\."$ext"$") -gt 0 ]; then
#       echo "greater '0'" >>/tmp/xarchive_errs.log
#        DECOMPRESS="xz -dc" #-d, --decompress    force decompression
#                           #-c, --stdout        write to standard output and don't delete input files
#        COMPRESS="xz -zc"  #-z, --compress      force compression
#        TAR_COMPRESS_OPT="--use-compress-prog=xz"
#        else echo "NOT greater '0'" >>/tmp/xarchive_errs.log
#
#    fi
#done
##+++2012-04-03
##+++2012-04-22
#for ext in $LZO_EXT; do echo $ext >>/tmp/xarchive_errs.log
#   expr "$lc_archive" : ".*\."$ext"$" >>/tmp/xarchive_errs.log
#    if [ $(expr "$lc_archive" : ".*\."$ext"$") -gt 0 ]; then
#       echo "greater '0'" >>/tmp/xarchive_errs.log
#        DECOMPRESS="lzop -dc" #-d, --decompress    force decompression
#                           #-c, --stdout        write to standard output and don't delete input files
#        COMPRESS="lzop -zc"  #-z, --compress      force compression
#        TAR_COMPRESS_OPT="--use-compress-prog=lzop"
#        else echo "NOT greater '0'" >>/tmp/xarchive_errs.log
#
#    fi
#done
#for ext in $LZA_EXT; do echo $ext >>/tmp/xarchive_errs.log
#   expr "$lc_archive" : ".*\."$ext"$" >>/tmp/xarchive_errs.log
#    if [ $(expr "$lc_archive" : ".*\."$ext"$") -gt 0 ]; then
#       echo "greater '0'" >>/tmp/xarchive_errs.log
#        DECOMPRESS="lzma -dc" #-d, --decompress    force decompression
#                           #-c, --stdout        write to standard output and don't delete input files
#        COMPRESS="lzma -zc"  #-z, --compress      force compression
#        TAR_COMPRESS_OPT="--use-compress-prog=lzma"
#        else echo "NOT greater '0'" >>/tmp/xarchive_errs.log
#
#    fi
#done
##+++2012-04-22





########################################################################

_usage (){
    echo "
$0 [-g|-b|-l|-h|-s|-S|-X|-x] TARFILE.Cpet
    -g) gzip (default) '`which gzip`'
    -b) bzip2          '`which bzip2`'
    -h) help: show this usage
    -l) lzop           '`which lzop`'
    -L) lzma           '`which lzma`'
    -s) squashfs3 gz   '`which mksquashfs3`'
    -S) squashfs4 gz   '`which mksquashfs4`'
    -X) squashfs4 xz   '`which mksquashfs4`'
    -x) xz             '`which xz`'
    -z) zip            '`which zip`'
    -Z) compress       '`which compress`'
    Script to create a .tar from a .pet of the above compressions.
    Without option given, defaults to the old and proven gzip
    compression.
    -d) debug through 'set -x'
    -v) verbose output and options to binaries
    "
    exit $1
}

OUT=/dev/null;ERR=/dev/null
while getopts gbhlLsSXxZzdv opt;do
case $opt in
g) COMPRESS_BIN='gzip'; OPT='-g';EXT='gz'; PET_EXT='pet';;
b) COMPRESS_BIN='bzip2';OPT='-b';EXT='bz2';PET_EXT='b2pet';;
h) _usage 0;;
l) COMPRESS_BIN='lzop';OPT='-l';EXT='lzo'; PET_EXT='lopet';;
L) COMPRESS_BIN='lzma';OPT='-L';EXT='lzma';PET_EXT='lapet';;
s) COMPRESS_BIN='mksquashfs3';PET_EXT='s3pet';;
S) COMPRESS_BIN='mksquashfs4';PET_EXT='s4pet';;
X) COMPRESS_BIN='mksquashfs4';COMPRESS_OPT='xz';PET_EXT='s4xpet';;
x) COMPRESS_BIN='xz'; OPT='-x';EXT='xz'; PET_EXT='xzpet';;
z) COMPRESS_BIN='zip';OPT='-z';EXT='.zip';PET_EXT='.zipet';;
Z) COMPRESS_BIN='compress';OPT='-Z';EXT='.Z';PET_EXT='.Zpet'
if [ ! "`which $COMPRESS_BIN`" ];then
COMPRESS_BIN='tar'
[ "`$COMPRESS_BIN --help |grep -w '\-Z'`" ] || COMPRESS_BIN='';fi
;;
d) set -x;;
v) VERBOSE='-v';L_VERBOSE='--verbose';OUT=/dev/stdout;ERR=/dev/stderr;;
*) _usage 1;;
esac;done

#[ "$2" ] && chmod +w "$2" || chmod +w "$1"
while [ "$2" ];do shift;done #leave only the last argument
_debug "$1"
[ -e "$1" ] || { echo "'$1' seems not to exist";   exit 1; }
[ -f "$1" ] || { echo "'$1' not a regular file ?"; exit 1; }
[ -s "$1" ] || { echo "'$1' appears to be empty ?";exit 1; }

PET_EXT_AUTO="${1##*\.}"
case $PET_EXT_AUTO in
pet)  COMPRESS_BIN='gzip';    OPT='-g';EXT='gz';  PET_EXT='pet';;
xzpet)COMPRESS_BIN='xz';      OPT='-x';EXT='xz';  PET_EXT='xzpet';;
lapet)COMPRESS_BIN='lzma';    OPT='-L';EXT='lzma';PET_EXT='lapet';;
lopet)COMPRESS_BIN='lzop';    OPT='-l';EXT='lzo'; PET_EXT='lopet';;
b2pet)COMPRESS_BIN='bzip2';   OPT='-b';EXT='bz2'; PET_EXT='b2pet';;

Zpet) COMPRESS_BIN='compress';OPT='-z';EXT='.Z';  PET_EXT='.Zpet'
      if [ ! "`which $COMPRESS_BIN`" ];then
      COMPRESS_BIN='tar'
      ["`$COMPRESS_BIN --help |grep -w '\-Z'`" ] || COMPRESS_BIN='';
      fi
;;
esac

[ "$COMPRESS_BIN" ]         || { COMPRESS_BIN='gzip';OPT='-g';EXT='gz';PET_EXT='pet'; }
[ "`which $COMPRESS_BIN`" ] || { echo "'$COMPRESS_BIN' apparenty not installed (in the PATH)";exit 1; }

STATUS=0
chmod +w "$1" #make it writable.
STATUS=$((STATUS+$?))

FULLSIZE=`stat -c %s "${1}"`
STATUS=$((STATUS+$?))

_debug $FULLSIZE
ORIGSIZE=`expr $FULLSIZE - 32`
STATUS=$((STATUS+$?))

_debug $ORIGSIZE

##doing it this way have to remove dd stdout msg (preceded by a '+')...
##um, cut and sed are really intended for working on text files, may have to
##do this differently (in case have a corrupted file with non-char bytes on end)...
#MD5SUM="`dd if="${1}" bs=1 skip=${ORIGSIZE} 2>/dev/null | cut -f 1 -d '+' | sed -e 's/[^0-9a-zA-Z]/0/g'`" #md5sum to stdout.
#do it this indirect way instead...

dd if="${1}" of=/tmp/petmd5sum bs=1 skip=${ORIGSIZE} 2>>$ERR
STATUS=$((STATUS+$?))
_sync

MD5SUM="`md5sum /tmp/petmd5sum | cut -f 1 -d ' '`"
STATUS=$((STATUS+$?))
_debug "MD5SUM='$MD5SUM'"

#truncate is a little app I wrote. format: truncate newsize filename
truncate $ORIGSIZE "$1"
STATUS=$((STATUS+$?))
[ $STATUS = 0 ] || { echo "ERR $STATUS";exit 1; }
_sync

#NEWMD5SUM="`md5sum "$1" | cut -f 1 -d ' '`"
md5sum "$1" | cut -f 1 -d ' ' > /tmp/newpetmd5sum
STATUS=$((STATUS+$?))
_sync

#get rid of trailing newline char...
truncate 32 /tmp/newpetmd5sum
STATUS=$((STATUS+$?))

NEWMD5SUM="`md5sum /tmp/newpetmd5sum | cut -f 1 -d ' '`"
STATUS=$((STATUS+$?))
_debug NEWMD5SUM=$NEWMD5SUM

rm $VERB -f /tmp/petmd5sum
rm $VERB -f /tmp/newpetmd5sum

#NEWNAME="`echo -n "${1}" | sed -e 's/\\.pet$/\\.tar\\.gz/g'`"
_debug "PET_EXT='$PET_EXT' EXT='$EXT'"

NEWNAME=`echo -n "${1}" | sed -e "s|\.${PET_EXT}|\.tar\.${EXT}|"`
_debug "NEWNAME='$NEWNAME'"

if [ "$DEBUG" ]; then
 cp $VERB -f "$1" "$NEWNAME"
else
 mv $VERB -f "$1" "$NEWNAME"
fi
STATUS=$((STATUS+$?))

[ "$MD5SUM" = "$NEWMD5SUM" ] || { echo 'md5sum not equal';exit 1; }

exit $STATUS

# Very End of this file 'usr/bin/pet2tgz' #
###END###
