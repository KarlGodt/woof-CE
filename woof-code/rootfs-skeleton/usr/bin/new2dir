#!/bin/ash
#(c) Copyright Barry Kauler 2007
#Now LGPL 2007
#run like this: # new2dir make install
#creates a directory one or two levels higher with the name of the package
#but slightly modified. For example source package has dir 'abiword-0.5.6'
#inside this you do the usual 'configure', 'make', then 'new2dir make install'
#and 'abiword-0.5.6-i486' directory gets created, with all installed files
#in it.
. /etc/rc.d/f4puppy5
# BATCHMARKER01 - Marker for Line-Position to bulk insert code into.

VERB=-v

#if [ ! "$*" -o "`echo "$*" | grep -iE 'help|\-h'`" ];then
case $* in ''|*help|-h)
 echo "This script is used in the last step when installing a source"
 echo "or binary package. For example:"
 echo "# new2dir make install"
 echo "Exiting script."
 exit
;; esac
#fi

CURRDIR="`pwd`"
UPONE="`dirname "$CURRDIR"`"
PKGDIR="../`basename "$CURRDIR"`"
xPKGDIR="`basename "$CURRDIR"`"
if [ "`echo "$PKGDIR" | grep '[\-_\.][0-9]'`" = "" ];then
 PKGDIR="../../`basename "$UPONE"`"
 xPKGDIR="`basename "$UPONE"`"
fi
if [ "`echo "$PKGDIR" | grep '[\-_\.][0-9]'`" = "" ];then
 echo "$PKGDIR does not seem to be the package directory with version"
 echo "number. Unfortunately, some source package tarballs expand to a"
 echo "directory that does not have version number in it's name. SeaMonkey"
 echo "is an example of this, it expands to a directory named just 'mozilla'."
 echo "This script will create a package with the same name as the directory"
 echo "and it absolutely must have the version number in it which must commence"
 echo "with a numeric digit. So, you must now close this rxvt terminal window"
 echo "then rename the directory. For example, for SeaMonkey version 1.0.7"
 echo "rename the directory from 'mozilla' to 'seamonkey-1.0.7'"
 echo "A dash '-' must be used to separate the package name from version."
 echo "A directory name like 'seamonkey-alpha1' is NOT allowed as the version"
 echo "number must start with a numeric digit, example 'seamonkey-1.0.7alpha1'."
 echo "Exiting script."
 exit
fi



fixfilelistfunc() {
 test "$*" || return
 #$1 is file to remove, as doesn't exist.
 echo " ...${1} did not copy successfully ."
 grep -v "$1" /tmp/${EXE_PKGNAME}.files >> /tmp/${EXE_PKGNAME}.files.tmp
 mv $VERB -f /tmp/${EXE_PKGNAME}.files.tmp /tmp/${EXE_PKGNAME}.files
}

echo
#echo -en "\\033[1;31mStep 1" #red
#echo -e "\\033[0;39m"
_color_echo1 red "Step 1\n"

echo "It seems that the package directory is '$PKGDIR'"
echo "If this is correct, just press ENTER key."
echo "Otherwise, type the correct directory with relative address."
echo " NOTE:"
echo " This script will create a package with the same name as the directory"
echo " and it absolutely must have the version number in it which must commence"
echo " with a numeric digit, and name and version number must be separated by"
echo " a dash '-', for example, 'seamonkey-1.0.7'."
echo " A directory name like 'seamonkey-alpha1' is NOT allowed as the version"
echo " number must start with a numeric digit, example 'seamonkey-1.0.7alpha1'."
echo " If $PKGDIR is incorrect you must now exit with CTRL-C and close this"
echo " rxvt terminal window then rename the directory."
echo -n "Type response now: "
read REPLY1
[ "$REPLY1" ] && PKGDIR="$REPLY1"
if [ ! -d "$PKGDIR" ];then
 echo
 echo "$PKGDIR does not exist, exiting script."
 exit 1
fi
echo "Okay, using $PKGDIR"

echo
#echo -en "\\033[1;31mStep 2" #red
#echo -e "\\033[0;39m"
_color_echo1 red "Step 2\n"

echo "Puppy is designed to run on a i486 CPU upwards. Normally this means"
echo "that you have to specify 'build=i486-t2-linux-gnu' (sometimes host=)"
echo "Some packages do not have that configure option and compile for a"
echo "specific CPU regardless what is in your PC."
echo "If you have compiled for a i486, just press ENTER key."
echo "Otherwise, enter the CPU type, examples: i386 i486 i686 (the i is required)."
echo -n "Type response here: "
read CPUTYPE
[ "$CPUTYPE" = "" ] && CPUTYPE="i486"
if [ "`echo -n "$CPUTYPE" | grep '^[a-zA-Z]'`" = "" ];then
 echo "$CPUTYPE is not valid. Exiting."
 exit 1
fi
echo "Okay, using $CPUTYPE"

#would like to create different targets for exe, doc, dev, nls components...
EXE_TARGETDIR="${PKGDIR}-${CPUTYPE}" #relative path.
EXE_PKGNAME="`basename $EXE_TARGETDIR`"
DIR_NAME_EXE_TARGETDIR="`dirname $EXE_TARGETDIR`"

#difficult task, separate package name from version part...
#not perfect, some start with non-numeric version info...
xNAMEONLY="`echo -n "$xPKGDIR" | sed -e 's/\-[0-9].*$//g'`"
#...if that fails, do it the old way...
[ "$xNAMEONLY" = "$xPKGDIR" ] && xNAMEONLY="`echo "$xPKGDIR" | cut -f 1 -d "-"`"
NAMEONLY="${DIR_NAME_EXE_TARGETDIR}/${xNAMEONLY}"

#abasename="`basename ${PKGDIR}`"
apattern="s/${xNAMEONLY}\\-//g"
VERONLY="`echo -n "$xPKGDIR" | sed -e "$apattern"`"

DOC_TARGETDIR="${NAMEONLY}_DOC-${VERONLY}-${CPUTYPE}"
DOC_PKGNAME="`basename $DOC_TARGETDIR`"
DEV_TARGETDIR="${NAMEONLY}_DEV-${VERONLY}-${CPUTYPE}"
DEV_PKGNAME="`basename $DEV_TARGETDIR`"
NLS_TARGETDIR="${NAMEONLY}_NLS-${VERONLY}-${CPUTYPE}"
NLS_PKGNAME="`basename $NLS_TARGETDIR`"

#test -d "$EXE_TARGETDIR" && mv -n "$EXE_TARGETDIR" "$EXE_TARGETDIR"-OLD
#test -d "$DOC_TARGETDIR" && mv -n "$DOC_TARGETDIR" "$DOC_TARGETDIR"-OLD
#test -d "$DEV_TARGETDIR" && mv -n "$DEV_TARGETDIR" "$DEV_TARGETDIR"-OLD
#test -d "$NLS_TARGETDIR" && mv -n "$NLS_TARGETDIR" "$NLS_TARGETDIR"-OLD

for d in "$EXE_TARGETDIR" "$DOC_TARGETDIR" "$DEV_TARGETDIR" "$NLS_TARGETDIR"
do
test -d "$d" && mv $VERB -n "$d" "${d}OLD"
done

for d in "$EXE_TARGETDIR" "$DOC_TARGETDIR" "$DEV_TARGETDIR" "$NLS_TARGETDIR"
do
test -d "$d" && { echo "$d exists. Please cleanup manually ( remove / move the directory(s) ) ."; exit; }
done

echo
#echo -en "\\033[1;31mStep 3" #red
#echo -e "\\033[0;39m"
_color_echo1 red "Step 3\n"

echo "If you wish, you can split the final package up into separate"
echo "packages for the 'executables', 'documentation', 'development' and"
echo "'international' components."
echo "If the package has shared libraries, it is recommended to at least"
echo "create a seaparate 'development' package."
echo "The idea here is to 'trim the fat' as much as possible so that you only"
echo "have what is absolutely needed in the 'executables' PET package, but"
echo "the extra components can be installed if needed."
echo "WARNING: The automatic splitting performed by this script may not be"
echo "         perfect and you may have to modify the contents of the created"
echo "         separate directories before the final step of converting them"
echo "         to PET packages."
echo
echo "Just press ENTER key only to create one package only."
echo "Or, type a number to choose which separate packages to create:"
echo " 1 Just one package (directory) only"
echo " 2 Create a separate 'development' package"
echo " 3 Create separate 'development', 'documentation', 'international' pkgs"
echo "Or, type a comma-separated list of the separate pkgs that you want to"
echo " create, using keywords 'exe', 'dev', 'doc', 'nls'."
echo " Example: exe,dev,doc  (in this example, nls component is left in the"
echo " main package, that is, the exe component)."
echo -n "Type response (just press ENTER if in doubt): "
read SPLITPETS
[ "$SPLITPETS" = "" ]  && SPLITPETS="exe"
[ "$SPLITPETS" = "1" ] && SPLITPETS="exe"
[ "$SPLITPETS" = "2" ] && SPLITPETS="exe,dev"
[ "$SPLITPETS" = "3" ] && SPLITPETS="exe,dev,doc,nls"
EXESPLIT="";DOCSPLIT="";DEVSPLIT="";NLSSPLIT=""

#for s in exe dev doc nls
for s in EXE DEV DOC NLS
do
[ "`echo "$SPLITPETS" | grep -i "$s"`" ] && eval ${s}SPLIT=yes
done

#[ "`echo "$SPLITPETS" | grep 'exe'`" != "" ] && EXESPLIT="yes"
#[ "`echo "$SPLITPETS" | grep 'doc'`" != "" ] && DOCSPLIT="yes"
#[ "`echo "$SPLITPETS" | grep 'dev'`" != "" ] && DEVSPLIT="yes"
#[ "`echo "$SPLITPETS" | grep 'nls'`" != "" ] && NLSSPLIT="yes"


#for s in exe dev doc nls
for s in EXE DEV DOC NLS
do
[ "`echo "$SPLITPETS" | grep -i "$s"`" ] && { case $s in
EXE) mkdir $VERB -p "$EXE_TARGETDIR";;DEV) mkdir $VERB -p "$DEV_TARGETDIR";;
DOC) mkdir $VERB -p "$DOC_TARGETDIR";;NLS) mkdir $VERB -p "$NLS_TARGETDIR";;esac; }
done

#[ "`echo "$SPLITPETS" | grep 'exe'`" != "" ] && mkdir $VERB -p "$EXE_TARGETDIR"
#[ "`echo "$SPLITPETS" | grep 'doc'`" != "" ] && mkdir $VERB -p "$DOC_TARGETDIR"
#[ "`echo "$SPLITPETS" | grep 'dev'`" != "" ] && mkdir $VERB -p "$DEV_TARGETDIR"
#[ "`echo "$SPLITPETS" | grep 'nls'`" != "" ] && mkdir $VERB -p "$NLS_TARGETDIR"

echo
#echo -en "\\033[1;31mStep 4" #red
#echo -e "\\033[0;39m"
_color_echo1 red "Step 4\n"

echo "The following line is about to be executed:"
echo "# installwatch -o /tmp/pkginstall.list ${@}"
echo "...this logs all file activity to /tmp/pkginstall.list"
echo "This script will then determine all newly created directories"
echo "and files and create '$EXE_TARGETDIR' with the new files."
echo "(and optionally ${DEV_TARGETDIR}, ${DOC_TARGETDIR}, ${NLS_TARGETDIR})"
echo -n "Press ENTER key to continue: "
read goforit

installwatch -o /tmp/pkginstall.list "${@}"

_sync

rm -f "${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}".files
#create list of installed files...
#v2.17 bug, if sometimes logs files in the pkg installing from, have added
# filter out $UPONE...
# BUGPATTERN='&'"$UPONE"
# no, just filter out /mnt and /initrd...
cat /tmp/pkginstall.list | grep '#success$' \
                         | tr -s '\t' | tr '&' ' ' | tr '\t' '&' \
                         | grep '^[345]&open&' \
    | grep -E -v '&/dev/tty&|&/dev/null&|&/root/\.packages/|&/tmp/|&/root/\.icewm/|&/proc/|&/sys/|DotPupTmpDir|/\.myownmenuerc' \
    | grep -E -v '&/initrd|&/mnt/' \
    | cut -f 3 -d '&' >> ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files
#...list will only have created files, not created directories, so an empty
#   directory won't get recorded.

#bad if we miss out installing an empty directory...
cat /tmp/pkginstall.list | grep '#success$' \
                         | tr -s '\t' | tr '&' ' ' | tr '\t' '&' \
                         | grep '^0&mkdir&' \
     | grep -E -v '&/dev/tty&|&/dev/null&|&/root/\.packages/|&/tmp/|&/root/\.icewm/|&/proc/|&/sys/|DotPupTmpDir|/\.myownmenuerc' \
     | grep -E -v '&/initrd|&/mnt/' \
     | cut -f 3 -d '&' | sed -e 's/^\/\//\//g' >> /tmp/${EXE_PKGNAME}.dirs

_sync
#pick up created symlinks...
cat /tmp/pkginstall.list | grep '#success$' \
                         | tr -s '\t' | tr '&' ' ' | tr '\t' '&' \
                         | grep '^0&symlink&' \
     | grep -E -v '&/dev/tty&|&/dev/null&|&/root/\.packages/|&/tmp/|&/root/\.icewm/|&/proc/|&/sys/|DotPupTmpDir|/\.myownmenuerc' \
     | grep -E -v '&/initrd|&/mnt/' \
     | cut -f 4 -d '&' >> ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files

_sync
#problem if there is a post-install script that moves or renames a file...
cat /tmp/pkginstall.list | grep '#success$' \
                         | tr -s '\t' | tr '&' ' ' | tr '\t' '&' \
                         | grep '^0&rename&' \
     | grep -E -v '&/dev/tty&|&/dev/null&|&/root/\.packages/|&/tmp/|&/root/\.icewm/|&/proc/|&/sys/|DotPupTmpDir|/\.myownmenuerc' \
     | grep -E -v '&/initrd|&/mnt/' \
     | cut -f 3,4 -d '&' | tr '\n' ' ' >> /tmp/${EXE_PKGNAME}.moved.files

#find out if any installed file got moved/renamed...
if [ -s /tmp/${EXE_PKGNAME}.moved.files ];then
 for oneMOVED in `cat /tmp/${EXE_PKGNAME}.moved.files`
 do
  #oneORIG="`echo -n "$oneMOVED" | cut -f 1 -d '&'`"
  #oneNEW="`echo -n "$oneMOVED" | cut -f 2 -d '&'`"
  #grep -v "$oneORIG" ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files > /tmp/${EXE_PKGNAME}.files
  #echo "$oneNEW" >> /tmp/${EXE_PKGNAME}.files
  #_sync
  #mv $VERB -f /tmp/${EXE_PKGNAME}.files ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files
  oneORIG="$oneORIG
${oneMOVED%\&*}"
  oneNEW="$oneNEW
${oneMOVED#*\&}"
 done
 echo "$oneORIG" | sed '/^$/d' >/tmp/${EXE_PKGNAME}.old.files
 grep -v -f /tmp/${EXE_PKGNAME}.old.files ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files > /tmp/${EXE_PKGNAME}.files
 echo "$oneNEW" | sed '/^$/d' >>/tmp/${EXE_PKGNAME}.files
 cp $VERB -f /tmp/${EXE_PKGNAME}.files ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files
fi

sort -u ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files >/tmp/${EXE_PKGNAME}.files
cp $VERB -f /tmp/${EXE_PKGNAME}.files ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files

_sync

echo
#echo -en "\\033[1;31mStep 5" #red
#echo -e "\\033[0;39m"
_color_echo1 red "Step 5\n"

TEXT_FILES_EXT='asc|htm|html|shtml|xhtml|xls|xml|txt|hpc|h|c|cc|cpp|sh|pdf|dvi|gs'
COMPR_FILES_EXT='tar|gz|bz2|lz|xz|sfs|lzo|lzma|lzm|Z'
CONF_FILES='config|conf|cnf|cfg'
FS_FILES_EXT='ext2|ext3|ext4|xfs|rfs|jfs|2fs|3fs|4fs'
IMG_FILES_EXT='gif|jpg|jpeg|tif|tiff|png|pnm|bmp|xpm'
LIB_FILES_EXT='a|la|mo'

NON_STRIP_EXT="$TEXT_FILES_EXT|$COMPR_FILES_EXT|$CONF_FILES|$FS_FILES_EXT|$IMG_FILES_EXT|$LIB_FILES_EXT"
NON_STRIP_EXT=`echo "$NON_STRIP_EXT" | sed 's!|!\$|!g;s!|!|\\\.!g'`
NON_STRIP_EXT=`echo "$NON_STRIP_EXT" | tr -s '|' | sed 's!^|*!!;s!|*$!!'`

#fixfilelistfunc() uses this...
cp $VERB -af ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files /tmp/${EXE_PKGNAME}.files
#...a post-install script could delete files, which fixfilelistfunc fixes.

#cat ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files |
while read oneFILE
do
 #test "`echo "oneFILE" | grep "$CURRDIR"`" && continue
 case $oneFILE in *$CURRDIR*) continue;; esac

 oneBASE="${oneFILE##*/}"
 onePATH="${oneFILE%/*}"
 echo "Processing ${oneFILE}"

 if [ "$NLSSPLIT" = "yes" ];then
  #find out if this is an international language file...
  if [ "`echo -n "$oneFILE" | grep -E '/locale/|/nls/|/i18n/'`" ];then
   mkdir $VERB -p "${NLS_TARGETDIR}/${onePATH}"
   cp $VERB -af "$oneFILE" "${NLS_TARGETDIR}/${onePATH}/"
   [ $? -ne 0 ] && fixfilelistfunc "$oneFILE"
   continue
  fi
 fi

 if [ "$DOCSPLIT" = "yes" ];then
  #find out if this is a documentation file...
  if [ "`echo -n "$oneFILE" | grep -E '/man/|/doc/|/docs/|/info/|/gtk-doc/|/faq/|/manual/|/examples/|/help/|/htdocs/'`" ];then
   mkdir $VERB -p "${DOC_TARGETDIR}/${onePATH}"
   cp $VERB -af "$oneFILE" "${DOC_TARGETDIR}/${onePATH}/"
   [ $? -ne 0 ] && fixfilelistfunc "$oneFILE"
   continue
  fi
 fi

 if [ "$DEVSPLIT" = "yes" ];then
  #find out if this is development file...
  if [ "`echo -n "$oneFILE" | grep -E '/include/|/pkgconfig/|/aclocal|/cvs/|/svn/'`" ];then
   mkdir $VERB -p "${DEV_TARGETDIR}/${onePATH}"
   cp $VERB -af "$oneFILE" "${DEV_TARGETDIR}/${onePATH}/"
   [ $? -ne 0 ] && fixfilelistfunc "$oneFILE"
   continue
  fi
  #find *.so symlink files...
  if [ -h "$oneFILE" ];then #-h tests for symlink
   if [ "`echo -n "$oneFILE" | grep '\.so$'`" ];then
    mkdir $VERB -p "${DEV_TARGETDIR}/${onePATH}"
    cp $VERB -af "$oneFILE" "${DEV_TARGETDIR}/${onePATH}/"
    [ $? -ne 0 ] && fixfilelistfunc "$oneFILE"
    continue
   fi
  fi
  #find various config files...
  if [ "`echo -n "$oneBASE" | grep -iEe '-config$|config.sh$|Conf.sh$'`" ];then
    mkdir $VERB -p "${DEV_TARGETDIR}/${onePATH}"
    cp $VERB -af "$oneFILE" "${DEV_TARGETDIR}/${onePATH}/"
    [ $? -ne 0 ] && fixfilelistfunc "$oneFILE"
    continue
  fi
  #all .a and .la files... and any stray .m4 files...
  if [ "`echo -n "$oneBASE" | grep -E '\.a$|\.la$|\.m4$'`" ];then
    mkdir $VERB -p "${DEV_TARGETDIR}/${onePATH}"
    cp $VERB -af "$oneFILE" "${DEV_TARGETDIR}/${onePATH}/"
    [ $? -ne 0 ] && fixfilelistfunc "$oneFILE"
    continue
  fi
 fi

 #strip the file...
 if [ ! -h "$oneFILE" ];then #make sure it isn't a symlink
  if [ ! "`echo "$oneFILE" | grep -iE "$NON_STRIP_EXT|/man/|/info/|/include/|/doc|/locale/"`" ]; then
   _color_echo pink "Strip: CHECK ..\n" >&2
   fileFILE=`file "$oneFILE"`
  #[ "`echo "$fileFILE" | grep 'ELF' | grep 'shared object'`" ] && strip $VERB --strip-debug    "$oneFILE"
  #[ "`echo "$fileFILE" | grep 'ELF' | grep 'executable'`"    ] && strip $VERB --strip-unneeded "$oneFILE"
   case $fileFILE in
   *ELF*'shared object'*) strip $VERB --strip-debug    "$oneFILE";;
   *ELF*'executable'*   ) strip $VERB --strip-unneeded "$oneFILE";;
   *) _color_echo orange "Unhandled FORMAT\n  $fileFILE\n";;
   esac
  else _color_echo cyan "Strip: IGNORED\n"
  fi
 else _color_echo green "Strip: IS LINK\n"
 fi
 _sync

 #anything left over goes into the main 'executable' package...
 #if [ "$EXESPLIT" = "yes" ];then
  mkdir $VERB -p "${EXE_TARGETDIR}/${onePATH}"
  cp $VERB -af "$oneFILE" "${EXE_TARGETDIR}/${onePATH}/"
  [ $? -ne 0 ] && fixfilelistfunc "$oneFILE"
  #fix for empty directories...
  #cat /tmp/${EXE_PKGNAME}.dirs |
  while read aNEWDIR
  do
   [ "`ls -1 $aNEWDIR`" = "" ] && mkdir $VERB -p ${EXE_TARGETDIR}${aNEWDIR}
  done </tmp/${EXE_PKGNAME}.dirs
 #fi

done <"${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}".files

_sync

cp $VERB -af /tmp/${EXE_PKGNAME}.files ${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files

VERB=-v
for f in config.log config.err config.h make_errs.log
do
if test -e "$f"; then
echo DIR_NAME_EXE_TARGETDIR=$DIR_NAME_EXE_TARGETDIR
echo EXE_TARGETDIR=$EXE_TARGETDIR
echo EXE_PKGNAME=$EXE_PKGNAME
echo "${EXE_TARGETDIR}"/etc/"$EXE_PKGNAME"/compile
 mkdir $VERB  -p "${EXE_TARGETDIR}"/etc/"$EXE_PKGNAME"/compile
 cp -a $VERB "$f" "${EXE_TARGETDIR}"/etc/"$EXE_PKGNAME"/compile/
else
 echo "$f does not exist in `pwd`"
fi
done


echo
#echo -en "\\033[1;31mFinished" #red
#echo -e "\\033[0;39m"
_color_echo1 red "Finished\n"

echo "$EXE_TARGETDIR is now fully populated."

[ -d "$DEV_TARGETDIR" ] && echo "$DEV_TARGETDIR has also been populated."
[ -d "$DOC_TARGETDIR" ] && echo "$DOC_TARGETDIR has also been populated."
[ -d "$NLS_TARGETDIR" ] && echo "$NLS_TARGETDIR has also been populated."

echo "${DIR_NAME_EXE_TARGETDIR}/${EXE_PKGNAME}.files has a list of the installed files."

echo "You might want to go into it and trim the fat or whatever,"
echo "but basically it is now ready to be converted to a PET"
echo "package. Just do this:"
echo "# cd ${DIR_NAME_EXE_TARGETDIR}"
echo "# dir2pet $EXE_PKGNAME"

echo
echo "Press ENTER only to exit this script."
echo "Or, if you want the convenience, the 'dir2pet' script can be launched"
echo "right now -- press any character on the keyboard then ENTER."
echo -n "Type response here: "

read nextphase
[ "$nextphase" ] || exit 0

cd ${DIR_NAME_EXE_TARGETDIR}
if [ -d ${xNAMEONLY}-${VERONLY}-${CPUTYPE} ];then
 dir2pet ${xNAMEONLY}-${VERONLY}-${CPUTYPE} && {
 echo -n "${xNAMEONLY}-${VERONLY}-${CPUTYPE}.pet created. Press ENTER to continue: "
 read domore
} || { echo "Some error occured"; exit 1; }
fi

if [ -d ${xNAMEONLY}_DEV-${VERONLY}-${CPUTYPE} ];then
 dir2pet ${xNAMEONLY}_DEV-${VERONLY}-${CPUTYPE} && {
 echo -n "${xNAMEONLY}_DEV-${VERONLY}-${CPUTYPE}.pet created. Press ENTER to continue: "
 read domore
} || { echo "Some error occured"; exit 1; }
fi

if [ -d ${xNAMEONLY}_DOC-${VERONLY}-${CPUTYPE} ];then
 dir2pet ${xNAMEONLY}_DOC-${VERONLY}-${CPUTYPE} && {
 echo -n "${xNAMEONLY}_DOC-${VERONLY}-${CPUTYPE}.pet created. Press ENTER to continue: "
 read domore
} || { echo "Some error occured"; exit 1; }
fi

if [ -d ${xNAMEONLY}_NLS-${VERONLY}-${CPUTYPE} ];then
 dir2pet ${xNAMEONLY}_NLS-${VERONLY}-${CPUTYPE} && {
 echo -n "${xNAMEONLY}_NLS-${VERONLY}-${CPUTYPE}.pet created. Press ENTER to continue: "
 read domore
} || { echo "Some error occured"; exit 1; }
fi

echo "All done."

###END###
