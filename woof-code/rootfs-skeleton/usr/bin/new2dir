#!/bin/bash
#(c) Copyright Barry Kauler 2007
#Now LGPL 2007
#run like this: # new2dir make install
#creates a directory one or two levels higher with the name of the package
#but slightly modified. For example source package has dir 'abiword-0.5.6'
#inside this you do the usual 'configure', 'make', then 'new2dir make install'
#and 'abiword-0.5.6-i486' directory gets created, with all installed files
#in it.

#	--debug
#	--debugger
#	--dump-po-strings
#	--dump-strings
#	--help
#	--init-file
#	--login
#	--noediting #not
#	--noprofile
#	--norc
#	--posix #not
#	--protected #not
#	--rcfile
#	--restricted
#	--verbose
#	--version
#	--wordexp
#/usr/bin/new2dir: line 328: /usr/bin/installwatch: restricted: cannot specify `/' in command names
#/usr/bin/new2dir: line 345: ../bluez-4.66-i686.files: restricted: cannot redirect output
#/usr/bin/new2dir: line 350: /tmp/bluez-4.66-i686.dirs: restricted: cannot redirect output
#/usr/bin/new2dir: line 354: ../bluez-4.66-i686.files: restricted: cannot redirect output
#/usr/bin/new2dir: line 358: /tmp/bluez-4.66-i686.moved.files: restricted: cannot redirect output

#SHELL TEST
A=ABCDE
[[ "$A" =~ 'A' ]] && SHELL_IS=OK || { echo "$0 needs to run in
bash environment that supports '=~' tests.
ERROR.
"
exit 2
}

usage(){
	echo "$0 [f c r] [s S l] [A C] make [opt] install
	f force go ahead without questions
	c clean remove existing TARGET-ARCH dirs for script
	r rescue don't run installwatch
	s use busybox script instead of installwatch
	S use script instead of installwatch
	l use logsave instead of installwatch
	A use -amin -5 instead of -mmin -5 in rescue mode
	C use -cmin -5 instead of -mmin -5 in rescue mode
	$1
	"
	exit $2
}

if [ ! $1 ];then
 echo "This script is used in the last step when installing a source"
 echo "or binary package. For example:"
 echo "# new2dir make install"
 echo "Exiting script."
 exit
fi

echo "ALL='$@'"
MAKE=`echo "$@" | grep -owe 'make.*instal[-_a-z0-9A-Z].*'`
[ ! "$MAKE" ] && MAKE='NONE' ###2012-04-03
OTHER=`echo "$@" |sed "s#$MAKE##"`
echo "MAKE='$MAKE'"
echo "OTHER='$OTHER'"

INSTALLWATCH_SCRIPT=/usr/bin/installwatch_orig
INSTALLWATCH_SCRIPT=/usr/bin/installwatch_0.6.1.1
#INSTALLWATCH_SCRIPT=/usr/bin/installwatch_0.6.7.0
INSTALLWATCH_SCRIPT=/root/my-applications/sbin/installwatch_custom.sh
INSTAllWATCH_FILE=/tmp/pkginstall.log

FIND_TIME=-mmin
##+++2012-04-28
Resc=off
for o in $OTHER;do
case $o in
-f |-f|f |f|/f |/f)TIMEOUT='-t 1';shift;;
-c |-c|c |c|/c |/c)CLEAN='y';shift;;
-r |-r|r |r|/r |/r)Resc=ON;shift;;
-l |-l|l |l|/l |/l)INSTALLWATCH=`which logsave` IW_LINE="-a $INSTAllWATCH_FILE \"$MAKE\"" IW_OUT_OPT=-a IW_EXE_OPT=-c;shift;;
-s |-s|s |s|/s |/s)INSTALLWATCH='busybox script' IW_LINE="-a -c \"$MAKE\" $INSTAllWATCH_FILE" IW_OUT_OPT=-a IW_EXE_OPT=-c;shift;;
-A |-A|A |A|/A |/A)FIND_TIME=-amin;shift;;
-C |-C|C |C|/C |/C)FIND_TIME=-cmin;shift;;
*)usage "invalid parameter $o" 1;;
esac
done

[ "$INSTALLWATCH" ] || INSTALLWATCH=$INSTALLWATCH_SCRIPT;IW_LINE="-o $INSTAllWATCH_FILE $MAKE";IW_OUT_OPT=-o;IW_EXE_OPT='';

if [ ! "$TIMEOUT" ] || [ "$Resc" = 'off' ];then
##+++2012-04-28
#MAKE_BINS=`find \( /usr/bin -o /usr/local/bin \) -type f -name "make*"`
MAKE_BINS=`find /usr/bin -type f \( -name "make" -o -name "make[-_]*" \)`
MAKE_BINS="$MAKE_BINS
`find /usr/local/bin -type f \( -name "make" -o -name "make[-_]*" \)`"
MAKE_BINS=`echo "$MAKE_BINS" |sort`
for m in $MAKE_BINS;do
((c++));echo $c:$m
MAKE_BIN[$c]=$m
done
echo "${MAKE_BIN[@]}"
echo ${MAKE_BIN[@]} |wc -w
if [ "`echo ${MAKE_BIN[@]} |wc -w`" -gt 1 ];then
while [ ! "$MAKE_VERSION" ];do
select NAME in ${MAKE_BIN[@]};do MAKE_VERSION=$NAME;echo $NAME $MAKE_VERSION;break;done
#sleep 2
done
MAKE=`echo $MAKE |sed "s|^make |$MAKE_VERSION |"`
fi
echo "MAKE='$MAKE'"
fi

#CURRDIR="`pwd`"
CURRDIR="$PWD"
#UPONE="`dirname "$CURRDIR"`"
UPONE="${CURRDIR%/*}"
#PKGDIR="../`basename "$CURRDIR"`"
PKGDIR="../${CURRDIR##*/}"
#xPKGDIR="`basename "$CURRDIR"`"
xPKGDIR="${CURRDIR##*/}"
if [ "`echo "$PKGDIR" | grep '[0-9]'`" = "" ];then
 #PKGDIR="../../`basename "$UPONE"`"
 PKGDIR="../../${UPONE##*/}"
 #xPKGDIR="`basename "$UPONE"`"
 xPKGDIR="${UPONE##*/}"
fi
if [ "`echo "$PKGDIR" | grep '[0-9]'`" = "" ];then
 echo "$PKGDIR does not seem to be the package directory with version"
 echo "number. Unfortunately, some source package tarballs expand to a"
 echo "directory that does not have version number in it's name. SeaMonkey"
 echo "is an example of this, it expands to a directory named just 'mozilla'."
 echo "This script will create a package with the same name as the directory"
 echo "and it absolutely must have the version number in it which must commence"
 echo "with a numeric digit. So, you must now close this rxvt terminal window"
 echo "then rename the directory. For example, for SeaMonkey version 1.0.7"
 echo "rename the directory from 'mozilla' to 'seamonkey-1.0.7'"
 echo "A dash '-' must be used to separate the package name from version."
 echo "A directory name like 'seamonkey-alpha1' is NOT allowed as the version"
 echo "number must start with a numeric digit, example 'seamonkey-1.0.7alpha1'."
 echo "Exiting $0."
 exit
fi

fixfilelistfunc() {
 #$1 is file to remove, as doesn't exist.
 echo " ...${1} has been deleted."
 grep -v "$1" /tmp/${EXE_PKGNAME}.files > /tmp/${EXE_PKGNAME}.files.tmp
 mv -f /tmp/${EXE_PKGNAME}.files.tmp /tmp/${EXE_PKGNAME}.files
}

echo
echo -en "\\033[1;31mStep 1" #red
echo -e "\\033[0;39m"
echo "It seems that the package directory is '$PKGDIR'"
echo "If this is correct, just press ENTER key."
echo "Otherwise, type the correct directory with relative address."
echo " NOTE:"
echo " This script will create a package with the same name as the directory"
echo " and it absolutely must have the version number in it which must commence"
echo " with a numeric digit, and name and version number must be separated by"
echo " a dash '-', for example, 'seamonkey-1.0.7'."
echo " A directory name like 'seamonkey-alpha1' is NOT allowed as the version"
echo " number must start with a numeric digit, example 'seamonkey-1.0.7alpha1'."
echo " If $PKGDIR is incorrect you must now exit with CTRL-C and close this"
echo " rxvt terminal window then rename the directory."
echo -n "Type response now: "
read $TIMEOUT REPLY1
[ "$REPLY1" ] && PKGDIR="$REPLY1"
if [ ! -d "$PKGDIR" ];then
 echo
 echo "$PKGDIR does not exist, exiting script."
 exit
fi
echo "Okay, using $PKGDIR"

echo
echo -en "\\033[1;31mStep 2" #red
echo -e "\\033[0;39m"
echo "Puppy is designed to run on a i486 CPU upwards. Normally this means"
echo "that you have to specify 'build=i486-t2-linux-gnu' (sometimes host=)"
echo "Some packages do not have that configure option and compile for a"
echo "specific CPU regardless what is in your PC."
echo "If you have compiled for a i486, just press ENTER key."
echo "Otherwise, enter the CPU type, examples: i386 i486 i686 (the i is required)."
echo -n "Type response here: "
read $TIMEOUT CPUTYPE
if [ "$CPUTYPE" = "" ];then
if [ ! "$TIMEOUT" ];then
CPUTYPE="i486"
else
CPUTYPE=`uname -m`
fi;fi

if [ ! "`echo -n "$CPUTYPE" | grep '^[a-zA-Z]'`" ];then
 echo "$CPUTYPE is not valid. Exiting."
 exit 300
fi
echo "Okay, using $CPUTYPE"

#would like to create different targets for exe, doc, dev, nls components...
EXE_TARGETDIR="${PKGDIR}-${CPUTYPE}" #relative path.
EXE_PKGNAME="`basename $EXE_TARGETDIR`"
RELPATH="`dirname $EXE_TARGETDIR`"
#difficult task, separate package name from version part...
#not perfect, some start with non-numeric version info...
xNAMEONLY="`echo -n "$xPKGDIR" | sed -e 's/\-[0-9].*$//g'`"
#...if that fails, do it the old way...
[ "$xNAMEONLY" = "$xPKGDIR" ] && xNAMEONLY="`echo "$xPKGDIR" | cut -f 1 -d "-"`"
NAMEONLY="${RELPATH}/${xNAMEONLY}"
#abasename="`basename ${PKGDIR}`"
apattern="s/${xNAMEONLY}\\-//g"
VERONLY="`echo -n "$xPKGDIR" | sed -e "$apattern"`"
DOC_TARGETDIR="${NAMEONLY}_DOC-${VERONLY}-${CPUTYPE}"
DOC_PKGNAME="`basename $DOC_TARGETDIR`"
DEV_TARGETDIR="${NAMEONLY}_DEV-${VERONLY}-${CPUTYPE}"
DEV_PKGNAME="`basename $DEV_TARGETDIR`"
NLS_TARGETDIR="${NAMEONLY}_NLS-${VERONLY}-${CPUTYPE}"
NLS_PKGNAME="`basename $NLS_TARGETDIR`"

if [ "$CLEAN" ];then
rm -rf "$EXE_TARGETDIR" #2>/dev/null
rm -rf "$DOC_TARGETDIR" #2>/dev/null
rm -rf "$DEV_TARGETDIR" #2>/dev/null
rm -rf "$NLS_TARGETDIR" #2>/dev/null
fi

echo
echo -en "\\033[1;31mStep 3" #red
echo -e "\\033[0;39m"
echo "If you wish, you can split the final package up into separate"
echo "packages for the 'executables', 'documentation', 'development' and"
echo "'international' components."
echo "If the package has shared libraries, it is recommended to at least"
echo "create a seaparate 'development' package."
echo "The idea here is to 'trim the fat' as much as possible so that you only"
echo "have what is absolutely needed in the 'executables' PET package, but"
echo "the extra components can be installed if needed."
echo "WARNING: The automatic splitting performed by this script may not be"
echo "         perfect and you may have to modify the contents of the created"
echo "         separate directories before the final step of converting them"
echo "         to PET packages."
echo
echo "Just press ENTER key only to create one package only."
echo "Or, type a number to choose which separate packages to create:"
echo " 1 Just one package (directory) only"
echo " 2 Create a separate 'development' package"
echo " 3 Create separate 'development', 'documentation', 'international' pkgs"
echo "Or, type a comma-separated list of the separate pkgs that you want to"
echo " create, using keywords 'exe', 'dev', 'doc', 'nls'."
echo " Example: exe,dev,doc  (in this example, nls component is left in the"
echo " main package, that is, the exe component)."
echo -n "Type response (just press ENTER if in doubt): "
read $TIMEOUT SPLITPETS
if [ "$SPLITPETS" = "" ];then echo
if [ ! "$TIMEOUT" ];then
SPLITPETS="exe"
else
SPLITPETS=3
fi;fi
[ "$SPLITPETS" = "1" ] && SPLITPETS="exe"
[ "$SPLITPETS" = "2" ] && SPLITPETS="exe,dev"
[ "$SPLITPETS" = "3" ] && SPLITPETS="exe,dev,doc,nls"
EXESPLIT="";DOCSPLIT="";DEVSPLIT="";NLSSPLIT=""
[ "`echo "$SPLITPETS" | grep 'exe'`" ] && EXESPLIT="yes"
[ "`echo "$SPLITPETS" | grep 'doc'`" ] && DOCSPLIT="yes"
[ "`echo "$SPLITPETS" | grep 'dev'`" ] && DEVSPLIT="yes"
[ "`echo "$SPLITPETS" | grep 'nls'`" ] && NLSSPLIT="yes"


[ "`echo "$SPLITPETS" | grep 'exe'`" ] && mkdir "$EXE_TARGETDIR"

echo '$1='"'$1'"

if [ "$Resc" = "ON" ];then

sync
echo -n "searching for $FIND_TIME -5 files in /usr .. "
F=`find /usr $FIND_TIME -5`
echo -n "/etc .. "
E=`find /etc $FIND_TIME -5 | grep -vE 'cups|mtab'`
echo -n "/sbin .. "
S=`find /sbin $FIND_TIME -5`
echo -n "/bin .. "
B=`find /bin $FIND_TIME -5`
echo "/lib .."
L=`find /lib $FIND_TIME -5`
C="$F
$E
$S
$B
$L"
C=`echo "$C" |sort -u`

#NO-List : Files with these extensions, more to come... : "\." and "$" need to be the very first and last :
N_LIST='\.m4,h,hpp,gz,html,xml,css,a,la,bz2,txt,pm,pl,py,pc,mo,bash,tcsh,csh,sh,ksh,zsh,diff,conf,cfg,lst,desktop,png,xpm,jpg,jpeg,pnm,pbm,xbm,pnm,tif,tga,j2k,bmp,gif$'
N_LIST=`echo "$N_LIST" |sed 's#,#\$|\\\\\.#g'`
N_LIST="${N_LIST}|/man/|/doc/|/info/|/i18n/|/help/"
strip_func(){
[ "`echo "$1" | grep -E "$N_LIST"`" ] && return 0
FILE=`file "$1"`
[ "`echo "$FILE" | grep 'ELF' | grep 'shared object'`" ] && { strip --strip-debug "${EXE_TARGETDIR}${1}";return $?; }
[ "`echo "$FILE" | grep 'ELF' | grep 'executable'`" ] && { strip --strip-unneeded "${EXE_TARGETDIR}${1}";return $?; }
[[ "${1%##*/}" =~ '\.' ]] && echo -e "\\033[1;35m""Notice : 'No_LIST' FIXME : '$1' .""\\033[0;39m";return 0
}

for i in $C ; do
#echo "found '$i'"
[ -d "$i" ] && { echo "creating DIR '$i'";mkdir -p "${EXE_TARGETDIR}${i}";continue; }
[ -f "$i" ] && { echo "copying file '$i'";mkdir -p "${EXE_TARGETDIR}${i%/*}";cp -ia "${i}" "${EXE_TARGETDIR}${i}";strip_func "$i";continue; }
[ -L "$i" ] && { echo "copying LINK '$i'";mkdir -p "${EXE_TARGETDIR}${i%/*}";cp -ia --remove-destination "${i}" "${EXE_TARGETDIR}${i}";continue; }
echo -e "\\033[1;35m""NOTICE: FIXME : '$i' is skipped today.""\\033[0;39m"
done

find -name "*.log" -exec cp --backup=numbered {} ${EXE_TARGETDIR} \;
echo "$C" > "${EXE_TARGETDIR}"/${EXE_PKGNAME}.files
echo "$C" >> /root/.packages/${EXE_PKGNAME}.files
exit $?
##
else

echo
echo -en "\\033[1;31mStep 4" #red
echo -e "\\033[0;39m"
echo "The following line is about to be executed:"
echo "# installwatch -o $INSTAllWATCH_FILE ${@}"
echo "...this logs all file activity to $INSTAllWATCH_FILE"
echo "This script will then determine all newly created directories"
echo "and files and create '$EXE_TARGETDIR' with the new files."
echo "(and optionally ${DEV_TARGETDIR}, ${DOC_TARGETDIR}, ${NLS_TARGETDIR})"
echo -n "Press ENTER key to continue: "
read $TIMEOUT goforit

[ "$goforit" ] || echo

#/usr/bin/installwatch: line 338: make install: command not found
#installwatch -o /tmp/pkginstall.list "${MAKE}"

#/usr/bin/ginstall -c lynx /usr/local/bin/lynx
#make: *** [install-bin] Segmentation fault
#ERROR, SOMETHING WENT WRONG
#ls -l /tmp
#ls -lF / | grep -E 'var/$|tmp/$'
#chmod -vR 1777 /tmp
#chmod -vR 0777 /var
#find /tmp -type d -exec chmod 0777 {} \;
#find /tmp -type f -exec chmod 0666 {} \;
#find /var -type d -exec chmod 0777 {} \;
#find /var -type f -not \( -wholename "*/bin/*" -o -wholename "*/sbin/*" \) -exec chmod 0666 {} \;
#bash-3.00# chmod --help
#Usage: chmod [OPTION]... MODE[,MODE]... FILE...
#  or:  chmod [OPTION]... OCTAL-MODE FILE...
#  or:  chmod [OPTION]... --reference=RFILE FILE...
#Change the mode of each FILE to MODE.
#
#  -c, --changes           like verbose but report only when a change is made
#      --no-preserve-root  do not treat `/' specially (the default)
#      --preserve-root     fail to operate recursively on `/'
#  -f, --silent, --quiet   suppress most error messages
#  -v, --verbose           output a diagnostic for every file processed
#      --reference=RFILE   use RFILE's mode instead of MODE values
#  -R, --recursive         change files and directories recursively
#      --help     display this help and exit
#      --version  output version information and exit
#
#Each MODE is of the form `[ugoa]*([-+=]([rwxXst]*|[ugo]))+'.
#
#Report chmod bugs to bug-coreutils@gnu.org

#bash-3.00# checkinstall
#
#checkinstall 1.6.2, Copyright 2009 Felipe Eduardo Sanchez Diaz Duran
#  Diese Software wurde unter der GNU GPL veröffentlicht
#
#
#
#**** Failed to create temp dir!
#**** Do you have write permission for /var/tmp?
#
#**** Aborting installation.
#
#[was not existing at all ;) ]


sync
touch $INSTAllWATCH_FILE
sync
chmod 0666 $INSTAllWATCH_FILE
sync
echo "2Quoted : '$INSTALLWATCH' '$IW_LINE'"
echo 'Not Quotd: '$INSTALLWATCH $IW_LINE
#echo $INSTALLWATCH $IW_OUT_OPT $IW_EXE_OPT "$MAKE" /tmp/pkginstall.list
#installwatch -o /tmp/pkginstall.list $MAKE
#$INSTALLWATCH $IW_OUT_OPT /tmp/pkginstall.list $IW_EXE_OPT $MAKE
#$INSTALLWATCH $IW_OUT_OPT $IW_EXE_OPT "$MAKE" /tmp/pkginstall.list
$INSTALLWATCH $IW_LINE
INSTALLWATCHRV="$?"
#Usage: script [-afq] [-c PROG] [OUTFILE]
#/sbin/logsave -a -c make install /tmp/pkginstall.list
#/sbin/logsave: invalid option -- 'c'
#Usage: logsave [-v] [-d dir] logfile program

if [ "$INSTALLWATCHRV" -ne '0' ];then
echo -e "\e[1;31m""ERROR, SOMETHING WENT WRONG""\e[0;39m"
defaulttexteditor $INSTAllWATCH_FILE
exit "$INSTALLWATCHRV"
fi
sync
#create list of installed files...
#v2.17 bug, if sometimes logs files in the pkg installing from, have added
# filter out $UPONE...
# BUGPATTERN='&'"$UPONE"
# no, just filter out /mnt and /initrd...
cat $INSTAllWATCH_FILE | grep '#success$' | tr -s '\t' | tr '&' ' ' | tr '\t' '&' | grep '^[345]&open&' | grep --extended-regexp -v '&/dev/tty&|&/dev/null&|&/root/\.packages/|&/tmp/|&/root/\.icewm/|&/proc/|&/sys/|DotPupTmpDir|/\.myownmenuerc' | grep -E -v '&/initrd|&/mnt/' | cut -f 3 -d '&' > ${RELPATH}/${EXE_PKGNAME}.files
#...list will only have created files, not created directories, so an empty
#   directory won't get recorded.

#bad if we miss out installing an empty directory...
cat $INSTAllWATCH_FILE | grep '#success$' | tr -s '\t' | tr '&' ' ' | tr '\t' '&' | grep '^0&mkdir&' | grep --extended-regexp -v '&/dev/tty&|&/dev/null&|&/root/\.packages/|&/tmp/|&/root/\.icewm/|&/proc/|&/sys/|DotPupTmpDir|/\.myownmenuerc' | grep -E -v '&/initrd|&/mnt/' | cut -f 3 -d '&' | sed -e 's/^\/\//\//g' > /tmp/${EXE_PKGNAME}.dirs

sync
#pick up created symlinks...
cat $INSTAllWATCH_FILE | grep '#success$' | tr -s '\t' | tr '&' ' ' | tr '\t' '&' | grep '^0&symlink&' | grep --extended-regexp -v '&/dev/tty&|&/dev/null&|&/root/\.packages/|&/tmp/|&/root/\.icewm/|&/proc/|&/sys/|DotPupTmpDir|/\.myownmenuerc' | grep -E -v '&/initrd|&/mnt/' | cut -f 4 -d '&' >> ${RELPATH}/${EXE_PKGNAME}.files

sync
#problem if there is a post-install script that moves or renames a file...
cat $INSTAllWATCH_FILE | grep '#success$' | tr -s '\t' | tr '&' ' ' | tr '\t' '&' | grep '^0&rename&' | grep --extended-regexp -v '&/dev/tty&|&/dev/null&|&/root/\.packages/|&/tmp/|&/root/\.icewm/|&/proc/|&/sys/|DotPupTmpDir|/\.myownmenuerc' | grep -E -v '&/initrd|&/mnt/' | cut -f 3,4 -d '&' | tr '\n' ' ' > /tmp/${EXE_PKGNAME}.moved.files
#find out if any installed file got moved/renamed...
if [ -s /tmp/${EXE_PKGNAME}.moved.files ];then
 for ONEMOVED in `cat /tmp/${EXE_PKGNAME}.moved.files`
 do
  ONEORIG="`echo -n "$ONEMOVED" | cut -f 1 -d '&'`"
  ONENEW="`echo -n "$ONEMOVED" | cut -f 2 -d '&'`"
  grep -v "$ONEORIG" ${RELPATH}/${EXE_PKGNAME}.files > /tmp/${EXE_PKGNAME}.files
  echo "$ONENEW" >> /tmp/${EXE_PKGNAME}.files
  sync
  mv -f /tmp/${EXE_PKGNAME}.files ${RELPATH}/${EXE_PKGNAME}.files
 done
fi

sync
echo
echo -en "\\033[1;31mStep 5" #red
echo -e "\\033[0;39m"
#fixfilelistfunc() uses this...
cp -af ${RELPATH}/${EXE_PKGNAME}.files /tmp/${EXE_PKGNAME}.files
#...a post-install script could delete files, which fixfilelistfunc fixes.

N_LIST='\.m4,h,hpp,gz,html,xml,css,a,la,bz2,txt,pm,pl,py,pc,mo,bash,tcsh,csh,sh,ksh,zsh,diff,conf,cfg,lst,desktop,png,xpm,jpg,jpeg,pnm,pbm,xbm,pnm,tif,tga,j2k,bmp,gif$'
N_LIST=`echo "$N_LIST" |sed 's#,#\$|\\\\\.#g'`
cat ${RELPATH}/${EXE_PKGNAME}.files |
while read ONEFILE
do
 #ONEBASE="`basename "$ONEFILE"`"
 ONEBASE="${ONEFILE##*/}"
 #ONEPATH="`dirname "$ONEFILE"`"
 ONEPATH="${ONEFILE%/*}"
 echo "Processing ${ONEFILE}"

 #strip the file...
 if [ ! -h "$ONEFILE" ];then #make sure it isn't a symlink
  if [ ! "`echo "$ONEBASE" | grep -E "$N_LIST"`" ];then
  FILE=`file "$ONEFILE"`
  #[ ! "`file "$ONEFILE" | grep 'ELF' | grep 'shared object'`" = "" ] && strip --strip-debug "$ONEFILE"
  [ "`echo "$FILE" | grep 'ELF' | grep 'shared object'`" ] && strip --strip-debug "$ONEFILE"
  #[ ! "`file "$ONEFILE" | grep 'ELF' | grep 'executable'`" = "" ] && strip --strip-unneeded "$ONEFILE"
  [ "`echo "$FILE" | grep 'ELF' | grep 'executable'`" ] && strip --strip-unneeded "$ONEFILE"
 fi;fi
 sync

 if [ "$NLSSPLIT" = "yes" ];then
  #find out if this is an international language file...
  if [ ! "`echo -n "$ONEFILE" | grep --extended-regexp '/locale/|/nls/|/i18n/'`" = "" ];then
   mkdir -p "${NLS_TARGETDIR}/${ONEPATH}"
   cp -af "$ONEFILE" "${NLS_TARGETDIR}/${ONEPATH}/" 2>/dev/null
   [ $? -ne 0 ] && fixfilelistfunc $ONEFILE
   continue
  fi
 fi

 if [ "$DOCSPLIT" = "yes" ];then
  #find out if this is a documentation file...
  if [ ! "`echo -n "$ONEFILE" | grep --extended-regexp '/man/|/doc/|/docs/|/info/|/gtk-doc/|/faq/|/manual/|/examples/|/help/|/htdocs/'`" = "" ];then
   mkdir -p "${DOC_TARGETDIR}/${ONEPATH}"
   cp -af "$ONEFILE" "${DOC_TARGETDIR}/${ONEPATH}/" 2>/dev/null
   [ $? -ne 0 ] && fixfilelistfunc $ONEFILE
   continue
  fi
 fi

 if [ "$DEVSPLIT" = "yes" ];then
  #find out if this is development file...
  if [ ! "`echo -n "$ONEFILE" | grep --extended-regexp '/include/|/pkgconfig/|/aclocal|/cvs/|/svn/'`" = "" ];then
   mkdir -p "${DEV_TARGETDIR}/${ONEPATH}"
   cp -af "$ONEFILE" "${DEV_TARGETDIR}/${ONEPATH}/" 2>/dev/null
   [ $? -ne 0 ] && fixfilelistfunc $ONEFILE
   continue
  fi
  #find *.so symlink files...
  if [ -h "$ONEFILE" ];then #-h tests for symlink
   if [ ! "`echo -n "$ONEFILE" | grep '\.so$'`" = "" ];then
    mkdir -p "${DEV_TARGETDIR}/${ONEPATH}"
    cp -af "$ONEFILE" "${DEV_TARGETDIR}/${ONEPATH}/" 2>/dev/null
    [ $? -ne 0 ] && fixfilelistfunc $ONEFILE
    continue
   fi
  fi
  #find various config files...
  if [ ! "`echo -n "$ONEBASE" | grep --extended-regexp '\-config$|config.sh$|Conf.sh$'`" = "" ];then
    mkdir -p "${DEV_TARGETDIR}/${ONEPATH}"
    cp -af "$ONEFILE" "${DEV_TARGETDIR}/${ONEPATH}/" 2>/dev/null
    [ $? -ne 0 ] && fixfilelistfunc $ONEFILE
    continue
  fi
  #all .a and .la files... and any stray .m4 files...
  if [ ! "`echo -n "$ONEBASE" | grep --extended-regexp '\.a$|\.la$|\.m4$'`" = "" ];then
    mkdir -p "${DEV_TARGETDIR}/${ONEPATH}"
    cp -af "$ONEFILE" "${DEV_TARGETDIR}/${ONEPATH}/" 2>/dev/null
    [ $? -ne 0 ] && fixfilelistfunc $ONEFILE
    continue
  fi
 fi

 #anything left over goes into the main 'executable' package...
 if [ "$EXESPLIT" = "yes" ];then
  mkdir -p "${EXE_TARGETDIR}/${ONEPATH}"
  cp -af "$ONEFILE" "${EXE_TARGETDIR}/${ONEPATH}/" 2>/dev/null
  [ $? -ne 0 ] && fixfilelistfunc $ONEFILE
  #fix for empty directories...
  cat /tmp/${EXE_PKGNAME}.dirs |
  while read ANEWDIR
  do
   [ "`ls -1 $ANEWDIR`" = "" ] && mkdir -p ${EXE_TARGETDIR}${ANEWDIR}
  done
 fi
done
sync
cp -af /tmp/${EXE_PKGNAME}.files ${RELPATH}/${EXE_PKGNAME}.files


##+++2011-12-27 KRG
##remove whiteout files
find  ${EXE_TARGETDIR} -name "*.wh.*" -exec rm {} \;
[ -d ${NLS_TARGETDIR} ] && find  ${NLS_TARGETDIR} -name "*.wh.*" -exec rm {} \;
[ -d ${DOC_TARGETDIR} ] && find  ${DOC_TARGETDIR} -name "*.wh.*" -exec rm {} \;
[ -d ${DEV_TARGETDIR} ] && find  ${DEV_TARGETDIR} -name "*.wh.*" -exec rm {} \;
##copy the unnecessary .files file to ${EXE_TARGETDIR}
cp -af /tmp/${EXE_PKGNAME}.files ${EXE_TARGETDIR}
##cp logfiles
find -name "*.log" -exec cp {} ${EXE_TARGETDIR} \;
##rm hidden files on top of rootfs
find  ${EXE_TARGETDIR} -maxdepth 1 -type f -name ".[a-zA-Z0-9]*" -exec rm {} \;
[ -d ${NLS_TARGETDIR} ] && find  ${NLS_TARGETDIR} -maxdepth 1 -type f -name ".[a-zA-Z0-9]*" -exec rm {} \;
[ -d ${DOC_TARGETDIR} ] && find  ${DOC_TARGETDIR} -maxdepth 1 -type f -name ".[a-zA-Z0-9]*" -exec rm {} \;
[ -d ${DEV_TARGETDIR} ] && find  ${DEV_TARGETDIR} -maxdepth 1 -type f -name ".[a-zA-Z0-9]*" -exec rm {} \;
###+++2011-12-27 KRG

fi

echo
echo -en "\\033[1;31mFinished" #red
echo -e "\\033[0;39m"
echo "$EXE_TARGETDIR is now fully populated."
[ -d "$DEV_TARGETDIR" ] && echo "$DEV_TARGETDIR has also been populated."
[ -d "$DOC_TARGETDIR" ] && echo "$DOC_TARGETDIR has also been populated."
[ -d "$NLS_TARGETDIR" ] && echo "$NLS_TARGETDIR has also been populated."
echo "${RELPATH}/${EXE_PKGNAME}.files has a list of the installed files."
echo "You might want to go into it and trim the fat or whatever,"
echo "but basically it is now ready to be converted to a PET"
echo "package. Just do this:"
echo "# cd ${RELPATH}"
echo "# dir2pet $EXE_PKGNAME"

echo
echo "Press ENTER only to exit this script."
echo "Or, if you want the convenience, the 'dir2pet' script can be launched"
echo "right now -- press any character on the keyboard then ENTER."
echo -n "Type response here: "
read  $TIMEOUT nextphase
[ "$nextphase" = "" ] && echo && exit

cd ${RELPATH}
if [ -d ${xNAMEONLY}-${VERONLY}-${CPUTYPE} ];then
 dir2pet ${xNAMEONLY}-${VERONLY}-${CPUTYPE}
 echo -n "${xNAMEONLY}-${VERONLY}-${CPUTYPE}.pet created. Press ENTER to continue: "
 read domore
fi

if [ -d ${xNAMEONLY}_DEV-${VERONLY}-${CPUTYPE} ];then
 dir2pet ${xNAMEONLY}_DEV-${VERONLY}-${CPUTYPE}
 echo -n "${xNAMEONLY}_DEV-${VERONLY}-${CPUTYPE}.pet created. Press ENTER to continue: "
 read domore
fi

if [ -d ${xNAMEONLY}_DOC-${VERONLY}-${CPUTYPE} ];then
 dir2pet ${xNAMEONLY}_DOC-${VERONLY}-${CPUTYPE}
 echo -n "${xNAMEONLY}_DOC-${VERONLY}-${CPUTYPE}.pet created. Press ENTER to continue: "
 read domore
fi

if [ -d ${xNAMEONLY}_NLS-${VERONLY}-${CPUTYPE} ];then
 dir2pet ${xNAMEONLY}_NLS-${VERONLY}-${CPUTYPE}
 echo -n "${xNAMEONLY}_NLS-${VERONLY}-${CPUTYPE}.pet created. Press ENTER to continue: "
 read domore
fi

echo "All done."

###END###
