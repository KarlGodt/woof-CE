#!/bin/ash
#(c) Copyright Barry Kauler 2003,2004,2005,2006,2007 www.puppylinux.com
#2007 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#v3.90 rawpup, update for Xvesa.
#v3.94, v3.95, recognise Classmate, EeePC laptops.
#v3.98 change to home directory.
#v3.98 forced reboot handling improved by pizzasgood.
#v3.99 automatically handle problematic video adapters that hang Xvesa.
#v405 added support for xvesa 1024x600.
#v408 BK k2.6.25.16 serial mouse driver now a module 'sermouse'.
#v411 rerwin: mouse improvements.
#w001 fixes for woof, /usr/X11R7 not used.
#w460 fixes to get Xvesa running with woof build. fix for X restart after exit.
#w477, w478 more fixes Xvesa restart after first 'Exit to prompt'.
#w479 older Xvesa server may not recognise '-sp' option.
#w479 k2.6.18.8 need awful hack, Xorg, '-nolisten tcp' causes hang!
#v424 bad hack to fix serial mouse.

########################################################################
#
# Changes by Karl Reimer Godt
# 01.0 : exec 2>"$tmpDir"/log
# 02.0 : check for if X11 belongs to PATH
# 03.0 : added check if more than one instance of xwin running
#        moved the XLOADED part into it
# 04.0 : put ddcprobe into a function
#
#
# p1.0 : try to get into /root dir if $HOME='/'
# p2.0 : added several XVARS from /etc/profile
# p3.0 : create evtl. /etc/jwmrc.system
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.34.7-i486
# SATADRIVES='·sda'
# USB_SATAD='·sdb'
# PUP_HOME='/'
# Linux·puppypc·2.6.34.7-i486·#1·SMP·Mon·Dec·20·16:26:36·GMT-8·2010·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=en_US
# today=Thu·Oct·27·17:06:12·CEST·2011
#
# TODO1 : above kernel 2.6.34.7-i486 SMP
#         nvidiafb debug enabled ( as usual :( )
#         loaded with the many drivers
#
# nvidiafb               33722  1
# fb                     38510  8 fbcon,tileblit,bitblit,fbcon_cw,fbcon_ud,fbcon_ccw,softcursor,nvidiafb
# fb_ddc                  1159  1 nvidiafb
# backlight               2993  1 nvidiafb
# i2c_algo_bit            3813  1 nvidiafb
# cfbcopyarea             2649  1 nvidiafb
# vgastate                5550  1 nvidiafb
# cfbimgblt               1905  1 nvidiafb
# cfbfillrect             2485  1 nvidiafb
# fbcon                  28738  71
# fbdev                    557  1 fbcon
# tileblit                1611  1 fbcon
# font                    5050  1 fbcon
# bitblit                 3524  1 fbcon
# fbcon_rotate            1628  1 bitblit
# fbcon_cw                3846  1 fbcon_rotate
# fbcon_ud                3934  1 fbcon_rotate
# fbcon_ccw               3948  1 fbcon_rotate
# softcursor               895  4 bitblit,fbcon_cw,fbcon_ud,fbcon_ccw
# nvidiafb               33722  1
# fb                     38510  8 fbcon,tileblit,bitblit,fbcon_cw,fbcon_ud,fbcon_ccw,softcursor,nvidiafb
# fb_ddc                  1159  1 nvidiafb
# backlight               2993  1 nvidiafb
# i2c_algo_bit            3813  1 nvidiafb
# cfbcopyarea             2649  1 nvidiafb
# vgastate                5550  1 nvidiafb
# cfbimgblt               1905  1 nvidiafb
# cfbfillrect             2485  1 nvidiafb
# i2c_i801                6663  0
# intel_agp              21149  0
# agpgart                24088  1 intel_agp
#
# 01:00.0 030000 10DE:0182 <nvidiafb>
# 00:1f.5 040100 8086:2445 <Intel ICH>
# 00:1f.4 0C0300 8086:2444 <uhci_hcd>
# 00:1f.3 0C0500 8086:2443 <i801_smbus>
# 00:1f.2 0C0300 8086:2442 <uhci_hcd>
# 00:1f.1 010180 8086:244B <ata_piix>
# 00:1f.0 060100 8086:2440 <>
# 00:1e.0 060400 8086:244E <>
# 00:01.0 060400 8086:1A31 <>
# 00:00.0 060000 8086:1A30 <>
#
# Xorg would not run : nv and vesa[:out the range:]
# Xvesa did run ok , but to get any mouse to work [usb,ps2,serial] which i could not even by loading sermouse , psmouse
# or unloading usbkbd . Normal keyboard did not work 2 boots[needed modprobe atkbd manually], but 3.boot ..............
# Now , after running xorgwizard few times , even Xvesa did edidfail[card:ok,monitor:nothing]
#
# TODO2: add support for more arguments like -S|--xserver=Xorg -v -h -w ~FIXED
# TODO3: /tmp/wmexitmode.txt removal
#         plogout frontend_d [exitprompt is simple killall X]
#         frontend_d
#
# TODO4: basename was missing var
# TODO5: add echo 'exit' > $tmpDir/wmexitmode.txt at X server closing
#
########################################################################

alias modprobe='modprobe -b'  ##+++2012-02-03

test -f /etc/rc.d/f4puppy5 && . /etc/rc.d/f4puppy5

Version='2.0.0-getopts Puppy-Linux-4.3.0 KRG'

# REM needs to set real HOME
if [ "`whoami`" = root ]; then
test "$HOME" = '/' && HOME=/root
cd "$HOME"
export HOME
fi

#if [ "$HOME" != "/" ] ; then
#cd ~/
#fi

#if [ "$HOME" = "/" ] ; then
#export HOME=/root;fi

echo "HOME='$HOME'"

test -f /etc/profile       && . /etc/profile  ##+++2013-09-03

#variables created at bootup by init script in initrd...
. /etc/rc.d/PUPSTATE #v2.02
#PUPMODE=current operating configuration,
#PDEV1=the partition have booted off, DEV1FS=f.s. of PDEV1,
#PUPSFS=pup_201.sfs versioned name, stored on PDEV1, PUPSAVE=vfat,sda1,/pup_save.3fs
#PMEDIA is a broad description of the boot media, ex "usbflash" or "idehd".
tmpDir='/tmp/xwin'  ##+++2011-11-05
mkdir -p "$tmpDir"

KERNELVER="`uname -r`" #w479
Date="`date +%d%b%Y`"

###<KRG 2011_10_27>
debug(){
echo "$0: $@"
}

[ "$DEBUG" ] && echo "$0:line 180"
#### BEGIN Ex /etc/profile part #######
#v2.10 MU: rox crashes with DRI modules. solution:
export XLIB_SKIP_ARGB_VISUALS=1
#v2.02 rarsa provided this...
#freedesktop base directory spec: standards.freedesktop.org/basedir-spec/latest/
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_DIRS=/usr/share:/usr/local/share
export XDG_CONFIG_DIRS=/etc/xdg #v2.14 changed from /usr/etc
export XDG_CACHE_HOME="$HOME/.cache"

#w468 'netpbm' utilities need to be told where rgb.txt is...
[ -f /usr/share/X11/rgb.txt ] && export RGBDEF=/usr/share/X11/rgb.txt
##### END Ex profile X PART ##############

XinitXorgVars="$HOME/.xinitrc"

#v1.0.7
HAVEX="`readlink /usr/bin/X`"
echo "HAVEX='$HAVEX'"

DEBUG=1

usage(){
echo "
USAGE: $0 [OPTIONS] [windowmanager]

$2

-h) help to show this usage .
-s SERVER) Xserver to use (ie: Xorg , Xvesa , Xchips) .
-v) verbose output .
-V) show version information .
-w WMANGR) WindowManager to use (ie: jwm, openbox, icewm) .
-d) debug with 'set -x' .

Script to lauch the X windows environment
with the X-Server by 'xinit' and the Window-Manager according to
the entries in 'HOME/.xinitrc' and '/etc/windowmanager' .
Also known in the Linux world as 'start X' .
"
exit $1
}
OUTPUT='/dev/null';ERR='/dev/null'
while getopts hvVds:w: opt;do
case $opt in
h) usage 0;;
v) DeBug='1';VERBOSE='-v';LONG_VERBOSE='--verbose';LONG_X_VERBOSE='-verbose'
OUTPUT='/dev/stdout' ; ERR='/dev/stderr'
;;
V) echo -e "\n$0: Version '$Version'\n";exit 0;;
s) XServer="$OPTARG"
 [ "$Xserver" ] || usage 1 "Error: No Xserver specified"
 if [ -z "`which $XServer`" ] ; then
  usage 1 "'$XServer' not found in the PATH"
 elif [ ! -L /usr/bin/X ] ; then
  usage 1 "/usr/bin/X is not a link"
 else
  rm $VERB -f /usr/bin/X
  ln -s "$XServer" /usr/bin/X
 fi

 XServerOK=`readlink -f /usr/bin/X`
 if [ -z "$XServerOK" ] ; then
  usage 1 "The readlink -f command could not find the target '$XServer'"
 elif [ ! -x "$XServerOK" ] ; then
  usage 1 "'$XServerOK' is not set executable"
 fi
;;
w) WINDOW_MANAGER="$OPTARG";wM="$WINDOW_MANAGER"
 [ "$wM" ] || usage 1 "No windowmanager specified"
 if [ -z "`which $WINDOW_MANAGER`" ] ; then
  usage 1 "'$WINDOW_MANAGER' not found in the PATH"
 fi
;;
d) set -x;;
*) usage 1 "Unknown option '$opt'"
;;
esac;done
while [ "$2" ];do #shift;done
 case $1 in
  -s[[:alnum:][:punct:]]?*|-w[[:alnum:][:punct:]]?*) :;;
  -s|-w) shift;;
  *):;;
esac;shift;done
while [ "$2" ];do shift;done

 echo "$0:PARAMETER 1='$1'"
 [ "$wM" ] || wM="$1"

##+++2012-05-02
[ -f /tmp/X.status ] && {
NO_X=`cat /tmp/X.status | grep -i 'nox'`
rm $VERB -f /tmp/X.status
if [ "$NO_X" ];then
echo "$0:nox found in /tmp/X.status: '$NO_X' ; exiting."
exit 0
else
##+++2012-05-02
##+++2012-04-10
cat /dev/vcs1 >/tmp/vcs1xwin.txt
echo -e "\n\n" >>/tmp/vcs1xwin.txt
echo -e "`cat /tmp/vcs1xwin.txt |sed -e 's,\(.\{80\}\),\1\\n,g'`" >>/tmp/vcs1xwin.txt
##+++2012-04-10

##+++2012-04-11
echo -n "Running udevadm settle for max. 30 seconds ..."
udevadm settle --timeout=30
echo -e "\e[72G\e[1;32m""done""\e[0;39m"
##+++2012-04-11

##+++2012-03-03
 if [ "`pidof pup_event_backend_modprobe`" -o "`pidof rc.services`" ];then ##+++2012-04-11
 echo -n "Waiting for kernel-drivers completely loaded..."
 while [ "`pidof pup_event_backend_modprobe`" ];do
 sleep 2s;done
 while [ "`pidof rc.services`" ];do
 sleep 2s;done
 echo -e "\\033[72G\\033[1;32m""done""\\033[0;39m"
 fi  ##+++2012-04-11
##+++2012-03-03
fi
}
##+++2012-05-02

##+++2012-04-23
cat /dev/vcs1 >/tmp/vcs1xwin1.txt
echo -e "\n\n" >>/tmp/vcs1xwin1.txt
echo -e "`cat /tmp/vcs1xwin1.txt |sed -e 's,\(.\{80\}\),\1\\n,g'`" >>/tmp/vcs1xwin1.txt
##+++2012-04-23
if test "`echo $PATH | grep 'X11'`" = "" ; then
PATH="$PATH:/usr/X11R7/bin"
fi

echo 'runlevel : '`runlevel`

pidof -o $$ -o %PPID ${0##*/} && { echo " Another instance of $0 already running." ; exit 1 ; }

if [ -n "$DISPLAY" ]; then ## || echo '$DISPLAY not empty exit now ' && echo "$DISPLAY" && exit #v2.11 from GuestToo.
 echo "DISPLAY not empty :'$DISPLAY'"
 echo "Exiting $0 ."
exit
fi

echo -e "\\033[1;33m""This script will run X windows for you...""\\033[0;39m"

#0.9.9 enables to start a specific w.m. from commandline...
if [ "$wM" ];then # 1.0
 echo "$wM" > /etc/windowmanager
 #note, /root/.xinitrc uses this file.
fi # 1.0

#v2.12
#xorgwizard creates this file, run once only...
if [ ! -f /tmp/bootcnt.txt ];then
 [ -f /etc/resolutionfix ] && {
  read Comd Nr MaxX MaxY </etc/resolutionfix
#  IFS=x read ModeX ModeY <<EOI
#$(tac /etc/X11/xorg.conf | grep -w ' Modes ' | grep -o -m1 -e '"[0-9]*x[0-9]*"' | tr -d '"')
#EOI
  MODES=`tac /etc/X11/xorg.conf | grep -w ' Modes ' | grep -o -m1 -e '"[0-9]*x[0-9]*"' | tr -d '"'`
  for aMODE in $MODES ; do
   cMODEs=$((cMODEs+1))
   ModeX=${aMODE%x*};ModeY=${aMODE#*x}
  if [ "$MaxX" = "$ModeX" -a "$MaxY" = "$ModeY" ] ; then
   eval `cat /etc/resolutionfix`;break
  else
   cMODEsNo=$((cMODEsNo+1))
   #rm /etc/resolutionfix
   fi
   done
   [ "$cMODEsNo" = "$cMODEs" ] && rm /etc/resolutionfix
   }
fi

# REM: Problem now occurs when Xorg is new (1.7.+),
#      it needs kernel modesetting, otherwise fails to find devices
#      So if driver is loaded but did not manage the console,
#       try to reload the driver...
#      Note: Use bootmanager to enable loading it at boot with modeset=1 parameter
#       or add it manually to /etc/rc.d/MODULESCONFIG ADDLIST line
#      TODO: agpgart module handling, mouse nodes in /dev and drivers
# 2015-12-11 now set here before first ddcprobe
_say_xorg_version(){
_XORG_VERSION_=`Xorg -version 2>&1`

case $_XORG_VERSION_ in
#X.Org X Server 1.4.0.90
*X.Org*X*Server*)
VERSION=`echo "$_XORG_VERSION_" | grep '^X.Org X Server' | awk '{print $NF}'`
test  "$VERSION" || VERSION=UNKNOWN
echo "$VERSION"
;;
#X Window System Version 7.2.0
#X Window System Version 1.3.0
*X*Window*System*Version*)
VERSION=`echo "$_XORG_VERSION_" | grep '^X Window System Version' | awk '{print $NF}'`
test  "$VERSION" || VERSION=UNKNOWN
echo "$VERSION"
;;
*)
echo "Unhandled"
;;
esac
}

_old_or_new_xorg(){
case $* in
[0-6].*|7.[0-2].*|1.3.*|1.4.*)  return 1;;
1.[5-9].*|1.[1-9][0-9].*)       return 0;;
*) echo "UNHANDLED Xorg version '$*'"; return 2;;
esac
}

_do_modeset(){
    test "$*" || return 1
    modprobe $VERB -r "$*"
    sleep 1
    grep $Q -w "^$*" /proc/modules && return 1
    /sbin/modprobe $Q $VERB "$*" modeset=1
    sleep 1
    grep $Q -w "^$*" /proc/modules
}

_define_driver(){
LSPCI_OUT=`/sbin/lspci`
#00:02.0 VGA compatible controller: Intel Corporation 82Q963/Q965 Integrated Graphics Controller (rev 02)
#00:02.1 Display controller: Intel Corporation 82Q963/Q965 Integrated Graphics Controller (rev 02)
case $LSPCI_OUT in
*VGA*compatible*controller:*Intel*Corporation*)
DRIVER=i915
;;
*)
echo UNKNOWN chipset
DRIVER=UNKNOWN
;;
esac
}

_check_if_loaded(){
    test -f /proc/modules || return 2
    test "$*" || return 2
    grep $Q -w "^$*" /proc/modules
}

_check_if_in_use(){
    test -f /proc/modules || return 2
    test "$*" || return 2
    read drv vms nr_users mod_users live addr <<EoI
`grep -w "^$*" /proc/modules`
EoI
test $nr_users = 0
}

main_modesetting(){
XORG_VERSION=`_say_xorg_version`
_old_or_new_xorg "$XORG_VERSION"
case $? in
0) _notice "main_modesetting:NEWer Xorg"
   _define_driver
   _check_if_loaded "$DRIVER"
    test $? = 0 && {
    _check_if_in_use "$DRIVER"
    test $? = 0 && { _do_modeset "$DRIVER"; MODESET_FAIL=$?; true; } || echo "$DRIVER already is in use"
MODESET_FAIL=0
true
} || { echo "$DRIVER not loaded"; _do_modeset "$DRIVER"; MODESET_FAIL=$?; true;  }

test "$MODESET_FAIL" && {
    test "$MODESET_FAIL" = 0 || exit 1
}

;;


1) _notice "main_modesetting:Older Xorg"  ;;
2) _warn "main_modesetting: UNKNOWN Xorg" ;;
esac
}
main_modesetting
# REM: End modesetting code


ddcprobe_func(){
echo -e "\\033[0;31m""ddcprobe_func"
DDCPROBE=`ddcprobe`
echo "$DDCPROBE" > "$tmpDir"/ddcprobe.txt
  sleep 2s
  case "`cat "$tmpDir"/ddcprobe.txt`" in *edidfail*)
   echo "ddcprobe failed to determine the video"
   echo "Trying again"
   sleep 1
   DDCPROBE=`ddcprobe`
   echo "$DDCPROBE" > "$tmpDir"/ddcprobe.txt
   sleep 1s
   ;;
  esac
if [ -n "`grep -i 'edidfail' "$tmpDir"/ddcprobe.txt`" ] ; then ###KRG
echo -e "\\033[0;31m""ddcprobe still failed to determine the video"
echo -e "\\033[0;39m""exiting $0 now""\\\033[0;39m"  ##+2011-11-10 added 0;39 back
exit
fi
}
#ddcprobe_func

_do_ddcprobe(){
_edebug $Red0"_do_ddcprobe";

# +++2014-11-11 strace seems to help segfauting ddcprobe
 if [ "`which strace`" ]; then
  DDCPROBE=`strace -o "$TMP_DIR"/ddcprobe.strace_o ddcprobe`
 else
  DDCPROBE=`ddcprobe`
 fi
 echo "$DDCPROBE" > "$TMP_DIR"/ddcprobe.txt

##+++2012-09-16 2014-11-11
[ -s "$TMP_DIR"/ddcprobe.txt ] || { sleep 2;
 if [ "`which strace`" ]; then
  strace -o "$TMP_DIR"/ddcprobe.strace_o2 ddcprobe >"$TMP_DIR"/ddcprobe.txt
   else
  ddcprobe >"$TMP_DIR"/ddcprobe.txt;
 fi
}
[ "`grep '[[:alnum:]]' "$TMP_DIR"/ddcprobe.txt`" ] || { sleep 2;
 if [ "`which strace`" ]; then
  strace -o "$TMP_DIR"/ddcprobe.strace_o2 ddcprobe >"$TMP_DIR"/ddcprobe.txt
   else
  ddcprobe >"$TMP_DIR"/ddcprobe.txt
 fi
}
##+++2012-09-16 2014-11-11

  sleep 2s
  case "`cat "$TMP_DIR"/ddcprobe.txt`" in *edidfail*)
   _notice "ddcprobe failed to determine the video";
   _info "Trying again..";
   sleep 1
   DDCPROBE=`ddcprobe`
   echo "$DDCPROBE" > "$TMP_DIR"/ddcprobe.txt
   sleep 1s
   ;;
  esac

 _get_edid(){
    which get-edid >>$OUT || return 0
 which edid-decode >>$OUT || return 0
 if [ ! -s "$TMP_DIR"/ddcprobe.txt ]; then
 get-edid 1>"$TMP_DIR"/get-edid.out 2>"$TMP_DIR"/get-edid-2.txt
 [ "$?" = 0 ] || return 0
 edid-decode "$TMP_DIR"/get-edid.out >"$TMP_DIR"/ddcprobe.txt
 fi
 }
 _get_edid

if [ -n "`grep -i 'edidfail' "$TMP_DIR"/ddcprobe.txt`" ]; then
echo -e $Red1"ddcprobe still failed to determine the video.."$Res
echo -e "Exiting $0 now."
exit 20
fi
}
_do_ddcprobe

[ "$DEBUG" ] && echo "$0:line 432"

#### Begin XF86_SVGA part One ####
if [ "$HAVEX" = "XF86_SVGA" ];then # 2.0
 #xf86config v3.3.6 creates config file at /etc, wrong place...
 [ -f /etc/XF86Config ] && mv -f /etc/XF86Config /etc/X11/XF86Config
fi # 2.0

#### End XF86_sVGA part One ####

# REM: Problem now occurs when Xorg is new (1.7.+),
#      it needs kernel modesetting, otherwise fails to find devices
#      So if driver is loaded but did not manage the console,
#       try to reload the driver...
#      Note: Use bootmanager to enable loading it at boot with modeset=1 parameter
#       or add it manually to /etc/rc.d/MODULESCONFIG ADDLIST line
#      TODO: agpgart module handling, mouse nodes in /dev and drivers
# 2015-12-11 now set here before first xorgwizard
_say_xorg_version(){
_XORG_VERSION_=`Xorg -version 2>&1`

case $_XORG_VERSION_ in
#X.Org X Server 1.4.0.90
*X.Org*X*Server*)
VERSION=`echo "$_XORG_VERSION_" | grep '^X.Org X Server' | awk '{print $NF}'`
test  "$VERSION" || VERSION=UNKNOWN
echo "$VERSION"
;;
#X Window System Version 7.2.0
#X Window System Version 1.3.0
*X*Window*System*Version*)
VERSION=`echo "$_XORG_VERSION_" | grep '^X Window System Version' | awk '{print $NF}'`
test  "$VERSION" || VERSION=UNKNOWN
echo "$VERSION"
;;
*)
echo "Unhandled"
;;
esac
}

_old_or_new_xorg(){
case $* in
7.2.*|1.3.*|1.4.*)         return 1;;
1.[5-9].*|1.[1-9][0-9].*)  return 0;;
*) return 2;;
esac
}

_do_modeset(){
    test "$*" || return 1
    modprobe $VERB -r "$*"
    sleep 1
    grep $Q -w "^$*" /proc/modules && return 1
    /sbin/modprobe $Q $VERB "$*" modeset=1
    sleep 1
    grep $Q -w "^$*" /proc/modules
}

_define_driver(){
LSPCI_OUT=`/sbin/lspci`
#00:02.0 VGA compatible controller: Intel Corporation 82Q963/Q965 Integrated Graphics Controller (rev 02)
#00:02.1 Display controller: Intel Corporation 82Q963/Q965 Integrated Graphics Controller (rev 02)
case $LSPCI_OUT in
*VGA*compatible*controller:*Intel*Corporation*)
DRIVER=i915
;;
*)
echo UNKNOWN chipset
DRIVER=UNKNOWN
;;
esac
}

_check_if_loaded(){
    test -f /proc/modules || return 2
    test "$*" || return 2
    grep $Q -w "^$*" /proc/modules
}

_check_if_in_use(){
    test -f /proc/modules || return 2
    test "$*" || return 2
    read drv vms nr_users mod_users live addr <<EoI
`grep -w "^$*" /proc/modules`
EoI
test $nr_users = 0
}

main_modesetting(){
XORG_VERSION=`_say_xorg_version`
_old_or_new_xorg "$XORG_VERSION"
case $? in
0) _notice "main_modesetting:NEWer Xorg"
   _define_driver
   _check_if_loaded "$DRIVER"
    test $? = 0 && {
    _check_if_in_use "$DRIVER"
    test $? = 0 && { _do_modeset "$DRIVER"; MODESET_FAIL=$?; true; } || echo "$DRIVER already is in use"
MODESET_FAIL=0
true
} || { echo "$DRIVER not loaded"; _do_modeset "$DRIVER"; MODESET_FAIL=$?; true;  }

test "$MODESET_FAIL" && {
    test "$MODESET_FAIL" = 0 || exit 1
}

;;


1) _notice "main_modesetting:Older Xorg"  ;;
2) _warn "main_modesetting: UNKNOWN Xorg" ;;
esac
}
main_modesetting
# REM: End modesetting code

#### Begin Xvesa part One ####
#v3.90 expanded to auto run best video mode...
if [ "$HAVEX" = "Xvesa" ];then #0.9.9 # 3.0
echo "HAVEX=Xvesa"
 if [ ! -f "$tmpDir"/videomode -a ! -f /etc/videomode ];then #v2.21 # 3.1.0
  echo "001:Files $tmpDir/videomode -a /etc/videomode do not exist"

#v3.99 begin
  if [ -f /etc/xorgoverrides ] && [ -n "`grep -q -f /etc/xorgoverrides $tmpDir/ddcprobe.txt`" ] ;then # 3.1.1.0
   echo "Found to override graphics chips from /etc/xorgoverrides in $tmpDir/ddcprobe.txt"
   #1st dialog offers to use Xvesa...
   echo "Starting now xorgwizard" && sleep 2s
   /usr/sbin/xorgwizard
   xorgwRV=$?
   if test "$DEBUG"; then
    if test "$xorgwRV" != 0; then
     exit 77
    fi
   fi
   #HAVEX="`readlink /usr/bin/X`"
   #if [ "$HAVEX" != "Xorg" ] ; then  ##KRG
   #echo "To start the Xorg server for Xvesa does not work for your hardware ,"
   #echo "Not chosen Xorg server."
   #echo "Please run xorgwizard or type xwin (again)."
   #echo "Exiting $0 now"
   #exit   #go to command line if not Xorg

   echo -e "\n\n\n"
   read -t 30 -n1 -p "Press Enter to restart xwin. Any other key to quit :" CQKEY
   echo
   [ "$CQKEY" ] && exit
   exec xwin
   #fi  ###KRG
  fi # 3.1.1.0

 fi # 3.1.0
 BASEMODE=""
 if [ ! -f "$tmpDir"/videomode -a ! -f /etc/videomode ];then  ##fresh boot "$tmpDir"/videomode does not exist#v2.21 # 4.1.0
  echo "Files /etc/videomode and $tmpDir/videomode do not exist"
  #v3.97 improved method: CM=Classmate, 915=chip 10=generation#...
  [ "`dmidecode -s bios-version | grep '^CM91510'`" != "" ] && echo 'timing: 800x480@60' >> "$tmpDir"/ddcprobe.txt
  #v3.95 recognise more special screens...
  DMIDECODE="`dmidecode`"
  #recognise EeePC Asus laptop...
  [ "`echo "$DMIDECODE" | grep 'Product Name: 701'`" != "" ] && [ "`echo "$DMIDECODE" | grep 'Serial Number: EeePC'`" != "" ] && echo 'timing: 800x480@60' >> "$tmpDir"/ddcprobe.txt

  echo -e '\nIf initialization freezes here, press ctrl-c and type "xorgwizard",\nselect "Xorg", choose monitor type and choose video mode.'   #v3.99
  grep '^oem:' "$tmpDir"/ddcprobe.txt > "$tmpDir"/ddcprobeoem.txt   #v3.99 current adapter signature

  #get too many weird resolutions, maybe better just only allow these...
  #want widescreen/non-vesa resolutions only...
  VESAMODES="`Xvesa -listmodes 2>&1 | grep '^0x' | tr ':' ' ' | tr -s ' ' | cut -f 1,2 -d ' '`"
  rm "$tmpDir"/ddcprobeoem.txt  #v3.99 didn't hang in Xvesa, so delete signature
  MONCHOICES="`grep -F 'timing:' "$tmpDir"/ddcprobe.txt | grep -E -v 'Apple|8514A|Mac II|\(XGA2\)' | grep -E ' 800x480@| 1024x600@| 1280x768@| 1280x800@| 1280x1024@| 1360x768@| 1400x1050@| 1440x900@| 1600x1200@| 1680x1050@| 1920x1080@| 1920x1200@' | cut -f 2 -d ' ' | sort -u`"

  if [ "$MONCHOICES" != "" ];then # 4.1.1.0
   echo '$MONOCHOICES='"$MONCHOICES"' and not empty'
   MONCUTXY="`echo "$MONCHOICES" | cut -f 1 -d '@' | tr '\n' ' '`"

   #v2.21 code to handle widescreen with intel video chips...
   if [ ! -f /etc/resolutionfix ];then # 4.1.1.1.0
    echo "File /etc/resolutionfix does not exists"
    if [ -n "`grep -F 'oem:' $tmpDir/ddcprobe.txt | grep -F -q 'Intel'`" ] ;then # 4.1.1.1.1.0
     echo "Found Intel oem: in $tmpDir/ddcprobe.txt"
     MISSINGXY=""
     for ONECUTXY in $MONCUTXY #ex: each field 1024x768
     do
      OPATTERN=" ${ONECUTXY}x"
      [ "`echo "$VESAMODES" | grep "$ONECUTXY"`" = "" ] && MISSINGXY="$ONECUTXY"
     done
     if [ "$MISSINGXY" != "" ];then # 4.1.1.1.1.1.0
     echo '$MISSINGXY='"$MISSINGXY"' and not empty'
      MYXRES="`echo -n "$MISSINGXY" | cut -f 1 -d 'x'`"
      MYYRES="`echo -n "$MISSINGXY" | cut -f 2 -d 'x'`"
      915resolution 38 $MYXRES $MYYRES
      #...replaces mode 38 (1024x768).
      #create something for /etc/profile to execute at bootup...
      echo "915resolution 38 $MYXRES $MYYRES" > /etc/resolutionfix
      VESAMODES="`Xvesa -listmodes 2>&1 | grep '^0x' | tr ':' ' ' | tr -s ' ' | cut -f 1,2 -d ' '`"
      PPATTERN=" ${MYXRES}x${MYYRES}x"
      #BASEMOD is res that we are going to start X with...
      BASEMODE="`echo "$VESAMODES" | grep "$PPATTERN" | grep -E 'x16$|x24$|x32$' | head -n 1`"
     fi # 4.1.1.1.1.1.0
    fi  # 4.1.1.1.1.0
   fi   # 4.1.1.1.0

   #find out if there is just one native mode...
    if [ "$BASEMODE" = "" ] && [ "`echo "$MONCUTXY" | wc -l`" = "1" ];then # 4.1.1.2.1.0
     echo '$MONCUTXY='"$MONCUTXY"'= and has exactly one newline'
     QPATTERN=" ${MONCUTXY}x"
     BASEMODE="`echo "$VESAMODES" | grep "$QPATTERN" | grep -E 'x16$|x24$|x32$' | head -n 1`"
    fi # 4.1.1.2.1.0

   if [ "$BASEMODE" != "" ];then # 4.1.1.3.0
    echo '002:$BASEMODE='"$BASEMODE"'= and not empty'
    echo "$BASEMODE" > /etc/videomode #no need for wizard after startup!
    rm $VERB -f "$tmpDir"/videomode #w460 make sure can exit from X.
   fi # 4.1.1.3.0

  fi  # 4.1.1.0

   [ "$BASEMODE" ] || BASEMODE="`echo "$VESAMODES" | grep ' 800x600x16' | head -n 1`"
   if [ "$BASEMODE" != "" ];then # 4.1.2.1.0
    echo '004:$BASEMODE='"$BASEMODE"'= and not empty'
    echo "$BASEMODE" > "$tmpDir"/videomode
   else # 4.1.2.1.0
    echo '005:$BASEMODE='"$BASEMODE"'= and (still) empty'
    echo "0x0111 640x480x16" > "$tmpDir"/videomode
    #...desparate, not a practical mode.
   fi # 4.1.2.1.0

  rm $VERB -f "$tmpDir"/Xflag #precaution.
  #...if "$tmpDir"/videomode exists, video-wizard is started in ~/.xinitrc
  #...note, if /etc/videomode exists instead, normal X startup.
 fi   # 4.1.0

 #"$tmpDir"/videomode exists if starting X with new video test mode...
 if [ -e "$tmpDir"/videomode ];then # 10.1.0

  cat "$tmpDir"/videomode | grep " 800x600"
  if [ $? -eq 0 ];then #=0 if found. # 10.1.1.0

   if [ -e "$tmpDir"/Xflag ];then # 10.1.1.1.0

    #we have just attempted 800x600x16 and aborted with ctrl-alt-backspace
    #so have failed.
    echo "An attempt has just been made to run X at 800x600x16 but it has
not worked (or it did but you did not press the OK button in the
Video-wizard). It is not feasible to run Puppy at any lower resolution
or color. If you want to try again, type \"xwin\" at the prompt.
It may be helpful to look in $tmpDir/xerrs.log for error messages"
    rm $VERB -f "$tmpDir"/videomode
    rm $VERB -f "$tmpDir"/Xflag
    echo "0x0111 640x480x16" > /etc/videomode #desparate.
    exit 0 # exit Two
   else # 10.1.1.1.0
    #flag to prevent endless loop X restarting...
    touch "$tmpDir"/Xflag
    #...pressing a button in video-wizard removes this file.
    #...however, aborting X will leave it in existence.
   fi # 10.1.1.1.0

  fi # 10.1.1.0
 fi # 10.1.0

 #"$tmpDir"/videomode exists if starting X with new video test mode...
 if [ -e "$tmpDir"/videomode ];then # 10.2.0
  #stored in format "0x0111 640x480x16"
  VIDMODE="`cat "$tmpDir"/videomode | cut -f 1 -d ' '`"
  VIDSCRN="`cat "$tmpDir"/videomode | tr -s ' ' | cut -f 2 -d ' '`"
 else # 10.2.0
  #stored in format "0x0111 640x480x16"
  VIDMODE="`cat /etc/videomode | cut -f 1 -d ' '`"
  VIDSCRN="`cat /etc/videomode | tr -s ' ' | cut -f 2 -d ' '`"
 fi # 10.2.0
fi # 10.0 # 3.0
#### End Xvesa part Two ####

_debug "line 550"

#### Begin mouse part One ###
#echo -e "\\033[0;31m""Begin mouse part One"
#note, mouse and keyboard types are autodetected in /etc/rc.d/rc.local0 at every bootup,
#so /etc/mousedevice and /etc/keyboardtype have autodetected values in them
#(changeable by Mouse/Keyboard Wizard, but rc.local0 will override if interface not found).

#v411 restored after removal in v407...
#update xorg.conf if mouse has changed...

read MOUSEDEV </etc/mousedevice #autodetected in rc.sysinit
read OLDMOUSEDEV </etc/oldmousedevice #set in rc.sysinit

if [ "$OLDMOUSEDEV" != "$MOUSEDEV" -a "$OLDMOUSEDEV" != "nothing" ];then # 5.0
 if [ -f /etc/X11/xorg.conf ];then # 5.1.1.0
    _notice "Will attempt to fix mouse protocoll entry in xorg.conf"
   case `cat /etc/mousedevice | cut -c 1-4` in
    "inpu") #"input/mice", usb
     _notice "input/mice event device, using protocoll <IMPS/2>"
     cat /etc/X11/xorg.conf | sed -e 's/\W\+Option\W\+"Protocol"\W\+"\(\(\w\+\/\w\+\)\|\(\w\+\)\)\W\+#mouse0protocol/   Option      "Protocol" "IMPS\/2" #mouse0protocol/g' > "$tmpDir"/xorg.conf.tmp2; mRV=$?
     ;;
    "ttyS") #ttyS0,1,2,3, serial
     _notice "ttyS event device, using protocoll <Microsoft>"
     cat /etc/X11/xorg.conf | sed -e 's/\W\+Option\W\+"Protocol"\W\+"\(\(\w\+\/\w\+\)\|\(\w\+\)\)\W\+#mouse0protocol/   Option      "Protocol" "Microsoft" #mouse0protocol/g' > "$tmpDir"/xorg.conf.tmp2; mRV=$?
     ;;
    *)
     _notice "Unknown event device, using protocoll <auto>"
     cat /etc/X11/xorg.conf | sed -e 's/\W\+Option\W\+"Protocol"\W\+"\(\(\w\+\/\w\+\)\|\(\w\+\)\)\W\+#mouse0protocol/   Option      "Protocol" "auto" #mouse0protocol/g' > "$tmpDir"/xorg.conf.tmp2; mRV=$?
     ;;
   esac
   if [ $mRV = 0 ]; then
    sync
    echo "Copying $tmpDir/xorg.conf.tmp2 /etc/X11/xorg.conf"
    cp -f "$tmpDir"/xorg.conf.tmp2 /etc/X11/xorg.conf # CP new xorg.conf One
    #rm $VERB -f "$tmpDir"/xorg.conf.tmp2
    [ $? = 0 ] && _notice "Succeeded fixing the mouse protocoll"
   else
    _warn "Could not fix mouse0protocol in xorg.conf"
   fi
  fi # 5.1.1.0
 OLDMOUSEDEV="$MOUSEDEV" #v411 old is now current mouse
 echo "$OLDMOUSEDEV" > /etc/oldmousedevice #v411

fi # 5.0

#v408 k2.6.25.16 has serial driver as a module...
[ "`grep 'ttyS' /etc/mousedevice`" ]       && modprobe sermouse
#v411 precaution...
[ "`grep 'input/mice' /etc/mousedevice`" ] && modprobe usbhid

#ask about scrollwheel... DO NOT ASK, ASSUME YES...
if [ ! -f /etc/mousebuttons ];then # 6.0
  echo "5" > /etc/mousebuttons
  echo -e "The file /etc/mousebuttons has been created, with content \"5\"."

  if [ -f /etc/X11/xorg.conf ];then # 6.1.0
   cat /etc/X11/xorg.conf | tr -s '#' | sed -e 's/#Option\W\+"ZAxisMapping"\W\+"4 5"/Option      "ZAxisMapping" "4 5"/g' > "$tmpDir"/xorg.conf.tmp
   if [ $? = 0 ]; then sync
    echo "Copying $tmpDir/xorg.conf.tmp /etc/X11/xorg.conf"
    cp -f "$tmpDir"/xorg.conf.tmp /etc/X11/xorg.conf # CP new xorg.conf Two-1
    [ $? = 0 ] && _notice "Have set xorg.conf entry to use 5 buttons, buttons 4+5 being scroll wheel"
   else
    _notice "Could not set xorg.conf entry to use 5 mouse buttons"
   fi
  fi # 6.1.0

fi # 6.0

MOUSEBUTTONS=3
[ -e /etc/mousebuttons ] && read MOUSEBUTTONS </etc/mousebuttons
#v2.02 fix bug discovered by Dougal...
 #the problem is, if /etc/xextraoptions has '-2button' which turns on middle-button
 #emulation, if leave MOUSEBUTTONS=2 then the right button does not work.
 #have to pass '3' to Xvesa, meaning effectively 3 buttons available...
#0.9.8
XEXTRAOPTIONS=""
if [ -e /etc/xextraoptions ];then # 13.0
 read XEXTRAOPTIONS </etc/xextraoptions
 [ "$MOUSEBUTTONS" = 2 -a "`grep ' \-2button' /etc/xextraoptions`" ] && MOUSEBUTTONS=3
fi # 13.0

test -c /dev/input/mice || { rm $VERB -rf /dev/input/mice; mkdir -p /dev/input; mknod /dev/input/mice c 13 63; }
#v424 bad hack, i somehow get /dev/mouse pointing to psaux when chose a serial mouse, don't know why...
[ "`grep 'ttyS' /etc/mousedevice`" ] && ln -snf $MOUSEDEV /dev/mouse
#### End mouse part Two ####




[ "$DEBUG" ] && echo "$0:line 745"

#### Begin Xorg part One ####
#v2.11 find out if xorg video drvr exists, else use xorg vesa...
if [ -f /usr/bin/Xorg ];then # 7.0

 if [ -f /etc/X11/xorg.conf ];then # 7.1.0

  if [ "`readlink /usr/bin/X`" = "Xorg" ];then  ###KRG
  #find location of video chip drivers...

  #SPECVESA="`find /usr/lib -noleaf -mount -type f -name vesa_drv.so`" #### empty
  SPECVESA="`/bin/find -L /usr/X11 /usr/lib -maxdepth 9 -xdev -type f -name vesa_drv.so | head -n1`"
  if [ "$SPECVESA" ];then # 7.1.1.0
   _info "Found vesa driver at '$SPECVESA'"
   DRVRSPATH="`dirname $SPECVESA`"
   #get current driver...
   DRVRCURR=`grep -m1 -E 'Driver .* #card[0-9]+driver' /etc/X11/xorg.conf | grep -vE '^[[:blank:]]*#' | cut -f 2 -d '"'`

   if [ "$DRVRCURR" ];then # 7.1.1.1.0
    _info "Current Xorg video driver is '$DRVRCURR'"
    #if [ ! -f $DRVRSPATH/${DRVRCURR}_drv.so ];then
    #one driver is mtx_drv.o hmmm, okay do it this way (pakt)...
    ls -1 $DRVRSPATH/* | grep $Q ${DRVRCURR}_drv
    if [ $? -ne 0 ];then # 7.1.1.1.1.0
     _warn "Could not list ${DRVRCURR}_drv at $DRVRSPATH"
     _warn "Will now replace the card0driver entry in xorg.conf to use vesa"
     aPATTERN="s/.*#card0driver/    Driver      \"vesa\" #card0driver/g"
     cat /etc/X11/xorg.conf | sed -e "$aPATTERN" > "$tmpDir"/xorg.conf.tmp2
     if [ $? = 0 ]; then sync
      cp -f "$tmpDir"/xorg.conf.tmp2 /etc/X11/xorg.conf # CP new xorg.conf Three
      _notice "Now using the vesad driver"
     else
      _warn "Failed to change content of xorg.conf"
      _warn "Look into $tmpDir/xorg.conf.tmp2 for hints"
     fi
    fi # 7.1.1.1.1.0
   fi # 7.1.1.1.0
  fi # 7.1.1.0
 fi ##KRG
 fi # 7.1.0

#Puppy Xorg Video Wizard...
 if [ -f /etc/X11/xorg.conf ];then # 8.1.0
  if [ "`readlink /usr/bin/X`" = "Xorg" ];then # 8.1.1.0

__old_get_profile__(){
   PROFILECHIP="`echo "$DDCPROBE" | grep '^oem: ' | head -n 1 | cut -f 2-4 -d ' ' | tr ' ' '_' | sed -e 's/[^0-9a-zA-Z]/_/g'`"
   #PROFILEMONITOR="`echo "$DDCPROBE" | grep --extended-regexp '^monitorrange: |^monitorid: |^eisa: ' | head -n 1 | cut -f 2 -d ':' | sed -e 's/ //g' | sed -e 's/[^0-9a-zA-Z]/_/g'`"
#v3.95 'eisa:' and 'id:' return fluctuating values on some PCs, so search in this order...
PROFILEMONITOR="`echo "$DDCPROBE" | grep '^monitorid: ' | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`"
[ "$PROFILEMONITOR" = "" ] && PROFILEMONITOR="`echo "$DDCPROBE" | grep '^monitorname: ' | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`"
[ "$PROFILEMONITOR" = "" ] && PROFILEMONITOR="`echo "$DDCPROBE" | grep '^monitorrange: ' | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`"
#[ "$PROFILEMONITOR" = "" ] && PROFILEMONITOR="`echo "$DDCPROBE" | grep '^dtiming: ' | tail -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`"
[ "$PROFILEMONITOR" = "" ] && PROFILEMONITOR="`echo "$DDCPROBE" | grep '^manufacture: ' | tail -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`"
#[ "$PROFILEMONITOR" = "" ] && PROFILEMONITOR="`echo "$DDCPROBE" | grep '^eisa: ' | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`"
}

#v2.13 want a hardware profile so can bootup on different PCs...
   PROFILECHIP=`grep -m1 '^oem: ' "$TMP_DIR"/ddcprobe.txt     |cut -f2 -d ' ' | sed 's/[[:punct:]]/_/g'`  #was cut -f 2-4 -d ' '| tr ' ' '_' | sed -e 's/[^0-9a-zA-Z]/_/g'
 PROFILEVENDOR=`grep -m1 '^vendor: ' "$TMP_DIR"/ddcprobe.txt  |cut -f2 -d ' ' | sed 's/[[:punct:]]/_/g'`
PROFILEPRODUCT=`grep -m1 '^product: ' "$TMP_DIR"/ddcprobe.txt |cut -f2 -d ' ' | sed 's/[[:punct:]]/_/g'`
[ "$PROFILECHIP" ] || PROFILECHIP=`_command lspci | grep -m1 -iE 'graph|vga|display' |cut -f3 -d':' | tr -s '[[:blank:]]' | sed 's%^ *%%;s% *$%%;s%[^[:alnum:]]%_%g'`
## Dougal: maybe add "^monitorname: "??
#PROFILEMONITOR=`grep -E -m1 '^monitorrange: |^monitorid: |^eisa: ' "$TMP_DIR"/ddcprobe.txt | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#v3.95 'eisa:' and 'id:' return fluctuating values on some PCs, so search in this order...
PROFILEMONITOR=`grep -iE '^monitorid: |^Monitor name: ' "$TMP_DIR"/ddcprobe.txt         | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
[ "$PROFILEMONITOR" ] || PROFILEMONITOR=`grep '^monitorname: ' "$TMP_DIR"/ddcprobe.txt  | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
[ "$PROFILEMONITOR" ] || PROFILEMONITOR=`grep '^monitorrange: ' "$TMP_DIR"/ddcprobe.txt | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#[ "$PROFILEMONITOR" = "" ] && PROFILEMONITOR=`grep '^dtiming: ' "$TMP_DIR"/ddcprobe.txt | tail -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
[ "$PROFILEMONITOR" ] || PROFILEMONITOR=`grep '^manufacture: ' "$TMP_DIR"/ddcprobe.txt     | tail -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#[ "$PROFILEMONITOR" = "" ] && PROFILEMONITOR=`grep '^eisa: ' "$TMP_DIR"/ddcprobe.txt | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`

#  [ "$PROFILECHIP" ] || PROFILECHIP=UnknownChip
   [ "$PROFILECHIP" ] || PROFILECHIP=UnidentifiedChip
[ "$PROFILEMONITOR" ] || PROFILEMONITOR=UnknownMonitor

   HARDWAREPROFILE="${PROFILECHIP}-${PROFILEMONITOR}"
   #find out if current xorg.conf matches this profile...
   CURRENTPROFILE="`grep '^#PuppyHardwareProfile' /etc/X11/xorg.conf | cut -f 2 -d '=' | cut -f 1 -d ' '`"

   if [ ! "$CURRENTPROFILE" = "$HARDWAREPROFILE" ];then # 8.1.1.1.0
   echo "     detected PROFILE=$HARDWAREPROFILE"
   echo "old xorg.conf PROFILE=$CURRENTPROFILE"
    echo -e "\\033[0;31m"'Has hardware profile changed ?'
    #video hardware has changed. either changed monitor or booting different PC.
    #same current xorg.conf as a profiled filename...
    echo "Moving now /etc/X11/xorg.conf /etc/X11/xorg.conf.${CURRENTPROFILE}"
    mv -f /etc/X11/xorg.conf /etc/X11/xorg.conf.${CURRENTPROFILE} #### Rename One
    #if a previous profiled filename for new hardware, use that...
    echo "Copying /etc/X11/xorg.conf.${HARDWAREPROFILE} /etc/X11/xorg.conf if exists"
    [ -f /etc/X11/xorg.conf.${HARDWAREPROFILE} ] && cp -af /etc/X11/xorg.conf.${HARDWAREPROFILE} /etc/X11/xorg.conf # CP new xorg.conf Four

   fi # 8.1.1.1.0
  fi # 8.1.1.0

 else # 8.1.0
  echo -e '\033[0;39m'
  echo "File /etc/X11/xorg.conf does not exists."
  echo "Running xorgwizard ..." && sleep 2s
  rm $VERB -f /var/lock/XLOADED #not necessary, precaution.
  #1st dialog offers to use Xvesa...
  /usr/sbin/xorgwizard
  xorgwRV=$?
  if test "$DEBUG"; then
   if test "$xorgwRV" != 0; then
    exit 78
   fi
  fi
  HAVEX="`readlink /usr/bin/X`"
  if [ "$HAVEX" = "Xvesa" ] ; then  ###KRG
  echo 'HAVEX is Xvesa'
  echo "Exiting now . Type xwin to start Xvesa server"
  ##&& exec xwin #w482 need to restart xwin.
  exit 0
  fi  ###KRG
 fi # 8.2.0 # 8.1.0

fi # 8.0

#### End  check for HW profile : Xorg part Two ####

_debug "line 843"

#### Begin starting X ####
echo -e "\\033[0;32m""Begin starting X part"
#finally, start X...
#J_Rey had a good idea, flag XLOADED... and set to false on exit.
#but if PC hangs, XLOADED will still be true, so will know it is broken.
echo "true" > /var/lock/XLOADED

case $HAVEX in
 Xvesa) #### Xvesa part Three ###
  echo "Starting X with the '$HAVEX' server,
video mode '$VIDMODE' and mouse '$MOUSEDEV' ..."

  ##w479 older Xvesa server may not recognise the '-sp' option...
  if [ "`Xvesa -help 2>&1 | grep '^\-sp '`" = "" ];then # 14.1.0
   SPOPTION=''
  else
   SPOPTION='-sp /usr/lib/xserver/SecurityPolicy'
  fi
  echo 'SPOPTION='"$SPOPTION"
  sleep 4s
  #startx $VIDMODE $MOUSEDEV > "$tmpDir"/xerrs.txt 2>&1
  #Puppy 0.8.4 no need for startx script...
  VIDFREQ="`echo -n "$VIDSCRN" | cut -f 4 -d "x"`"
  if [ ! "$VIDFREQ" ];then # 14.2.0
   echo "$VIDMODE" > "$tmpDir"/currentvideomode
   #w460 added -fp and -sp options...
   /usr/bin/xinit $HOME/.xinitrc -- -mode $VIDMODE $XEXTRAOPTIONS -mouse /dev/mouse,$MOUSEBUTTONS -fp /usr/share/X11/fonts/misc/,/usr/share/X11/fonts/TTF/,/usr/share/X11/fonts/Type1/ $SPOPTION > "$tmpDir"/xerrs."$KERNELVER"."$Date".Xvesa.log 2>&1
  else # 14.2.0
   #also, want to have adjustable frequency, VIDSCRN=widthxheightxdepthxfreq...
   echo "$VIDSCRN" > "$tmpDir"/currentvideomode
   /usr/bin/xinit $HOME/.xinitrc -- -screen $VIDSCRN $XEXTRAOPTIONS -mouse /dev/mouse,$MOUSEBUTTONS -fp /usr/share/X11/fonts/misc/,/usr/share/X11/fonts/TTF/,/usr/share/X11/fonts/Type1/ $SPOPTION > "$tmpDir"/xerrs."$KERNELVER"."$Date".Xvesa.log 2>&1
  fi # 14.2.0
  ;; #### End Xvesa part Three

 Xfbdev) #### Begin XFbdev
  echo "Starting X with the '$HAVEX' Kdrive X server, mouse '$MOUSEDEV' ..."
  /usr/bin/xinit $HOME/.xinitrc -- -mouse /dev/mouse,$MOUSEBUTTONS > "$tmpDir"/xerrs."$KERNELVER"."$Date".Xfbdev.log 2>&1
  ;; #### End XFbdev
 Xi810) #v1.0.7 #### Begin Xi810 part
  echo "Starting X with Xi810 Kdrive X server, mouse $MOUSEDEV..."
  #echo "(experimental, currently fixed to 1024x768x16x72 in /usr/bin/xwin)"
  # /usr/bin/xinit $HOME/.xinitrc -- -screen $VIDSCRN -mouse /dev/mouse,$MOUSEBUTTONS > "$tmpDir"/xerrs."$KERNELVER"."$Date".Xi810.log 2>&1
  /usr/bin/xinit $HOME/.xinitrc -- -screen $VIDSCRN  > "$tmpDir"/xerrs."$KERNELVER"."$Date".Xi810.log 2>&1
;; #### End Xi810
 XF86_SVGA) #### Begin XF86_SVGA
  echo "Starting X with the '$HAVEX' server,
specs in /etc/X11/XF86Config, startup apps '$HOME/.xinitrc' ..."
  /usr/bin/xinit "$HOME/.xinitrc" -- -bpp 16 > "$tmpDir"/xerrs."$KERNELVER"."$Date".Xf86_svga.log 2>&1
  ;;#### End XF86_SVGA

 Xorg) #### Begin Xorg
 AP=`date +%R:%S`
 ErrLog="$tmpDir/Xerrs.$KERNELVER.$Date.Xorg.log.$AP"
 Log="$tmpDir/Xorg.$KERNELVER.$Date.log.$AP"
 LOCALCONF='/etc/X11/XORG.local'
 if [ -r "$LOCALCONF" ];then
 CUSTOM=`grep '^XORG=' "$LOCALCONF" |cut -f 2 -d '=' | tr -d '"' | tr -d "'"`
 fi

# REM: Problem now occurs when Xorg is new (1.7.+),
#      it needs kernel modesetting, otherwise fails to find devices
#      So if driver is loaded but did not manage the console,
#       try to reload the driver...
#      Note: Use bootmanager to enable loading it at boot with modeset=1 parameter
#       or add it manually to /etc/rc.d/MODULESCONFIG ADDLIST line
#      TODO: agpgart module handling, mouse nodes in /dev and drivers
_say_xorg_version(){
_XORG_VERSION_=`Xorg -version 2>&1`

case $_XORG_VERSION_ in
#X.Org X Server 1.4.0.90
*X.Org*X*Server*)
VERSION=`echo "$_XORG_VERSION_" | grep '^X.Org X Server' | awk '{print $NF}'`
test  "$VERSION" || VERSION=UNKNOWN
echo "$VERSION"
;;
#X Window System Version 7.2.0
#X Window System Version 1.3.0
*X*Window*System*Version*)
VERSION=`echo "$_XORG_VERSION_" | grep '^X Window System Version' | awk '{print $NF}'`
test  "$VERSION" || VERSION=UNKNOWN
echo "$VERSION"
;;
*)
echo "Unhandled"
;;
esac
}

_old_or_new_xorg(){
case $* in
7.2.*|1.3.*|1.4.*)         return 1;;
1.[5-9].*|1.[1-9][0-9].*)  return 0;;
*) return 2;;
esac
}

_do_modeset(){
    test "$*" || return 1
    modprobe $VERB -r "$*"
    sleep 1
    grep $Q -w "^$*" /proc/modules && return 1
    /sbin/modprobe $Q $VERB "$*" modeset=1
    sleep 1
    grep $Q -w "^$*" /proc/modules
}

_define_driver(){
LSPCI_OUT=`/sbin/lspci`
#00:02.0 VGA compatible controller: Intel Corporation 82Q963/Q965 Integrated Graphics Controller (rev 02)
#00:02.1 Display controller: Intel Corporation 82Q963/Q965 Integrated Graphics Controller (rev 02)
case $LSPCI_OUT in
*VGA*compatible*controller:*Intel*Corporation*)
DRIVER=i915
;;
*)
echo UNKNOWN chipset
DRIVER=UNKNOWN
;;
esac
}

_check_if_loaded(){
    test -f /proc/modules || return 2
    test "$*" || return 2
    grep $Q -w "^$*" /proc/modules
}

_check_if_in_use(){
    test -f /proc/modules || return 2
    test "$*" || return 2
    read drv vms nr_users mod_users live addr <<EoI
`grep -w "^$*" /proc/modules`
EoI
test $nr_users = 0
}

main_modesetting(){
XORG_VERSION=`_say_xorg_version`
_old_or_new_xorg "$XORG_VERSION"
case $? in
0) _notice "main_modesetting:NEWer Xorg"
   _define_driver
   _check_if_loaded "$DRIVER"
    test $? = 0 && {
    _check_if_in_use "$DRIVER"
    test $? = 0 && { _do_modeset "$DRIVER"; MODESET_FAIL=$?; true; } || echo "$DRIVER already is in use"
MODESET_FAIL=0
true
} || { echo "$DRIVER not loaded"; _do_modeset "$DRIVER"; MODESET_FAIL=$?; true;  }

test "$MODESET_FAIL" && {
    test "$MODESET_FAIL" = 0 || exit 1
}

;;


1) _notice "main_modesetting:Older Xorg"  ;;
2) _warn "main_modesetting: UNKNOWN Xorg" ;;
esac
}
main_modesetting
# REM: End modesetting code

  echo "Starting X with the '$HAVEX' server,
specs in /etc/X11/xorg.conf, startup apps '$XinitXorgVars' ..."

  #v2.11 G2 suggested -br for black background instead of checked...
  #w479 ***AWFUL HACK*** running pup 218, retro k2.6.18.8, my laptop, Xorg hangs
  #     if have '-nolisten tcp'. until find out why, this workaround...

  if [ "$KERNELVER" = "2.6.18.8" ];then # 14.3.0
   /usr/bin/xinit $HOME/.xinitrc -- -br > "$tmpDir"/xerrs."$KERNELVER"."$Date".Xorg.log 2>&1

  else # 14.3.0
   if [ "`whoami`" = 'root' ];then
    /usr/bin/xinit "$XinitXorgVars" -- /usr/bin/X :0 -logfile "$Log" -nolisten tcp $CUSTOM > "$ErrLog" 2>&1
   #Fatal server error:
   #The '-logfile' option can only be used by root.
   else
    /usr/bin/xinit "$XinitXorgVars" -- /usr/bin/X :0 -nolisten tcp $CUSTOM > "$ErrLog" 2>&1
   fi
  fi # 14.3.0
  ;; #### End Xorg

 *)
 echo "Starting X with anything else Xserver"
 sleep 9s
  #### Begin everything different from Xorg,Xvesa and co.
  /usr/bin/xinit "$HOME/.xinitrc" --  > "$tmpDir"/xerrs."$KERNELVER"."$Date".OtherX.log 2>&1
  ;; #### End
esac
echo -e "\\033[0;34m""End start X part"
#### End start X part ####


#### Begin of "$tmpDir"/wmexitmode part ####
echo -e "\\033[0;32m""Begin of $tmpDir/wmexitmode part""\e[0;39m"  ##+2011-11-10 added 0;39 back

echo "false" > /var/lock/XLOADED

if [ -f "$tmpDir"/xerrs."$KERNELVER"."$Date".Xvesa.log ];then
less "$tmpDir"/xerrs."$KERNELVER"."$Date".Xvesa.log
fi

#Shutdown menu calls wmreboot, wmpoweroff, wmexit or restartwm, which create this file...
if [ -f "$tmpDir"/wmexitmode.txt ];then # 19.0
  echo "$tmpDir/wmexitmode.txt exists"
  read WMEXITMODE <"$tmpDir"/wmexitmode.txt
  echo "WMEXITMODE='$WMEXITMODE'"
  rm $VERB -f "$tmpDir"/wmexitmode.txt #w478
 if [ "$WMEXITMODE" = "exit" ];then #see /usr/bin/wmexit. # 19.1.0
  echo "found $WMEXITMODE in $tmpDir/wmexitmode.txt , exiting to prompt now."
  echo "Eventually press the 'Enter' key ."
  exit 0 # exit Three
 fi # 19.1.0

  [ "$WMEXITMODE" = poweroff ] && exec /sbin/poweroff #see /usr/bin/wmpoweroff
  [ "$WMEXITMODE" = reboot ]   && exec /sbin/reboot #see /usr/bin/wmreboot

  #restart window manager...
  #make a gross assumption, if wmexitmode.txt exists, haven't already exited this script, then want
  #to restart maybe with different window manager. /etc/windowmanager already has desired w.m.
  #v1.0.5 thanks GuestToo for advice on this, works with chooselocale script...
  #NEWLANG="`cat /etc/profile | grep "LANG=" | cut -f 2 -d '='`"
  NEWLANG="`grep -E -e '^LANG=|^[[:blank:]]*LANG=' /etc/profile | tail -n 1| cut -f 2 -d '='`" #w482 shinobar bugfix.
  if [ "$NEWLANG" -a "$NEWLANG" != "$LANG" ];then #precaution # 19.2.0
    export LANG=$NEWLANG
    LCs=`locale`
    for loc in $LCs;do export $loc;done
  fi # 19.2.0
 exec xwin
##+++2012-02-22 NO wmexitmode, assuming crash:
else
 echo "NO $tmpDir/wmexitmode.txt ..?"
 cat "$tmpDir"/wmexitmode.txt
 ls "$tmpDir"
 read -n1 -p "Press any key to proceed" R
 if [ "$Log" ];then
 dialog --textbox "$Log" 0 0
 fi
##+++2012-02-22 NO wmexitmode, assuming crash
fi # 19.0
echo -e "\\033[0;34m""End of $tmpDir/wmexitmode part."
#### End of "$tmpDir"/wmexitmode part ####

#### Begin X failed part ####
echo -e "\\033[0;31m""Begin X failed part"
echo "false" > /var/lock/XLOADED #see note above.
#...if PC hung, run xorgwizard at next bootup (see further up).
echo "/var/lock/XLOADED has been set to false"
echo 'Exited from X. Type "xwin [fvwm95|jwm]" to restart X ([ ] mean optional).'
echo '(To shutdown PC type "poweroff", to reboot PC type "reboot")'

if [ -f /usr/X11R7/bin/Xfbdev ];then # 15.0
 echo '(To run the Xfbdev Framebuffer Wizard, type "framebufferwizard")'
fi # 15.0

if [ "$HAVEX" = "XF86_SVGA" ];then #v1.0.7 # 16.0
 echo -en "\\033[1;31m" #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
 echo 'If X failed to start, type "xf86config" to setup X'
 echo '  -- you will need to know type of mouse, keyboard and video chip'
 echo '  -- thix X is for pre-2000 video chips, but many recent chips backwards-compat.'
 echo '  -- accept default save /etc/XF86Config, Puppy will move this to /etc/X11'
 echo '  -- (XF86Config is the configuration file for X and can be edited manually)'
 echo -n '  -- LAST RESORT, drop back to Xvesa by typing "ln -sf Xvesa /usr/bin/X"'
 echo -e "\\033[0;39m"

elif [ "$HAVEX" = "Xorg" ];then #v1.0.7 # 17.0 # 16.0
 echo -en "\\033[1;35m" #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
 echo -n 'If X failed to start, type "xorgwizard" to setup X'
 echo -e "\\033[0;39m"

elif [ "$HAVEX" = "Xvesa" -a -e "$tmpDir"/videomode ];then # 18.0 # 16.0
  exec xwin #restart X.
fi # 18.0 # 16.0
echo -e "\\033[0;34m""End of X failed""\\033[0;39m"
#### End of X failed ####

echo "false" > /var/lock/XLOADED #KRG

[ "$RTVAL" ] || RTVAL=0
[ "$RTVAL" = '0' ] && exit 0 || exit 1
