#!/bin/bash --login
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_xwin"
_VERSION_=1.1.0
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/bin/xwin"
MY_PID=$$

DEBUG= #set to anything to enable verbose output
test -f /etc/rc.d/f4puppy5 && {
#echo "HAVE_F4PUPPY5='$HAVE_F4PUPPY5'"
[ "$HAVE_F4PUPPY5" ] || . /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP='1'; TWO_VERSION='1'; TWO_VERBOSE='1'; TWO_DEBUG='1'; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap
INFO= #set to anything to enable verbose output
_debug "OUT='$OUT'"
}
# End new header
#
#(c) Copyright Barry Kauler 2003,2004,2005,2006,2007 www.puppylinux.com
#2007 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#v3.90 rawpup, update for Xvesa.
#v3.94, v3.95, recognise Classmate, EeePC laptops.
#v3.98 change to home directory.
#v3.98 forced reboot handling improved by pizzasgood.
#v3.99 automatically handle problematic video adapters that hang Xvesa.
#v405 added support for xvesa 1024x600.
#v408 BK k2.6.25.16 serial mouse driver now a module 'sermouse'.
#v411 rerwin: mouse improvements.
#w001 fixes for woof, /usr/X11R7 not used.
#w460 fixes to get Xvesa running with woof build. fix for X restart after exit.
#w477, w478 more fixes Xvesa restart after first 'Exit to prompt'.
#w479 older Xvesa server may not recognise '-sp' option.
#w479 k2.6.18.8 need awful hack, Xorg, '-nolisten tcp' causes hang!
#v424 bad hack to fix serial mouse.

_info "Executing '$0' with options '$*' ..."
#ps |grep -v '\[' | tr '\n' 'Â·'
#uptime

# REM: In case of frugal install tmp does not get retained if poweroff
#       So no log files to view (Slacko5571 Xorg freezes)
#      Now want them in /var/log
stateDIR='/var'
logDIR="$stateDIR/log/xwin"
test -d "$logDIR" || mkdir $VERB -p "$logDIR"

Version='1.5-getopts Puppy-Linux-4.3.1 KRG'

usage(){
echo "
$0 [windowmanager]
   [-h -V -v -d] [windowmanager]
[-w WINDOWMANAGER -s Xserver -D XorgDRIVER]

Script to launch xinit with X linked to Xserver
and a windowmanager if specified in HOME/.xinitrc .

When no windowmanager is specified, .xinitrc should look
for the windowmanager to use in '/etc/windowmanager' file .

-h) help to show this usage
-V) show version information
-d) debug by 'set-x'
-v) passing '--verbose' to programs
-w WINDOWMGR) specififying windowmanger to use ie jwm,icewm,start_xfce4
-s XSERVER) specify the X Server to use ie Xorg, Xvesa, Xchips

NEW :
-D DRIVER) force the Xorg DRIVER .
-o) run only once escaping any loops
    (ie disables restart X from shutdown menu)

BUGS: Likely .
Note: The getopts bash builtin needs to have -options before
simple nodash options like 'jwm' . Furter It does not recognize
--long-options .
'xwin jwm -S Xorg'
should not work to respect the -S option.
'xwin -S Xorg jwm'
should work ok.
Also note, that getopts works with
-SXorg or -wjwm
same as
-S Xorg and -w jwm .
"
exit $1
}

_debug "Checking for short options \$#=$# \$*=$* \$@=$@"
OUT=/dev/null; ERR=/dev/null; Q=-q; QUIET=$Q; DBG=
#OPTIND=0
while getopts hHdD:ovVw:W:s:S: opt_;do
_debug "opt_='$opt_'"
case $opt_ in
h|H) usage 0;;
d)    set -x;;
D) Xorg_driver="$OPTARG"
   Xorg_driver="${Xorg_driver//_drv/}"
   Xorg_driver="${Xorg_driver//.so/}"
 if [ "$Xorg_driver" ];then
  echo "Changing the '#card0driver' entry to '$Xorg_driver'"
  sed -i "/#card0driver/ s/\".*\"/\"$Xorg_driver\"/" /etc/X11/xorg.conf
 fi
;;
o) ONCE=1;;
#v) VERB=-v L_VERB=--verbose X_L_VERB=-verbose out='&1' err='&1' me_verb=1;;
v) VERBOSE=1;VERB=-v;L_VERB=--verbose;A_VERB=-verbose;Q=;QUIET=$Q;DBG=-d;OUT=/dev/stdout;ERR=/dev/stderr;;  ##+-+2013-04-11
V) echo -e "\n$0: Version '$Version'\n";exit 0;;
w|W) WINDOW_MANAGER="$OPTARG"
 [ "`which $WINDOW_MANAGER`" ] || usage 1
 echo "$WINDOW_MANAGER" >/etc/windowmanager
;;
s|S) X_SERVER="$OPTARG"
 [ "`which $X_SERVER`" ] || usage 1
 [ "$X_SERVER" = 'X' ] && continue
 rm $VERB -f /usr/bin/X;[ -L "$(basename `which $X_SERVER`)" ] && rm $VERB -f "$(basename `which $X_SERVER`)"
 ln $VERB -s "$(basename `which $X_SERVER`)" /usr/bin/X
 ln $VERB -s "`which $X_SERVER`" /usr/bin/$(basename `which $X_SERVER`)
;;
*):;;
esac;done
_debug "Checking for short options [ DONE ]"

#while [ "$2" ];do #shift;done
#case $1 in
#hHdD:ovVw:W:s:S:
#-h|-H|-d|-o|-v|-V)shift;;
#-D*|-w*|-W*|-s*|-S*)shift;;
#-D|-w|-W|-s|-S)shift;shift;;
#*)echo $1 >/dev/null;;
#esac;done

for w in $@;do _debugx $w
((c++))
PARAMS[$c]=$w
done

readonly c
for w in ${PARAMS[@]};do _debugx $w
((cc++))
case $w in
-h|-H|-d|-o|-v|-V)PARAMS[$cc]='';;
-D[[:alnum:][:punct:]]?*)PARAMS[$cc]='';;
-w[[:alnum:][:punct:]]?*|-W[[:alnum:][:punct:]]?*)PARAMS[$cc]='';;
-s[[:alnum:][:punct:]]?*|-S[[:alnum:][:punct:]]?*)PARAMS[$cc]='';;
-D|-w|-W|-s|-S)PARAMS[$cc]='';dd=$((cc+1));PARAMS[$dd]='';;
-*)PARAMS[$cc]='';; #in case set gets a minus so would set a bash option
*):;;
esac;done

set -- `echo ${PARAMS[@]}`
[ "$DEBUG" ] && _info "NEW parameters : $@"
[ "$DEBUG" ] && sleep 5


_pidof $Q -o $$ -o %PPID ${0##*/} && _exit 1 "Already running."

#elif ...
if [ -n "$DISPLAY" ] ; then
 echo -e "\\033[1;31m""More than one instance of X running : $DISPLAY ; exit""\\033[0;39m"
 xmessage -bg red "More than one instance of X running : $DISPLAY -- exit"
 exit 87
fi
#else
echo -e "\\033[1;33m""This script will run X windows for you...""\\033[0;39m"
#fi

XORG_CONF='/etc/X11/xorg.conf'
echo "HOME    : '$HOME'" #> /dev/tty3 #DBG
echo "pwd     : '`pwd`'" #> /dev/tty3 #DBG
echo "USER    : '$USER'"
###+++2012-02-10 #both login -f root and autologinroot dont work , would stop/leave script
if [ "$HOME" = '/' ];then
#autologinroot  ##no job control in this shell
export HOME=/root
fi
###+++2012-02-10

#echo `pwd` > /dev/tty3 #DBG
XINIT_RC="$HOME/.xinitrc"
test "$HOME" = '/' && XINIT_RC=/root/.xinitrc
test -f "$XINIT_RC" || XINIT_RC=''

#if test "$HOME" != "/root" ; then #KRG
if test "`whoami`" != "root" ; then  #whoami=root at boot but home is /
cd ~/   #v3.98 Ensure current directory is root, in case changed at command prompt, so rox icon and menu item open only at home directory. rerwin
#mkdir -p $HOME/.X11
#cp -u $XORGCONFFILE $HOME/.X11/
#XORGCONFFILE=".X11/xorg.conf"
#cp -u $XORGCONFFILE /usr/X11R7/lib/X11/xorg.conf.d/xorg.conf.$USER
cp $VERB -u "$XORG_CONF" /etc/X11/xorg.conf.$USER
XORG_CONF="xorg.conf.$USER"
fi #KRG

#variables created at bootup by init script in initrd...
. /etc/rc.d/PUPSTATE #v2.02
#PUPMODE=current operating configuration,
#PDEV1=the partition have booted off,
#DEV1FS=file-system of PDEV1,
#PUPSFS=pup_201.sfs versioned name, stored on PDEV1,
#PUPSAVE=vfat,sda1,/pup_save.3fs
#PMEDIA is a broad description of the boot media, ex "usbflash" or "idehd".

KERNEL_RELEASE=`uname -r` #w479

#0.9.9 enables to start a specific w.m. from commandline...
__old_parameter_part__(){
#if [ "$@" ] && [ "`echo "$@" | tr ' ' '\n' | grep -v '^\-'`" = "" ];then
params0="$@"
params=`echo "$params0" | sed 's#-S[[:blank:]]*\(.*\)#-S=\1#g'`
wm=`echo "$params" | tr ' ' '\n' | grep -v '^\-' | grep -i -E 'jwm|xfce|fvwm|icewm|openbox|twm|blackbox' | tail -n1`
if [ -n "$wm" ] ; then
 if [ -n "`which $wm 2>/dev/null`" ] ; then
  echo "$wm" > /etc/windowmanager
  #note, /root/.xinitrc uses this file.
 fi
fi
serverName0=`echo "$params" | grep -w -E -e '\-S=.*|-*server=.*' | tail -n 1`
if [ -n "$serverName0" ] ; then
#serverName=`echo $serverName0 | cut -f 1,2 -d ' ' | tr '=' ' ' | cut -f 2 -d ' '`
serverName=`echo $serverName0 | cut -f 2 -d '=' | cut -f 1 -d ' '`
if [ -n "$serverName" ] ; then
findServer=`find /usr/bin -name "$serverName"`

if [ -n "$findServer" ] ; then
rm $VERB -f /usr/bin/X
ln $VERB -i -s "`basename $findServer`" /usr/bin/X

else
echo -e "\e[0;31m""$serverName not found in /usr/bin directory .""\e[0;39m"
sleep 3s

if [ -x /usr/bin/Xorg ] ; then
echo "Defaulting to Xorg .."
rm $VERB -f /usr/bin/X
ln $VERB -s Xorg /usr/bin/X
sleep 3s

else
echo -e "\e[1;31m"'ERROR : Xorg not found in the /usr/bin folder !'"\e0;39m"
echo -e "\e[0;35m"'Please sort your Puppy installation'"\e[0;39m"
#define ENOENT       2  /* No such file or directory */
exit 2

fi
fi
fi
fi
}  ###__old_parameter_part__(){

if [ "$1" -a "`echo "$1" |grep -vE '^\-|^\+'`" ];then
if [ "$WINDOW_MANAGER" ];then
echo -e "\\033[1;31mWINDOWMANAGER\\033[0;39m mismatch"
usage 1
else
[ "`which $1`" ] || { echo "Hmmm... Seems '$1' is not a valid windowmanager";usage 1; }
echo "$1" >/etc/windowmanager
fi;fi

_debug `date` "1: passed checking for other instances of xwin running or parameters"

#v1.0.7
CURRENTX=`readlink /usr/bin/X`
#if test "`echo $CURRENTX | grep '/'`" != ""; then
CURRENTX=`basename $CURRENTX`
#fi

if [ "$CURRENTX" = "XF86_SVGA" ];then
 #xf86config v3.3.6 creates config file at /etc, wrong place...
 [ -f /etc/XF86Config ] && mv $VERB -f /etc/XF86Config /etc/X11/XF86Config
fi

haveXVESA=''
haveXVESA=`echo $CURRENTX | grep -v -E 'Xorg|XF86_SVGA'`

#v3.90 expanded to auto run best video mode...
##if [ "$CURRENTX" = "Xvesa" ];then #0.9.9
if [ "$haveXVESA" ];then
 if [ ! -f /tmp/videomode -a ! -f /etc/videomode ];then #v2.21  ##fresh boot /tmp/videomode does not exist
  touch /tmp/ddcprobe.txt  ##+++2013-04-11
  ddcprobe >/tmp/ddcprobe.txt
  #weird (ddcprobe is very weird), on some hardware, edid monitor probe fails
  #every alternate run of ddcprobe...
  case "`cat /tmp/ddcprobe.txt`" in *edidfail*)
   sleep 1
   ddcprobe >/tmp/ddcprobe.txt
   ;;
  esac
  get_edid_func(){  ##+++2013-04-11
      which get-edid    >>$OUT || return 0
      which edid-decode >>$OUT || return 0
  if [ ! -s /tmp/ddcprobe.txt ]; then
      get-edid 1>/tmp/get-edid.out 2>>$ERR
      sleep 1s
      [ -s /tmp/get-edid.out ] || return 1
      edid-decode /tmp/get-edid.out >/tmp/ddcprobe.txt
  fi
  }
  get_edid_func

#v3.99 begin
  if [ -f /etc/xorgoverrides ] && grep $Q -f /etc/xorgoverrides /tmp/ddcprobe.txt;then
   rm $VERB -f /var/lock/XLOADED  #not necessary, precaution.
   #1st dialog offers to use Xvesa...
   /usr/sbin/xorgwizard; [ $? = 250 ] && exit
   CURRENTX=`readlink /usr/bin/X`
    ##if test "`echo $CURRENTX | grep '/'`" != ""; then
    CURRENTX=`basename $CURRENTX`
    ##fi
   [ "$CURRENTX" != "Xorg" ] && exit 2 #go to command line if not Xorg
  fi
 fi
fi
#Repeat earlier tests in case Xserver now Xorg and to retain indentation levels.
##if [ "$CURRENTX" = "Xvesa" ];then #0.9.9
if [ "$haveXVESA" ] ; then
 BASEMODE=""
 if [ ! -f /tmp/videomode -a ! -f /etc/videomode ];then #v2.21
#v3.99 end

  __detect_classmate_laptop__(){
  #v3.95 note code duplicated in xorgwizard, not efficient...
  #v3.94 detect if a Classmate PC laptop with 800x480 screen...
  if [ "`grep 'edidfail' /tmp/ddcprobe.txt`" != "" ];then
   if [ "`cat /tmp/ddcprobe.txt | tr -s ' ' | grep 'oem: Intel(r)915GM/910ML/915MS Graphics'`" != "" ];then
    if [ "`dmesg | grep 'CPU0: Intel(R) Celeron(R) M processor          900MHz'`" != "" ];then
     if [ "`dmesg | grep 'uDiskOnChip'`" != "" ];then
      #yep, looks like this is a Classmate model with 800x480...
      echo 'timing: 800x480@60' >> /tmp/ddcprobe.txt
     fi
    fi
   fi
  fi
  }

  #v3.97 improved method: CM=Classmate, 915=chip 10=generation#...
  [ "`dmidecode -s bios-version | grep '^CM91510'`" ] && echo 'timing: 800x480@60' >> /tmp/ddcprobe.txt
  #v3.95 recognise more special screens...
  DMIDECODE=`dmidecode`
  #recognise EeePC Asus laptop...
  [ "`echo "$DMIDECODE" | grep 'Product Name: 701'`" ] && [ "`echo "$DMIDECODE" | grep 'Serial Number: EeePC'`" ] && echo 'timing: 800x480@60' >> /tmp/ddcprobe.txt

  echo -e '\nIf initialization freezes here, press ctrl-c and type "xorgwizard",\nselect "Xorg", choose monitor type and choose video mode.'   #v3.99
  grep '^oem:' /tmp/ddcprobe.txt > /tmp/ddcprobeoem.txt   #v3.99 current adapter signature

  #get too many weird resolutions, maybe better just only allow these...
  #want widescreen/non-vesa resolutions only...
  VESAMODES=`$haveXVESA -listmodes 2>&1 | grep '^0x' | tr ':' ' ' | tr -s ' ' | cut -f 1,2 -d ' '`
  rm $VERB /tmp/ddcprobeoem.txt  #v3.99 didn't hang in Xvesa, so delete signature
  MONCHOICES=`grep -F 'timing:' /tmp/ddcprobe.txt | grep -E -v 'Apple|8514A|Mac II|\(XGA2\)' | grep -E ' 800x480@| 1024x600@| 1280x768@| 1280x800@| 1280x1024@| 1360x768@| 1400x1050@| 1440x900@| 1600x1200@| 1680x1050@| 1920x1080@| 1920x1200@' | cut -f 2 -d ' ' | sort -u`

  if [ "$MONCHOICES" != "" ];then  #1
   MONCUTXY=`echo "$MONCHOICES" | cut -f 1 -d '@'`

   #v2.21 code to handle widescreen with intel video chips...
   if [ ! -f /etc/resolutionfix ];then ##2
    if grep -F 'oem:' /tmp/ddcprobe.txt | grep $Q -F 'Intel' ;then  #3
     MISSINGXY=""
     for oneCUTXY in $MONCUTXY #ex: each field 1024x768
     do
      OPATTERN=" ${oneCUTXY}x"
      [ "`echo "$VESAMODES" | grep "$oneCUTXY"`" ] || MISSINGXY="$oneCUTXY"
     done
     if [ "$MISSINGXY" != "" ];then  #4
      MYXRES=`echo -n "$MISSINGXY" | cut -f 1 -d 'x'`
      MYYRES=`echo -n "$MISSINGXY" | cut -f 2 -d 'x'`
      915resolution 38 $MYXRES $MYYRES
      #...replaces mode 38 (1024x768).
      #create something for /etc/profile to execute at bootup...
      echo "915resolution 38 $MYXRES $MYYRES" > /etc/resolutionfix
      VESAMODES=`$haveXVESA -listmodes 2>&1 | grep '^0x' | tr ':' ' ' | tr -s ' ' | cut -f 1,2 -d ' '`
      PPATTERN=" ${MYXRES}x${MYYRES}x"
      #BASEMOD is res that we are going to start X with...
      BASEMODE=`echo "$VESAMODES" | grep "$PPATTERN" | grep -E 'x16$|x24$|x32$' | head -n 1`
     fi  #4
    fi  ##3
   fi  ##2
  ##end for Intel part
   #find out if there is just one native mode...
   if [ "$BASEMODE" = "" ];then
    #if [ "`echo "$MONCUTXY" | wc -l`" = "1" ];then
     QPATTERN=`echo "$MONCHOICES" | cut -f 1 -d '@' | tr '\n' '|'`
     BASEMODE=`echo "$VESAMODES" | grep -E "$QPATTERN" | grep -E 'x16$|x24$|x32$' | head -n 1`
    #fi
   fi

   if [ "$BASEMODE" != "" ];then
    echo "$BASEMODE" > /etc/videomode #no need for wizard after startup!
    rm $VERB -f /tmp/videomode  #w460 make sure can exit from X.
   fi
  fi  ##1
  ###end of MONCHOICES !not empty part
  ##Final Fallback :
  if [ "$BASEMODE" = "" ];then
   BASEMODE=`echo "$VESAMODES" | grep ' 800x600x16' | head -n 1`
   if [ "$BASEMODE" != "" ];then
    echo "$BASEMODE" > /tmp/videomode
   else
    echo "0x0111 640x480x16" > /tmp/videomode
    #...desparate, not a practical mode.
   fi
  fi
  ##End of final fallback
  rm $VERB -f /tmp/Xflag #precaution.
  #...if /tmp/videomode exists, video-wizard is started in ~/.xinitrc
  #...note, if /etc/videomode exists instead, normal X startup.

 fi

fi
_debug `date` "2: finished checking for haveXVESA"
#note, mouse and keyboard types are autodetected in /etc/rc.d/rc.local0 at every bootup,
#so /etc/mousedevice and /etc/keyboardtype have autodetected values in them
#(changeable by Mouse/Keyboard Wizard, but rc.local0 will override if interface not found).

#v411 restored after removal in v407...
#update xorg.conf if mouse has changed...
read MOUSEDEV </etc/mousedevice #autodetected in rc.sysinit
read OLDMOUSEDEV </etc/oldmousedevice #set in rc.sysinit
if [ "$OLDMOUSEDEV" != "$MOUSEDEV" ];then
 if [ "$OLDMOUSEDEV" != "nothing" ];then #"nothing" on first boot.
  if [ -f /etc/X11/xorg.conf ];then
   case `cut -c 1-4 /etc/mousedevice` in
    "inpu") #"input/mice", usb
     cat /etc/X11/xorg.conf | sed -e 's/\W\+Option\W\+"Protocol"\W\+"\(\(\w\+\/\w\+\)\|\(\w\+\)\)\W\+#mouse0protocol/   Option      "Protocol" "IMPS\/2" #mouse0protocol/g' > /tmp/xorg.conf.tmp2
     ;;
    "ttyS") #ttyS0,1,2,3, serial
     cat /etc/X11/xorg.conf | sed -e 's/\W\+Option\W\+"Protocol"\W\+"\(\(\w\+\/\w\+\)\|\(\w\+\)\)\W\+#mouse0protocol/   Option      "Protocol" "Microsoft" #mouse0protocol/g' > /tmp/xorg.conf.tmp2
     ;;
    *)
     cat /etc/X11/xorg.conf | sed -e 's/\W\+Option\W\+"Protocol"\W\+"\(\(\w\+\/\w\+\)\|\(\w\+\)\)\W\+#mouse0protocol/   Option      "Protocol" "auto" #mouse0protocol/g' > /tmp/xorg.conf.tmp2
     ;;
   esac
   sync
   cp $VERB -f /tmp/xorg.conf.tmp2 /etc/X11/xorg.conf
   sync
   rm $VERB -f /tmp/xorg.conf.tmp2
  fi
 fi
 OLDMOUSEDEV="$MOUSEDEV" #v411 old is now current mouse
 echo "$OLDMOUSEDEV" > /etc/oldmousedevice #v411
fi

#v408 k2.6.25.16 has serial driver as a module...
[ "`grep 'ttyS' /etc/mousedevice`" ] && modprobe $Q $VERB sermouse
#v411 precaution...
[ "`grep 'input/mice' /etc/mousedevice`" ] && modprobe $Q $VERB usbhid

#ask about scrollwheel... DO NOT ASK, ASSUME YES...
if [ ! -f /etc/mousebuttons ];then

  _force_five_mousebuttons(){
  echo "5" > /etc/mousebuttons
  echo -e "The file /etc/mousebuttons has been created, with content \"5\"."
  if [ -f /etc/X11/xorg.conf ];then
   cat /etc/X11/xorg.conf | tr -s '#' | sed -e 's/#Option\W\+"ZAxisMapping"\W\+"4 5"/Option      "ZAxisMapping" "4 5"/g' > /tmp/xorg.conf.tmp
   _sync
   cp $VERB -f /tmp/xorg.conf.tmp /etc/X11/xorg.conf
  fi
  }
_force_five_mousebuttons

__ask_for_mousebuttons(){
 dialog --yesno "Do you have a wheel/scroll type of mouse?" 0 0
 if [ $? -eq 0 ];then

_force_five_mousebuttons

 else
  echo -n "3" > /etc/mousebuttons
  echo -e "...you chose \"no\"."
  echo -e "The file /etc/mousebuttons has been created, with content \"3\"."
  if [ -f /etc/X11/xorg.conf ];then
   cat /etc/X11/xorg.conf | sed -e 's/Option\W\+"ZAxisMapping"\W\+"4 5"/#Option      "ZAxisMapping" "4 5"/g' | tr -s '#' > /tmp/xorg.conf.tmp
   _sync
   cp $VERB -f /tmp/xorg.conf.tmp /etc/X11/xorg.conf
  fi
 fi
}

fi

_debug `date` "3: finished checking for mouse"

__old_alsa__(){
#now done in /etc/rc.d/rc.modules...
#alsa sound setup...
if [ "`cat /etc/modprobe.conf | grep -e 'snd-card-0'`" = "" ];then
 #auto option created by BK for fast operation, less questions...
 alsaconf --auto
fi
}

__old_agpdriver__(){
#rc.modules now does this...
#v2.0.0 load correct -agp driver...
AGPDRIVER=`findhostbridge` #in /usr/sbin.
if [ "$AGPDRIVER" != "" ];then
 [ "`lsmod | grep "${AGPDRIVER}"`" ] || modprobe $Q $VERB "$AGPDRIVER" 2>>$ERR
fi
#note, could write $AGPDRIVER to /etc/modprobe.preload to load it at kernel boot.
#note, it also loads agpgart.ko.
}


#v2.11 find out if xorg video drvr exists, else use xorg vesa...
if [ -f /usr/bin/Xorg ];then
 if [ -f /etc/X11/xorg.conf ];then
  #find location of video chip drivers...
  SPECVESA=`/bin/find -L /usr/lib -xdev -type f -name vesa_drv.so | head -n1`
  if [ "$SPECVESA" ];then
   DRVRSPATH=`dirname "$SPECVESA"`
   #get current driver...
   DRVRCURR=`grep -m 1 '#card0driver' /etc/X11/xorg.conf | cut -f 2 -d '"'`
   if [ "$DRVRCURR" ];then
    #if [ ! -f $DRVRSPATH/${DRVRCURR}_drv.so ];then
    #one driver is mtx_drv.o hmmm, okay do it this way (pakt)...
    ls -1 $DRVRSPATH/* 2>>$ERR | grep $DRVRCURR | grep $Q '_drv\.so$'
    if [ $? -ne 0 ];then
     _warn "Altering /etc/X11/xorg.conf to use the \"vesa\" driver instead '$DRVRCURR'"
     sPATTERN="s/.*#card0driver/        Driver      \"vesa\" #card0driver/"
     cat /etc/X11/xorg.conf | sed -e "$sPATTERN" > /tmp/xorg.conf.tmp2
     _sync
     cp $VERB -f /tmp/xorg.conf.tmp2 /etc/X11/xorg.conf
    fi
   fi
  fi
 fi
fi

#Puppy Xorg Video Wizard...
if [ -f /usr/bin/Xorg ];then
 if [ -f /etc/X11/xorg.conf ];then
 RLX=`readlink /usr/bin/X`
 #if test "`echo $RLX | grep '/'`" != ""; then
    RLX=`basename "$RLX"`
    #fi
  if [ "$RLX" = "Xorg" ];then

   #v2.13 video hardware profile (must be same as in xorgwizard)...
   DDCPROBE=`ddcprobe`
   #v2.17 patch from Nightflyer... as in xwin, may have to run ddcprobe twice...
   case "`echo "$DDCPROBE"`" in
    *edidfail*)
     sleep 1
     DDCPROBE=`ddcprobe`
    ;;
   esac

   PROFILECHIP=`echo "$DDCPROBE" | grep '^oem: ' | head -n 1 | cut -f 2-4 -d ' ' | tr ' ' '_' | sed -e 's/[^0-9a-zA-Z]/_/g'`
   #PROFILEMONITOR=`echo "$DDCPROBE" | grep -E '^monitorrange: |^monitorid: |^eisa: ' | head -n 1 | cut -f 2 -d ':' | sed -e 's/ //g' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#v3.95 'eisa:' and 'id:' return fluctuating values on some PCs, so search in this order...
                          PROFILEMONITOR=`echo "$DDCPROBE" | grep '^monitorid: '    | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
 [ "$PROFILEMONITOR" ] || PROFILEMONITOR=`echo "$DDCPROBE" | grep '^monitorname: '  | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
 [ "$PROFILEMONITOR" ] || PROFILEMONITOR=`echo "$DDCPROBE" | grep '^monitorrange: ' | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#[ "$PROFILEMONITOR" ] || PROFILEMONITOR=`echo "$DDCPROBE" | grep '^dtiming: '      | tail -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
 [ "$PROFILEMONITOR" ] || PROFILEMONITOR=`echo "$DDCPROBE" | grep '^manufacture: '  | tail -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#[ "$PROFILEMONITOR" ] || PROFILEMONITOR=`echo "$DDCPROBE" | grep '^eisa: '         | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`

   HARDWAREPROFILE="${PROFILECHIP}-${PROFILEMONITOR}"
   #find out if current xorg.conf matches this profile...
   oldPROFILE=`grep '^#PuppyHardwareProfile' /etc/X11/xorg.conf | cut -f 2 -d '=' | cut -f 1 -d ' '`
   if [ "$oldPROFILE" != "$HARDWAREPROFILE" ];then
    #video hardware has changed. either changed monitor or booting different PC.
    #same current xorg.conf as a profiled filename...
    mv $VERB -f /etc/X11/xorg.conf /etc/X11/xorg.conf.${oldPROFILE}
    #if a previous profiled filename for new hardware, use that...
    [ -f /etc/X11/xorg.conf.${HARDWAREPROFILE} ] && cp $VERB -af /etc/X11/xorg.conf.${HARDWAREPROFILE} /etc/X11/xorg.conf
   fi
  fi
 fi

 if [ ! -f /etc/X11/xorg.conf ];then
  rm $VERB -f /var/lock/XLOADED  #not necessary, precaution.
  #1st dialog offers to use Xvesa...
  /usr/sbin/xorgwizard; [ $? = 250 ] && exit

  CURRENTX=`readlink /usr/bin/X`
  #if test "`echo $CURRENTX | grep '/'`" != ""; then
    CURRENTX=`basename "$CURRENTX"`
    #fi
  ##[ "$CURRENTX" = "Xvesa" ] && exec xwin #w482 need to restart xwin.
   haveXVESA=`echo $CURRENTX | grep -v -E 'Xorg|XF86_SVGA'`
  [ "$haveXVESA" ] && exec xwin
 fi
fi
_debug `date` "4: finished checking for Xorg"

if [ -f /var/lock/XLOADED ];then
#v1.0.7 J_Reys idea (see note further down)...
_old_xloaded_(){
 if [ "`cat /var/lock/XLOADED`" = "true" ];then
  #last time X ran, PC hung and had to be rebooted...
  echo -en "\\033[1;31m" #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
  echo '
It seems that last time X ran, the computer hung and you had to reboot.
Have now dropped down to the commandline. If you want to run the Xorg
Video Wizard, type "xorgwizard", and after configuring /etc/X11/xorg.conf
(hopefully correctly this time!) type "xwin" to start X.'
  echo -e "\\033[0;39m"
  rm $VERB -f /var/lock/XLOADED #otherwise cannot start X.
  exit
 fi
}

#v3.98 improved handling by pizzasgood...
 if [ "`cat /var/lock/XLOADED`" = "true" ];then
  #last time X ran, PC hung and had to be rebooted...
  dialog --timeout 30 --title "Warning" --yes-label "Ignore" --no-label "Commandline" --yesno "X seems to have exited uncleanly the last time you ran Puppy.  This is usually because of an improper shutdown (such as a power failure), but may be because something is broken.

If it was just something like a power failure, wait for 30 seconds or choose <Ignore> for normal startup of X...

If there is a problem, such as X not working, choose <Commandline> to drop out to a commandline. There will then be further advice how to fix X...

If undecided, wait 30 seconds for normal startup of X..." 0 0
  if [ $? != 1 ]; then
    rm $VERB /var/lock/XLOADED
  else
    echo -en "\\033[1;31m" #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
    echo '
It seems that last time X ran, the computer hung and you had to reboot.
Have now dropped down to the commandline. If you want to run the Xorg
Video Wizard, type "xorgwizard", and after configuring /etc/X11/xorg.conf
(hopefully correctly this time!) type "xwin" to start X.'
    echo -e "\\033[0;39m"
    rm $VERB -f /var/lock/XLOADED #otherwise cannot start X.
    #define EINPROGRESS 115 /* Operation now in progress */
    #define ESTALE      116 /* Stale NFS file handle */
    #define EUCLEAN     117 /* Structure needs cleaning */
    exit 116
  fi
 fi

fi
_debug `date` "5: finished checking for XLOADED"

##if [ "$CURRENTX" = "Xvesa" ];then #0.9.9
if [ "$haveXVESA" ] ; then
 #/tmp/videomode exists if starting X with new video test mode...
 if [ -e /tmp/videomode ];then
  grep " 800x600" /tmp/videomode
  if [ $? -eq 0 ];then #=0 if found.
   if [ -e /tmp/Xflag ];then
    #we have just attempted 800x600x16 and aborted with ctrl-alt-backspace
    #so have failed.
    echo "An attempt has just been made to run X at 800x600x16 but it has"
    echo "not worked (or it did but you did not press the OK button in the"
    echo "Video-wizard). It is not feasible to run Puppy at any lower resolution"
    echo -e "or color. If you want to try again, type \"xwin\" at the prompt."
    echo "It may be helpful to look in $logDIR/xerrs.txt for error messages"
    rm $VERB -f /tmp/videomode
    rm $VERB -f /tmp/Xflag
    echo "0x0111 640x480x16" > /etc/videomode #desparate.
    #define EBFONT      59  /* Bad font file format */
    exit 59
   else
    #flag to prevent endless loop X restarting...
    touch /tmp/Xflag
    #...pressing a button in video-wizard removes this file.
    #...however, aborting X will leave it in existence.
   fi
  fi
 fi
 #/tmp/videomode exists if starting X with new video test mode...
 if [ -e /tmp/videomode ];then
  #stored in format "0x0111 640x480x16"
  VID_MODE=`cut -f 1 -d ' ' /tmp/videomode`
  VID_SCRN=`tr -s ' ' </tmp/videomode | cut -f 2 -d ' '`
 else
  #stored in format "0x0111 640x480x16"
  VID_MODE=`cut -f 1 -d ' ' /etc/videomode`
  VID_SCRN=`tr -s ' ' </etc/videomode | cut -f 2 -d ' '`
 fi
fi
_debug `date` "6: finished checking for haveXVESA"


MOUSEBUTTONS=3
if [ -e /etc/mousebuttons ];then
 read MOUSEBUTTONS </etc/mousebuttons

fi
#v2.02 fix bug discovered by Dougal...
if [ "$MOUSEBUTTONS" -eq 2 ];then
 #the problem is, if /etc/xextraoptions has '-2button' which turns on middle-button
 #emulation, if leave MOUSEBUTTONS=2 then the right button does not work.
 #have to pass '3' to Xvesa, meaning effectively 3 buttons available...
 [ "`grep ' \-2button' /etc/xextraoptions `" ] && MOUSEBUTTONS=3
fi

#0.9.8
XEXTRAOPTIONS=""
if [ -e /etc/xextraoptions ];then
 read XEXTRAOPTIONS </etc/xextraoptions
fi

__wmexit_hack__(){
#w477 hack, workaround for X exit problem. also see further down...
if [ -f /tmp/wmexitmode.txt ];then
 if [ "`cat /tmp/wmexitmode.txt`" = "exit" ];then
  rm $VERB -f /tmp/wmexitmode.txt
  exit
 fi
fi
}

#v424 bad hack, i somehow get /dev/mouse pointing to psaux when chose a serial mouse, don't know why...
[ "`grep 'ttyS' /etc/mousedevice`" ] && ln $VERB -sf $MOUSEDEV /dev/mouse

_create_dev_fb0(){
#2016-02-06 REM: /dev/fb0 is needed by fbdev Xorg driver.
# radeonfb inserts and sets console, but does not create /dev/fb0
# kernel 2.6.30.9-i586-dpup005-Celeron2G
HAVE_DEVFB0=`find /sys -path "*/fb[0-9]/dev"`
for f in $HAVE_DEVFB0; do
 IFS=':' read M m <"$f"
 dn=${f%/*}
 bn=${dn##*/}
 test -c /dev/$bn && continue
 mknod   /dev/$bn c $M $m
done
}
_create_dev_fb0

_debug `date` "7: finally start X"
#finally, start X...

#J_Rey had a good idea, flag XLOADED... and set to false on exit.
# but if PC hangs, XLOADED will still be true, so will know it is broken.
echo "true" > /var/lock/XLOADED

rm $VERB -f /tmp/wmexitmode.txt

_info "CURRENTX='$CURRENTX'"
#test -e "$logDIR"/xerrs.$CURRENTX.log && mv $VERB "$logDIR"/xerrs.$CURRENTX.log "$logDIR"/xerrs.$CURRENTX.log-prev
test -e "$logDIR"/xerrs.$CURRENTX.log && _log_rotate "$logDIR"/xerrs.$CURRENTX.log

case $CURRENTX in
 #Xvesa|Xvesa*|Xnvidia|Xnvidia*|Xchips|Xephyr|Xepson|Xfake|Xfbdev|Xi810|Xmach64|Xmga|Xneomagic|Xnest|Xpm2|Xrt28|Xsdl|Xsmi|Xvfb|Xvia)
 Xvesa|Xvesa*|Xchips)

  #w479 older Xvesa server may not recognise the '-sp' option...
  if [ "`$haveXVESA -help 2>&1 | grep '^\-sp '`" = "" ];then
   SPOPTION=''
  else
   SPOPTION='-sp /usr/lib/xserver/SecurityPolicy'
  fi
  #sleep 5
  #startx $VIDMODE $MOUSEDEV > "$logDIR"/xerrs.txt 2>&1
  #Puppy 0.8.4 no need for startx script...
  VID_FREQ=`echo -n "$VID_SCRN" | cut -f 4 -d "x"`
  if [ ! "$VID_FREQ" ];then
   echo "$VID_MODE" > /tmp/currentvideomode
   echo "Starting X with video mode '$VID_MODE' and mouse '$MOUSEDEV'..."
   #w460 added -fp and -sp options...
   /usr/bin/xinit /root/.xinitrc -- -mode $VID_MODE $XEXTRAOPTIONS +kb -mouse /dev/mouse,$MOUSEBUTTONS -fp /usr/share/X11/fonts/misc/,/usr/share/X11/fonts/TTF/,/usr/share/X11/fonts/Type1/ $SPOPTION > "$logDIR"/xerrs.$CURRENTX.log 2>&1
   RETval1=$?
  else
   echo "Starting X with video screen '$VID_SCRN' and mouse '$MOUSEDEV'..."
   #also, want to have adjustable frequency, VIDSCRN=widthxheightxdepthxfreq...
   echo "$VID_SCRN" > /tmp/currentvideomode
   /usr/bin/xinit /root/.xinitrc -- -screen $VID_SCRN $XEXTRAOPTIONS +kb -mouse /dev/mouse,$MOUSEBUTTONS -fp /usr/share/X11/fonts/misc/,/usr/share/X11/fonts/TTF/,/usr/share/X11/fonts/Type1/ $SPOPTION > "$logDIR"/xerrs.$CURRENTX.log 2>&1
   RETval1=$?
  fi
  ;;
 Xfbdev)  ##no -mode option : Fatal server error:no screens found XIO:  fatal IO error 104 (Connection reset by peer) on X server ":0.0" after 0 requests (0 known processed) with 0 events remaining.

  echo "Starting X with Xfbdev Kdrive X server, mouse $MOUSEDEV..."
  /usr/bin/xinit /root/.xinitrc -- -mouse /dev/mouse,$MOUSEBUTTONS > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  ;;
 Xi810) #v1.0.7
  echo "Starting X with Xi810 Kdrive X server, mouse $MOUSEDEV..."
  #echo "(experimental, currently fixed to 1024x768x16x72 in /usr/bin/xwin)"
   /usr/bin/xinit /root/.xinitrc -- -screen $VID_SCRN -mouse /dev/mouse,$MOUSEBUTTONS > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  ;;
 XF86_SVGA)
  echo "Starting X, specs in /etc/X11/XF86Config, startup apps /root/.xinitrc..."
  /usr/bin/xinit /root/.xinitrc -- -bpp 16 > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  ;;

#************ XORG XORG XORG XORG ****************************#
 Xorg)

 #= Xorg DEFAULT OPTIONS : =#

#= Allow and disable:
  XORG_ALLOW_NON_LOCAL_MOD_IN_DEV=''; #-allowNonLocalModInDev
  XORG_ALLOW_NON_LOCAL_XVIDTUNE='';   #-allowNonLocalXvidtune

  XORG_DISABLE_MOD_IN_DEV='';         #-disableModInDev
  XORG_DISABLE_VID_MODE='';           #-disableVidMode

#= Colours:
  XORG_BPP='';        #-bpp 24            ## use -depth or -fbbpp
  XORG_DEPTH='';      #-depth 24          ## values 1,4,8,15,16,24
  XORG_FBBPP='';      #-fbbpp 32          ## values 1,8,16,24,32
  XORG_PIXMAP24='';   #-pixmap24
  XORG_PIXMAP32='';   #-pixmap32
  XORG_WEIGHT='';     #-weight 565        ## for 16 bpp, default 565

  XORG_FIP_PIXELS=''; #-flipPixels

  XORG_GAMMA='';  #-gamma 1.0         ##      range 0.1 - 10, default 1.0
  XORG_BGAMMA=''; #-bgamma 1.0        ## blue range 0.1 - 10, default 1.0
  XORG_GGAMMA=''; #-ggamma 1.0        ##green range 0.1 - 10, default 1.0
  XORG_RGAMMA=''; #-rgamma 1.0        ##  red range 0.1 - 10, default 1.0

#= Config file:
  XORG_NOSILK='';                 #-nosilk   ### Input
  XORG_ALLOW_MOUSE_OPEN_FAIL='';  #-allowMouseOpenFail
  XORG_CONFIG='';                  #-config /etc/X11/xorg.conf   ### Root bit different than User
  XORG_KEYBOARD='';               #-keyboard Keyboard0      ## use xorg.conf entry of NAME   ### XorgConf
  XORG_LAYOUT='';                #-layout X.org Configured ## use xorg.conf entry of NAME   ### XorgConf
  XORG_POINTER='';              #-pointer Mouse0   ### XorgConf
  XORG_SCREEN='';              #-screen Screen0   ### XorgConf

#= Modules and version:
  XORG_MODULEPATH='';  #-modulepath /usr/X11/lib/xorg/modules   ### Root
  XORG_IGNORE_ABI='';  #-ignoreABI

#= Troubleshooting:
  XORG_KEEPTTY='';        #-keeptty
  XORG_ISOLATE_DEVICE=''; #-isolateDevice PCI:9:8:7 ## bustype:bus:device:function (ie PCI:1:0:0)

  XORG_LOGFILE='-logfile /var/log/Xorg.0.log';     #-logfile /var/log/Xorg.0.log  ### Root
  XORG_LOGVERBOSE='';  #-logverbose 3  ## default 3
  XORG_QUIET='';       #-quiet  ## verbosity 0
  XORG_VERBOSE='';     #-verbose 0  ## verbosity to stderr, default 0

for eachVAR in $XORG_ALLOW_NON_LOCAL_MOD_IN_DEV $XORG_ALLOW_NON_LOCAL_XVIDTUNE \
 $XORG_DISABLE_MOD_IN_DEV $XORG_DISABLE_VID_MODE \
 $XORG_BPP \
 $XORG_DEPTH \
 $XORG_FBBPP \
 $XORG_PIXMAP24 $XORG_PIXMAP32 \
 $XORG_WEIGHT \
 $XORG_FIP_PIXELS \
 $XORG_GAMMA \
 $XORG_BGAMMA \
 $XORG_GGAMMA \
 $XORG_RGAMMA \
 $XORG_NOSILK $XORG_ALLOW_MOUSE_OPEN_FAIL \
 $XORG_CONFIG \
 $XORG_KEYBOARD \
 $XORG_LAYOUT \
 $XORG_POINTER \
 $XORG_SCREEN \
 $XORG_MODULEPATH \
 $XORG_IGNORE_ABI $XORG_KEEPTTY \
 $XORG_ISOLATE_DEVICE \
 $XORG_LOGFILE \
 $XORG_LOGVERBOSE \
 $XORG_QUIET \
 $XORG_VERBOSE

do
XORG_OPTIONS="${XORG_OPTIONS}$eachVAR "
done
_info "Using xorg options '$XORG_OPTIONS'"

  # MOUSE
  if [ ! -e /etc/mousedevice ];then
   echo "input/mice" > /etc/mousedevice
   #ln -snf input/mice /dev/mouse
  else
   #[ "`cat /etc/mousedevice`" = "psaux" ] && echo "input/mice" > /etc/mousedevice
   if [ -f /etc/mousedevice ]; then
    read MOUSE_DEVICE </etc/mousedevice
     case $MOUSE_DEVICE in *psaux*) echo "input/mice" > /etc/mousedevice;; esac
   elif [ -d /etc/mousedevice ]; then
    rm $VERB -rf /etc/mousedevice
   else
    rm $VERB -f /etc/mousedevice
   fi
  fi
  test -e /etc/mousedevice || echo input/mice >/etc/mousedevice
  read MOUSE_DEVICE </etc/mousedevice || MOUSE_DEVICE="input/mice"
  test -d /dev/input || mkdir $VERB -p /dev/input
  test -c /dev/input/mice || mknod /dev/input/mice 13 63
  ln $VERB -sf $MOUSE_DEVICE /dev/mouse

  # REM: Need to check /dev/input/event* also

 # REM: make needed devices just in case +++2015-11-30
 mkdir $VERB -p /dev/vc
 for t in 1 2 3 4 5 6 7 8 9 10 11 12 13
 do
 test -e /dev/tty$t || mknod /dev/tty$t c 4 $t
 test -e /dev/vc/$t || ln $VERB -sf ../tty$t /dev/vc/$t
 done


  # REM: Rotate various log files
 __rotate_xerrs_log__(){
  # LOG FILES
 { OLD_LOGS=`ls -1rv "$logDIR"/xerrs.$CURRENTX.log*`; } 2>>$ERR
  for oneLOG_FILE in $OLD_LOGS; do
    case $oneLOG_FILE in

        "$logDIR"/xerrs.$CURRENTX.log.[0-9]*)

    LOG_NR=${oneLOG_FILE##*.}
    NEW_NR=$((LOG_NR+1)) || continue
    while test -e "$logDIR"/xerrs.$CURRENTX.log.$NEW_NR; do
                        NEW_NR=$((NEW_NR+1)); done
        mv $VERB $oneLOG_FILE ${oneLOG_FILE%.*}.$NEW_NR
   ;;

  "$logDIR"/xerrs.$CURRENTX.log) mv $VERB "$logDIR"/xerrs.$CURRENTX.log "$logDIR"/xerrs.$CURRENTX.log.0
  ;;
    esac
  done
  }

   __configured_usr_X11__(){
       if [ -f /usr/X11/var/log/Xorg.0.log ]; then
   _log_rotate /usr/X11/var/log/Xorg.0.log
       fi
   }

  if test "$XORG_LOGFILE"; then
   if [ -f "${XORG_LOGFILE#-logfile }" ]; then
    _log_rotate "${XORG_LOGFILE#-logfile }"
   fi
  fi

  # XORG VERSION
  _XORG_SERVER_VERSION_=`Xorg -version 2>&1 | grep 'X\.Org X Server .*' | grep -oe '[.0-9]*$'`
  [ "$VERBOSE" ] && echo "Xorg is version '$_XORG_SERVER_VERSION_'"
  case $_XORG_SERVER_VERSION_ in
  '') :;; # older Xorg has different version output
  *)      # newer Xorg - needs KMS and fbcon.ko
     # do modesetting

     # first determine graphics ( linux/pci_ids.h )
     _LS_PCI_N_=`lspci -n`
    #_LS_PCI_VGA_=`lspci -n | cut -f2 -d':' | awk '{print $NF}' | grep -Ew '0001|03|0300|0301|0302|0380'`
     _LS_PCI_VGA_=`echo "$_LS_PCI_N_" | cut -f2 -d':' | awk '{print $NF}' | grep -Ew '0001|03|0300|0301|0302|0380'`
     [ "$VERBOSE" ] && echo "PCI video controllers :"$_LS_PCI_VGA_

     for onePCI in $_LS_PCI_VGA_
     do

     VEN_PROD_=`echo "$_LS_PCI_N_" | grep " ${onePCI}:" | cut -f1 -d'(' | awk '{print $NF}'`
       VENDOR_=`echo "$VEN_PROD_" | cut -f1 -d':'`
      PRODUCT_=`echo "$VEN_PROD_" | cut -f2 -d':'`
     [ "$VERBOSE" ] && echo "VEN_PROD_='$VEN_PROD_'"

     case $VENDOR_ in
         8086) # Intel
         grep $Q '^i915 ' /proc/modules && {
         grep '^i915 ' /proc/modules | while read drivr vmsize users rest; do
         [ "$drivr" ] || break
         case $users in
         0)
         modprobe $Q $VERB -r i915
         sleep 1
         modprobe $Q $VERB i915 modeset=1
         ;;
         *) [ "$VERBOSE" ] && echo "users of i915 not 0";;
         esac
         done
         modprobe $Q $VERB intel-agp
         } || { modprobe $Q $VERB i915 modeset=1; modprobe $Q $VERB intel-agp; }
        ;;

         1002) # ATI / AMD
         grep $Q '^glrfx ' /proc/modules && {
         grep '^glrfx ' /proc/modules | while read drivr vmsize users rest; do
         [ "$drivr" ] || break
         case $users in
         0)
         modprobe $Q $VERB -r glrfx
         sleep 1
         modprobe $Q $VERB glrfx modeset=1

         ;;
         esac
         done
         }
        ;;

         10de) # nVidia
         grep $Q '^nouveau ' /proc/modules && {
         grep '^nouveau ' /proc/modules | while read drivr vmsize users rest; do
         [ "$drivr" ] || break
         case $users in
         0)
         modprobe $Q $VERB -r nouveau
         sleep 1
         modprobe $Q $VERB nouveau modeset=1

         ;;
         esac
         done
         }

         grep $Q '^nvidia ' /proc/modules && {
         grep '^nvidia ' /proc/modules | while read drivr vmsize users rest; do
         [ "$drivr" ] || break
         case $users in
         0)
         modprobe $Q $VERB -r nvidia
         sleep 1
         modprobe $Q $VERB nvidia modeset=1

         ;;
         esac
         done
         }

        ;;
      *) _warn "Unhandled PCI VENDOR '$VENDOR_'";;
      esac
     done

   modprobe $Q $VERB -b fbcon
   ;;
  esac

  echo "Starting X, specs in $XORG_CONF, startup apps launched from file $XINIT_RC..."
  #v2.11 G2 suggested -br for black background instead of checked...
  #w479 ***AWFUL HACK*** running pup 218, retro k2.6.18.8, my laptop, Xorg hangs
  #     if have '-nolisten tcp'. until find out why, this workaround...
  if [ "$KERNEL_RELEASE" = "2.6.18.8" ]; then
   /usr/bin/xinit $XINIT_RC -- $XORG_OPTIONS -ignoreABI -config "$XORG_CONF" -br > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  else
   /usr/bin/xinit $XINIT_RC -- $XORG_OPTIONS -ignoreABI -config "$XORG_CONF" -br -nolisten tcp > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  fi
  ;;
#************************ XORG XORG XORG XORG **************************************************************#

 Xephyr|Xnest) #Xephyr cannot open host display. Is DISPLAY set?
  /usr/bin/xinit /root/.xinitrc -- :1  > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  ;;
 Xfake) ##runs OK , .xinitrc gets sourced stopable by C+C|C+A+c|d ; does not create a X window environment
  /usr/bin/xinit /root/.xinitrc -- :0  > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  ;;
 Xvfb)  ## kind of ^fake^ driver
  /usr/bin/xinit /root/.xinitrc -- > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  ;;
 *)
 /usr/bin/xinit /root/.xinitrc -- > "$logDIR"/xerrs.$CURRENTX.log 2>&1
  RETval1=$?
  ;;
esac
RETval2=$?
echo "RETval1='$RETval1'"
echo "RETval2='$RETval2'"

#source /root/Choices/XINIT/bb_acpi stop &  #MARKER

echo "false" > /var/lock/XLOADED #see note above.
#...if PC hung, run xorgwizard at next bootup (see further up).

echo '$@='"'$@'"
if [ "`echo "$@" | grep -E -e '\-v|\-verbose'`" ] ; then
 echo -e "\e[1;33m""Dumping first and last 10 lines of "$logDIR"/xerrs.${CURRENTX}.log:""\e[0;39m"
 head -n 10 "$logDIR"/xerrs.$CURRENTX.log
 tail -n 10 "$logDIR"/xerrs.$CURRENTX.log
 echo
fi

exit_message_func(){
echo -e "\e[0;36m"'Exited from X. Type "xwin [fvwm95|jwm]" to restart X ([ ] mean optional).'"\e[0;39m"
echo '(To shutdown PC type "poweroff", to reboot PC type "reboot")'

if [ -f /usr/X11R7/bin/Xfbdev ];then
 echo -e "\\033[0;34m"'(To run the Xfbdev Framebuffer Wizard, type "framebufferwizard")'"\\033[0;39m"
fi

if [ "$CURRENTX" = "XF86_SVGA" ];then #v1.0.7
 echo -en "\\033[1;31m" #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
 echo 'If X failed to start, type "xf86config" to setup X'
 echo '  -- you will need to know type of mouse, keyboard and video chip'
 echo '  -- thix X is for pre-2000 video chips, but many recent chips backwards-compat.'
 echo '  -- accept default save /etc/XF86Config, Puppy will move this to /etc/X11'
 echo '  -- (XF86Config is the configuration file for X and can be edited manually)'
 echo -n '  -- LAST RESORT, drop back to Xvesa by typing "ln -sf Xvesa /usr/bin/X"'
 echo -e "\\033[0;39m"
fi

if [ "$CURRENTX" = "Xorg" ];then #v1.0.7
 echo -en "\\033[1;35m" #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
 echo -n 'If X failed to start, type "xorgwizard" to setup X'
 echo -e "\\033[0;39m"
fi
}
##w477 weird situation. first boot, xvesa, 'Exit to prompt', X restarts.
##because there are two instances of xwin running, but I don't see how.
##not the best, but here is a workaround...
#NUMXWINS=`pidof xwin | wc -w` #see above and below...

card_error_func(){
#if [ -n "`grep -i -e 'No[[:blank:]]*matching[[:blank:]]*cards[[:blank:]]*found' "$logDIR"/xerrs.log`" ] ; then
if [ "`grep 'Fatal server error:' "$logDIR"/xerrs.${CURRENTX}.log`" ];then
  if [ -n "`grep -i 'No matching cards found' "$logDIR"/xerrs.${CURRENTX}.log`" ] ; then
    echo -e "\e[0;31m""'$CURRENTX' could not detect the graphics card .""\e[0;39m"
   if [ "$CURRENTX" != "Xorg" ] ; then
    if [ -x /usr/bin/Xorg ] ; then
     rm $VERB /usr/bin/X
      ln $VERB -s Xorg /usr/bin/X
     echo "Defaulting to the Xorg X-server now ..."
    fi
   else #CURRENTX = Xorg
    if [ "`which scanpci`" ]; then
    echo "`scanpci`"
     echo -e "\e[0;35m""Above is a list of detected cards on your pc .""\e[0;39m"
      echo -e "\e[1;35m""If even ""\e[0;39m""`Xorg -version`""\e[1;35m"" could not start correctly , you would need to try a Puppy with a later or newer Xorg .""\e[0;39m"
       echo "Please reboot to another Operating System or poweroff ."
      echo "With best regards , the Puppy team ."
     #define EINTR        4  /* Interrupted system call */
     exit 4
    elif [ "`which lspci`" ]; then
     echo "`lspci`"
      echo -e "\e[0;35m""Above is a list of detected cards on your pc .""\e[0;39m"
       echo -e "\e[1;35m""If even ""\e[0;39m""`Xorg -version`""\e[1;35m"" could not start correctly , you would need to try a Puppy with a later or newer Xorg .""\e[0;39m"
       echo "Please reboot to another Operating System or poweroff ."
      echo "With best regards , the Puppy team ."
     #define EINTR        4  /* Interrupted system call */
     exit 4
    fi #scanpci or lspci
   fi  #CURRENTX = Xorg
  else #other error
  echo -e "\\033[0;31mHmmm... Seems failure occurred ...
\\033[1;31mShowing $logDIR/xerrs.${CURRENTX}.log in less viewer.
\\033[0;32mType 'q' to quit less-viewer.
\\033[1;35mPress any key to start less:\\033[0;39m "
  read -s -n1 -t20 LESS_SHOW_ERR_LOG_KEY
  less -I -N "$logDIR"/xerrs.${CURRENTX}.log
  fi
else #not 'Fatal server error:'
: #less "$logDIR"/xerrs.${CURRENTX}.log
fi
}
[ "$ONCE" ] && { echo "card_error_func 1";card_error_func;exit $?; }
[ -f /var/log/Xorg.0.log ] && mv $VERB /var/log/Xorg.0.log /var/log/Xorg.0.log-$KERNEL_RELEASE-prev ##+++2012-05-07
#Shutdown menu calls wmreboot, wmpoweroff, wmexit or restartwm, which create this file...
if [ -f /tmp/wmexitmode.txt ];then
 read WMEXITMODE </tmp/wmexitmode.txt
 if [ "$WMEXITMODE" = "exit" ];then #see /usr/bin/wmexit.
  #[ $NUMXWINS -eq 1 ] && rm -f /tmp/wmexitmode.txt #w477 hack, see above.
  rm $VERB -f /tmp/wmexitmode.txt #w478
 echo 1
 exit_message_func
 exit "$?"
 fi
 #rm -f /tmp/wmexitmode.txt ...no, removed in rc.shutdown.
 #[ "$WMEXITMODE" = "poweroff" ] && exec /sbin/poweroff #see /usr/bin/wmpoweroff
 #[ "$WMEXITMODE" = "reboot" ] && exec /sbin/reboot #see /usr/bin/wmreboot
 if [ "$WMEXITMODE" = "poweroff" ] ; then  ## +++ 2011-10-31
 chvt 1
 exec /sbin/poweroff
 fi
 if [ "$WMEXITMODE" = "reboot" ] ; then
 chvt 1
 exec /sbin/reboot
 fi  ## +++ 2011_10_31
 #restart window manager...
 #make a gross assumption, if wmexitmode.txt exists, haven't already exited this script, then want
 #to restart maybe with different window manager. /etc/windowmanager already has desired w.m.
 if [ "$WMEXITMODE" = "xorgwizard" ] ; then
  rm $VERB -f /tmp/wmexitmode.txt
  #sleep 3s
  ##exec xorgwizard  ##2011-10-03 later 1 still no go
  _debug "Step 1 xorgwizard"
  xorgwizard
  exit "$?" ##2011-10-03 to fix exit of xorgwizard after first input [ Enter ]
 fi
 _debug "Step 2"
 if [ "$WMEXITMODE" = "Xrestart" ] ; then
  rm $VERB -f /tmp/wmexitmode.txt
  sleep 1s
  _debug "Step 3 xwin"
  exec xwin
  exit "$?" ##2011_10_03 to fix crashe ???
 fi
 _debug "Step 4"
  rm $VERB -f /tmp/wmexitmode.txt #definitely delete it now.
  _debug "card_error_func :"
  card_error_func

 #v1.0.5 thanks GuestToo for advice on this, works with chooselocale script...
  #NEWLANG=`cat /etc/profile | grep "LANG=" | cut -f 2 -d '='`
  NEWLANG=`grep '^[[:blank:]]*LANG=' /etc/profile | tail -n 1| cut -f 2 -d '='` #w482 shinobar bugfix.
  if [ "$NEWLANG" ];then #precaution
   if [ "$NEWLANG" != "$LANG" ];then
    export LANG=$NEWLANG
   fi
  fi
_debug "Step 5"
_debug "Step 6 xwin"
 exec xwin
fi
_debug "Step 6"

##if [ "$CURRENTX" = "Xvesa" ];then
if [ "$haveXVESA" ] ; then
_debug "Step 7"
 if [ -e /tmp/videomode ];then
 _debug "card_error_func 3:"
 card_error_func
 _debug "Step 8"
 _debug "Step 9 xwin"
 exec xwin #restart X.
 fi
fi
_debug "card_error_func call nr.4"
card_error_func

if [ -n "`which chvt`" ] ; then
PROGTTY=`tty`
[ "$PROGTTY" = '?' -o "$PROGTTY" = 'not a tty' -o "$PROGTTY" = "" ] && chvt 1
fi

exit_message_func
#echo "exit 0"
exit "$?"
#the end#
