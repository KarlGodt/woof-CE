#!/bin/ash
. /etc/rc.d/f4puppy5
# BATCHMARKER01 - Marker for Line-Position to bulk insert code into.

VERSION=1.1.2

_check_if_already_running()
{
pidof -o $$ -o %PPID "${0##*/}" && {
        echo "Already running."
        exit 1
 }
}
_check_if_already_running

_exit()
{
RV=$1
shift
echo "$*"
# /usr/share/applications/pgprs-connect.desktop :
# Exec=rxvt -title "pgprs-connect PRESS CTRL+C TO DISCONNECT" -e pgprs-connect
echo -n "Press any key to exit. "
read -n1 -s exitKEY
echo
exit $RV
}

trap "fun_present_rxtx_bytes;exit;" INT KILL TERM

ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"$1"}
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"ppp0"}

mkdir -p /var/local/sns
mkdir -p /var/local/sns/ppp0
mkdir -p /var/local/sns/$ACTIVE_INTERFACE

fun_touch_files(){
for ONECOUNT in \
 sns/r sns/t pupdial/isp1/r pupdial/isp1/t pupdial/isp2/r pupdial/isp2/t ppp0/r ppp0/t sns/ppp0/r sns/ppp0/t
do mkdir -p /var/local/${ONECOUNT%/*}
touch /var/local/${ONECOUNT}x_bytes_month
done
}

fun_reset_month(){
LANG=C UPDATE_MONTH=`date +%b`
test -s /var/local/sns/current_month && read CURRENT_MONTH</var/local/sns/current_month
[ "$CURRENT_MONTH" ] || CURRENT_MONTH=0
if [ "$UPDATE_MONTH" != "$CURRENT_MONTH" ];then
 echo "$UPDATE_MONTH" > /var/local/sns/current_month
 for ONECOUNT in sns pupdial/isp1 pupdial/isp2 ppp0 sns/ppp0;do
  [ -d /var/local/"$ONECOUNT" ] || mkdir -p /var/local/"$ONECOUNT"
  cp --backup=numbered /var/local/${ONECOUNT}/rx_bytes_month /var/local/${ONECOUNT}/rx_bytes_month-`date +%Y`-$CURRENT_MONTH
  echo 0 > /var/local/${ONECOUNT}/rx_bytes_month
  cp --backup=numbered /var/local/${ONECOUNT}/tx_bytes_month /var/local/${ONECOUNT}/tx_bytes_month-`date +%Y`-$CURRENT_MONTH
  echo 0 > /var/local/${ONECOUNT}/tx_bytes_month
 done
fi
}

fun_read_month(){
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"$1"}
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"ppp0"}
test "$ACTIVE_INTERFACE" || return 126

read RX_BYTES_MONTH </var/local/$ACTIVE_INTERFACE/rx_bytes_month
[ "$RX_BYTES_MONTH" ] || RX_BYTES_MONTH=0
read TX_BYTES_MONTH </var/local/$ACTIVE_INTERFACE/tx_bytes_month
[ "$TX_BYTES_MONTH" ] || TX_BYTES_MONTH=0
}

fun_read_session(){
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"$1"}
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"ppp0"}
test "$ACTIVE_INTERFACE" || return 126

read RX_BYTES </var/local/$ACTIVE_INTERFACE/rx_bytes_session
read TX_BYTES </var/local/$ACTIVE_INTERFACE/tx_bytes_session
}

fun_present_last_session(){
if [ "$RX_BYTES" -o "$TX_BYTES" ] ; then
echo ""
echo "Last Session :"
echo "'$RX_BYTES' Bytes down"
echo "'$TX_BYTES' Bytes up"

else
echo "No download andor upload count available for last session."
fi
}

fun_present_last_month(){
#if [ "$UPDATE_MONTH" != "$CURRENT_MONTH" ];then
[ "$UPDATE_MONTH" = "$CURRENT_MONTH" ] && return 0
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"$1"}
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"ppp0"}
test "$ACTIVE_INTERFACE" || return 126

echo ""
echo "Last Month :"
 if
 [ -f /var/local/$ACTIVE_INTERFACE/rx_bytes_month-`date +%Y`-$CURRENT_MONTH ]
 then
 read LM_RX_BYTES </var/local/$ACTIVE_INTERFACE/rx_bytes_month-`date +%Y`-$CURRENT_MONTH
 echo "'$LM_RX_BYTES' Bytes down"
 else
 echo "No download count available for '$CURRENT_MONTH' ."
 fi
 if
 [ -f /var/local/$ACTIVE_INTERFACE/tx_bytes_month-`date +%Y`-$CURRENT_MONTH ]
 then
 read LM_TX_BYTES </var/local/$ACTIVE_INTERFACE/tx_bytes_month-`date +%Y`-$CURRENT_MONTH
 echo "'$LM_TX_BYTES' Bytes up"
 else
 echo "No upload count available for '$CURRENT_MONTH' ."
 fi
#fi
}

fun_present_rxtx_bytes(){
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"$1"}
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"ppp0"}
test "$ACTIVE_INTERFACE" || return 126

if [ "$RX_BYTES" -a "$TX_BYTES" ] ; then
  SESS_END=`date +%s`

  echo "$RX_BYTES" > /var/local/$ACTIVE_INTERFACE/rx_bytes_session
  echo "$RX_BYTES" > /var/local/$ACTIVE_INTERFACE/rx_bytes_session-$SESS_END

  echo "$TX_BYTES" > /var/local/$ACTIVE_INTERFACE/tx_bytes_session
  echo "$TX_BYTES" > /var/local/$ACTIVE_INTERFACE/tx_bytes_session-$SESS_END

  read RX_BYTES_MONTH_la </var/local/$ACTIVE_INTERFACE/rx_bytes_month
  [ "$RX_BYTES_MONTH_la" ] || RX_BYTES_MONTH_la=0
  read RX_BYTES_MONTH_ls </var/local/sns/rx_bytes_month
  [ "$RX_BYTES_MONTH_ls" ] || RX_BYTES_MONTH_ls=0
  read RX_BYTES_MONTH_lsa </var/local/sns/$ACTIVE_INTERFACE/rx_bytes_month
  [ "$RX_BYTES_MONTH_lsa" ] || RX_BYTES_MONTH_lsa=0

  RX_BYTES_MONTH=$(((RX_BYTES_MONTH_la+RX_BYTES_MONTH_ls+RX_BYTES_MONTH_lsa)/3))

  [ "$RX_BYTES_MONTH" ] || RX_BYTES_MONTH=0

  RX_BYTES_MONTH=`expr $RX_BYTES_MONTH + $RX_BYTES`
  echo "$RX_BYTES_MONTH" > /var/local/$ACTIVE_INTERFACE/rx_bytes_month
  echo "$RX_BYTES_MONTH" > /var/local/sns/$ACTIVE_INTERFACE/rx_bytes_month
  echo "$RX_BYTES_MONTH" > /var/local/sns/rx_bytes_month

  read TX_BYTES_MONTH_la </var/local/$ACTIVE_INTERFACE/tx_bytes_month
  [ "$TX_BYTES_MONTH_la" ] || TX_BYTES_MONTH_la=0
  read TX_BYTES_MONTH_ls </var/local/sns/tx_bytes_month
  [ "$TX_BYTES_MONTH_ls" ] || TX_BYTES_MONTH_ls=0
  read TX_BYTES_MONTH_lsa </var/local/sns/$ACTIVE_INTERFACE/tx_bytes_month
  [ "$TX_BYTES_MONTH_lsa" ] || TX_BYTES_MONTH_lsa=0

  TX_BYTES_MONTH=$(((TX_BYTES_MONTH_la+TX_BYTES_MONTH_ls+TX_BYTES_MONTH_lsa)/3))

  [ "$TX_BYTES_MONTH" ] || TX_BYTES_MONTH=0
  TX_BYTES_MONTH=`expr $TX_BYTES_MONTH + $TX_BYTES`
  echo "$TX_BYTES_MONTH" > /var/local/$ACTIVE_INTERFACE/tx_bytes_month
  echo "$TX_BYTES_MONTH" > /var/local/sns/$ACTIVE_INTERFACE/tx_bytes_month
  echo "$TX_BYTES_MONTH" > /var/local/sns/tx_bytes_month

echo ""
TOTALSESSION=$( LC_ALL=C dc $(($RX_BYTES+$TX_BYTES)) 1024 \/ p );          echo -e "SESSION: $TOTALSESSION\tKiB"
TOTALMONTH=$( LC_ALL=C dc $(($RX_BYTES_MONTH+$TX_BYTES_MONTH)) 1024 \/ p );echo -e "  MONTH: $TOTALMONTH\tKiB"
TOTALSESSION=$( LC_ALL=C dc $TOTALSESSION 1024 \/ p ); echo -e "SESSION: $TOTALSESSION\tMiB"
TOTALMONTH=$( LC_ALL=C dc $TOTALMONTH 1024 \/ p );     echo -e "  MONTH: $TOTALMONTH\tMiB"
TOTALSESSION=$( LC_ALL=C dc $TOTALSESSION 1024 \/ p ); echo -e "SESSION: $TOTALSESSION\tGiB"
TOTALMONTH=$( LC_ALL=C dc $TOTALMONTH 1024 \/ p );     echo -e "  MONTH: $TOTALMONTH\tGiB"
echo ""

else
echo -e "\e[1;31m""Err .. could not read /sys/class/net/${ACTIVE_INTERFACE}/statistics/""\e[0;39m"
fi
}


fun_read_rxtx_bytes(){
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"$1"}
ACTIVE_INTERFACE=${ACTIVE_INTERFACE:-"ppp0"}
test "$ACTIVE_INTERFACE" || return 126

mkdir -p /var/local/$ACTIVE_INTERFACE
while test "`pidof pppd`"; do
  until [ -d /sys/class/net/${ACTIVE_INTERFACE}/statistics ];do sleep 1s;done
  break
done

while test -d /sys/class/net/${ACTIVE_INTERFACE}; do
  read RX_BYTES </sys/class/net/${ACTIVE_INTERFACE}/statistics/rx_bytes
  read TX_BYTES </sys/class/net/${ACTIVE_INTERFACE}/statistics/tx_bytes
  #echo "$RX_BYTES" > /var/local/$ACTIVE_INTERFACE/rx_bytes_session
  #echo "$TX_BYTES" > /var/local/$ACTIVE_INTERFACE/tx_bytes_session
  #RX_BYTES_MONTH=`cat /var/local/$ACTIVE_INTERFACE/rx_bytes_month`
  #[ "$RX_BYTES_MONTH" ] || RX_BYTES_MONTH=0
  #RX_BYTES_MONTH=`expr $RX_BYTES_MONTH + $RX_BYTES`
  #echo "$RX_BYTES_MONTH" > /var/local/$ACTIVE_INTERFACE/rx_bytes_month
  #TX_BYTES_MONTH=`cat /var/local/$ACTIVE_INTERFACE/tx_bytes_month`
  #[ "$TX_BYTES_MONTH" ] || TX_BYTES_MONTH=0
  #TX_BYTES_MONTH=`expr $TX_BYTES_MONTH + $TX_BYTES`
  #echo "$TX_BYTES_MONTH" > /var/local/$ACTIVE_INTERFACE/tx_bytes_month
  if test $RX_BYTES -gt 1048576; then DO="$(((RX_BYTES/1024)/1024)) MB"
  elif test $RX_BYTES -gt 1024; then DO="$((RX_BYTES/1024)) KB"
  else DO="$RX_BYTES B";fi
  if test $TX_BYTES -gt 1048576; then UP="$(((TX_BYTES/1024)/1024)) MB"
  elif test $TX_BYTES -gt 1024; then UP="$((TX_BYTES/1024)) KB"
  else UP="$TX_BYTES B";fi

  #echo -ne "\r $TX_BYTES B up \t $RX_BYTES B down"
   echo -ne "\r\\033[K $UP up \t $DO down"
sleep 1s
done

fun_present_rxtx_bytes
}

fun_kill_pppd(){
pidof pppd >>$OUT && kill -s HUP `pidof pppd`
}

fun_kill_jobs(){
jobs -rp >>$OUT && {
  for Job in `jobs -pr`; do
  /bin/ps -p $Job && kill $Job
  done
 }
}

ifconfig -a | grep $Q '^ppp[0-9]*' || _exit 1 "No active ppp interface."
ifconfig    | grep $Q '^ppp[0-9]*' || _exit 1 "No active ppp interface up."

trap "fun_kill_pppd;sleep 4s;fun_kill_jobs;exit" HUP INT QUIT TRAP KILL TERM

fun_touch_files
fun_reset_month
fun_read_month
fun_read_session
fun_present_last_session
fun_present_last_month

echo ""
TOTALMONTHK=$( LC_ALL=C dc $(($RX_BYTES_MONTH+$TX_BYTES_MONTH)) 1024 \/ p );echo -e "  MONTH: '$TOTALMONTHK'\tKiB"
TOTALMONTHM=$( LC_ALL=C dc $TOTALMONTHK 1024 \/ p );     echo -e "  MONTH: '$TOTALMONTHM'\tMiB"
TOTALMONTHG=$( LC_ALL=C dc $TOTALMONTHM 1024 \/ p );     echo -e "  MONTH: '$TOTALMONTHG'\tGiB"
echo ""

PPPD_EXE=`which pppd`
test "$PPPD_EXE" || _exit 1 "pppd binary not found in PATH."

n="c"

while  [ "$n" ]
do
"$PPPD_EXE" call gprsmm & #disconnect /etc/ppp/pgprs-disconnect.sh &

jobs -l # DEBUG
PPPD_PID=`jobs -p /usr/sbin/pppd | tail -n 1`;
echo -e '\e[0;36mPPPD_PID='$PPPD_PID'\e[0;39m'
sleep 5s

until
[ -f /sys/class/net/${ACTIVE_INTERFACE}/carrier ]
do sleep 1s
pidof pppd >>$OUT || break
done

echo ""

pidof pppd >>$OUT &&
{

while
[ 1 ]
do sleep 1s


read CARRIER </sys/class/net/${ACTIVE_INTERFACE}/carrier 2>/dev/null

[ "$CARRIER" = 1 ] && break


pidof pppd >>$OUT || break
done

}

pidof pppd >>$OUT &&
{
unset RX_BYTES TX_BYTES
fun_read_rxtx_bytes &
echo -e '\033[1;35m'"Press ENTER to disconnect and quit"'\033[0;39m'
} || {
echo -e '\033[1;36m'"Press R+ENTER to reconnect/try again"'\033[0;39m'
}
jobs -l # DEBUG
jobs -p fun_read_rxtx_bytes

n="n"
read n
done

fun_kill_pppd
sleep 4s
fun_kill_jobs

read -p "Press any key to quit .. " QuitKey
exit 0
