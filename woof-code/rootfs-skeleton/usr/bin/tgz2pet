#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_tgz2pet"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_: Create a .pet from a .tar file"

MY_SELF="/usr/bin/tgz2pet"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || . /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP='1'; TWO_VERSION='1'; TWO_VERBOSE='1'; TWO_DEBUG='1'; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
# Convert a .tar.gz file to .pet...
# Passed param is file to be converted.
# This works for md5sum returning 8-bit characters!

########################################################################
#
# ADDS/CHANGES by Karl Godt :
#
# TOTAL TODO
#
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.9-i586-dpup005-Celeron2G
# SATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# PDEV1='sda2'
# Linux·puppypc·2.6.30.9-i586-dpup005-Celeron2G·#6·SMP·Sat·Jan·15·13:35:51·GMT-8·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=de_DE@euro
# today=Sa·21.·Apr·19:35:49·GMT+1·2012
#
#
#
#
#
########################################################################
trap "exit 1" HUP INT QUIT KILL TERM

OUT=/dev/null;ERR=$OUT
[ "$DEBUG" ] && { OUT=/dev/stdout;ERR=/dev/stderr; }
[ "$DEBUG" = "2" ] && set -x

_usage (){
    echo "
$0 [-g|-b|-l|-h|-s|-S|-X|-x|-Z|-z] TARFILE.tar.EXT
    -g) gzip (default) '`which gzip`'
    -b) bzip2          '`which bzip2`'
    -h) help: show this usage
    -l) lzop           '`which lzop`'
    -L) lzma           '`which lzma`'
    -s) squashfs3 gz   '`which mksquashfs3`'
    -S) squashfs4 gz   '`which mksquashfs4`'
    -X) squashfs4 xz   '`which mksquashfs4`'
    -x) xz             '`which xz`'
    -Z) compress       '`which compress`'
    -z) zip            '`which zip`'
    Script to create a .pet with the above compressions.
    Without option given,defaults to the old and proven gzip
    compression.
    -d) debug through 'set -x'
    -v) verbose output and options to binaries
    "
    exit $1
}

while getopts gbhlLsSXxZzdv opt;do
case $opt in
g) COMPRESS_BIN='gzip'; OPT='-g';EXT='.gz'; PET_EXT='.pet';;
b) COMPRESS_BIN='bzip2';OPT='-b';EXT='.bz2';PET_EXT='.b2pet';;
h) _usage 0;;
l) COMPRESS_BIN='lzop';OPT='-l';EXT='.lzo'; PET_EXT='.lopet';;
L) COMPRESS_BIN='lzma';OPT='-L';EXT='.lzma';PET_EXT='.lapet';;
s) COMPRESS_BIN='mksquashfs3';PET_EXT='.s3pet';;
S) COMPRESS_BIN='mksquashfs4';PET_EXT='.s4pet';;
X) COMPRESS_BIN='mksquashfs4';COMPRESS_OPT='xz';PET_EXT='.s4xpet';;
x) COMPRESS_BIN='xz';OPT='-x';EXT='.xz';PET_EXT='.xzpet'
   if [ ! "`which $COMPRESS_BIN`" ];then
   COMPRESS_BIN='tar'
   ["`$COMPRESS_BIN --help |grep -w '\-J'`" ] || COMPRESS_BIN='';fi
;;
z) COMPRESS_BIN='zip';OPT='-z';EXT='.zip';PET_EXT='.zipet';;
Z) COMPRESS_BIN='compress';OPT='-Z';EXT='.Z';PET_EXT='.Zpet'
   if [ ! "`which $COMPRESS_BIN`" ];then
   COMPRESS_BIN='tar'
   ["`$COMPRESS_BIN --help |grep -w '\-Z'`" ] || COMPRESS_BIN='';fi
;;
d) set -x;;
v) VERBOSE='-v';L_VERBOSE='--verbose';OUT=/dev/stderr;;
*) _usage 1;;
esac;done

while [ "$2" ];do shift;done #leave only the last argument

if [ ! "$COMPRESS_BIN" ];then
#automatic detection
aEXT="${1##*\.}";echo "aEXT='$aEXT'"
case $aEXT in
gz|tgz|tar) COMPRESS_BIN='gzip'; OPT='-g';EXT='.gz'; PET_EXT='.pet';;
bz2|tbz)    COMPRESS_BIN='bzip2';OPT='-b';EXT='.bz2';PET_EXT='.b2pet';;

lzo|tzo|lzop)           COMPRESS_BIN='lzop';OPT='-l';EXT='.lzo'; PET_EXT='.lopet';;
lzx|lza|lzm|lzma|lzma2) COMPRESS_BIN='lzma';OPT='-L';EXT='.lzma';PET_EXT='.lapet';;
lzw)        COMPRESS_BIN=compress-4.2;; ##like .Z (?)
lha|lza)    COMPRESS_BIN=lha;;
lz|lzp|lzip)COMPRESS_BIN=lzip;;

txz|xz) COMPRESS_BIN='xz';      OPT='-x';EXT='.xz'; PET_EXT='.xzpet'
    if [ ! "`which $COMPRESS_BIN`" ];then
    COMPRESS_BIN='tar'
    [ "`$COMPRESS_BIN --help |grep -w '\-J'`" ] || COMPRESS_BIN='';fi
;;
z|Z) COMPRESS_BIN='compress';OPT='-Z';EXT='.Z';  PET_EXT='.Zpet';;
zip) COMPRESS_BIN='zip';     OPT='-z';EXT='.zip';PET_EXT='.zipet'
     if [ ! "`which $COMPRESS_BIN`" ];then
     COMPRESS_BIN='tar'
     [ "`$COMPRESS_BIN --help |grep -w '\-Z'`" ] || COMPRESS_BIN='';fi
;;
esac
fi

[ "$COMPRESS_BIN" ] || { COMPRESS_BIN='gzip';EXT='.gz';PET_EXT='.pet'; }
[ "`which $COMPRESS_BIN`" ] || { echo "'$COMPRESS_BIN' apparenty not installed (in the PATH)";exit 1; }
[ -e "$1" ] || { echo "'$1' seems not to exist";   exit 1; }
[ -f "$1" ] || { echo "'$1' not a regular file ?"; exit 1; }
[ -s "$1" ] || { echo "'$1' appears to be empty ?";exit 1; }
_sync

STATUS=0
TARBALL="$1"

[ -e "$TARBALL" ] _exit 2 "$TARBALL seems not to be a regular file'"

chmod +w "$TARBALL" #make it writable.
STATUS=$((STATUS+$?))

#only accept .tgz or .tar.gz files...
#EXT=''
case $COMPRESS_BIN in
gzip)
[ "`echo "$TARBALL" | grep '\.tar\\.gz$'`" ] && TEXT='.tar.gz'
[ "`echo "$TARBALL" | grep '\.tgz$'`" ]      && TEXT='.tgz'
[ "`echo "$TARBALL" | grep '\.tar$'`" ]      && TEXT='.tar'
[ "$TEXT" ] || _usage 1
;;
bzip2)
[ "`echo "$TARBALL" | grep '\.tar\.bz2$'`" ] && TEXT='.tar.bz2'
[ "$TEXT" ] || _usage 1
;;
lzop)
[ "`echo "$TARBALL" | grep '\.tar\.lzo$'`" ] && TEXT='.tar.lzo'
[ "`echo "$TARBALL" | grep '\.tzo$'`"]       && TEXT='.tzo'
[ "$TEXT" ] || _usage 1
;;
lzma)
[ "`echo "$TARBALL" | grep '\.tar\.lzma$'`" ] && TEXT='.tar.lzma'
[ "$TEXT" ] || _usage 1
;;
mksquashfs3)
[ "`echo "$TARBALL" | grep '\.tar\.gz$'`" ] && TEXT='.tar.gz'
[ "$TEXT" ] || _usage 1
;;
mksquashfs4)
 case $COMPRESS_OPT in
  xz)
   [ "`echo "$TARBALL" | grep '\.tar\.gz$'`" ] && TEXT='.tar.gz'
   [ "$TEXT" ] || _usage 1;;
  ""|*)
   [ "`echo "$TARBALL" | grep '\.tar\.gz$'`" ] && TEXT='.tar.gz'
   [ "$TEXT" ] || _usage 1;;
 esac
;;
xz)
[ "`echo "$TARBALL" | grep '\.tar\.xz$'`" ] && TEXT='.tar.xz'
[ "$TEXT" ] || _usage 1
;;
esac



#split TARBALL path/filename into components...
pkgBAS="`basename "$TARBALL" $TEXT`"
pkgDIR="`dirname  "$TARBALL"`"
[ "$pkgDIR" = "/" ] && pkgDIR=""

#perhaps makes following code easier if do this...
if [ "$TEXT" = ".tgz" ];then
 mv -f "$TARBALL" $pkgDIR/${pkgBAS}.tar.gz
 STATUS=$((STATUS+$?))
 TARBALL="$pkgDIR/${pkgBAS}.tar.gz"
 TEXT='.tar.gz'

elif [ "$TEXT" = ".tzo" ];then
 mv -f "$TARBALL" $pkgDIR/${pkgBAS}.tar.lzo
 STATUS=$((STATUS+$?))
 TARBALL="$pkgDIR/${pkgBAS}.tar.lzo"
 TEXT='.tar.lzo'

elif [ "$TEXT" = ".tar" ];then
 $COMPRESS_BIN "$TARBALL"
 STATUS=$((STATUS+$?))
 TARBALL="$pkgDIR/${pkgBAS}.tar${EXT}"
 TEXT=".tar${EXT}"
fi
_debug "TARBALL='$TARBALL' TEXT='$TEXT' EXT='$EXT' PET_EXT='$PET_EXT'"

#if tarball expands direct to '/' want to wrap around it (slackware pkg)...
if [ "`tar --list -f $TARBALL | head -n 1`" = "./" ];then

 [ -d $pkgDIR/$pkgBAS ] && rm $VERB -rf $pkgDIR/$pkgBAS #a bit radical
 #[ -d $pkgDIR/$pkgBAS ] && exit 1

 mkdir $VERB -p "$pkgDIR"/"$pkgBAS"
 mv $VERB -f "$pkgDIR"/"${pkgBAS}${TEXT}" "$pkgDIR"/"$pkgBAS"/


 #can put other files in here if want...

 tar --remove-files -c -f "$pkgDIR"/"${pkgBAS}".tar "$pkgDIR"/"$pkgBAS"/
 STATUS=$((STATUS+$?))

 $COMPRESS_BIN "$pkgDIR"/"${pkgBAS}".tar
 STATUS=$((STATUS+$?))

 rmdir $VERB "$pkgDIR"/"$pkgBAS"
fi

[ -e "$TARBALL" ] || _exit 10 "Could not create '$TARBALL' ."

FULLSIZE="`stat -c %s "${TARBALL}"`"
STATUS=$((STATUS+$?))

MD5SUM="`md5sum "$TARBALL" | cut -f 1 -d ' '`"
STATUS=$((STATUS+$?))

echo -n "$MD5SUM" >> "$TARBALL"
STATUS=$((STATUS+$?))

_sync
#NEWNAME="`echo -n "${TARBALL}" | sed -e 's/\\.tar\\.gz$/\\.pet/g'`"
#mv -f $TARBALL $NEWNAME

if [ "$DEBUG" ]; then
cp $VERB -f "$TARBALL" "$pkgDIR"/"${pkgBAS}${PET_EXT}"
else
mv $VERB -f "$TARBALL" "$pkgDIR"/"${pkgBAS}${PET_EXT}"
fi
STATUS=$((STATUS+$?))

_sync

if [ "$STATUS" = 0 ]; then
 echo "Successfully created ${pkgBAS}${PET_EXT} ."
else
 echo "Creating ${pkgBAS}${PET_EXT} collected $STATUS errors.."
fi

exit $STATUS
###END###
