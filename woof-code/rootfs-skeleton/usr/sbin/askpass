#!/bin/ash
#Barry Kauler 2011, GPL3 (/usr/share/doc/legal)
#specified in /etc/sudoers or /etc/sudo.conf, gui-helper for sudo. (path compiled-in to my sudo PET)
#110513 display name of app that is requesting to run.
#120201 rodin.s: internationalized.

export TEXTDOMAIN=askpass
export OUTPUT_CHARSET=UTF-8

MY_SELF="$0"

ADD_HELP_MSG="gui-helper for sudo"
PARAMETER_LIST="-help|-version|-verbose|-debug"
PARAMETERS="
-h|--help    : Show this message and exit.
-V|--version : Show version information and exit.
-v|--verbose : Supress /dev/null and quiet options, verbose options to binaries.
-d|--debug   : Run program with set -x .
"
test -f /etc/rc.d/f4puppy5 && source /etc/rc.d/f4puppy5

OUT=/dev/null;ERR=$OUT;Q=-q
case $1 in
-h|-H|-*help) _usage 0 "$ADD_HELP_MSG";;
-V|-*version) _version;;
-v|-*verbose) VERBOSE=1;VERB=-v;A_VERB=-verbose;L_VERB=--verbose;Q='';OUT=/proc/self/fd/1;ERR=/proc/self/fd/2;D_SHIFT=1;;
-d|-*debug)   set -x;DO_SHIFT=1;;
esac
test "$DO_SHIFT" && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
    for i in `seq 1 1 $DO_SHIFT`; do shift; done; }

case $1 in
cli|*-cli) useCLI=YES;;
esac

PSALL="`ps`"
CALLEDAPP="`echo "$PSALL" | grep -o ' sudo \-A .*' | tr -s ' ' | cut -f 4 -d ' '`"
if [ "$CALLEDAPP" ];then
 INSERTMSG="    <text><label>$(gettext 'This application wants to run:')</label></text>
    <text><label>${CALLEDAPP}</label></text>
    <text><label>$(gettext 'The administrator password is required:')</label></text>
"
else
 INSERTMSG="<text><label>$(gettext 'Please enter the administrator password required to run this application:')</label></text>"
fi

if [ $DISPLAY -a ! "$useCLI" ];then
 export ASKDIALOG="
<window title=\"AskPass\" decorated=\"false\" window_position=\"1\" skip_taskbar_hint=\"true\">
  <vbox>
  <frame>
    ${INSERTMSG}
    <entry visible_char=\"x\" visibility=\"false\"  width_chars=\"25\">
      <variable>ADMINPASSWORD</variable>
    </entry>

    <hbox>
     <button ok></button>
    </hbox>
  </frame>
  </vbox>
</window>
"
 _eval_simple(){
 RETVAL="`gtkdialog3 --program=ASKDIALOG 2>/dev/null`"
 eval "$RETVAL"
 [ "$?" = 0 ] || exec "$MY_SELF" "$@"
 }

 _eval_octal(){
 GTK_OUT="`gtkdialog3 --program=ASKDIALOG 2>/dev/null`"

 PWORD=`echo "$GTK_OUT" | grep -m1 '^ADMINPASSWORD=.*'`
 PWORD_=`echo "${PWORD#*=}" | sed 's/^"//;s/"$//'`
 _PWORD_=`echo "$PWORD_" | _string_to_octal`
 _PWORD_="ADMINPASSWORD='$_PWORD_'"

 GTK_REST=`echo "$GTK_OUT" | grep -v 'ADMINPASSWORD=.*'`

 GTK_NEW="$_PWORD_
 $GTK_REST"
 eval "$GTK_NEW"
 [ "$?" = 0 ] || exec "$MY_SELF" "$@"
 }

type _string_to_octal && { _eval_octal; } || _eval_simple

else
 _TTY_=`tty`
 test "_$TTY_" || _TTY_=/dev/console
 test "_$TTY_" = 'not a tty' && _TTY_=/dev/console

 echo >$_TTY_
 echo "$(gettext 'Type admin password required to run this app:') " >$_TTY_
 read -r -t 30 -s ADMINPASSWORD
 [ "$ADMINPASSWORD" = "" ] && echo '...failed' >$_TTY_
fi

#echo "$RETVAL"

echo -en "$ADMINPASSWORD" #return password to sudo.
###END###
