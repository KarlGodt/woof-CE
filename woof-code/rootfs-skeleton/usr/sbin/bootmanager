#!/bin/sh
#BK 2007, original idea from sunburnt
#Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html). 2007 www.puppylinux.com
#written for Puppy 2.16.
#
# /etc/rc.d/BOOTCONFIG has variable EXTRASFSLIST='kde.sfs devx_216.sfs'
# ...space-delimited list of .sfs files to be loaded.
# ...must be located at same place as the pup_save file (in /mnt/home)
#    or at '/' for full hd installation.
#
#v2.17
# /etc/rc.d/MODULESCONFIG has variables PCI_OVERRIDES, SKIPLIST
# that are read and managed by the BootManager.
#
#v4.02  bugfix, modules now .ko.gz.
#v4.02  /lib/modules/modules.dep.<kernver> no more.
#v403   yeslist_func, parameters may be added to modules.
#v409   bugfix, list of sfs files was picking up non-sfs files.
#v411   bugfix, when choose to add more than one module.
#v412   /etc/DISTRO_SPECS, renamed pup_xxx.sfs, pup_save.2fs etc.
#w001   pup files renamed to woofr001.sfs, woofsave.2fs.
#w007   renamed to woof-007.sfs
#w015   allow 6 extra sfs files, up from 3. w020 zdrv fix.
#w478   file prefix 'pup2' got screened out.
#v423   need to check sfs 3.x or 4.x.
#v424   do away with checkbox that overrides user choice and loads _nnn.sfs only.
#v424   advise of sfs-version-converter.
#100125 manage system services at bootup.


test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST="CLPARAM1 CLPARAM2"
ADD_PARAMETERS="CLPARAM1 : Either
extrasfs   : Choose extra SFS files to load at boot.
blacklist  : Don't load these kernel drivers at boot.
addlist    : New Code for yeslist.
yeslist    : Load these drivers, in case not loaded at boot.
preflist   : Load another driver instead of a driver.
sysdaemons : Enable/Disable scripts in /etc/init.d

CLPARAM2 :
quiet      : If no SFS found, exit with xmessage."
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="Multipurpose GTKdialog GUI to select, blacklist,
prefer kernel drivers, load extra SFS files."
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap
}

#reentrant.
#$1='' then run the main window.
#$1=extrasfs then run the extrasfs_func.
CLPARAM1="$1"
CLPARAM2="$2"

CURRDIR=`pwd`
. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS
#PUPPYVERSION=`cat /etc/puppyversion`
KERNEL_RELEASE=`uname -r`

#v424 remove...
#EXTRASFSAUTO='off' #user choices.
#if [ -f /etc/rc.d/BOOTCONFIG ];then
# . /etc/rc.d/BOOTCONFIG
# [ "`cat /etc/rc.d/BOOTCONFIG | grep 'EXTRASFSLIST'`" = "" ] && EXTRASFSAUTO='on'
#else
# EXTRASFSAUTO='on'
#fi
[ ! -f /etc/rc.d/BOOTCONFIG ] && touch /etc/rc.d/BOOTCONFIG #v424
. /etc/rc.d/BOOTCONFIG #v424

KERNELSUBVER=`echo -n "$KERNEL_RELEASE" | cut -f 3 -d '.' | cut -f 1 -d '-'` #v423
SFSSTR='squashfs, version 3' #v423
[ $KERNELSUBVER -gt 28 ] && SFSSTR='squashfs, version 4' #v423

#v3.02
. /etc/rc.d/MODULESCONFIG
DEFAULT_SERIAL="false"
DEFAULT_FAST="false"
[ "$BYPASSSERIALPROBING" = "yes" ] && DEFAULT_SERIAL="true"
[ "$FASTBOOTMODULESLIST" != "" ] && DEFAULT_FAST="true"

if [ "$PUPMODE" = "5" ];then
 xmessage "ERROR. Must shutdown and create a personal save file first."
 exit
fi

if [ "$PUP_HOME" = "" ];then #defined in PUPSTATE.
 EXTRASFSMNTPT='/'
 MSGx="Note2: These files are at '/' (in $PDEV1 partition)"
 MSGz='/'
else
 EXTRASFSMNTPT="/initrd${PUP_HOME}"
 MSGx="Note2: These files are at /mnt/home (same as '${DISTRO_FILE_PREFIX}save')"
 MSGz='/mnt/home'
fi
#for multisession cd, extra sfs files have to be on the cd...
#v3.97 sfs files are at '/', saved with a session...
if [ "$PUPMODE" = "77" ];then
# MPATTERN="/dev/${PDEV1} "
# EXTRASFSMNTPT=`mount | grep "$MPATTERN" | cut -f 3 -d ' '`
# #...it may not be mounted, then gets mounted below.
# MSGx="Note2: These files are on the Puppy boot CD"
 MSGz='/'
# if [ "$EXTRASFSMNTPT" = "" ];then
  EXTRASFSMNTPT='/'
  MSGx="Note2: All SFS files have to get loaded into RAM from CD"
# fi
fi

extrasfs_func() {

 UNMOUNTME=""
 #if [ "$PUPMODE" = "77" ];then
 # if [ "$EXTRASFSMNTPT" = "" ];then
 #  xmessage "Make sure Puppy CD inserted in drive /dev/$PDEV1 RIGHT NOW!"
 #  mkdir -p /mnt/$PDEV1
 #  mount -t $DEV1FS /dev/$PDEV1 /mnt/$PDEV1 #DEV1FS, PDEV1 are in PUPSTATE.
 #  [ ! $? -eq 0 ] && return 1
 #  EXTRASFSMNTPT="/mnt/$PDEV1"
 #  UNMOUNTME="/mnt/$PDEV1"
 # fi
 #fi

 cd $EXTRASFSMNTPT
 #v409 lobster gets some non-sfs files in ALLSFSLIST ...i have no idea how, but
 #need an extra grep filter here... w007 new name woof-007.sfs ... w478 fix for 'pup2' prefix...
 ALLSFSLIST=`ls -1 *.sfs | grep -v '^z' | grep -v "^pup_" | grep -v "^${DISTRO_FILE_PREFIX}\-[0-9][0-9][0-9]\.sfs$" | grep -v "^${DISTRO_FILE_PREFIX}[rz]" | grep '\.sfs$'`
 cd $CURRDIR
 pidof sync || sync
 [ "$UNMOUNTME" != "" ] && umount $UNMOUNTME

 #eliminate other versions from list...
 FIXEDSFSLIST=""
 rm -f /tmp/bootmanager_wrong_sfs_version 2>$ERR #v423
 oldIFS="$IFS"
 IFS=$'\n'
 for oneSFS in $ALLSFSLIST
 do
  [ "`echo "$oneSFS" | grep '_[0-9][0-9][0-9]' | grep -v "$DISTRO_VERSION"`" != "" ] && continue
  #w020 other compat-distro sfs need to be eliminated...
  [ "`echo "$oneSFS" | grep '\\-[0-9][0-9][0-9]\\.sfs' | grep -v "$DISTRO_VERSION"`" != "" ] && continue
  #v423 eliminate wrong squashfs version...
  if [ "`disktype ${EXTRASFSMNTPT}/${oneSFS} | grep "$SFSSTR"`" = "" ];then
   echo "$oneSFS" >> /tmp/bootmanager_wrong_sfs_version
   continue
  fi
  FIXEDSFSLIST="$FIXEDSFSLIST
$oneSFS"
 done
 IFS="$oldIFS"
 ALLSFSLIST="$FIXEDSFSLIST"

 #compose list for xdialog listbox...
 oldIFS="$IFS"
 IFS=$'\n'
 for oneSFS in $ALLSFSLIST
 do
  if [ "$EXTRASFSLIST" = "" ];then
   DLGLIST="$DLGLIST $oneSFS $oneSFS off"
  else
   [ "`echo -n "$EXTRASFSLIST" | grep -v "$oneSFS"`" != "" ] && DLGLIST="$DLGLIST $oneSFS $oneSFS off"
  fi
 done

 for oneSFS in $EXTRASFSLIST
 do
  DLGLIST="$DLGLIST $oneSFS $oneSFS on"
 done
 IFS="$oldIFS"
 #v423 let user know wrong sfs's...
 if [ -e /tmp/bootmanager_wrong_sfs_version ];then
  xmessage -bg '#FFC0C0' "NOTICE: The following SFS files located in directory ${MSGz}
are the wrong version for the current Linux kernel:

`cat /tmp/bootmanager_wrong_sfs_version`

The above files will be ignored.
The kernel requires ${SFSSTR}, SFS files.
Note, there is an SFS-version-converter in the Utility menu." &
 fi

 if [ "$DLGLIST" = "" ];then
  [ "$CLPARAM2" = "quiet" ] && return 1
  xmessage -center -bg '#FFC0C0' "Sorry, there are no SFS files in directory $MSGz
(or they all have the wrong '*_nnn.sfs' version number)
You will need to download and place one there first."
  return 1
 fi

 # --icon \"/usr/local/lib/X11/pixmaps/module24.xpm\"
 #note, jwm will use module16.xpm as the window icon...
#v424 remove checkbox...
# EXECME="Xdialog --wmclass \"module16\" --backtitle \"Choose which SFS files are to be loaded at bootup.\n(top entry will be on top Unionfs layer)\" --title \"BootManager: SFS files\" --left --stdout --separator \" \" --check \"Ignore above user selection, load all with '_${DISTRO_VERSION}.sfs' in filename\" $EXTRASFSAUTO --help \"
 EXECME="Xdialog --wmclass \"module16\" --backtitle \"Choose which SFS files are to be loaded at bootup.\n(top entry will be on top Unionfs layer)\" --title \"BootManager: SFS files\" --left --stdout --separator \" \" --help \"
Extra SFS files are available for your Puppy: see announcements on the Forum, or\n
http://distro.ibiblio.org/pub/linux/distributions/puppylinux/sfs_modules-4/ \n
\n
Download to '$MSGz', choose what you want using the BootManager,\n
then reboot Puppy.\n
\n
Note1: \n
BootManager is in the 'System' menu.\n
Note2: \n
When naming an SFS file, do not name it with '_xxx.sfs' where the xxx is\n
3 numeric digits, as Puppy will interpret this as a Puppy-version number, \n
and will refuse to load it if it is not '_${DISTRO_VERSION}.sfs'.\n
Note4: \n
In fact, if '_xxx.sfs' is not '_${DISTRO_VERSION}.sfs' then it will not even\n
be listed -- please note this!\" --buildlist \"Note1: No more than 6 SFS files in right-pane!\n${MSGx}\" 0 0 8 $DLGLIST >/tmp/bmrettags.txt"

 while [ 1 ];do
  eval $EXECME
  RETVAL=$?
  #if [ $RETVAL -eq 3 ];then #help
  # #exits with 3 if --help has an empty string.
  # #so, could have detailed help box here.
  # continue
  #fi
  [ ! $RETVAL -eq 0 ] && return 1
  [ $RETVAL -eq 0 ] && break
 done

 RETTAGS=`cat /tmp/bmrettags.txt`

 #v424 remove...
 #if [ "`echo "$RETTAGS" | grep 'unchecked'`" = "" ];then
 # #auto mode, remove EXTRASFSLIST entry from BOOTCONFIG...
 # if [ -f /etc/rc.d/BOOTCONFIG ];then
 #  grep -v 'EXTRASFSLIST' /etc/rc.d/BOOTCONFIG > /tmp/BOOTCONFIG
 #  cat /tmp/BOOTCONFIG > /etc/rc.d/BOOTCONFIG
 # fi
 # return 0
 #fi
 #RETTAGS=`echo -n "$RETTAGS" | sed -e 's/unchecked//g' | sed -e 's/checked//g' | sed -e 's/ $//g'`
 RETTAGS=`echo -n "$RETTAGS" | sed -e 's/ $//g'`

 [ ! -e /etc/rc.d/BOOTCONFIG ] && touch /etc/rc.d/BOOTCONFIG
 grep -v 'EXTRASFSLIST' /etc/rc.d/BOOTCONFIG > /tmp/BOOTCONFIG
 cat /tmp/BOOTCONFIG > /etc/rc.d/BOOTCONFIG
 echo "EXTRASFSLIST='$RETTAGS'" >> /etc/rc.d/BOOTCONFIG

} #end extrasfs_func

blacklist_func() {
 #blacklisting of modules at bootup.
 . /etc/rc.d/MODULESCONFIG
 SKIPLIST=`echo "$SKIPLIST" | tr ' ' '\n' | sort -u`

 echo "SKIPLIST='$SKIPLIST'" >&2

 if test -f /etc/modprobe.conf; then
 varBLACKLIST1=`grep -h '^blacklist .*' /etc/modprobe.conf |awk '{print $2}' |sort -u`
 SKIPLIST="$SKIPLIST
$varBLACKLIST1"
 SKIPLIST=`echo "$SKIPLIST" | sort -u`
 echo "SKIPLIST='$SKIPLIST'" >&2
 fi

 if test -d /etc/modprobe.d/; then
 varBLACKLIST2=`grep -h '^blacklist .*' /etc/modprobe.d/* |awk '{print $2}' |sort -u`
 SKIPLIST="$SKIPLIST
$varBLACKLIST2"
 SKIPLIST=`echo "$SKIPLIST" | sort -u`
  echo "SKIPLIST='$SKIPLIST'" >&2
 fi

 SKIPLIST_OLD=`echo "$SKIPLIST" | sed '/^$/d'`
 #SKIPLIST=`echo $SKIPLIST`

 MODLIST=""
 LOADEDMODULES=`cut -f 1 -d ' ' /proc/modules`

 for oneMOD in $LOADEDMODULES
 do
  MODLIST="$MODLIST $oneMOD $oneMOD off"
 done

 for oneMOD in $SKIPLIST
 do
  MODLIST="$MODLIST $oneMOD $oneMOD on"
 done

 echo "MODLIST='$MODLIST'" >&2

 EXECME="Xdialog --wmclass \"module16\" --title \"BootManager: Module blacklist manager\" --left --stdout --separator \" \" --buildlist \"On the left pane are modules that are currently loaded.\n
On the right pane is the complete list of blacklisted modules.\n
If you want to prevent a module from loading, move it to the right\n
side, click OK, then reboot.\n
Note, if you want to find out further information about any module,\n
run PupScan (look in the System menu)\" 0 0 8 $MODLIST >/tmp/skiprettags.txt"
 eval $EXECME
 RETVAL=$?
 [ ! $RETVAL -eq 0 ] && return 1

 SKIPLIST="`cat /tmp/skiprettags.txt | tr ' ' '\n'`"
 SKIPLIST=`echo "$SKIPLIST" | sort -u`

 SKIPLIST_NEW="$SKIPLIST"

 echo "SKIPLIST_NEW='$SKIPLIST_NEW" >&2
 echo "SKIPLIST_OLD='$SKIPLIST_OLD" >&2

 ADDED_TO_SKIPLIST=`echo "$SKIPLIST_NEW" | /bin/grep -v "$SKIPLIST_OLD"`
 REMOVED_FROM_SKIPLIST=`echo "$SKIPLIST_OLD" | /bin/grep -v "$SKIPLIST_NEW"`

 echo "ADDED_TO_SKIPLIST='$ADDED_TO_SKIPLIST'" >&2
 echo "REMOVED_FROM_SKIPLIST='$REMOVED_FROM_SKIPLIST'" >&2

 mkdir -p /etc/rc.d /etc/mult_kernels/rc.d

 #now update /etc/rc.d/MODULESCONFIG...
 grep -v '^SKIPLIST' /etc/rc.d/MODULESCONFIG > /tmp/MODULESCONFIG
 mv -f /tmp/MODULESCONFIG /etc/rc.d/MODULESCONFIG
 echo "SKIPLIST=' ${SKIPLIST}'" | tr '\n' ' ' >> /etc/rc.d/MODULESCONFIG

 if test -f /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE; then
 grep -v '^SKIPLIST' /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE > /tmp/MODULESCONFIG
 mv -f /tmp/MODULESCONFIG /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE
 echo "SKIPLIST=' ${SKIPLIST}'" | tr '\n' ' ' >>/etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE
 fi



 for one_MODULE in $SKIPLIST; do

 echo "one_MODULE='$one_MODULE'" >&2

 if test -f /etc/modprobe.d/$one_MODULE.conf; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/$one_MODULE.conf > /tmp/$one_MODULE.conf
 mv /tmp/$one_MODULE.conf /etc/modprobe.d/$one_MODULE.conf
 echo "blacklist $one_MODULE" >> /etc/modprobe.d/$one_MODULE.conf
 fi

 if test -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE; then
  if test -f /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf; then
  grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf > /tmp/$one_MODULE.conf
  mv /tmp/$one_MODULE.conf /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf
  echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf
  else : #echo "NO /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf .." >&2
  fi
 else :
 fi

 if test -f /etc/modprobe.d/blacklist.conf; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/blacklist.conf > /tmp/blacklist.conf
 mv /tmp/blacklist.conf /etc/modprobe.d/blacklist.conf
 echo "blacklist $one_MODULE" >> /etc/modprobe.d/blacklist.conf
 else
 echo "blacklist $one_MODULE" >> /etc/modprobe.d/blacklist.conf
 fi

 if test -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE; then
  if test -f /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/blacklist.conf; then
  grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/blacklist.conf > /tmp/blacklist.conf
  mv /tmp/blacklist.conf /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/blacklist.conf
  echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/blacklist.conf
  else
  #echo "CREATING /etc/mult_kernels/modprobe.d.$KERNVER/blacklist.conf .."
  echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/blacklist.conf
  fi
  else : #echo "NO /etc/mult_kernels/modprobe.d.$KERNVER .." >&2
 fi

 if test -f /etc/modprobe.d/puppy.conf; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/puppy.conf > /tmp/puppy.conf
 mv /tmp/puppy.conf /etc/modprobe.d/puppy.conf
 echo "blacklist $one_MODULE" >> /etc/modprobe.d/puppy.conf
 else
 echo "blacklist $one_MODULE" >> /etc/modprobe.d/puppy.conf
 fi

 if test -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE; then
  if test -f /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf; then
  grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf > /tmp/puppy.conf
  mv /tmp/puppy.conf /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf
  echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf
  else
  echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf
  fi
 fi

 if test -f /etc/modprobe.conf; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.conf > /tmp/modprobe.conf
 mv /tmp/modprobe.conf /etc/modprobe.conf
 echo "blacklist $one_MODULE" >> /etc/modprobe.conf
 fi

 if test -f /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE > /tmp/modprobe.conf
 mv /tmp/modprobe.conf /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE
 echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE
 fi

 done #for one_MODULE in $SKIPLIST

 for one_MODULE in $REMOVED_FROM_SKIPLIST; do

 echo "one_MODULE='$one_MODULE'" >&2

 if test -f /etc/modprobe.d/$one_MODULE.conf; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/$one_MODULE.conf > /tmp/$one_MODULE.conf
 mv /tmp/$one_MODULE.conf /etc/modprobe.d/$one_MODULE.conf
 #echo "blacklist $one_MODULE" >> /etc/modprobe.d/$one_MODULE.conf
 fi

 if test -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE; then
  if test -f /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf; then
  grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf > /tmp/$one_MODULE.conf
  mv /tmp/$one_MODULE.conf /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf
  #echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNVER/$one_MODULE.conf
  else echo "NO /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_MODULE.conf .." >&2
  fi
 else :
 fi

 if test -f /etc/modprobe.d/blacklist.conf; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/blacklist.conf > /tmp/blacklist.conf
 mv /tmp/blacklist.conf /etc/modprobe.d/blacklist.conf
 #echo "blacklist $one_MODULE" >> /etc/modprobe.d/blacklist.conf
 else
 :
 #echo "blacklist $one_MODULE" >> /etc/modprobe.d/blacklist.conf
 fi

 if test -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE; then
  if test -f /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/blacklist.conf; then
  grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/blacklist.conf > /tmp/blacklist.conf
  mv /tmp/blacklist.conf /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/blacklist.conf
  #echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNVER/blacklist.conf
  else
  :
  #echo "CREATING /etc/mult_kernels/modprobe.d.$KERNVER/blacklist.conf .."
  #echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNVER/blacklist.conf
  fi
  else echo "NO /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE .." >&2
 fi

 if test -f /etc/modprobe.d/puppy.conf; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/puppy.conf > /tmp/puppy.conf
 mv /tmp/puppy.conf /etc/modprobe.d/puppy.conf
 #echo "blacklist $one_MODULE" >> /etc/modprobe.d/puppy.conf
 else
 :
 #echo "blacklist $one_MODULE" >> /etc/modprobe.d/puppy.conf
 fi

 if test -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE; then
  if test -f /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf; then
  grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf > /tmp/puppy.conf
  mv /tmp/puppy.conf /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf
  #echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf
  else
  :
  #echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/puppy.conf
  fi
 fi

 if test -f /etc/modprobe.conf; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.conf > /tmp/modprobe.conf
 mv /tmp/modprobe.conf /etc/modprobe.conf
 #echo "blacklist $one_MODULE" >> /etc/modprobe.conf
 fi

 if test -f /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE; then
 grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE > /tmp/modprobe.conf
 mv /tmp/modprobe.conf /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE
 #echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.conf.$KERNEL_RELEASE
 fi

 done #for one_MODULE in $REMOVED_FROM_SKIPLIST




 if test -d /etc/modprobe.d/; then

 for one_FILE in `ls -1 /etc/modprobe.d/`; do
  echo "one_FILE='$one_FILE'" >&2
  test -f "/etc/modprobe.d/$one_FILE" || continue
  test "$one_FILE" = blacklist.conf && continue

   for one_MODULE in $SKIPLIST; do
    test "$one_FILE" = $one_MODULE.conf && continue
    grep -q "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/$one_FILE || continue

    grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/$one_FILE >/tmp/$one_FILE
    mv /tmp/$one_FILE /etc/modprobe.d/$one_FILE
    echo "blacklist $one_MODULE" >> /etc/modprobe.d/$one_FILE

   done

   for one_MODULE in $REMOVED_FROM_SKIPLIST; do
    test "$one_FILE" = $one_MODULE.conf && continue
    grep -q "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/$one_FILE || continue

    grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/modprobe.d/$one_FILE >/tmp/$one_FILE
    mv /tmp/$one_FILE /etc/modprobe.d/$one_FILE
    #echo "blacklist $one_MODULE" >> /etc/modprobe.d/$one_FILE

   done

  done

 else echo "NO /etc/modprobe.d/ .." >&2
 fi #/etc/modprobe.d/

 if test -d /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/; then

 for one_FILE in `ls -1 /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/`; do
  echo "one_FILE='$one_FILE'" >&2
  test -f "/etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE" || continue
  test "$one_FILE" = blacklist.conf && continue

   for one_MODULE in $SKIPLIST; do
    test "$one_FILE" = $one_MODULE.conf && continue
    grep -q "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE || continue

    grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE >/tmp/$one_FILE
    mv /tmp/$one_FILE /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE
    echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE

   done

   for one_MODULE in $REMOVED_FROM_SKIPLIST; do
    test "$one_FILE" = $one_MODULE.conf && continue
    grep -q "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE || continue

    grep -v "^blacklist[[:space:]]*$one_MODULE" /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE >/tmp/$one_FILE
    mv /tmp/$one_FILE /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE
    #echo "blacklist $one_MODULE" >> /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/$one_FILE

   done


 done

 else echo "NO /etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/ .." >&2
 fi #/etc/mult_kernels/modprobe.d.$KERNEL_RELEASE/

} #end blacklist_func

addlist_func() {
 #choose extra modules to load at bootup.

 TTY=`tty`;ERR=/dev/stderr
 TMP_DIR=/tmp/bootmanager;mkdir -p $TMP_DIR
 echo "Create db :`date`" 1>>$ERR

 #ALLMODULES=`cat /lib/modules/$KERNEL_RELEASE/modules.dep | cut -f 1 -d ':' | grep -o '[a-zA-Z0-9_-]*\.ko' | tr '\-' '_' | sort -u`

 ALLMODULES=`modprobe -l |rev|cut -f 1 -d '/'|rev |sed 's|\.ko$||;s|\.ko\..*$||;s|-|_|g'|sort`
 echo "$ALLMODULES" > $TMP_DIR/ALLMODULES.lst
 HOW_MANY=`echo "$ALLMODULES" |wc -l`

 yaf-splash -font "8x16" -outline 0 -margin 4 -bg orange -text "Please wait, processing $HOW_MANY modules ..." &
 X1PID=$!


 . /etc/rc.d/MODULESCONFIG
 MODLIST=""
 #note, lsmod will show all modules with '-' as '_'...
 #LOADEDMODULES=" `lsmod | grep -v '^Module' | cut -f 1 -d ' ' | tr '\n' ' '`"

  #LOADED_MODULES_TOO=`cut -f1 -d' ' /proc/modules | sort | tr '\n' ' '|sed 's!\(.\{60\}\)!\1\\\n!g'`
  #echo "LOADED_MODULES_TOO='$LOADED_MODULES_TOO'" >&2

 #LOADEDMODULES=`lsmod | grep -v '^Module' | cut -f 1 -d ' ' |sort`
 LOADEDMODULES='LOADEDMODULES_IS_UNUSED'
 echo "$LOADEDMODULES" > $TMP_DIR/LOADEDMODULES.lst
 grep -v -w -f $TMP_DIR/LOADEDMODULES.lst $TMP_DIR/ALLMODULES.lst > $TMP_DIR/FILTERED_MODULES.1.lst
 echo "$ADDLIST" |tr ' ' '\n' |sed '/^$/d;s|\:.*||' |sort > $TMP_DIR/ADDLIST.lst
 grep -v -w -f $TMP_DIR/ADDLIST.lst $TMP_DIR/FILTERED_MODULES.1.lst > $TMP_DIR/FILTERED_MODULES.2.lst

 loop_1(){  #creates "off" list
 echo "First loop :`date`" 1>>$ERR
 for oneMOD in $ALLMODULES
 do
  #NAMEONLY=`basename $oneMOD .ko`
  #NAMEONLY=${oneMOD##*/};
  #NAMEONLY=${NAMEONLY//\.ko*/}
  #NAMEONLY=${oneMOD//\.ko*/}
  NAMEONLY="$oneMOD"
  MODPATTERN=" $NAMEONLY "
  #leave off list if already loaded...
  [ "`echo "$LOADEDMODULES" | grep "$MODPATTERN"`" ] && continue
  MODPATTERN=' '"$NAMEONLY"'[ :]'
  #leave off left pane if already on right pane...
  [ "`echo "$ADDLIST" | grep "$MODPATTERN"`" ] && continue
  MODLIST="$MODLIST $NAMEONLY $NAMEONLY off"
 done
 echo "First loop :`date`" 1>>$ERR
}

 cat $TMP_DIR/FILTERED_MODULES.2.lst | sed 's|\(.*\)|\1 \1 off|' > $TMP_DIR/OFFLIST.lst
 cat $TMP_DIR/ADDLIST.lst  | sed 's|\(.*\)|\1 \1 on|' > $TMP_DIR/ONLIST.lst

 loop_2(){  ##creates "on" list
 echo "Second loop :`date`" 1>>$ERR
 #check for parameters
 for oneMOD in $ADDLIST
 do
  NAMEONLY="$oneMOD"
  xoneMOD="$oneMOD"
  if [ `echo -n "$oneMOD" | tr ':' ' ' | wc -w` -gt 1 ]; then
   MPARAMS=`echo -n "$oneMOD" | cut -f 2-9 -d ':' | tr ':' ' '`
   NAMEONLY=`echo -n "$oneMOD" | cut -f 1 -d ':'`
   xoneMOD="$NAMEONLY $MPARAMS"
  fi
  MODPATTERN=" $NAMEOLY "
  #leave off list if already loaded...
  [ "`echo "$LOADEDMODULES" | grep "$MODPATTERN"`" != "" ] && continue
  MODLIST="$MODLIST $oneMOD \"$xoneMOD\" on"
 done
 echo "Second loop :`date`" 1>>$ERR
}

 MODLIST="`cat $TMP_DIR/ONLIST.lst |tr '\n' ' '` `cat $TMP_DIR/OFFLIST.lst |tr '\n' ' '`"
 (sleep 4s;kill $X1PID) &
 echo "Create db :`date`" 1>>$ERR
 echo "Xdialog: `date`" 1>>$ERR
 #gui
EXECME="Xdialog --wmclass \"module16\" --title \"BootManager: Module add-list manager\" --left --stdout --separator \" \" --buildlist \"NOTE: Already loaded modules are listed in the file /proc/modules\nor can be viewed by lsmod command in the console.\nNote too, that if you want to find out further information about any loaded module,\nrun PupDiverAndPciInfo (look in the Menu Section 'System' 'System Status and Config').\n\nOn the left pane is the complete list of modules available to be\nused by $DISTRO_NAME $DISTRO_VERSION kernel $KERNEL_RELEASE.\nOn the right pane are modules that you have explicitly chosen to\nbe loaded at bootup.\nIf you want to force a module to load, move it to the right pane,\nclick OK button, then reboot.\n\" 0 0 8 $MODLIST >$TMP_DIR/yesrettags.txt"
 eval $EXECME
 RETVAL=$?
 echo "Xdialog: `date`" 1>>$ERR
 [ $RETVAL -eq 0 ] || return 1

 cat $TMP_DIR/yesrettags.txt | tr ' ' '\n' | tr ':' ' ' > $TMP_DIR/modules_addlist_edit #v411
 Xdialog --backtitle "If you wish, add any required parameters to these modules\nExample: mmc_block major=179\nIf you don't know what this means,
 just click 'OK' button"  --wmclass "module16" --title "BootManager: Edit module addlist" --left --stdout --no-cancel --editbox $TMP_DIR/modules_addlist_edit 0 0 > $TMP_DIR/modules_addlist_edit_out
 [ $? -ne 0 ] && return 1

 ADDLIST=`cat $TMP_DIR/modules_addlist_edit_out`
 ADDLIST=' '"`echo "$ADDLIST" | tr ' ' ':' | tr '\n' ' ' | tr -s ' '`"
 #ADDLIST=" `cat /tmp/yesrettags.txt | tr '\n' ' '`"
 #now update /etc/rc.d/MODULESCONFIG...
 grep -v '^ADDLIST' /etc/rc.d/MODULESCONFIG > /tmp/MODULESCONFIG
 mv -f /tmp/MODULESCONFIG /etc/rc.d/MODULESCONFIG
 echo "ADDLIST='${ADDLIST}'" >> /etc/rc.d/MODULESCONFIG

 if test -f /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE; then
 grep -v '^ADDLIST' /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE > /tmp/MODULESCONFIG
 mv -f /tmp/MODULESCONFIG /etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE
 echo "ADDLIST='${ADDLIST}'" >>/etc/mult_kernels/rc.d/MODULESCONFIG.$KERNEL_RELEASE
 fi


} #end addlist_func

yeslist_func() {
 #choose extra modules to load at bootup.
 yaf-splash -font "8x16" -outline 0 -margin 4 -bg orange -text "Please wait, processing..." &
 X1PID=$!
 . /etc/rc.d/MODULESCONFIG
 MODLIST=""
 #note, lsmod will show all modules with '-' as '_'...
 LOADEDMODULES=" `lsmod | grep -v '^Module' | cut -f 1 -d ' ' | tr '\n' ' '`"
 #v403 handles both .ko and .ko.gz modules...
 ALLMODULES=`cat /lib/modules/$KERNEL_RELEASE/modules.dep | cut -f 1 -d ':' | grep -o '[a-zA-Z0-9_-]*\.ko' | tr '\-' '_' | sort - | tr '\n' ' '`
 for oneMOD in $ALLMODULES
 do
  NAMEONLY=`basename $oneMOD .ko`
  MODPATTERN=" $NAMEONLY "
  #leave off list if already loaded...
  [ "`echo "$LOADEDMODULES" | grep "$MODPATTERN"`" != "" ] && continue
  MODPATTERN=' '"$NAMEONLY"'[ :]'
  #leave off left pane if already on right pane...
  [ "`echo "$ADDLIST" | grep "$MODPATTERN"`" != "" ] && continue
  MODLIST="$MODLIST $NAMEONLY $NAMEONLY off"
 done
 for oneMOD in $ADDLIST
 do
  NAMEONLY="$oneMOD"
  xoneMOD="$oneMOD"
  if [ `echo -n "$oneMOD" | tr ':' ' ' | wc -w` -gt 1 ];then
   MPARAMS=`echo -n "$oneMOD" | cut -f 2-9 -d ':' | tr ':' ' '`
   NAMEONLY=`echo -n "$oneMOD" | cut -f 1 -d ':'`
   xoneMOD="$NAMEONLY $MPARAMS"
  fi
  MODPATTERN=" $NAMEOLY "
  #leave off list if already loaded...
  [ "`echo "$LOADEDMODULES" | grep "$MODPATTERN"`" != "" ] && continue
  MODLIST="$MODLIST $oneMOD \"$xoneMOD\" on"
 done
 kill $X1PID
 EXECME="Xdialog --wmclass \"module16\" --title \"BootManager: Module add-list manager\" --left --stdout --separator \" \" --buildlist \"On the left pane is the complete list of modules available to be\nused by Puppy (and not currently loaded).\nOn the right pane are modules that you have explicitly chosen to\nbe loaded at bootup (not auto-loaded by default).\nIf you want to force a module to load, move it to the right pane,\nclick OK button, then reboot Puppy.\nNote, if you want to find out further information about any module,\nrun PupScan (look in the System menu)\" 0 0 8 $MODLIST >/tmp/yesrettags.txt"
 eval $EXECME
 RETVAL=$?
 [ ! $RETVAL -eq 0 ] && return 1
 cat /tmp/yesrettags.txt | tr ' ' '\n' | tr ':' ' ' > /tmp/modules_addlist_edit #v411
 Xdialog --backtitle "If you wish, add any required parameters to these modules\nExample: mmc_block major=179\nIf you don't know what this means, just click 'OK' button"  --wmclass "module16" --title "BootManager: Edit module addlist" --left --stdout --no-cancel --editbox /tmp/modules_addlist_edit 0 0 > /tmp/modules_addlist_edit_out
 [ $? -ne 0 ] && return 1
 ADDLIST=`cat /tmp/modules_addlist_edit_out`
 ADDLIST=' '"`echo "$ADDLIST" | tr ' ' ':' | tr '\n' ' ' | tr -s ' '`"
 #ADDLIST=" `cat /tmp/yesrettags.txt | tr '\n' ' '`"
 #now update /etc/rc.d/MODULESCONFIG...
 grep -v '^ADDLIST' /etc/rc.d/MODULESCONFIG > /tmp/MODULESCONFIG
 mv -f /tmp/MODULESCONFIG /etc/rc.d/MODULESCONFIG
 echo "ADDLIST='${ADDLIST}'" >> /etc/rc.d/MODULESCONFIG
} #end yeslist_func

#  \"Sometimes two modules are eligible for the same hardware, and you need to choose\none of them. An example is the rt2500usb and rt73usb wireless networking modules\n-- with some hardware these are both eligible however our experience has been that\nthe rt73usb works better. For such a situation, create a line here, of format\nmodule1:module2, where you want module2 to have preference over module1.\nNote: an alternative approach is to blacklist the rt2500usb module (see main menu)\nhowever that is gross as it always prevents rt2500usb from loading.\"

preflist_func() {
 xPREFLIST=`echo -n "$PREFLIST" | sed -e 's/^ //' | tr ' ' '\n'`
 echo "$xPREFLIST" > /tmp/bootmanager_preflist
 xxPREFLIST="`Xdialog --backtitle \"Sometimes two modules are eligible for the same hardware,\n
and you need to choose one of them. Create a line here,\nof format module1:module2, where you want module2 to\nhave preference over module1.\" --wmclass \"module16\" --title \"BootManager: Module preference-list manager\" --left --stdout --help \"Sometimes two modules are eligible for the same hardware, and you need to choose\none of them. An example is the rt2500usb and rt73usb wireless networking modules\n-- with some hardware these are both eligible however our experience has been that\nthe rt73usb works better. For such a situation, create a line here, of format\nmodule1:module2, where you want module2 to have preference over module1.\nNote: an alternative approach is to blacklist the rt2500usb module (see main menu)\nhowever that is gross as it always prevents rt2500usb from loading.\" --editbox /tmp/bootmanager_preflist 0 0`"
 if [ $? -eq 0 ];then
  NEWPREFLIST=`echo "$xxPREFLIST" | tr '\n' ' ' | sed -e 's/^/ /' | tr -s ' '`
  grep -v '^PREFLIST' /etc/rc.d/MODULESCONFIG > /tmp/MODULESCONFIG
  mv -f /tmp/MODULESCONFIG /etc/rc.d/MODULESCONFIG
  echo "PREFLIST='${NEWPREFLIST}'" >> /etc/rc.d/MODULESCONFIG
 fi
} #end preflist_func

sysdaemons_func() { #100125
 osdcnt=0
 echo -n "" > /tmp/bootmanager_osd
 for oneSYSDAEMON in `/bin/find /etc/init.d -maxdepth 2 \( -not -iwholename "*/*BACKUP*/*" -not -iwholename "*/*UNUSED*/*" -not -iwholename "*/*FIRMWARE*/*" \) -type f | grep -v -E 'txt|pcmcia|alsa'`
 do
  osdcnt=`expr $osdcnt + 1`
  OSDNAME="`basename $oneSYSDAEMON`"
  xOSDNAME="`echo -n "$OSDNAME" | sed -e 's%^[0-9]%%' -e 's%^[0-9]%%'`" #remove any leading number.
  OSDDIR="`dirname $oneSYSDAEMON`"
  OSDDEFAULT='false'
  [ -x $oneSYSDAEMON ] && OSDDEFAULT='true'
  OSDDESCR=''
  case $xOSDNAME in
   alsa) OSDDESCR='('$(gettext 'ALSA sound server, required to play audio')')' ;;
   cups) OSDDESCR='('$(gettext 'CUPS printing, required to print')')' ;;
   messagebus) OSDDESCR='('$(gettext 'DBUS interprocess messaging, required by some apps')')' ;;
   rc.acpi) OSDDESCR='('$(gettext 'ACPI management, not essential')')' ;;
   slmodem) OSDDESCR='('$(gettext 'Only needed for certain Internet dialup modems')')' ;;
   sys_logger) OSDDESCR='('$(gettext 'Logs kernel & app. info. & error messages, not essential')')' ;;
   rc.smbqmsvc) OSDDESCR='('$(gettext 'only needed for quick mounting Samba shares in lameSMBxplorer')')' ;;
  esac
  OSDBOXES="${OSDBOXES} <checkbox><label>${xOSDNAME} ${OSDDESCR}</label><default>${OSDDEFAULT}</default><variable>OSDCHK_${osdcnt}_</variable></checkbox>"
  echo "OSDCHK_${osdcnt}_|${OSDDIR}|${OSDNAME}" >> /tmp/bootmanager_osd
 done
 if [ "`grep '/etc/rc.d/rc.firewall' /etc/rc.d/rc.local`" != "" ];then
  osdcnt=`expr $osdcnt + 1`
  OSDDEFAULT='false'
  [ -x /etc/rc.d/rc.firewall ] && OSDDEFAULT='true'
  OSDBOXES="${OSDBOXES} <checkbox><label>rc.firewall ($(gettext 'Firewall important security on Internet'))</label><default>${OSDDEFAULT}</default><variable>OSDCHK_${osdcnt}_</variable></checkbox>"
  echo "OSDCHK_${osdcnt}_|/etc/rc.d|rc.firewall" >> /tmp/bootmanager_osd
 fi
 #also offer udev management...
 osdcnt=`expr $osdcnt + 1`
 OSDDEFAULT='false'
 [ "`grep '^BACKENDON' /etc/eventmanager | grep 'true'`" != "" ] && OSDDEFAULT='true'
 OSDBOXES="${OSDBOXES} <checkbox><label>udev (`gettext \"Hardware hotplug detection -- see 'HELP'\"`)</label><default>${OSDDEFAULT}</default><variable>OSDCHK_${osdcnt}_</variable></checkbox>"
 echo "OSDCHK_${osdcnt}_||udev" >> /tmp/bootmanager_osd

 export MAIN_DIALOG="
<window title=\"$(gettext 'BootManager: Manage system services')\" icon-name=\"gtk-cdrom\">
<vbox>
 <text use-markup=\"true\"><label>\"<b>$(gettext 'Untick a checkbox to prevent service from running at startup')</b>\"</label></text>
 ${OSDBOXES}
 <hbox>
  <button ok></button>
  <button cancel></button>
  <button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input>
   <label>$(gettext 'HELP')</label>
   <action>defaulttextviewer /etc/init.d/README.txt &</action>
  </button>
 </hbox>
</vbox>
</window>
"
 RETSTRING="`gtkdialog3 --program=MAIN_DIALOG --center`"
 [ "`echo "$RETSTRING" | grep 'EXIT' | grep 'OK'`" = "" ] && return
 while [ $osdcnt -gt 0 ];do
  OSDVAR="OSDCHK_${osdcnt}_"
  OSDDIR="`grep "$OSDVAR" /tmp/bootmanager_osd | cut -f 2 -d '|'`"
  OSDNAME="`grep "$OSDVAR" /tmp/bootmanager_osd | cut -f 3 -d '|'`"
  if [ "$OSDNAME" = "udev" ];then
   if [ "`echo "$RETSTRING" | grep "$OSDVAR" | grep 'true'`" != "" ];then
    if [ "`grep '^BACKENDON' /etc/eventmanager | grep 'false'`" != "" ];then
     pupmessage -center -bg orange "`gettext \"The EventManager will now be run, so that you can enable 'udev'.
You will need to tick the 'hotplug module/firmware loading' checkbox...\"`"
     eventmanager &
    fi
   else
    if [ "`grep '^BACKENDON' /etc/eventmanager | grep 'true'`" != "" ];then
     pupmessage -center -bg orange "`gettext \"The EventManager will now be run, so that you can disable 'udev'.
You will need to untick the 'hotplug module/firmware loading' checkbox...\"`"
     eventmanager &
    fi
   fi
  fi
  if [ "$OSDDIR" = "/etc/init.d" -o "$OSDDIR" = "/etc/rc.d" ];then
   if [ "`echo "$RETSTRING" | grep "$OSDVAR" | grep 'true'`" != "" ];then
    chmod 0755 ${OSDDIR}/${OSDNAME}
   else
    chmod 0644 ${OSDDIR}/${OSDNAME}
   fi
  fi
  osdcnt=`expr $osdcnt - 1`
 done

} #end sysdaemons_func

old_if_func(){
if [ "$CLPARAM1" = "extrasfs" ];then
 extrasfs_func
 exit
fi

if [ "$CLPARAM1" = "blacklist" ];then
 blacklist_func
 exit
fi

if [ "$CLPARAM1" = "yeslist" ];then
 yeslist_func
 exit
fi

if [ "$CLPARAM1" = "preflist" ];then
 preflist_func
 exit
fi
}

case $CLPARAM1 in
extrasfs) extrasfs_func;exit $?;;
blacklist) blacklist_func;exit $?;;
addlist) addlist_func;exit $?;;
yeslist) yeslist_func;exit $?;;
preflist) preflist_func;exit $?;;
sysdaemons) sysdaemons_func;exit $?;;
esac

#######################################################
if [ "$PUPMODE" = 2  -o "$PUPMODE" = 3 ];then
SFS_DIALOG="<text><label>Puppy Linux is currently running in Full Install Mode. No application.sfs loading available.</label></text>"
else
SFS_DIALOG="<text><label>Puppy has a file named '${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs' that is always loaded. However, extra SFS files can be loaded at bootup, for example 'kde.sfs' to provide KDE applications, and '${DISTRO_FILE_PREFIX}_devx_${DISTRO_VERSION}.sfs' to provide everything for compiling C/C++ source. These can be thought of as 'combo packs' of many packages in one file.</label></text>
  <hbox>
   <text><label>Choose which extra SFS files to load at bootup:</label></text>
    <button>
     <input file>/usr/local/lib/X11/pixmaps/module24.xpm</input>
     <action>bootmanager extrasfs &</action>
    </button>
  </hbox>"
fi

export MAIN_DIALOG="
<window title=\"BootManager\" icon-name=\"gtk-cdrom\">
<vbox>
 <text use-markup=\"true\">
 <label>\"<b>Puppy Boot Configuration</b>\"</label></text>

 <frame Load SFS files>
   $SFS_DIALOG
 </frame>

 <frame Load kernel modules>
  <text><label>If a driver module did not get loaded, or the wrong one got loaded, or you want to 'blacklist' a module, this is the place. A common scenario is a driver got auto-loaded, for say your wireless network card, but you cannot or do not want to use it, and want some other module or want to use Ndiswrapper (to use the Windows driver).</label></text>
  <hbox>
   <text><label>Click here to 'blacklist' a module:</label></text>
    <button>
     <input file>/usr/local/lib/X11/pixmaps/module24.xpm</input>
     <action>bootmanager blacklist &</action>
    </button>
  </hbox>
  <hbox>
   <text><label>Click here to add a new module:</label></text>
    <button>
     <input file>/usr/local/lib/X11/pixmaps/module24.xpm</input>
     <action>bootmanager addlist &</action>
    </button>
  </hbox>
  <hbox>
   <text><label>Give preference to one module over another:</label></text>
    <button>
     <input file>/usr/local/lib/X11/pixmaps/module24.xpm</input>
     <action>bootmanager preflist &</action>
    </button>
  </hbox>
 </frame>

  <frame $(gettext 'Manage system services')>
   <text><label>$(gettext 'These are processes (applications) that are started at bootup and some of them run continuously in the background. On slow PCs it may help to not run some of these.')</label></text>
  <hbox>
   <text><label>$(gettext 'Choose which system services to run at startup:')</label></text>
    <button>
     <input file>/usr/local/lib/X11/mini-icons/so.xpm</input>
     <action>bootmanager sysdaemons &</action>
    </button>
  </hbox>
 </frame>

 <hbox>
  <button><input file stock=\"gtk-quit\"></input><label>QUIT</label></button>
 </hbox>
</vbox>
</window>
"

old_exit_func(){
RETSTRING=`gtkdialog3 --program=MAIN_DIALOG --center`
eval "$RETSTRING"
[ "$EXIT" = "abort" ] && exit
}

gtkdialog3 --program=MAIN_DIALOG --center
exit $?
###END###
