#!/bin/bash
#BK 2007, original idea from sunburnt
#Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html). 2007 www.puppylinux.com
#written for Puppy 2.16.
#/etc/rc.d/BOOTCONFIG has variable EXTRASFSLIST='kde.sfs devx_216.sfs'
# ...space-delimited list of .sfs files to be loaded.
# ...must be located at same place as the pup_save file (in /mnt/home)
#    or at '/' for full hd installation.
#v2.17
#/etc/rc.d/MODULESCONFIG has variables PCI_OVERRIDES, SKIPLIST
#that are read and managed by the BootManager.
#v4.02 bugfix, modules now .ko.gz.
#v4.02 /lib/modules/modules.dep.<kernver> no more.
#v403 yeslist_func, parameters may be added to modules.
#v409 bugfix, list of sfs files was picking up non-sfs files.
#v411 bugfix, when choose to add more than one module.
#v412 /etc/DISTRO_SPECS, renamed pup_xxx.sfs, pup_save.2fs etc.
#w001 pup files renamed to woofr001.sfs, woofsave.2fs.
#w007 renamed to woof-007.sfs
#w015 allow 6 extra sfs files, up from 3. w020 zdrv fix.
#w478 file prefix 'pup2' got screened out.
#v423 need to check sfs 3.x or 4.x.
#v424 do away with checkbox that overrides user choice and loads _nnn.sfs only.
#v424 advise of sfs-version-converter.

#reentrant.
#$1='' then run the main window.
#$1=extrasfs then run the extrasfs_func.
CLPARAM1="$1"
CLPARAM2="$2"

CURRDIR="`pwd`"
. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS
#PUPPYVERSION="`cat /etc/puppyversion`"
KERNVER="`uname -r`"

#v424 remove...
#EXTRASFSAUTO='off' #user choices.
#if [ -f /etc/rc.d/BOOTCONFIG ];then
# . /etc/rc.d/BOOTCONFIG
# [ "`cat /etc/rc.d/BOOTCONFIG | grep 'EXTRASFSLIST'`" = "" ] && EXTRASFSAUTO='on'
#else
# EXTRASFSAUTO='on'
#fi
[ ! -f /etc/rc.d/BOOTCONFIG ] && touch /etc/rc.d/BOOTCONFIG #v424
. /etc/rc.d/BOOTCONFIG #v424

KERNELSUBVER=`echo -n "$KERNVER" | cut -f 3 -d '.' | cut -f 1 -d '-'` #v423
SFSSTR='squashfs, version 3' #v423
[ $KERNELSUBVER -gt 28 ] && SFSSTR='squashfs, version 4' #v423

#v3.02
. /etc/rc.d/MODULESCONFIG
DEFAULT_SERIAL="false"
DEFAULT_FAST="false"
[ "$BYPASSSERIALPROBING" = "yes" ] && DEFAULT_SERIAL="true"
[ "$FASTBOOTMODULESLIST" != "" ] && DEFAULT_FAST="true"

if [ "$PUPMODE" = "5" ];then
 xmessage "ERROR. Must shutdown and create a personal save file first."
 exit
fi

if [ "$PUP_HOME" = "" ];then #defined in PUPSTATE.
 EXTRASFSMNTPT='/'
 MSGx="Note2: These files are at '/' (in $PDEV1 partition)"
 MSGz='/'
else
 EXTRASFSMNTPT="/initrd${PUP_HOME}"
 MSGx="Note2: These files are at /mnt/home (same as '${DISTRO_FILE_PREFIX}save')"
 MSGz='/mnt/home'
fi
#for multisession cd, extra sfs files have to be on the cd...
#v3.97 sfs files are at '/', saved with a session...
if [ "$PUPMODE" = "77" ];then
# MPATTERN="/dev/${PDEV1} "
# EXTRASFSMNTPT="`mount | grep "$MPATTERN" | cut -f 3 -d ' '`"
# #...it may not be mounted, then gets mounted below.
# MSGx="Note2: These files are on the Puppy boot CD"
 MSGz='/'
# if [ "$EXTRASFSMNTPT" = "" ];then
  EXTRASFSMNTPT='/'
  MSGx="Note2: All SFS files have to get loaded into RAM from CD"
# fi
fi

extrasfs_func() {

 UNMOUNTME=""
 #if [ "$PUPMODE" = "77" ];then
 # if [ "$EXTRASFSMNTPT" = "" ];then
 #  xmessage "Make sure Puppy CD inserted in drive /dev/$PDEV1 RIGHT NOW!"
 #  mkdir -p /mnt/$PDEV1
 #  mount -t $DEV1FS /dev/$PDEV1 /mnt/$PDEV1 #DEV1FS, PDEV1 are in PUPSTATE.
 #  [ ! $? -eq 0 ] && return 1
 #  EXTRASFSMNTPT="/mnt/$PDEV1"
 #  UNMOUNTME="/mnt/$PDEV1"
 # fi
 #fi

 cd $EXTRASFSMNTPT
 #v409 lobster gets some non-sfs files in ALLSFSLIST ...i have no idea how, but
 #need an extra grep filter here... w007 new name woof-007.sfs ... w478 fix for 'pup2' prefix...
 ALLSFSLIST="`ls -1 *.sfs | grep -v '^z' | grep -v "^pup_" | grep -v "^${DISTRO_FILE_PREFIX}\-[0-9][0-9][0-9]\.sfs$" | grep -v "^${DISTRO_FILE_PREFIX}[rz]" | grep '\.sfs$' | tr "\n" " "`"
 cd $CURRDIR
 sync
 [ "$UNMOUNTME" != "" ] && umount $UNMOUNTME

 #eliminate other versions from list...
 FIXEDSFSLIST=""
 rm -f /tmp/bootmanager_wrong_sfs_version 2>/dev/null #v423
 for ONESFS in $ALLSFSLIST
 do
  [ "`echo "$ONESFS" | grep '_[0-9][0-9][0-9]' | grep -v "$DISTRO_VERSION"`" != "" ] && continue
  #w020 other compat-distro sfs need to be eliminated...
  [ "`echo "$ONESFS" | grep '\\-[0-9][0-9][0-9]\\.sfs' | grep -v "$DISTRO_VERSION"`" != "" ] && continue
  #v423 eliminate wrong squashfs version...
  if [ "`disktype ${EXTRASFSMNTPT}/${ONESFS} | grep "$SFSSTR"`" = "" ];then
   echo "$ONESFS" >> /tmp/bootmanager_wrong_sfs_version
   continue
  fi
  FIXEDSFSLIST="$FIXEDSFSLIST $ONESFS"
 done
 ALLSFSLIST="$FIXEDSFSLIST"

 #compose list for xdialog listbox...
 for ONESFS in $ALLSFSLIST
 do
  if [ "$EXTRASFSLIST" = "" ];then
   DLGLIST="$DLGLIST $ONESFS $ONESFS off"
  else
   [ "`echo -n "$EXTRASFSLIST" | grep -v "$ONESFS"`" != "" ] && DLGLIST="$DLGLIST $ONESFS $ONESFS off"
  fi
 done
 for ONESFS in $EXTRASFSLIST
 do
  DLGLIST="$DLGLIST $ONESFS $ONESFS on"
 done

 #v423 let user know wrong sfs's...
 if [ -e /tmp/bootmanager_wrong_sfs_version ];then
  xmessage -bg '#FFC0C0' "NOTICE: The following SFS files located in directory ${MSGz}
are the wrong version for the current Linux kernel:

`cat /tmp/bootmanager_wrong_sfs_version`

The above files will be ignored.
The kernel requires ${SFSSTR}, SFS files.
Note, there is an SFS-version-converter in the Utility menu." &
 fi

 if [ "$DLGLIST" = "" ];then
  [ "$CLPARAM2" = "quiet" ] && return 1
  xmessage -center -bg '#FFC0C0' "Sorry, there are no SFS files in directory $MSGz
(or they all have the wrong '*_nnn.sfs' version number)
You will need to download and place one there first."
  return 1
 fi

 # --icon \"/usr/local/lib/X11/pixmaps/module24.xpm\"
 #note, jwm will use module16.xpm as the window icon...
#v424 remove checkbox...
# EXECME="Xdialog --wmclass \"module16\" --backtitle \"Choose which SFS files are to be loaded at bootup.\n(top entry will be on top Unionfs layer)\" --title \"BootManager: SFS files\" --left --stdout --separator \" \" --check \"Ignore above user selection, load all with '_${DISTRO_VERSION}.sfs' in filename\" $EXTRASFSAUTO --help \"
 EXECME="Xdialog --wmclass \"module16\" --backtitle \"Choose which SFS files are to be loaded at bootup.\n(top entry will be on top Unionfs layer)\" --title \"BootManager: SFS files\" --left --stdout --separator \" \" --help \"
Extra SFS files are available for your Puppy: see announcements on the Forum, or\n
http://distro.ibiblio.org/pub/linux/distributions/puppylinux/sfs_modules-4/ \n
\n
Download to '$MSGz', choose what you want using the BootManager,\n
then reboot Puppy.\n
\n
Note1: \n
BootManager is in the 'System' menu.\n
Note2: \n
When naming an SFS file, do not name it with '_xxx.sfs' where the xxx is\n
3 numeric digits, as Puppy will interpret this as a Puppy-version number, \n
and will refuse to load it if it is not '_${DISTRO_VERSION}.sfs'.\n
Note4: \n
In fact, if '_xxx.sfs' is not '_${DISTRO_VERSION}.sfs' then it will not even\n
be listed -- please note this!\" --buildlist \"Note1: No more than 6 SFS files in right-pane!\n${MSGx}\" 0 0 8 $DLGLIST >/tmp/bmrettags.txt"

 while [ 1 ];do
  eval $EXECME
  RETVAL=$?
  #if [ $RETVAL -eq 3 ];then #help
  # #exits with 3 if --help has an empty string.
  # #so, could have detailed help box here.
  # continue
  #fi
  [ ! $RETVAL -eq 0 ] && return 1
  [ $RETVAL -eq 0 ] && break
 done

 RETTAGS="`cat /tmp/bmrettags.txt`"

 #v424 remove...
 #if [ "`echo "$RETTAGS" | grep 'unchecked'`" = "" ];then
 # #auto mode, remove EXTRASFSLIST entry from BOOTCONFIG...
 # if [ -f /etc/rc.d/BOOTCONFIG ];then
 #  grep -v 'EXTRASFSLIST' /etc/rc.d/BOOTCONFIG > /tmp/BOOTCONFIG
 #  cat /tmp/BOOTCONFIG > /etc/rc.d/BOOTCONFIG
 # fi
 # return 0
 #fi
 #RETTAGS="`echo -n "$RETTAGS" | sed -e 's/unchecked//g' | sed -e 's/checked//g' | sed -e 's/ $//g'`"
 RETTAGS="`echo -n "$RETTAGS" | sed -e 's/ $//g'`"

 [ ! -e /etc/rc.d/BOOTCONFIG ] && touch /etc/rc.d/BOOTCONFIG
 grep -v 'EXTRASFSLIST' /etc/rc.d/BOOTCONFIG > /tmp/BOOTCONFIG
 cat /tmp/BOOTCONFIG > /etc/rc.d/BOOTCONFIG
 echo "EXTRASFSLIST='$RETTAGS'" >> /etc/rc.d/BOOTCONFIG

} #end extrasfs_func

blacklist_func() {
 #blacklisting of modules at bootup.
 . /etc/rc.d/MODULESCONFIG
 MODLIST=""
 LOADEDMODULES="`lsmod | grep -v '^Module' | cut -f 1 -d ' ' | tr '\n' ' '`"
 for ONEMOD in $LOADEDMODULES
 do
  MODLIST="$MODLIST $ONEMOD $ONEMOD off"
 done
 for ONEMOD in $SKIPLIST
 do
  MODLIST="$MODLIST $ONEMOD $ONEMOD on"
 done
 EXECME="Xdialog --wmclass \"module16\" --title \"BootManager: Module blacklist manager\" --left --stdout --separator \" \" --buildlist \"On the left pane are modules that are currently loaded.\n
On the right pane is the complete list of blacklisted modules.\n
If you want to prevent a module from loading, move it to the right\n
side, click OK, then reboot.\n
Note, if you want to find out further information about any module,\n
run PupScan (look in the System menu)\" 0 0 8 $MODLIST >/tmp/skiprettags.txt"
 eval $EXECME
 RETVAL=$?
 [ ! $RETVAL -eq 0 ] && return 1
 SKIPLIST=" `cat /tmp/skiprettags.txt | tr '\n' ' '`"
 #now update /etc/rc.d/MODULESCONFIG...
 grep -v '^SKIPLIST' /etc/rc.d/MODULESCONFIG > /tmp/MODULESCONFIG
 mv -f /tmp/MODULESCONFIG /etc/rc.d/MODULESCONFIG
 echo "SKIPLIST='${SKIPLIST}'" >> /etc/rc.d/MODULESCONFIG
} #end blacklist_func

yeslist_func() {
 #choose extra modules to load at bootup.
 #yaf-splash -font "8x16" -outline 0 -margin 4 -bg orange -text "Please wait, processing..." &
 #X1PID=$!
 . /etc/rc.d/MODULESCONFIG
 MODLIST=""

### *** MODLIST
 #note, lsmod will show all modules with '-' as '_'...
 #LOADEDMODULES=" `lsmod | grep -v '^Module' | cut -f 1 -d ' ' | tr '\n' ' '`"
 LOADEDMODULES=`cut -f 1 -d ' ' /proc/modules`
echo $LINENO >&2

 #v403 handles both .ko and .ko.gz modules...
 #ALLMODULES="`cat /lib/modules/$KERNVER/modules.dep | cut -f 1 -d ':' | grep -o '[a-zA-Z0-9_-]*\.ko' | tr '\-' '_' | sort - | tr '\n' ' '`"
echo $LINENO >&2
 #modprobe -l | grep -o '[a-zA-Z0-9_-]*\.ko' | sed 's/\.ko.*$//' | tr '\-' '_' | sort - | sed 's!\(.*\)!& & off!' >/tmp/bootmanager_allmodules.list
 modprobe -l | grep -o '[a-zA-Z0-9_-]*\.ko' | sed 's/\.ko.*$//;s^-^_^g;s!\(.*\)!& & off!' | sort >/tmp/bootmanager_allmodules.list
 /bin/grep -vFw "$LOADEDMODULES" /tmp/bootmanager_allmodules.list >/tmp/bootmanager_wo_loaded.list

echo $LINENO >&2
 ADDLIST_LINES=`echo "$ADDLIST" | tr '[[:blank:]]' '\n' | sed '/^$/d;s/:.*$//'`
 /bin/grep -vFw "$ADDLIST_LINES" /tmp/bootmanager_wo_loaded.list >/tmp/bootmanager_wo_addlist.list

echo $LINENO >&2
 #sed -i 'a\off' /tmp/bootmanager_wo_addlist.list
 # sed 'a\off' /tmp/bootmanager_wo_addlist.list >/tmp/bootmanager_yeslist.list
 #cp -f /tmp/bootmanager_wo_addlist.list /tmp/bootmanager_yeslist.list
echo $LINENO >&2

 #for ONEMOD in $ALLMODULES
 #do
 # NAMEONLY="`basename $ONEMOD .ko`"
 # MODPATTERN=" $NAMEONLY "
 # #leave off list if already loaded...
 # [ "`echo "$LOADEDMODULES" | grep "$MODPATTERN"`" != "" ] && continue
 # MODPATTERN=' '"$NAMEONLY"'[ :]'
 # #leave off left pane if already on right pane...
 # [ "`echo "$ADDLIST" | grep "$MODPATTERN"`" != "" ] && continue
 # MODLIST="$MODLIST $NAMEONLY $NAMEONLY off"
 #done

echo $LINENO >&2
 #MODLIST=`tr '\n' ' ' </tmp/bootmanager_wo_addlist.list`
 #MODLIST=`tr '\n' ' ' </tmp/bootmanager_yeslist.list`
  MODLIST=`tr '\n' ' ' </tmp/bootmanager_wo_addlist.list`
### *** MODLIST
echo $LINENO >&2

### *** ADDLIST


 for ONEMOD in $ADDLIST
 do
  NAMEONLY="$ONEMOD"
  xONEMOD="$ONEMOD"
  if [ `echo -n "$ONEMOD" | tr ':' ' ' | wc -w` -gt 1 ];then
   MPARAMS="`echo -n "$ONEMOD" | cut -f 2- -d ':' | tr ':' ' '`"
   NAMEONLY="`echo -n "$ONEMOD" | cut -f 1 -d ':'`"
   xONEMOD="$NAMEONLY $MPARAMS"
  fi
  MODPATTERN=" $NAMEOLY "
  #leave off list if already loaded...
  [ "`echo "$LOADEDMODULES" | grep "$MODPATTERN"`" != "" ] && continue
  MODLIST="$MODLIST $ONEMOD \"$xONEMOD\" on"
 done

 #kill $X1PID
### *** ADDLIST

 EXECME="Xdialog --wmclass \"module16\" --title \"BootManager: Module add-list manager\" --left --stdout --separator \" \" --buildlist \"On the left pane is the complete list of modules available to be\nused by Puppy (and not currently loaded).\nOn the right pane are modules that you have explicitly chosen to\nbe loaded at bootup (not auto-loaded by default).\nIf you want to force a module to load, move it to the right pane,\nclick OK button, then reboot Puppy.\nNote, if you want to find out further information about any module,\nrun PupScan (look in the System menu)\" 0 0 8 $MODLIST >/tmp/yesrettags.txt"
 eval $EXECME
 RETVAL=$?
 [ ! $RETVAL -eq 0 ] && return 1
 cat /tmp/yesrettags.txt | tr ' ' '\n' | tr ':' ' ' > /tmp/modules_addlist_edit #v411
 Xdialog --backtitle "If you wish, add any required parameters to these modules\nExample: mmc_block major=179\nIf you don't know what this means, just click 'OK' button"  --wmclass "module16" --title "BootManager: Edit module addlist" --left --stdout --no-cancel --editbox /tmp/modules_addlist_edit 0 0 > /tmp/modules_addlist_edit_out
 [ $? -ne 0 ] && return 1
 ADDLIST="`cat /tmp/modules_addlist_edit_out`"
 ADDLIST=' '"`echo "$ADDLIST" | tr ' ' ':' | tr '\n' ' ' | tr -s ' '`"
 #ADDLIST=" `cat /tmp/yesrettags.txt | tr '\n' ' '`"
 #now update /etc/rc.d/MODULESCONFIG...
 grep -v '^ADDLIST' /etc/rc.d/MODULESCONFIG > /tmp/MODULESCONFIG
 mv -f /tmp/MODULESCONFIG /etc/rc.d/MODULESCONFIG
 echo "ADDLIST='${ADDLIST}'" >> /etc/rc.d/MODULESCONFIG
} #end yeslist_func

#  \"Sometimes two modules are eligible for the same hardware, and you need to choose\none of them. An example is the rt2500usb and rt73usb wireless networking modules\n-- with some hardware these are both eligible however our experience has been that\nthe rt73usb works better. For such a situation, create a line here, of format\nmodule1:module2, where you want module2 to have preference over module1.\nNote: an alternative approach is to blacklist the rt2500usb module (see main menu)\nhowever that is gross as it always prevents rt2500usb from loading.\"

preflist_func() {
 xPREFLIST="`echo -n "$PREFLIST" | sed -e 's/^ //' | tr ' ' '\n'`"
 echo "$xPREFLIST" > /tmp/bootmanager_preflist
 xxPREFLIST="`Xdialog --backtitle \"Sometimes two modules are eligible for the same hardware,\n
and you need to choose one of them. Create a line here,\nof format module1:module2, where you want module2 to\nhave preference over module1.\" --wmclass \"module16\" --title \"BootManager: Module preference-list manager\" --left --stdout --help \"Sometimes two modules are eligible for the same hardware, and you need to choose\none of them. An example is the rt2500usb and rt73usb wireless networking modules\n-- with some hardware these are both eligible however our experience has been that\nthe rt73usb works better. For such a situation, create a line here, of format\nmodule1:module2, where you want module2 to have preference over module1.\nNote: an alternative approach is to blacklist the rt2500usb module (see main menu)\nhowever that is gross as it always prevents rt2500usb from loading.\" --editbox /tmp/bootmanager_preflist 0 0`"
 if [ $? -eq 0 ];then
  NEWPREFLIST="`echo "$xxPREFLIST" | tr '\n' ' ' | sed -e 's/^/ /' | tr -s ' '`"
  grep -v '^PREFLIST' /etc/rc.d/MODULESCONFIG > /tmp/MODULESCONFIG
  mv -f /tmp/MODULESCONFIG /etc/rc.d/MODULESCONFIG
  echo "PREFLIST='${NEWPREFLIST}'" >> /etc/rc.d/MODULESCONFIG
 fi
} #end preflist_func

if [ "$CLPARAM1" = "extrasfs" ];then
 extrasfs_func
 exit
fi

if [ "$CLPARAM1" = "blacklist" ];then
 blacklist_func
 exit
fi

if [ "$CLPARAM1" = "yeslist" ];then
 yeslist_func
 exit
fi

if [ "$CLPARAM1" = "preflist" ];then
 preflist_func
 exit
fi

#######################################################

export MAIN_DIALOG="
<window title=\"BootManager\" icon-name=\"gtk-cdrom\">
<vbox>
 <text use-markup=\"true\">
 <label>\"<b>Puppy Boot Configuration</b>\"</label></text>

 <frame Load SFS files>
  <text><label>Puppy has a file named '${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs' that is always loaded. However, extra SFS files can be loaded at bootup, for example 'kde.sfs' to provide KDE applications, and '${DISTRO_FILE_PREFIX}_devx_${DISTRO_VERSION}.sfs' to provide everything for compiling C/C++ source. These can be thought of as 'combo packs' of many packages in one file.</label></text>
  <hbox>
   <text><label>Choose which extra SFS files to load at bootup:</label></text>
    <button>
     <input file>/usr/local/lib/X11/pixmaps/module24.xpm</input>
     <action>bootmanager extrasfs</action>
    </button>
  </hbox>
 </frame>

 <frame Load kernel modules>
  <text><label>If a driver module did not get loaded, or the wrong one got loaded, or you want to 'blacklist' a module, this is the place. A common scenario is a driver got auto-loaded, for say your wireless network card, but you cannot or do not want to use it, and want some other module or want to use Ndiswrapper (to use the Windows driver).</label></text>
  <hbox>
   <text><label>Click here to 'blacklist' a module:</label></text>
    <button>
     <input file>/usr/local/lib/X11/pixmaps/module24.xpm</input>
     <action>bootmanager blacklist</action>
    </button>
  </hbox>
  <hbox>
   <text><label>Click here to add a new module:</label></text>
    <button>
     <input file>/usr/local/lib/X11/pixmaps/module24.xpm</input>
     <action>bootmanager yeslist</action>
    </button>
  </hbox>
  <hbox>
   <text><label>Give preference to one module over another:</label></text>
    <button>
     <input file>/usr/local/lib/X11/pixmaps/module24.xpm</input>
     <action>bootmanager preflist</action>
    </button>
  </hbox>
 </frame>



 <hbox>
  <button><input file stock=\"gtk-quit\"></input><label>QUIT</label></button>
 </hbox>
</vbox>
</window>
"

RETSTRING="`gtkdialog3 --program=MAIN_DIALOG --center`"

eval "$RETSTRING"

[ "$EXIT" = "abort" ] && exit


###END###
