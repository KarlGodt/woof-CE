#!/bin/sh
#(c) Copyright Nov 2007 Barry Kauler www.puppylinux.com
#2007 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
# A complete rewrite for Puppy 'Dingo', Nov 27 2007, Dec 1,5 2007.
#v3.95 4jan2007: -x option for rox.
#v3.96 17jan2008: full install, mounted '/' partition was not shown.
#v3.98 13mar2008: switch probepart and mut2 engines.
#v3.99 7apr2008: fix zombie process prevents partition unmount.
#v4.01 7may2008: allow /sbin/pup_ueventd to kill pmount and cause it to restart.
#v4.01 10may2008: using 'probedisk2' script.
#v4.01 10may2008: redesign of xml generation, much more efficient.
#v4.01 11may2008: passed params sd,sr,mm,fd when called from pup_dock_xx tray applets.
#v4.01 13may2008: introduce 'preferences' button, add toggle tabbed-normal view.
#v4.01 17may2008: make sure top tab stays on top when mount/unmount.
#v4.01 18may2008: auto launch of pmount when a drive plugged is now confgurable, see prefs.
#v4.02 31may2008: refresh desktop icons when mount/unmount (see pup_eventd).
#v404 11jul08: unipup, disable unmount button correctly.
#v407 mut bugfix.
#v408 bugfix, a drive with no valid partitions crashed pmount.
#v409 jesse: bugfix for floppy detection when using mut2 engine.
#v410 catch case no valid partitions/drvs in a category, remove that category.
#v411 added 'quiet' option for vfat, suppresses error msg when file attribs not preserved on copy.
#v412, no, do not exit if only a warning error msg.
#w476 fix codepage for vfat f.s.
#w477 fix pmount crash when running xvesa.

########################################################################
#
# Changes by Karl Reimer Godt
# 00.0 : Added support for more than one floppy drive .
# 01.0 : Respect font unicode NOT unicode .
# 01.1 : Changed the GUI ordering .
# 02.0 : Added udf support .
# 03.0 : Added trap, debug, usage, version macros .
# 03.1 : Added X check -> exits if X not running .
# 04.0 : Added support for different /sbin/probepart output .
# 05.0 : Changed 'exec pmount's to 'pmount's to gain jobcontrol .
#
# /dev/sda2:
# #OLD LABEL="2nd"
# LABEL="MacPup_F_3"
# #OLD UUID="a4f28ea3-eede-49f8-93ca-dbeefe8f72fa"
# UUID="f7956448-f63f-44f4-a725-f15dd21add97"
# TYPE="ext3"
# DISTRO_VERSION=430            #481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"  #"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"      #"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"     #"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# #OLD KERNVER=2.6.30.7-KRG-i586
# KERNVER=3.4.9-KRG-iCore2-smp-pae-srv1000gz
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# PDEV1='sda2'
# #OLD Linux·puppypc·2.6.30.7-KRG-i586·#2·SMP·Tue·Jan·4·15:42:45·CET·2011·i686·GNU/Linux
# Linux puppypc 3.4.9-KRG-iCore2-smp-pae-srv1000gz #1 SMP Sun Sep 16 18:34:45 GMT+1 2012 i686 GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# #OLD $LANG=de_DE@euro
# $LANG=de_DE.utf8
# #OLD today=Mi·18.·Jan·00:44:08·GMT+1·2012
# today=Mon Sep 17 20:33:36 GMT+1 2012
#
# TODO 1 : Change defaults for floppy from vfat to any other detected .
#
#
########################################################################

test -f /etc/rc.d/f4puppy5 && . /etc/rc.d/f4puppy5
[ "$DISPLAY" ] || { echo "$0: need X running.";exit 1; }
trap "exit 1" HUP INT QUIT KILL TERM

OUT=/dev/null;ERR=$OUT
[ "$DEBUG" ] && { OUT=/dev/stdout;ERR=/dev/stderr; }
[ "$DEBUG" = "2" ] && set -x

Version='1.1-simple-font-detect-space-rendering Macpup_F3-Puppy_Linux_430/2 KRG'

usage(){
MSG="
$0
Simple mount GUI in gtkdialog to present
detected drives with button to mount and
unmount these.
Useful if running a windowmanager that
does not support ROX-Filer pinboard
ie enlightenment.
The probing for drives is a little heavy,
but probably less heavy than the
pup_event_frontend_d daemon.
"
echo "$MSG"
[ "$DISPLAY" ] && xmesssage -bg blue4 "$MESG"
exit $1
}
[ "`echo "$1" | grep -iE '\-h|help'`" ] && usage 0
[ "`echo "$1" | grep -iE '\-V|version'`" ] && { echo -e "\n$0: Version '$Version'\n";exit 0; }

#using ${$} which is pid of script...
MYPID=${$}

. /etc/rc.d/PUPSTATE #v3.96
PMOUNT="pmount" #name of this executable.
MINIFOLDERXPM='/usr/local/lib/X11/mini-icons/mini-filemgr.xpm'
. /etc/rc.d/functions4puppy4 #v4.02

#. $HOME/.gtkrc-2.0
FONTFAMILY=`grep -m 1 -x -e 'gtk-font-name.*' $HOME/.gtkrc-2.0 2>$ERR | grep -v -E -e '^[[:blank:]]*#'`  ##+2011-11-08 added grep -v #
echo FONTFAMILY="$FONTFAMILY"_EOS
[ -z "$FONTFAMILY" ] && FONTFAMILY='mono' ##+++2011-11-08
#if [ -z "`echo "${gtk-font-name}" | grep -i 'monospace'`" ] ; then
if [ -z "`echo "$FONTFAMILY" | grep -i 'mono'`" ] ; then
 SPACE='  '; MONO=0  #2 Space #+-2011-11-08 changed " to-> '
else
 SPACE=' ' ; MONO=1  #1 Space
fi
[ "$DEBUG" ] && echo SPACE="$SPACE"_EOS

SHORT_CHARS='f|i|j|l|r|t' ##+++2012-09-28
SUPPORTED_FS=`cat /proc/filesystems | sed 's@^[[:blank:]]@Y @' |awk '{print $2}' |tr '\n' '|' |sed 's#^|*##;s#|*$##'`

yaf-splash -font "8x16" -outline 0 -margin 4 -bg orange -text "Puppy Drive Mounter

Please wait, probing hardware..." &
X1PID=$!

#v4.01 passed param, choose which tab to be "on top"...
TOPTAB=''
if [ $1 ];then
 TOPTAB="$1" #also allow full tab names usbdrv,optical,drive,card,floppy to be passed.
 [ "$1" = "any" ] && TOPTAB="drive" #see pup_eventd
 #pup_eventd calls pmount with just two letters...
 [ "$1" = "sd" ] && TOPTAB="usbdrv"
 [ "$1" = "sr" ] && TOPTAB="optical"
 [ "$1" = "mm" ] && TOPTAB="card"
 [ "$1" = "fd" ] && TOPTAB="floppy"
fi

#v3.98...
HAVEMUT2='no'
[ -f /usr/sbin/mut ] && [ "`file /usr/sbin/mut | grep 'ELF 32-bit LSB executable'`" != "" ] && HAVEMUT2='yes'
PMOUNTENGINE='default'
PROBEPART="probepart"
PROBEDISK="probedisk2" #v4.01
ENGINEFLAG='false'
if [ "$HAVEMUT2" = "yes" ];then
 [ -f /root/.pmountengine ] && PMOUNTENGINE=`cat /root/.pmountengine`
 if [ "$PMOUNTENGINE" = "mut2" ];then
  PROBEPART='mut --noserv probepart' #v407
  PROBEDISK='mut --noserv probedisk2' #v407
  ENGINEFLAG='true'
 fi
fi

#v4.01 toggle tabbed interface...
SINGLEFLAG="false" #default tabbed interface.
[ -f /root/.pmountsingle ] && SINGLEFLAG=`cat /root/.pmountsingle`

#v4.02 quit immediately after choosing to mount/umount a partition... v404 change to false
PMOUNTQUIT="false" #"true" v404 change to false
[ -f /root/.pmountquit ] && PMOUNTQUIT=`cat /root/.pmountquit`
#but if starting pmount from menu or 'drives' icon, do not quit...
[ "$1" = "any" -o "$1" = "" ] && PMOUNTQUIT="false"

#v3.96 'mount' misreports which partition mounted on '/'...
ROOTDEV2=""
[ "$PUPMODE" = "2" ] && ROOTDEV2=`/bin/df | grep ' /$' | grep '^/dev/' | cut -f 1 -d ' '`

diskinfo(){
DISKINFO=`time -p $PROBEDISK | grep -v -i -E 'DBG|DEBUG' | sed '/^$/d' | sort -k 2 -t '|'` #v4.01
}
diskinfo

partsinfo(){
#PARTSINFO=`$PROBEPART -k | grep -viE "none|swap|extended|Ext'd|not inserted" | tr ' ' '_' | tr '\t' '_' | cut -f 1-3 -d '|'` #v3.98 fix for mut2.
PARTSINFO=`time -p $PROBEPART -k | grep -viE "none|swap|extended|Ext'd|not inserted|unknown" | tr '\t ' '_' | cut -f 1-3 -d '|' | sort -u`
}
partsinfo

old_floppy_func(){
#add floppy drive, if any (note, zip detected by probedisk/probepart)...
if [ "$PMOUNTENGINE" != "mut2" ];then #v409
 #if [ -e /sys/block/fd0 ];then #KRG for multiple floppys (2)
 Fdrv=`ls /sys/block | grep fd* 2>/dev/null`
 for i in $Fdrv; do
  DISKINFO="/dev/$i|floppy|floppy disk drive
$DISKINFO"
  PARTSINFO="/dev/$i|vfat|1440
$PARTSINFO"
 done
 #fi
fi
}
#v409 mut2 lets us know if there are any floppy drives.
if [ "$PMOUNTENGINE" = "mut2" ];then
  FINDFLOPPY=`echo \"$DISKINFO\" | grep /dev/fd | cut -f 1 -d '|' | tr '\n' ' '`;
  echo "FINDFLOPPY $FINDFLOPPY"
  for FDDRIVE in $FINDFLOPPY
  do
    PARTSINFO="$FDDRIVE|vfat|1440
$PARTSINFO"
  done
fi

#v4.01 reoganise so that a particular tab is on top...
if [ "$TOPTAB" != "" ];then
 toptabPATTERN='|'"$TOPTAB"'|'
 TOPDISKS=`echo "$DISKINFO" | grep "$toptabPATTERN"`
 if [ "$TOPDISKS" != "" ];then
  DISKINFO="${TOPDISKS}
`echo "$DISKINFO" | grep -v "$toptabPATTERN"`"
 fi
fi

#v410 catch case no valid partitions/drvs in a category, remove that category...
echo -n "" > /tmp/pmount_cat_test1
for oneDISK in `echo "$DISKINFO" | cut -f 1,2 -d '|' | tr '\n' ' '`
do
 oneDRVNAME=`echo -n "$oneDISK" | cut -f 1 -d '|'`
 oneDRVCAT=`echo -n "$oneDISK" | cut -f 2 -d '|'`
 if [ "`echo "$PARTSINFO" | grep "$oneDRVNAME" | grep -v '|none|'`" != "" ];then
  echo "$oneDRVCAT" >> /tmp/pmount_cat_test1
 fi
done
for oneCAT in `echo "$DISKINFO" | cut -f 2 -d '|' | sort -u | tr '\n' ' '`
do
 if [ "`grep "$oneCAT" /tmp/pmount_cat_test1`" = "" ];then
  diPATTERN="|${oneCAT}|"
  NEWDISKINFO=`echo "$DISKINFO" | grep -v "$diPATTERN"`
  DISKINFO="$NEWDISKINFO"
 fi
done

#v4.01 find the tabs...
#old probedisk has: cdrom, disk, floppy, Direct-Access.
#probedisk2 has: drive, optical, usbdrv, card, floppy
TABLIST=`echo -n "$DISKINFO" | cut -f 2 -d '|' | uniq | sed '/^$/d' | tr '\n' '|' | sed -e 's/|$//'` #KRG : added sed '/^$/d'
CURRENTTAB=''

#v408 v410 moved up...
#VALIDPARTS=`echo "$PARTSINFO" | grep -E 'vfat|msdos|ntfs|minix|ext2|ext3|ext4|reiser|xfs|iso9660'`
#VALIDPARTS=`echo "$PARTSINFO" | grep -E 'vfat|msdos|ntfs|minix|ext2|ext3|ext4|xfs|iso9660|udf|reiser'`
VALIDPARTS=`echo "$PARTSINFO"`
#get actual top tab...
TOPACTUAL=`echo "$TABLIST" | cut -f 1 -d '|'`

#v4.01 PARTSINFO has to be sorted in same order as the categories in DISKINFO...
PARTSGUI=""
FRAMEFLAG="off"
DEV2TAB=""
OLDDISKNAME=''

DISK_FREE=`/bin/df -k`
echo DEBUG: OUTER FOR LOOP ... >&2
for oneDISK in `echo "$DISKINFO" | cut -f 1 -d '|' | tr '\n' ' '`
do

 #v408 bug fix, a drive with no valid partitions, skip it...
 [ "`echo "$VALIDPARTS" | grep "$oneDISK"`" = "" ] && continue

 oneDISKNAME=`echo "$oneDISK" | cut -f 3 -d '/'`
 DSKPATTERN="^${oneDISK}|"
 #oneDISKDESCR=`echo "$DISKINFO" | grep "$DSKPATTERN" | cut -f 3 -d '|' | tr '<' '_' | tr '>' '_'`
 oneDISKDESCR=`echo "$DISKINFO" | grep "$DSKPATTERN" | cut -f 3 -d '|' | tr '\-' '@' | sed -e 's/[^a-zA-Z0-9 @_]//g' | tr '@' '-'`
 xDSKPATTERN="^${oneDISK}"
 cutPARTSINFO=`echo "$PARTSINFO" | grep "$xDSKPATTERN" | tr '\n' ' '`
 [ "$cutPARTSINFO" = "" ] && continue #fix for superfloppy-drv with unknown f.s.
 [ "$cutPARTSINFO" = " " ] && continue #v408 er, there will be a single space.
 #group one or more frames in same tab...
 oneCATEGORY=`echo "$DISKINFO" | grep "$DSKPATTERN" | cut -f 2 -d '|'` #drive,optical,usbdrv,card,floppy
 if [ "$CURRENTTAB" = "" ];then
  PARTSGUI="${PARTSGUI}<vbox>"
  TABFLAG="on"
 else
  [ "$CURRENTTAB" != "$oneCATEGORY" ] && PARTSGUI="${PARTSGUI}</vbox><vbox>"
 fi
 CURRENTTAB="$oneCATEGORY"
 PARTSGUI="${PARTSGUI}<frame ${oneDISKDESCR}>"

echo DEBUG: BIG FOR LOOP ... >&2
###############################################################################
for onePART in $cutPARTSINFO
do
 oneFS=`echo -n "$onePART" | cut -f 2 -d '|'`
 [ "$oneFS" = "swap" ] && continue
 fillFSnr=`echo $oneFS | wc -L`
 #if [ "$fillFSnr" -eq 8 ] ; then
 # fillFS=""
 # #fillFS="${SPACE}" ##+2011-11-08
 # case $oneFS in  ##+2012-07-26 added reiser
 #  reiserfs) fillFS="${SPACE}" ;;
 #  #*) fillFS="${SPACE}" ;;
 # esac
 #else
 fillFS=""
 #fillFS="${SPACE}" ##+2011-11-08
 for i in `seq 8 -1 $fillFSnr`; do fillFS="${fillFS}`echo -n "${SPACE}"`"; done
 #fi
 #fillFS="$fillFS "
 #[ "$oneFS" = "vfat" -o "$oneFS" = "ntfs" ] && fillFS="$fillFS "
 #[ "$MONO" -ne 1 ] && { [ "`echo "$oneFS" | grep -oE "$SHORT_CHARS" |wc -l`" -eq 2 ] && fillFS="${fillFS} "; [ "`echo "$oneFS" | grep -oE "$SHORT_CHARS" |wc -l`" -eq 3 ] && fillFS="${fillFS}  "; [ "`echo "$oneFS" | grep -oE "$SHORT_CHARS" |wc -l`" -eq 4 ] && fillFS="${fillFS}   "; }
 if [ "$MONO" -ne 1 ]; then
  SHORTS=`echo "$oneFS" | grep -oE "$SHORT_CHARS" |wc -l`
  for i in `seq 1 1 $SHORTS`; do fillFS="${fillFS} "; done
 fi
 ##+2012-07-26 added reiser
 #[ "$oneFS" = "iso9660" ] && fillFS=`echo "$fillFS" | sed 's/\ $//'`
 [ "$DEBUG" ] && echo "fillFS='$fillFS' oneFS='$oneFS'"

 #oneDEV=`echo -n "$onePART" | cut -f 1 -d '|'`
 oneDEV="${onePART%%|*}"
 #DEVNAME=`echo -n "$oneDEV" | cut -f 3 -d '/'`
 DEVNAME="${oneDEV##*/}"
 fillDnr=`echo $DEVNAME | wc -L`
 [ "$fillDnr" -eq 5 ] && fillD="${SPACE}"  ##+-2011-11-08 changed '' to Space
 [ "$fillDnr" -eq 4 ] && fillD="${SPACE}${SPACE}"   ##+-2011-11-08
 [ "$fillDnr" -eq 3 ] && fillD="${SPACE}${SPACE}${SPACE}"  ##+++2011-11-08 added for fd0
 [ "$DEBUG" ] && echo "fillD='$fillD'"

 DEV2TAB="${DEV2TAB} ${DEVNAME}|${CURRENTTAB}" #remember which tab a partition is in.
 #DRIVEXPM='/usr/local/lib/X11/mini-icons/mini-hdisk.xpm'

 oneSIZEK=`echo -n "$onePART" | cut -f 3 -d '|'`
 [ -z "$oneSIZEK" ] && oneZIZEK=0
 if [ $oneSIZEK -gt 1048576 ]; then #1024*1024
  oneSIZE=`LC_ALL=C dc $oneSIZEK 1048576 \/ p`
  oneSIZE="`printf "%.1f" $oneSIZE`G"
 else
  #if [ $oneSIZEK -gt 99 ];then
  # oneSIZE="`expr $oneSIZEK \/ 1024`M"
  #else
   oneSIZE=`LC_ALL=C dc $oneSIZEK 1024 \/ p`
   oneSIZE="`printf "%.1f" $oneSIZE`M"
  #fi
 fi
 #[ "$oneSIZE" = "0.0M" ] && oneSIZE=""
 echo "oneSIZE='$oneSIZE' oneSIZEK='$oneSIZEK'"
 fillSnr=`echo $oneSIZE | wc -L`
 if [ "$fillSnr" -eq 7 ]; then
 fillS=""
 else
 fillS=""
 for i in `seq 6 -1 $fillSnr`; do fillS="${fillS}`echo -n "${SPACE}"`"; done
 fi
 [ "$DEBUG" ] && echo "fillS='$fillS'"

 #DEVPATTERN="^${oneDEV} "
 #oneMNTPT=`mount | grep "$DEVPATTERN" | cut -f 3 -d ' '`
 oneMNTPT=`grep -w "^${oneDEV}" /proc/mounts | cut -f 2 -d ' '`
 [ "$ROOTDEV2" != "" ] && [ "$ROOTDEV2" = "$oneDEV" ] && oneMNTPT='/' #v3.96
 if [ "$oneMNTPT" = "" ]; then #not mounted.
  #[ "$oneFS" = "iso9660" ] && DRIVEXPM='/usr/local/lib/X11/mini-icons/mini-cd.xpm'
  #<input file>${DRIVEXPM}</input>
  PARTSGUI="${PARTSGUI}<hbox><text><label>${DEVNAME}$fillD${oneFS}$fillFS$fillS${oneSIZE}</label></text><button><label>MOUNT</label><action type=\"exit\">DOMOUNT_${oneDEV}_${oneFS}</action></button></hbox>"
  # PARTSGUI="${PARTSGUI}<hbox><text width-request=\"30\"><label>\"\"</label></text><text width-request=\"130\"><label>${DEVNAME} ${oneFS} ${oneSIZE}</label></text><text width-request=\"80\"><label>\"\"</label></text><button width-request=\"90\"><label>$m_09</label><action type=\"exit\">DOMOUNT_${oneDEV}_${oneFS}</action></button></hbox>"
 else
  #DRIVEXPM='/usr/local/lib/X11/mini-icons/mini-hdisk-green.xpm'
  #[ "$oneFS" = "iso9660" ] && DRIVEXPM='/usr/local/lib/X11/mini-icons/mini-cd-green.xpm'
  #FREEK=`/bin/df -k | tr -s ' ' | grep "$DEVPATTERN" | cut -f 4 -d ' '`
  #FREEK=`/bin/df -k | grep -w "^${oneDEV}" | awk '{print $4}'`
  FREEK=`echo "$DISK_FREE" | grep -w "^${oneDEV}" | awk '{print $4}'`
  if [ $FREEK -gt 1048576 ]; then #1024*1024
   oneFREE=`LC_ALL=C dc $FREEK 1048576 \/ p`
   oneFREE="`printf "%.1f" $oneFREE`G"
  else
   #if [ $FREEK -gt 99 ];then
   # oneFREE="`expr $FREEK \/ 1024`M"
   #else
    oneFREE=`LC_ALL=C dc $FREEK 1024 \/ p`
    oneFREE="`printf "%.1f" $oneFREE`M"
   #fi
  fi
  [ "$DEBUG" ] && echo "FREEK='$FREEK' oneFREE='$oneFREE'"
  fillFnr=`echo $oneFREE | wc -L`
  if [ "$fillFnr" -eq 7 ]; then
  fillF=""
  else
  fillF=""
  for i in `seq 6 -1 $fillFnr`; do fillF="${fillF}`echo -n "${SPACE}"`"; done
  fi
  [ "$DEBUG" ] && echo "fillF='$fillF'"

  FREEINSERT="<text><label>$fillF${oneFREE} free</label></text>"
  # FREEINSERT="<text width-request=\"80\"><label>${oneFREE} $m_08</label></text>"
  #[ "$oneFREE" = "0.0M" ] && FREEINSERT=""
  #in some cases prevent unmounting...
  INVISBUT=""
  [ "`echo -n "$oneMNTPT" | grep '^/initrd'`" -o "$oneMNTPT" = "/" ] && INVISBUT='<visible>disabled</visible>'
  #v404 unipup, cannot unmount anything mntd in /.mnt...
  case $PUPMODE in
  16|24|17|25)
   [ "`echo -n "$oneMNTPT" | grep '^/\.mnt'`" ] && INVISBUT='<visible>disabled</visible>'
   #usr_xxx.sfs was not copied to ram, still on partition...
   [ "`losetup | grep -o ' /.*/usr_.*\.sfs' | cut -f 1-3 -d '/' | cut -f 2 -d ' '`" = "$oneMNTPT" ] && INVISBUT='<visible>disabled</visible>'
  ;;
  esac

  #if 'home' partition, substitute /mnt/home...
  if [ -L /mnt/home -a "`echo "$oneMNTPT" | grep '/initrd/'`" != "" ];then
   HOMELINK=`readlink /mnt/home`
   [ "$HOMELINK" = "$oneMNTPT" ] && oneMNTPT="/mnt/home"
  fi

  #<input file>${DRIVEXPM}</input>
  PARTSGUI="${PARTSGUI}<hbox>${FREEINSERT}<button width-request=\"30\"><input file>${MINIFOLDERXPM}</input><action>rox -d ${oneMNTPT} &</action></button><text><label>${DEVNAME}$fillD${oneFS}$fillFS$fillS${oneSIZE}</label></text><button><label>UNMNT</label>${INVISBUT}<action type=\"exit\">UNMOUNT_${oneDEV}_${oneFS}_${oneMNTPT}</action></button></hbox>"
  #krg PARTSGUI="${PARTSGUI}<hbox>${FREEINSERT}<button width-request=\"30\"><input file>${MINIFOLDERXPM}</input><action>rox -d ${oneMNTPT} &</action></button><text width-request=\"130\"><label>${DEVNAME} ${oneFS} ${oneSIZE}</label></text><button><label>UNMNT</label>${INVISBUT}<action type=\"exit\">UNMOUNT_${oneDEV}_${oneFS}_${oneMNTPT}</action></button></hbox>"
 fi
done
########################################################################
 PARTSGUI="${PARTSGUI}</frame>"
 OLDDISKNAME="$oneDISKNAME"
done


if [ "$TABFLAG" = "on" ];then #v4.01
 PARTSGUI="${PARTSGUI}</vbox>"
fi

#if [ "$HAVEMUT2" = "yes" ];then
 PREFSBUTTON="
   <button><label>preferences</label>
    <action type=\"exit\">SETPREFS</action>
   </button>"
#fi

NOTEBOOKHEAD=""
NOTEBOOKTAIL=""
if [ "$SINGLEFLAG" = "false" ];then #default
 NOTEBOOKHEAD="<notebook labels=\"${TABLIST}\">"
 NOTEBOOKTAIL="</notebook>"
fi

export PMOUNTGUI="
<window title=\"Pmount Puppy Drive Mounter\" icon-name=\"gtk-harddisk\">
 <vbox>
  <text use-markup=\"true\">
  <label>\"<b>DO NOT REMOVE MOUNTED MEDIA</b>\"</label></text>

  ${NOTEBOOKHEAD}
  ${PARTSGUI}
  ${NOTEBOOKTAIL}

  <hbox>
   ${PREFSBUTTON}
   <button><input file stock=\"gtk-refresh\"></input><label>REFRESH</label>
    <action type=\"exit\">REFRESH</action>
   </button>
   <button><input file stock=\"gtk-quit\"></input><label>QUIT</label></button>
  </hbox>
 </vbox>
</window>"

echo "$PMOUNTGUI" > /tmp/pmountdlg.txt_${MYPID}

kill $X1PID 2>$ERR

#RETPARAMS=`gtkdialog3 --file=/tmp/pmountdlg.txt_${MYPID} --center`

#v4.01...
[ ! -e /tmp/gtkdialog_pmount ] && ln $VERB -s /usr/sbin/gtkdialog3 /tmp/gtkdialog_pmount
/tmp/gtkdialog_pmount --file=/tmp/pmountdlg.txt_${MYPID} --center >/tmp/pmountdlg_${MYPID} 2>/tmp/pmounterr
#[ -s /tmp/pmounterr ] && exit
#v412, no, do not exit if only a warning error msg...
if [ -s /tmp/pmounterr ];then
 #w477 running Xvesa: 'Xlib:  extension "Generic Event Extension" missing on display ":0.0".'
 [ "`grep -v -E 'WARNING|Generic Event Extension' /tmp/pmounterr`" != "" ] && exit
fi
rm -f /tmp/pmountdlg.txt_${MYPID}
#if gui killed by pup_eventd, then file will be empty. restart pmount...
if [ ! -s /tmp/pmountdlg_${MYPID} ];then
 rm $VERB -f /tmp/pmountdlg_${MYPID}
 #exec /usr/sbin/$PMOUNT
 #...no, exit here, restart from pup_eventd as it can pass a param...
 exit
fi
RETPARAMS=`cat /tmp/pmountdlg_${MYPID}`
rm -f /tmp/pmountdlg_* ##+++2013-12-28

#echo "$RETPARAMS"
#echo "DEV2TAB=$DEV2TAB" #TEST
echo "$0:$LINENO" >&2
eval "$RETPARAMS"
echo "$0:$LINENO" >&2
#[ "$EXIT" = "REFRESH" ] && exec /usr/sbin/$PMOUNT $TOPACTUAL
echo "$0:$LINENO '$EXIT'" >&2
[ "$EXIT" = "REFRESH" ] && /usr/sbin/$PMOUNT $TOPACTUAL
if [ "$EXIT" = "SETPREFS" ];then
 DLGSETENG="
<wtitle>Pmount: choose preferences</wtitle>
 <vbox>
  <text><label>The default utilities that Puppy uses to probe the drives are 'probedisk' and 'probepart'. Alternatively, Jesse Liley has developed a utility named 'mut' that has multiple functions including equivalent behaviour to the default utilities. If you find that the default utilities do not detect your drives correctly, then switch over to mut, or vice-versa.</label></text>
  <checkbox>
   <label>Tick box to use 'mut'</label>
   <default>${ENGINEFLAG}</default>
   <variable>NEWENGINEFLAG</variable>
  </checkbox>

  <text><label>If you don't have many drives or partitions, you may find it more convenient to see everything in one window. Untick the box if you want the default tabbed interface, or tick for a single window:</label></text>
  <checkbox>
   <label>Tick box for single window</label>
   <default>${SINGLEFLAG}</default>
   <variable>NEWSINGLEFLAG</variable>
  </checkbox>

  <text><label>If this checkbox is ticked, Pmount will quit immediately after choosing to mount or unmount a partition. If you would refer Pmount to keep running afterward, then untick this box:</label></text>
  <checkbox>
   <label>Tick for Pmount to quit after mount/unmount</label>
   <default>${PMOUNTQUIT}</default>
   <variable>NEWPMOUNTQUIT</variable>
  </checkbox>

  <hbox>
   <button ok></button>
   <button cancel></button>
  </hbox>
 </vbox>
"
 NEWENGINEFLAG=""
 RETPARAMS=`echo "$DLGSETENG" | gtkdialog2 --stdin`
 eval "$RETPARAMS"
 if [ "$EXIT" = "OK" ];then
  [ "$NEWENGINEFLAG" = "true" ] && echo -n "mut2" > /root/.pmountengine
  [ "$NEWENGINEFLAG" = "false" ] && echo -n "default" > /root/.pmountengine
  echo "$NEWSINGLEFLAG" > /root/.pmountsingle
  echo "$NEWPMOUNTQUIT" > /root/.pmountquit
 fi
 #exec /usr/sbin/$PMOUNT $TOPACTUAL
 echo "$0:$LINENO '$EXIT'" >&2
 /usr/sbin/$PMOUNT $TOPACTUAL
fi

if [ "`echo -n "$EXIT" | grep 'DOMOUNT'`" != "" ];then
 DODEV=`echo -n "$EXIT" | cut -f 2 -d '_'`
 DEVNAME=`echo -n "$DODEV" | cut -f 3 -d '/'`
 DOFS=`echo -n "$EXIT" | cut -f 3 -d '_'`
 devPATTERN='^'"$DEVNAME"'|'
 TOPACTUAL=`echo "$DEV2TAB" | tr ' ' '\n' | grep "$devPATTERN" | cut -f 2 -d '|'` #find top tab.
 mkdir $VERB -p /mnt/$DEVNAME
 case $DOFS in
  NTFS|Ntfs|ntfs)
   #'mount' is a script that takes care of mounting ntfs...
   /bin/mount -t ntfs $DODEV /mnt/$DEVNAME
   RETVAL1=$?
   ;;
  fat*|FAT*|Fat*|vfat)
   #w476 modify codepage and iocharset (note: this code also in /usr/local/bin/drive_all)...
   #note, could also set iocharset=iso8859-2 (default: codepage=437, iocharset=iso8859-1)
   NLS_PARAM=''
   if [ -f /etc/keymap ];then #set in /etc/rc.d/rc.country
    KEYMAP=`cat /etc/keymap | cut -f 1 -d '.'`
    case $KEYMAP in
     de|be|br|dk|es|fi|fr|it|no|se|pt)
      NLS_PARAM=',codepage=850'
     ;;
     slovene|croat|hu101|hu|cz-lat2|pl|ro_win)
      NLS_PARAM=',codepage=852,iocharset=iso8859-2'
     ;;
    esac
   fi
   /bin/mount -t vfat -o shortname=mixed,quiet${NLS_PARAM} $DODEV /mnt/$DEVNAME #v411 added quiet.
   RETVAL1=$?
   ;;
  *)
   DOFS=`echo "$DOFS" |tr '[[:upper:]]' '[[:lower:]]'`
   /bin/mount -t $DOFS $DODEV /mnt/$DEVNAME
   RETVAL1=$?
   ;;
 esac
 if [ $RETVAL1 -eq 0 ];then

  #v4.02 now doing this in /bin/mount...
  ##v4.02 if there is a desktop icon (see pup_eventd), then refresh it...
  #DRVNAME=`echo -n "$DEVNAME" | cut -b 1-3`
  ##special case, SD card /dev/mmcblk0p1...
  #[ "$DRVNAME" = "mmc" ] && DRVNAME=`echo -n "$DEVNAME" | sed -e 's/p[0-9]$//'`
  #if [ -f /usr/local/bin/drive_${DRVNAME} ];then
  # icon_mounted_func $DRVNAME $TOPACTUAL #see functions4puppy4
  #fi

  if [ "$PMOUNTQUIT" = "false" ];then #v4.0.2
   #now restart pmount, but want rox window on top...
   #/usr/sbin/$PMOUNT $TOPACTUAL &
   echo "$0:$LINENO '$PMOUNTQUIT'" >&2
   /usr/sbin/$PMOUNT $TOPACTUAL
   NEWPID="$!"
   while [ ! -f /tmp/pmountdlg.txt_${NEWPID} ];do
    usleep 200000
   done
   usleep 100000
  fi
  #v3.95 -x option to rescan...
  exec rox -x /mnt/$DEVNAME -d /mnt/$DEVNAME #want this window on top.
 else
  xmessage -bg red -center -title "Pmount" "ERROR: unable to mount $DEVNAME"
  #exec /usr/sbin/$PMOUNT $TOPACTUAL
  echo "$0:$LINENO '$PMOUNTQUIT'" >&2
  /usr/sbin/$PMOUNT $TOPACTUAL
 fi
fi

if [ "`echo -n "$EXIT" | grep 'UNMOUNT'`" != "" ];then
 DODEV=`echo -n "$EXIT" | cut -f 2 -d '_'`
 DEVNAME=`echo -n "$DODEV" | cut -f 3 -d '/'`
 DOFS=`echo -n "$EXIT" | cut -f 3 -d '_'`
 MNTPT=`echo -n "$EXIT" | cut -f 4 -d '_'`
 devPATTERN='^'"$DEVNAME"'|'
 TOPACTUAL=`echo "$DEV2TAB" | tr ' ' '\n' | grep "$devPATTERN" | cut -f 2 -d '|'` #find top tab.
 rox -D $MNTPT
 sync
 /bin/umount $MNTPT ; umVAL=$?
 #v3.99 fix zombie process prevents partition unmount, invisible to fuser...
 if [ $umVAL -ne 0 ];then
  ZOMBIES=`/bin/ps -H -A | grep '<defunct>' | sed -e 's/  /|/g' | grep -v '|||' | cut -f 1 -d ' ' | tr '\n' ' '`
  for oneZOMBIE in $ZOMBIES
  do
   echo "Killing parentless zombie process $oneZOMBIE"
   kill $oneZOMBIE
  done
  /bin/umount $MNTPT ; umVAL=$?
 fi
 #v3.99 rare ocassion, partition got unmounted before umount runs above...
 umPATTERN="${MNTPT} "
 [ "`mount | grep "$umPATTERN"`" = "" ] && umVAL=0
 if [ $umVAL -ne 0 ];then
  EXTRAMSG0=`fuser -v -m $MNTPT`
  if [ "$EXTRAMSG0" = "" ];then
   xmessage -bg "#ff8080" -title "Puppy drive mounter: ERROR" -center "FAILURE! In the case of removable media, the most
common reason is the media is not currently inserted.
If so, please remedy."
  else
   xmessage -bg "#ff00ff" -title "KILL, KILL..." -center -buttons KILL:10,EXIT:20 "FAILURE! One or more processes (programs) are currently
using the partition. Here they are:
$EXTRAMSG0

If you press the \"KILL\" button, Puppy will attempt to
kill the offending programs for you. Only do this as a
last resort. Firstly you should try to close the programs
manually, so do not press \"KILL\".
PLEASE PRESS THE \"EXIT\" BUTTON!"
   [ $? -eq 10 ] && fuser -k -m $MNTPT
  fi
 else

  #v4.02 have moved this to /bin/umount...
  ##v4.02 if there is a desktop icon (see pup_eventd), then refresh it...
  #DRVNAME=`echo -n "$DEVNAME" | cut -b 1-3`
  ##special case, SD card /dev/mmcblk0p1...
  #[ "$DRVNAME" = "mmc" ] && DRVNAME=`echo -n "$DEVNAME" | sed -e 's/p[0-9]$//'`
  #if [ -f /usr/local/bin/drive_${DRVNAME} ];then
  # #if any partitions still mounted, leave "MNTD" on icon...
  # drvPATTERN='^/dev/'"${DRVNAME}"
  # #"MNTD" text is intended as a reminder to user that drive needs to be unmounted,
  # #   but partitions in use by Puppy cannot be unmounted.
  # if [ "`mount | cut -f 1,3 -d ' ' | grep "$drvPATTERN" | grep -v ' /initrd/' | grep -v ' /$'`" = "" ];then
  #  if [ "`mount | cut -f 1,3 -d ' ' | grep "$drvPATTERN" | grep -E ' /initrd/| /$'`" != "" ];then
  #   #only a partition left mntd that is in use by puppy, change green->yellow...
  #   icon_mounted_func $DRVNAME $TOPACTUAL #see functions4puppy4
  #  else
  #   #redraw icon without "MNTD" text...
  #   icon_unmounted_func $DRVNAME $TOPACTUAL #see functions4puppy4
  #  fi
  # fi
  #fi

  [ "$DOFS" = "iso9660" ] && eject $DODEV
 fi
 #[ "$PMOUNTQUIT" = "false" ] && exec /usr/sbin/$PMOUNT $TOPACTUAL
 echo "$0:$LINENO '$PMOUNTQUIT'" >&2
 [ "$PMOUNTQUIT" = "false" ] && /usr/sbin/$PMOUNT $TOPACTUAL
fi
exit 0
###END###
