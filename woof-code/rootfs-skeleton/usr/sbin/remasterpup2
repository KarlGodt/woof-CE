#!/bin/ash
#simple script to remaster the puppy live-cd.
#(c) Copyright 2006 Barry Kauler, www.puppyos.com
#2007 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#BK 9 oct 2007: updated for puppy v3.01.
#RE 9 apr 2008: v3.99 copy active post-install scripts
#v4.02 /lib/modules/firmware.dep.<kern>,DOTconfig-K<kern> moved to /etc/modules. ...um no mods this script.
#v411 update what gets copied from /root and /etc.
#v412 /etc/DISTRO_SPECS, renamed pup_xxx.sfs, pup_save.2fs etc.
#w001 pup files renamed to woof-555.sfs, woofsave.2fs (or similar).
#w018 april 2009: Woof-related fixes, new standardised package database format.
#w460 zdrv has new name format, ex zu500269.sfs.
#w482 shinobar: exclude /lib/modules/${KERNELVER}/initrd.
#v423 bugfix.
. /etc/rc.d/f4puppy5
# BATCHMARKER01 - Marker for Line-Position to bulk insert code into.
#v431 bugfixes.

export LANG=C #faster, plus Xdialog happier.
KERNELVER="`uname -r`"

#variables created at bootup by /initrd/usr/sbin/init...
. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS
#PUPPYVERSION="`cat /etc/puppyversion`"

PREFIX1CHAR="`echo "$DISTRO_FILE_PREFIX" | cut -c 1`"
KERNEL3CHARS="`echo "$KERNELVER" | tr -d '.' | tr -d '\-' | tr -d '[a-z]' | rev | cut -c 1,2,3 | rev`"
ZDRVSFS="z${PREFIX1CHAR}${DISTRO_VERSION}${KERNEL3CHARS}.sfs"
SAVEPART="$PDEV1" #from PUPSTATE.
CDR="/dev/$SAVEPART"

[ "$PUP_LAYER" ] || PUP_LAYER="/pup_ro2"
PPATTERN="^/initrd${PUP_LAYER}$"
if [ "`cut -f2 -d' ' /proc/mounts | grep "$PPATTERN"`" = "" ];then
 #no ${DISTRO_FILE_PREFIX}-xxx.sfs file mounted on pup_ro2, probably h.d. install...
 Xdialog --wrap --left --title "Puppy simple remaster CD: ERROR" --msgbox "This program requires a ${DISTRO_FILE_PREFIX}-$DISTRO_VERSION.sfs file mounted on /initrd${PUP_LAYER}.
Which is not the case here, probably because this is a full hard drive
installation? Whatever, boot Puppy from live-CD and then you will be able to
use this script.

Note, I have not tried it, but if you setup the situation of ${DISTRO_FILE_PREFIX}-$DISTRO_VERSION.sfs
mounted on directory /initrd${PUP_LAYER}, that will be acceptable for this program.
You will also need a current live-CD, as the program gets files off it.
Anyone want to try it?

Click 'Ok' button to quit..." 0 0
 exit
fi


#choose where to create isolinux-builds/ directory...
Xdialog --wrap --left --title "Puppy simple CD remaster" --msgbox "Welcome! This little program takes a snapshot of your current system and burns it to CD.

A Puppy live-CD has 4 main files: vmlinuz, isolinux.cfg, initrd.gz and ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs, where $DISTRO_VERSION is the current version number (without dots). Note, in some builds of Puppy there may also be a 5th file, ${ZDRVSFS}.

It is ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs that mainly interests us here: it has the entire Puppy filesystem, everything from '/' down. What this script does is rebuild this file ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs, with everything currently under '/' -- that is, all user-installed packages, all mounted .sfs extension files, everything, gets combined into one file, ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs and burnt to CD.
Note, if you have an 'underdog Linux' mounted, that too will get combined into the ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs file, so beware, it could get big!

Click OK button to continue (or close window to quit)..." 0 0

[ ! $? -eq 0 ] && exit

#calc size needed...
Xdialog --wrap --title "Puppy simple CD remaster" --msgbox "Calculating needed working space.\nPlease wait, this may take awhile..." 0 0 &
XPID=$!
SIZEOPT=0
 SIZEBIN=`du -sk /bin  | cut -f 1`
SIZESBIN=`du -sk /sbin | cut -f 1`
 SIZELIB=`du -sk /lib  | cut -f 1`
 SIZEUSR=`du -sk /usr  | cut -f 1`
[ -d /opt ] && SIZEOPT=`du -sk /opt | cut -f 1`
_sync
kill $XPID
#SIZETOTALK=`expr $SIZEBIN + $SIZESBIN + $SIZELIB + $SIZEUSR + $SIZEOPT`
SIZETOTALK=`dc $SIZEBIN $SIZESBIN + $SIZELIB + $SIZEUSR + $SIZEOPT + p`
SIZETOTALM=`expr $SIZETOTALK \/ 1024`
echo "SIZETOTALM=$SIZETOTALM"
#estimate a compressed size...
SIZENEEDEDM=`expr $SIZETOTALM \/ 3`
SIZESLACKM=`expr $SIZENEEDEDM \/ 3` #guess
SIZENEEDEDM=`expr $SIZENEEDEDM + $SIZESLACKM`
SIZENEEDEDM=`expr $SIZENEEDEDM + 25` #space for vmlinuz, initrd.gz, zdrv, etc

#now choose working partition... v431 add ext4...
PARTSLIST="`probepart -m 2>$ERR | grep '^/dev/' | grep --extended-regexp 'ext2|ext3|ext4|reiserfs|msdos|vfat|ntfs' | cut -f 1-3 -d '|'`"

 echo "" >/tmp/schoices.txt
 echo "$PARTSLIST" |
 while read APART
 do
  [ "$APART" ] || continue #v3.01 preaution
  MNTSTATUS='(currently mounted)'
   ATAG="`echo "$APART" | cut -f 1 -d '|' | cut -f 3 -d '/'`"
    AFS="`echo "$APART" | cut -f 2 -d '|'`"
  ASIZE="`echo "$APART" | cut -f 3 -d '|'`"
  AFPATTERN="^/dev/$ATAG " #v3.01
  AFREE="`/bin/df -m | grep "$AFPATTERN" | tr -s " " | cut -f 4 -d " "`"
  FLAG_RO='no' #v431
  if [ ! "$AFREE" ];then
   MNTSTATUS='(not mounted)'
   mkdir $VERB -p /mnt/$ATAG
   mount $VERB $VERB -t $AFS /dev/$ATAG /mnt/$ATAG >$OUT 2>&1
   if [ $? -eq 0 ];then
    if [ "$ATAG" = "fd0" ];then
     FFREE=`/bin/df -k | grep "$AFPATTERN" | tr -s " " | cut -f 4 -d " "`
     AFREE="`dc $FFREE 1024 \/ p`"
    else
     AFREE="`/bin/df -m | grep "$AFPATTERN" | tr -s " " | cut -f 4 -d " "`"
    fi
    [ "`mount | grep "$AFPATTERN" | grep ' (rw'`" ] || FLAG_RO='yes' #v431 make sure writable.
    umount /dev/$ATAG
   else #v431
    continue
   fi
  else
   [ "`mount | grep "$AFPATTERN" | grep ' (rw'`" ] || FLAG_RO='yes' #v431 make sure writable.
  fi
  [ "$FLAG_RO" = "yes" ] && continue #v431
  [ "$AFS" ] && echo "${ATAG} \"Filesystem: $AFS  Size: ${ASIZE}M  Free: ${AFREE}M ${MNTSTATUS}\" \\" >>/tmp/schoices.txt #v3.01 added precaution.
 done
 SCHOICES="`cat /tmp/schoices.txt`"

#add tmpfs ramdisk choice... ***v431 TODO: THIS SECTION MAY BE BROKEN***
SIZETMPFSM="`/bin/df -m | grep '^tmpfs' | grep '/initrd/pup_rw' | tr -s " " | cut -f 4 -d " "`"
TMPFSMSG=''
if [ "$SIZETMPFSM" ]; then
 TOTALTMPFSM="`/bin/df -m | grep '^tmpfs' | grep '/initrd/pup_rw' | tr -s " " | cut -f 2 -d " "`"
 if [ "$SCHOICES" = "" ];then #v3.01
  SCHOICES="ramdisk \"Filesystem: tmpfs  Size: ${TOTALTMPFSM}M  Free: ${SIZETMPFSM}M (currently mounted)\" \\"
 else
  SCHOICES="$SCHOICES
ramdisk \"Filesystem: tmpfs  Size: ${TOTALTMPFSM}M  Free: ${SIZETMPFSM}M (currently mounted)\" \\"
 fi
 TMPFSMSG='Note 2: you can use the tmpfs ramdisk, which is in RAM, if it has enough space.
'
fi

[ "$SCHOICES" ] || _exit 3 "Error processing SCHOICES" #precaution.

 echo '#!/bin/ash'
 echo "Xdialog --wrap --stdout --left --title \"Puppy simple CD remaster\" --menubox \"A working area is required in which to create the new live-CD iso file.
Here are the available partitions.
You must choose one that has at least ${SIZENEEDEDM}M free space on it.
Also, if you choose to create an ISO file rather than burn direct to CD/DVD,
then you will need an extra 100 - 200MB space (whatever the size of ISO file is going to be).

If the partition that you would like to use has less than ${SIZENEEDEDM}M free space on it,
you will need to quit this script and delete some files.
Note 1: you can use a usb drive, but it needs to have been plugged in before
        running this script, so that it will get detected.
${TMPFSMSG}
Highlight desired choice then click OK button...\" 0 0 5 "
 echo "$SCHOICES"
 echo ' >/tmp/tag.txt'
 echo 'exit $?'
 ) >/tmp/savedlg
 chmod $VERB 0755 /tmp/savedlg

/tmp/savedlg || exit 0
WKGPART="`cat /tmp/tag.txt`"
_info "WKGPART=$WKGPART"
[ "$WKGPART" ] || _exit 3 "Error processing WKGPART"
#[ "$WKGPART" = "ramdisk" ] && WKGPART="tmpfs"

#copy files off live-cd.... w018 use probedisk2...
DRIVESFND="`probedisk2 2>&1`"
#IDEDRVSFND="`test-eide 2>&1 | grep "cdrom"`"
SELECTIONS="`echo "$DRIVESFND" | grep '^/dev/' | grep "|optical|" | cut -f 1,3 -d "|" | tr " " "_" | tr "|" " " | tr '$' "_"`"
zSELECTIONS="`echo "$SELECTIONS" | tr '\n' ' '`" #v431 bugfix.
#w018 does this work? change to eval... v423 bugfix...
XDLG="Xdialog --wrap --left --title \"Puppy simple CD remaster\" --stdout --menubox \"This remaster program needs to read some files off the current live-CD.
So, you need to choose a CD/DVD drive, and it must also be a burner drive (unless you choose only to create a .iso file and defer burning to another time) so that the files created by this program can be burnt to a new CD/DVD.
Choose the CD/DVD drive...\" 0 48 4 $zSELECTIONS 2>$ERR"
BURNERDRV="`eval "$XDLG"`" #w018 v423
[ $? -ne 0 ] && exit
[ "$BURNERDRV" ] || _exit 3 "Error processing BURNERDRV"
BURNERDRV="`echo "$BURNERDRV" | cut -f 3 -d '/'`"
_info "BURNERDRV=$BURNERDRV" #TEST

CDPATTERN="/dev/$BURNERDRV "
CDMNTPT="`mount | grep "$CDPATTERN" | tr -s " " | cut -f 3 -d " "`"
if [ "$CDMNTPT" ]; then
 if [ ! -f $CDMNTPT/initrd.gz ];then
  fuser -k -m /dev/$BURNERDRV
  _sync
  umount /dev/$BURNERDRV 2>$ERR
  if [ $? -ne 0 ];then
   Xdialog --title "ERROR" --msgbox "Mounted CD, get rid of it before running this program!" 0 0
   exit 0
  fi
  CDMNTPT=""
 fi
fi

if [ "$CDMNTPT" = "" ];then
 while :;do
 Xdialog --wrap --title "Puppy simple CD remaster" --msgbox "Please insert the current Puppy live-CD into drive $BURNERDRV.
Then click OK..." 0 0
 #now mount it...
 CDMNTPT="/mnt/$BURNERDRV"
 mkdir $VERB -p /mnt/$BURNERDRV
 mount $VERB $VERB -t iso9660 /dev/$BURNERDRV /mnt/$BURNERDRV
 [ $? -eq 0 ] && break
 done
fi

#now get the files off it...
#firstly need working place to write to...
[ "$WKGPART" = "ramdisk" ] && WKGMNTPT="/"
WPATTERN="/dev/$WKGPART "
[ "$WKGMNTPT" ] || WKGMNTPT="`mount | grep "$WPATTERN" | tr -s " " | cut -f 3 -d " "`"
#[ "$WKGMNTPT" = "/initrd/pup_rw" ] && WKGMNTPT="/"
if [ "$WKGMNTPT" = "" ];then
 PPATTERN="^$WKGPART "
 WKGFS="`echo "$SCHOICES" | grep "$PPATTERN" | cut -f 2 -d ':' | cut -f 2 -d " "`"
 [ "$WKGFS" = "msdos" ] && WKGFS="vfat"
 mkdir $VERB -p /mnt/$WKGPART
 mount $VERB $VERB -t $WKGFS /dev/$WKGPART /mnt/$WKGPART
 [ $? -ne 0 ] && exit #precaution.
 WKGMNTPT="/mnt/$WKGPART"
fi
[ "$WKGMNTPT" = "/" ] && WKGMNTPT=""

Xdialog --wrap --title "Puppy simple CD remaster" --msgbox "Copying files from CD to $WKGMNTPT/puppylivecdbuild/, please wait..." 0 0 &
XPID=$!
rm $VERB -rf $WKGMNTPT/puppylivecdbuild #precaution
mkdir $VERB $WKGMNTPT/puppylivecdbuild
#now copy the files...
   _sync
  for f in isolinux.bin isolinux.cfg boot.msg help.msg help1.msg help2.msg goofy.16 logo.16 vmlinuz initrd.gz ${ZDRVSFS}
   do
   test "$f" || continue
   test -e $CDMNTPT/"$f" || continue
   cp $VERB -r $CDMNTPT/"$f" $WKGMNTPT/puppylivecdbuild/
   _sync
  done

umount /dev/$BURNERDRV 2>$ERR

kill $XPID
Xdialog --left --title "Puppy simple CD remaster" --msgbox "Creating the ${DISTRO_FILE_PREFIX}-$DISTRO_VERSION.sfs file in $WKGMNTPT/puppylivecdbuild/.
This can take quite a long time, so please wait.... and wait...
Note, no need to click the OK button, as this window will disappear
when ${DISTRO_FILE_PREFIX}-$DISTRO_VERSION.sfs is finally created.
Please wait..." 0 0 &
XPID=$!

#create new ${DISTRO_FILE_PREFIX}-xxx.sfs file...
DIRHOME=""
[ -d /home ] && DIRHOME="/home"
[ -d /sys ]  && DIRSYS="/sys"
[ -d /lost+found ] && DIRLOST="/lost+found"
rm $VERB -f ${WKGMNTPT}/puppylivecdbuild/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}*.sfs
_sync
#note, /${DISTRO_FILE_PREFIX}-$DISTRO_VERSION.sfs is not normally there, i relocated it to a separate tmpfs,
#however have not yet done that for multisession-cd/dvd (PUPMODE=77).
#note, /home could be in underdog linux...
#w482 shinobar: exclude /lib/modules/${KERNELVER}/initrd...
INITRDMODS=""
[ -d /lib/modules/${KERNELVER}/initrd ] && INITRDMODS="/lib/modules/${KERNELVER}/initrd" #v431
mksquashfs / $WKGMNTPT/puppylivecdbuild/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs -e /etc /proc /initrd /var /tmp /archive /mnt /root /puppylivecdbuild $DIRHOME $DIRSYS $DIRLOST /${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs ${INITRDMODS}
_sync

#add pristine folders (out of current ${DISTRO_FILE_PREFIX}_xxx.sfs)...
mksquashfs /initrd${PUP_LAYER}/proc $WKGMNTPT/puppylivecdbuild/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs -keep-as-directory
_sync
mksquashfs /initrd${PUP_LAYER}/tmp $WKGMNTPT/puppylivecdbuild/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs -keep-as-directory
_sync
mksquashfs /initrd${PUP_LAYER}/mnt $WKGMNTPT/puppylivecdbuild/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs -keep-as-directory
_sync

kill $XPID

#######START WORKING ON /root#######
rm $VERB -rf /tmp/root
#do some work on /root before add it to the squashfs...
cp $VERB -a /initrd${PUP_LAYER}/root /tmp/root #pristine /root

__old_copy_files(){
#copy all of my-applications/
cp $VERB -af /root/my-applications/* /tmp/root/my-applications/
#some dotpups get installed here...
cp $VERB -af /root/my-roxapps /tmp/root/ 2>$ERR
#window manager config files...
cp $VERB -af /root/.jwmrc      /tmp/root/
cp $VERB -af /root/.jwmrc-tray /tmp/root/ #v411
cp $VERB -af /root/.fvwm95rc   /tmp/root/
cp $VERB -af /root/.icewm/menu /tmp/root/.icewm/
#rox desktop settings...
cp $VERB -af /root/Choices/ROX-Filer/PuppyPin  /tmp/root/Choices/ROX-Filer/
cp $VERB -af /root/Choices/ROX-Filer/globicons /tmp/root/Choices/ROX-Filer/
#v411 tidy up, remove desktop drive icons...
grep -v '/root/.pup_event/drive_'  /tmp/root/Choices/ROX-Filer/PuppyPin >/tmp/remaster-PuppyPin
mv $VERB -f /tmp/remaster-PuppyPin /tmp/root/Choices/ROX-Filer/PuppyPin
#this may have been modified for a different w.m...
cp $VERB -af /root/.xinitrc /tmp/root/
#also this...
[ -f /root/.xset.sh ] && cp $VERB -af /root/.xset.sh /tmp/root/

#v411 gtk theme may have been changed...
cp $VERB -af /root/.gtkrc-2.0 /tmp/root/

#v411 jwm theme may have changed...
cp $VERB -af /root/.jwm/jwm_colors      /tmp/root/.jwm/
cp $VERB -af /root/.jwm/jwmrc-personal  /tmp/root/.jwm/
cp $VERB -af /root/.jwm/jwmrc-personal2 /tmp/root/.jwm/
cp $VERB -af /root/.jwm/jwmrc-theme     /tmp/root/.jwm/

#v411 pmount preferences...
cp $VERB -af /root/.pmountauto   /tmp/root/
cp $VERB -af /root/.pmountengine /tmp/root/
cp $VERB -af /root/.pmountquit   /tmp/root/
cp $VERB -af /root/.pmountsingle /tmp/root/
}
#TODO think need to do this for /var also...

while read f
do
test "$f" || continue

case $f in .adobe|.cache|.google-earth|.elinks|.macromedia|.mozilla|.opera|.PuppyBrowser) continue;;
.mail|Mail)           continue;;
My-Music|spot|fido)   continue;;
.Trash)               continue;;
.pup_event|.usb-log*) continue;;
.packages)            continue;;
.etc|.usr)            continue;;
.ayttm|.xchat*)       continue;;
esac

/bin/cp $VERB -af --remove-destination /root/"$f" /tmp/root/

done<<EoI
`ls -A /root/`
EoI

#.packages/ .files, copy any files installed to /root...
echo "" >/tmp/allpkgs.files
for ONEPKG in `ls -1 /root/.packages/*.files 2>$ERR`
do
 for ONEFILE in `cat $ONEPKG | grep '^/root/'`
 do
  if [ -d "$ONEFILE" ];then #w018
   mkdir $VERB -p /tmp"$ONEFILE"
  elif [ -f "$ONEFILE" ];then #w018
   DIRNAME=`dirname "$ONEFILE"`
   mkdir $VERB -p /tmp"$DIRNAME"
   cp $VERB -a -f "$ONEFILE" /tmp"$DIRNAME"/
  fi
 done
done

#w018...
#modify /root/.packages/ files, as all installed packages are now part of the new cd...
cp $VERB -a -f /root/.packages /tmp/root/
touch /root/.packages/user-installed-packages
cat /root/.packages/user-installed-packages >>/tmp/root/.packages/woof-installed-packages
sort -u /tmp/root/.packages/woof-installed-packages >/tmp/woof-installed-packages-tmp #v431
mv $VERB -f /tmp/woof-installed-packages-tmp /tmp/root/.packages/woof-installed-packages
echo "" >/tmp/root/.packages/user-installed-packages #v431

rox -x -d /tmp/root
rox -d /root & sleep 2
Xdialog --left --title "Puppy simple remaster CD" --msgbox "This program has created folder /tmp/root, which has everything that is now
going to be added as /root in the ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs file.
This is almost 'pristine', as obviously you do not want all your cache files,
temp files, email files, and other working/temporary files to be burnt onto
the CD. However, if you are familiar with the workings of Puppy, you might
like to take a look at /tmp/root right now, and possibly add anything that
you want from /root (or remove something!)
(if you think that this program has missed out something important that
 should be burnt into /root on the CD, please let me know -- Barry Kauler)

After examining /tmp/root,
click 'Ok' to add /root in ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs file..." 0 0

_ask_to_continue
_sync
mksquashfs /tmp/root $WKGMNTPT/puppylivecdbuild/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs -keep-as-directory
_sync
rm $VERB -rf /tmp/root
#######END WORKING ON /root#######

#######START WORKING ON /etc#######
rm $VERB -rf /tmp/etc
#do some work on /etc before add it to the .sfs...
cp $VERB -a /initrd${PUP_LAYER}/etc /tmp/etc #pristine /etc.

__old_copy_etc(){
#maybe this has been modified...
cp $VERB -af /etc/ld.so.conf /tmp/etc/
#firmware tarballs may install these scripts...
cp $VERB -af /etc/init.d/* /tmp/etc/init.d/   #3.99
cp $VERB -af /etc/eventmanager /tmp/etc/ #v411
#some files to always copy...
#cp $VERB -af /etc/Puppybackgroundcolor /tmp/etc/
cp $VERB -af /etc/Puppybackgroundpicture /tmp/etc/
#TODO: other gtk and jwm customisations.
}

while read f
do
test "$f" || continue
case $f in *asound.state|.XLOADED*|*fsckme*)       continue;;   # maker files
codepage|fontmap|keyboardtype|keymap|localtime|TZ) continue;;   # locale
mousebuttons|*mousedevice)             continue;;               # mouse
videomode|xextraoptions|xorgoverrides) continue;;               # video
eth[0-9]mode|modemdevice|network-wizard|resolv.conf) continue;; # net
cdburnerdevice|dvddevice)              continue;;               # cdrom
group|gshadow|passwd|shadow|sudoers)   continue;;               # security
esac

/bin/cp $VERB -af --remove-destination /root/"$f" /tmp/root/

done<<EoI
`ls -A /etc/`
EoI

#.packages/ .files, copy any files installed to /etc...
echo "" >/tmp/allpkgs.files
for ONEPKG in `ls -1 /root/.packages/*.files 2>$ERR`
do
 for ONEFILE in `cat $ONEPKG | grep '^/etc/'`
 do
  if [ -d "$ONEFILE" ];then #w018
   mkdir $VERB -p /tmp"$ONEFILE"
  elif [ -f "$ONEFILE" ];then #w018
   DIRNAME=`dirname "$ONEFILE"`
   mkdir $VERB -p /tmp"$DIRNAME"
   cp $VERB -a -f "$ONEFILE" /tmp"$DIRNAME"/
  fi
 done
done

rm $VERB -f  /tmp/etc/X11/xorg.conf
rm $VERB -rf /tmp/etc/X11/xorg.conf.d

_sync

rox -x -d /tmp/etc
rox -d /etc & sleep 2

  LOCALE0='codepage fontmap keyboardtype keymap localtime TZ'
   MOUSE0='mousebuttons mousedevice'
     NET0='eth0mode eth1mode modemdevice network-wizard resolv.conf'
   CDROM0='cdburnerdevice dvddevice'
  KERNEL0='modules modules.conf modprobe.conf modprobe.d'
 RCFILES0='securetelnetrc rdesktoprc windowmanager'
   VIDEO0='videomode xextraoptions X11/xorg.conf X11/xorg.conf.d'
SECURITY0='group gshadow passwd shadow sudoers'

MSG0="$LOCALE0
MOUSE0
CDROM0
NET0
KERNEL0
RCFILES0
VIDEO0
SECURITY0"
#what about settings for a particular pc?...
MSG1="Hardware customisation was not chosen."

Xdialog --left --title "Puppy simple remaster CD" --yesno "Have created the /etc directory for the new ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs file.
It is in a 'pristine' state, but you can choose to customise it.
Do you want to add customisations for your hardware? Examples are
mouse, keyboard, video. But, if you answer 'Yes' here, the live-CD
will be preconfigured for your PC only:
$MSG0

Therefore, it is best to answer 'No' if you want to boot the new live-CD on different PCs.
Click 'Yes' button to customise /etc...
Click 'No' button not to customise (recommended)..." 0 0
if [ $? -eq 0 ];then

 cp $VERB -af /etc/codepage     /tmp/etc/    # locale
 cp $VERB -af /etc/fontmap      /tmp/etc/
 cp $VERB -af /etc/keyboardtype /tmp/etc/
 cp $VERB -af /etc/keymap       /tmp/etc/
 rm -f /tmp/etc/localtime #a symlink
 cp $VERB -af /etc/localtime    /tmp/etc/
 cp $VERB -af /etc/TZ           /tmp/etc/

 cp $VERB -af /etc/mousebuttons /tmp/etc/   # mouse
 cp $VERB -af /etc/mousedevice  /tmp/etc/

 cp $VERB -af /etc/eth0mode       /tmp/etc/ # net
 cp $VERB -af /etc/eth1mode       /tmp/etc/
 cp $VERB -af /etc/resolv.conf    /tmp/etc/
 cp $VERB -af /etc/network-wizard /tmp/etc/
 cp $VERB -af /etc/modemdevice    /tmp/etc/

 cp $VERB -af /etc/cdburnerdevice /tmp/etc/ # cdrom
 cp $VERB -af /etc/dvddevice      /tmp/etc/

 cp $VERB -af /etc/modules        /tmp/etc
 cp $VERB -af /etc/modules.conf   /tmp/etc/ # kernel
 cp $VERB -af /etc/modprobe.conf  /tmp/etc/
 cp $VERB -af /etc/modprobe.d     /tmp/etc/

 cp $VERB -af /etc/securetelnetrc /tmp/etc/ # rc files
 cp $VERB -af /etc/rdesktoprc     /tmp/etc/
 cp $VERB -af /etc/windowmanager* /tmp/etc/

 cp $VERB -af /etc/videomode       /tmp/etc/ # video
 cp $VERB -af /etc/xextraoptions   /tmp/etc/
 cp $VERB -af /etc/X11/xorg.conf   /tmp/etc/X11
 cp $VERB -af /etc/X11/xorg.conf.d /tmp/etc/X11

 for f in $SECURITY0     # security
 do
 test "$f" || continue
 test -e /etc/"$f" || continue
 cp $VERB -af /etc/"$f" /tmp/etc/
 SECUTITY="${SECURITY}$f "
 done

 MSG1="These files are copied customised in /etc:
$LOCALE
$MOUSE
$CDROM
$NET
$KERNEL
$RCFILES
$VIDEO
$SECURITY"
fi

Xdialog --left --title "Puppy simple remaster CD" --msgbox "$MSG1

If you know what you are doing, you can now modify any files in /tmp/etc
folder. This is just about to be added to /etc in the .sfs file.
Do anything you want before clicking 'Ok'.
(If this program has missed something important, let me know -- Barry Kauler)

Click 'Ok' to add /etc in ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs file..." 0 0

_sync
mksquashfs /tmp/etc $WKGMNTPT/puppylivecdbuild/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs -keep-as-directory
_sync
rm $VERB -rf /tmp/etc
#######END WORKING ON /etc#######

#######START WORKING ON /var#######
rm $VERB -rf /tmp/var
cp $VERB -a /initrd${PUP_LAYER}/var /tmp/var #pristine var

#.packages/ .files, copy any files installed to /var...
echo "" >/tmp/allpkgs.files
for ONEPKG in `ls -1 /root/.packages/*.files 2>$ERR`
do
 for ONEFILE in `cat $ONEPKG | grep '^/var/'`
 do
  if [ -d "$ONEFILE" ];then #w018
   mkdir $VERB -p /tmp"$ONEFILE"
  elif [ -f "$ONEFILE" ];then #w018
   DIRNAME="`dirname "$ONEFILE"`"
   mkdir $VERB -p /tmp"$DIRNAME"
   cp $VERB -a -f "$ONEFILE" /tmp"$DIRNAME"/
  fi
 done
done
_sync

_sync
mksquashfs /tmp/var $WKGMNTPT/puppylivecdbuild/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.sfs -keep-as-directory
_sync
rm $VERB -rf /tmp/var
#######END WORKING ON /var#######


#edit isolinux.cfg...
ISOLINUXCFG="`cat $WKGMNTPT/puppylivecdbuild/isolinux.cfg`"
#small tweaks, like acpi=on, ide=nodma...
Xdialog --wrap --left --title "Puppy simple remaster CD" --yesno "Almost ready to burn the CD!
All the files that will be burnt to CD are in $WKGMNTPT/puppylivecdbuild/.

The thing that you may want to do is edit isolinux.cfg. It has this:
$ISOLINUXCFG

'pmedia' parameter is a hint to Puppy what media you are booting Puppy from.
'pmedia=cd' means any CD/DVD drive. Other options are:
 usbflash usbhd usbcd ataflash atahd atacd atazip scsihd scsicd
 (where 'ata' means either IDE or SATA interface, i.e. an internal drive)

'pkeys' is the default keyboard layout. Example: 'pkeys=us'  Choices are:
 be br cf de dk es fi fr gr hu it jp no pl ru se uk us
If you need more choices, the Keyboard Wizard has more, after bootup.

You may also add any kernel parameters. Some PCs require 'acpi=off' to boot properly.

(If answer 'Yes', an editor will appear, must exit
 editor before this program will continue)
Click 'Yes' button to edit isolinux.cfg..." 0 0
if [ $? -eq 0 ];then
 #leafpad $WKGMNTPT/puppylivecdbuild/isolinux.cfg
 #gtk-shell -t "$WKGMNTPT/puppylivecdbuild/isolinux.cfg" -ef "$WKGMNTPT/puppylivecdbuild/isolinux.cfg"
 #sync
 defaulttexteditor $WKGMNTPT/puppylivecdbuild/isolinux.cfg
fi
_sync

Xdialog --left --title "Puppy simple remaster CD" --msgbox "Almost ready to burn the CD!
All the files that will be burnt to CD are in $WKGMNTPT/puppylivecdbuild/.

If you want to add any more files, say extra SFS files, or to edit or modify the
files in any way, do it now. Note, if you add an extra SFS file, say 'devx_555.sfs'
then it will be available for use when you boot the new live-CD.

If you want to make any changes, use ROX-Filer to open $WKGMNTPT/puppylivecdbuild/
and do so now, before clicking the OK button." 0 0
_sync

#build new iso file, or direct burn to cd...
#to save space, burn direct from $WKGMNTPT/puppylivecdbuild/ to cd...
Xdialog --wrap --left --title "Puppy simple remaster CD" --yesno "All the files that will be burnt to CD/DVD are in $WKGMNTPT/puppylivecdbuild/.

As the working partition may have limited space (for example, you are using a USB pen drive), these files are burnt direct to CD/DVD, rather than create an intermediary iso file. If you do need an iso file, you can copy it from the CD afterward (dd if=/dev/$BURNERDRV of=puppy.iso seek=0 bs=32k).

However, if you just want to create an iso file now and not burn to CD/DVD, click the 'No' button.

Click 'No' button (or close-box on window) to quit program at this point (leaving  $WKGMNTPT/puppylivecdbuild/ files in existence), and further option to create an iso file...
Click 'Yes' button to burn to CD/DVD..." 0 0

if [ ! $? -eq 0 ];then
 Xdialog --wrap --left --title "Puppy simple remaster CD" --yesno "Click 'Yes' button to create a 'custom-puppy-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso' in ${WKGMNTPT}/ (assuming that there is 100MB-200MB free space)...
Click 'No' button (or close-box on window) to quit program at this point (leaving  ${WKGMNTPT}/puppylivecdbuild/ files in existence)..." 0 0
 if [ $? -eq 0 ];then
  #cd $WKGMNTPT
  rxvt -bg orange -title "Puppy simple remaster CD" -e mkisofs -D -R -o $WKGMNTPT/custom-puppy-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table $WKGMNTPT/puppylivecdbuild/
 fi
 _sync
 Xdialog --wrap --left --title "Puppy simple remaster CD" --msgbox "$WKGMNTPT/custom-puppy-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso created.
$WKGMNTPT/puppylivecdbuild/ files left in existence.
Click 'Ok' button to quit..." 0 0
 exit
fi

if [ "`echo "$BURNERDRV" | grep 'hd'`" ]; then
 DEVDEV="ATAPI:/dev/$BURNERDRV"
else
 DEVDEV="/dev/$BURNERDRV"
fi

#now for the actual burn...
CDCHOICE="`Xdialog --wrap --left --stdout --title \"Puppy simple remaster CD\" --menubox \"Please choose the media to burn to.
The burner drive is /dev/$BURNERDRV, and obviously it must be able to burn a DVD if you want to burn a DVD!

Note, you can later use the 'dd' program to create an iso file:
 # dd if=/dev/$BURNERDRV of=puppy.iso seek=0 bs=32k

PLEASE INSERT THE NEW CD OR DVD RIGHT NOW, THEN CHOOSE FROM MENU...\" 0 0 4 CD-R \"New blank recordable CD\" DVD-R \"New blank DVD-R (not +R, -RW, +RW)\"`"

echo '#!/bin/ash' >/tmp/new2cd.sh
if [ "`echo "$CDCHOICE" | grep 'DVD'`" = "" ];then
 #burn to CD...
 echo "mkisofs -D -R -quiet -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table $WKGMNTPT/puppylivecdbuild/ | cdrecord -multi -tao -pad -data -v speed=4 gracetime=2 dev=$DEVDEV  -" >>/tmp/new2cd.sh
else
 echo "growisofs -speed=4 -Z /dev/$BURNERDRV -R -D -quiet -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table $WKGMNTPT/puppylivecdbuild/" >>/tmp/new2cd.sh
fi
echo 'echo "Finished. Press ENTER key to continue: "' >>/tmp/new2cd.sh
echo 'read nippi'  >>/tmp/new2cd.sh
chmod $VERB 755 /tmp/new2cd.sh
rxvt -bg orange -title "Puppy simple remaster CD" -e /tmp/new2cd.sh

_sync
rm $VERB -rf /puppylivecdbuild
rm $VERB -rf $WKGMNTPT/puppylivecdbuild
_sync
umount /dev/$WKGPART

eject /dev/$BURNERDRV

Xdialog --wrap --left --title "Puppy simple remaster CD" --msgbox "You should now have a new custom Puppy live-CD!

WARNING:
There is a tricky situation here, as all the installed packages (plus anything else that you may have installed, such as loaded .sfs extension files, have all been burnt to CD/DVD).
But, they are still installed in the current ${DISTRO_FILE_PREFIX}save.2fs, the Puppy persistent storage file (where all your stuff gets saved, so it is there next time Puppy is booted). All those files are duplicated, but will that do any harm if you boot the new CD? ...should be okay, but I recommend that you uninstall as much as possible right now, before booting the new CD. Note, do not uninstall them after booting the new CD as that will also 'delete' the packages burnt onto the CD.

Or, easiest and cleanest option, boot Puppy with 'pfix=ram' boot parameter then at shutdown create a brand new '${DISTRO_FILE_PREFIX}save' file. In fact, this is the wisest thing to do regardless, as you don't even know if the custom CD is going to work properly -- so it is best to bootup in ram only to find out!" 0 0


####THE END######
