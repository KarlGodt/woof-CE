#!/bin/sh
#(c) Copyright Barry Kauler Oct. 2011, http://bkhome.org
#License: Oct. 2011, GPL3 (refer /usr/share/doc/legal)
#A GUI when start desktop first time, to replace the text-mode dialogs (locale, keyboard-layout, timezone)
#inspired by shinobar's countrywizard.qs (firstrun), but a complete rewrite.
#replaces the old single-purpose scripts: chooselocale timezone-set (now symlinks)
#propose first startup, run 'quickcountry, which is symlink.
#111019 first version.
#1110120 call shinobar's 'keymap-set' script. FLAG_CHANGED improved.
#111020 'countrywizard', 'xrandrshell' now symlinks to 'quicksetup'.
#111022 even though LANG=en_US.UTF-8, localedef still creates /usr/lib/locale/en_US.utf8. use UTF8=.utf8
#111025 thanks to thunor, fix for window dimensions.
#111026 added button for dead mouse.
#111027 fix Xorg.0.log records 'intel' driver loading twice.
#111027 tweaked text messages very slightly.
#111027 first boot, /etc/localtime does not exist, so must set timezone.
#111103 other entries in Etc dir.
#111107 changed 'comboboxtext' to 'combobox' tag, but does not support 'default' tag.
#111111 revert to 'comboboxtext' due to heavy cpu usage, but not 'default' -- do not get the double-popup problem.
#111113 upgraded gtk to 2.24.8, fixed slowness. go back to 'combobox'.
#111113 fix timezone-set cli app.

[ "`whoami`" != "root" ] && exec sudo -A ${0} ${@}

export TEXTDOMAIN=quicksetup
export OUTPUT_CHARSET=UTF-8

. /etc/DISTRO_SPECS
. /etc/rc.d/PUPSTATE
. /etc/rc.d/BOOTCONFIG
. /etc/clock

PARAM1=""
[ $1 ] && PARAM1="$1"
GTKDIALOGEXE="gtkdialog"
[ "`which gtkdialog4`" ] && GTKDIALOGEXE="gtkdialog4"
TABCHAR="`echo -n -e '\t'`"

[ "$PARAM1" = "composeonly" ] && unset DISPLAY
[ "$PARAM1" = "cli" ] && unset DISPLAY

MYBASE=$(basename $0)
WINICON="gtk-preferences"; HELPICON="gtk-index" #gtk-info
SET_LOCALE=""; SET_TIMEZONE=""; SET_KEYBOARD=""; SET_X=""; SET_COUNTRY=""; SET_XRES=""; SET_XWIZARD=""
SET_WINTITLE="1"; SET_COUNTRYFRAMETITLE="1"; SET_XFRAMETITLE="1"; SET_BACKTITLE="1"
#[ "$DISTRO_XORG_AUTO" = "yes" ] && SET_XRES="yes"
#specific-purpose utilities...
case $MYBASE in
 chooselocale) SET_WINTITLE="2"; SET_COUNTRYFRAMETITLE="2"; SET_LOCALE="yes"; SET_BACKTITLE="2" ;;
 timezone-set) SET_WINTITLE="3"; SET_COUNTRYFRAMETITLE="3"; SET_TIMEZONE="yes"; SET_BACKTITLE="3" ;;
 quickcountry) SET_WINTITLE="4"; SET_LOCALE="yes"; SET_TIMEZONE="yes"; SET_KEYBOARD="yes"; SET_BACKTITLE="4" ;;
 countrywizard) SET_WINTITLE="5"; SET_LOCALE="yes"; SET_TIMEZONE="yes"; SET_KEYBOARD="yes"; SET_BACKTITLE="5" ;;
 xrandrshell) SET_WINTITLE="6"; SET_XRES="yes"; SET_BACKTITLE="6"; SET_XFRAMETITLE="6" ;;
 *) SET_LOCALE="yes"; SET_TIMEZONE="yes"; SET_KEYBOARD="yes"; SET_XRES="yes"; SET_XWIZARD="yes" ;;
esac
[ "$SET_LOCALE" -o "$SET_TIMEZONE" -o "$SET_KEYBOARD" ] && SET_COUNTRY="yes"
[ "$SET_XRES" -o "$SET_XWIZARD" ] && SET_X="yes"
case $SET_WINTITLE in
 1) WINTITLE=$(gettext "Quick Setup") ;;
 2) WINTITLE=$(gettext "Choose Locale") ;;
 3) WINTITLE=$(gettext "Choose Timezone") ;;
 4) WINTITLE=$(gettext "Quick Country Setup") ;;
 5) WINTITLE=$(gettext "Country Wizard") ;;
 6) WINTITLE=$(gettext "Change Resolution") ;;
esac
case $SET_COUNTRYFRAMETITLE in
 1) COUNTRYFRAMETITLE=$(gettext 'Country Settings') ;;
 2) COUNTRYFRAMETITLE=$(gettext 'Language and Country') ;;
 3) COUNTRYFRAMETITLE=$(gettext 'Timezone') ;;
esac
case $SET_XFRAMETITLE in
 1) XFRAMETITLE=$(gettext 'Video Settings') ;;
 6) XFRAMETITLE=$(gettext 'Screen Resolution') ;;
esac
case $SET_BACKTITLE in
 1) BACKTITLE=$(gettext 'Welcome! Please set these to suit yourself, then click <b>OK</b>') ;;
 2) BACKTITLE=$(gettext 'Set font, money and language for your location') ;;
 3) BACKTITLE=$(gettext 'Set time and date for your location') ;;
 4) BACKTITLE=$(gettext 'Welcome! Please set these to suit your country and language') ;;
 5) BACKTITLE=$(gettext 'Please set these to suit your country and language') ;;
 6) BACKTITLE=$(gettext 'These are available resolutions that the <b>xrandr</b> utility can change the screen to. Please choose the one that you would like to test.') ;;
esac

XPID=0
if [ $DISPLAY ];then
 if [ "$PARAM1" != "nosplash" ];then
  WELCOMEMSG=$(printf "$(gettext 'Welcome to %s!')" "$DISTRO_NAME $DISTRO_VERSION")
  yaf-splash -bg orange -fg black -placement center -close never -fontsize large -icon /usr/share/doc/puppylogo96.png -text "$WELCOMEMSG" &
  XPID=$!
 fi
fi

M_close="`gettext 'Close'`"

###Country localization###
if [ "$SET_COUNTRY" ];then

 ###Choose locale###
 LOCALEXML=""
 if [ "$SET_LOCALE" ];then
  H_l1="`gettext 'Help: Locale'`"
  H_l2="`gettext 'The locale setting provides money, date and font localization for your country.

The format is, for example, <b>en_US</b> where <b>en</b> designates the language and <b>US</b> designates the country in which it is spoken and written.

<b>Technical</b>
The chosen locale file is generated in /usr/lib/locale (if not already) and LANG variable set in /etc/profile.'`"
  export DLG_HELP_LOCALE="<window resizable=\"false\" title=\"${H_l1}\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${H_l2}\"</label><variable>VAR_HELP_LOCALE</variable></text><hbox><button><label>${M_close}</label><action type=\"closewindow\">VAR_HELP_LOCALE</action></button></hbox></vbox></window>"
  
  H_u1="`gettext 'Help: UTF-8'`"
  H_u2="`gettext 'UTF-8 is a Unicode standard in which international characters are represented in 8, 16 or more bits, and plain ASCII (8th bit = 0) text files are valid UTF-8 encoding. UTF-8 has become the defacto standard in Linux. The reason is, basically, that UTF-8 encoded files can be used anywhere in the world and do not need a particular <b>character set</b> translation.

<b>Note 1:</b> Many Puppy Linux users do not use UTF-8 as there is a slight speed penalty running applications -- all English users are ok running without UTF-8.
     
<b>Note 2:</b> Non-unicode rendering is achieved by 8-bit character sets, such as ISO-8859-1 for normal Latin1 English, or ISO-8859-2 for Eastern European Latin2 languages.

Basically, if your language is not a <b>Latin</b> derivative, such as all Asian languages, then you will need UTF-8.'`"
  export DLG_HELP_UTF8="<window resizable=\"false\" title=\"${H_u1}\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${H_u2}\"</label><variable>VAR_HELP_UTF8</variable></text><hbox><button><label>${M_close}</label><action type=\"closewindow\">VAR_HELP_UTF8</action></button></hbox></vbox></window>"

  CURRLANG="`grep '^LANG=' /etc/profile | tr -d "'" | tr -d '"' | cut -f 2 -d '='`" #111022
  [ ! "$CURRLANG" ] && CURRLANG="en_US" #precaution
  UTF8=''
  if [ "`echo -n "$CURRLANG" | grep 'utf8'`" != "" ];then #111022 get rid of old name.
   rm -rf /usr/lib/locale/$CURRLANG
   UTF8='.UTF-8'
  fi
  [ "`echo -n "$CURRLANG" | grep 'UTF\-8'`" != "" ] && UTF8='.UTF-8'
  BASELANG="`basename $CURRLANG .utf8`"
  BASELANG="`basename $BASELANG .UTF-8`"
  #does the locale need to have UTF-8 enabled?...
  UTF_FLAG="no"
  grep -q "^${BASELANG}[_. ].*ISO-8859-" /usr/share/i18n/SUPPORTED
  [ $? -ne 0 ] && UTF_FLAG="yes" #actually, alternate code below to determine this.
 
  if [ "$PARAM1" != "composeonly" ];then #param passed to chooselocale by 3builddistro in Woof.
   #want to default to utf8, but localedef crash problem in 64MB PC...
   if [ "$UTF8" = "" ];then
    [ ! -d /usr/lib/locale/en_US ] && localedef -f ISO-8859-1 -i en_US --no-archive en_US >/dev/null
   else
    #warning: free output varies different versions of busybox (also early version do not accept params)...
    RAMK=`free | tr -s ' ' | grep -o 'Mem:.*' | cut -f 2 -d ' '`
    if [ $RAMK -gt 100000 ];then
     #111022 no, i seem to have been lead up the garden path, the dir must remain as 'en_US.utf8'...
     #[ -d /usr/lib/locale/en_US.utf8 ] && rm -rf /usr/lib/locale/en_US.utf8
     [ ! -d /usr/lib/locale/en_US.utf8 ] && localedef -f UTF-8 -i en_US --no-archive en_US.utf8 >/dev/null #110409 111022
    else
     [ ! -d /usr/lib/locale/en_US ] && localedef -f ISO-8859-1 -i en_US --no-archive en_US >/dev/null
     UTF8=''
    fi
   fi
  fi

  #build language table...
  LANGUAGEDESCR='aa:Afar ab:Abkhazian af:Africaans am:Amharic an:Aragonese ar:Arabic az:Azeri be:Belarusian bn:Bengali bs:Bosnian bg:Bulgarian br:Breton ca:Catalan cs:Czech cy:Welsh da:Danish de:German dv:Divehi dz:Dzongkha el:Greek en:English eo:Esperanto es:Spanish et:Estonian eu:Basque fa:Persian fo:Faeroese fi:Finnish fr:French ga:Irish gd:Scots_Gaelic gl:Galician gv:Manx_Gaelic gu:Gujarati he:Hebrew hi:Hindi hr:Croatian hu:Hungarian hy:Armenian is:Icelandic id:Indonesian iw:Hebrew it:Italian ja:Japanese ka:Georgian kl:Greenlandic kn:Kannada kk:Kazakh km:Khmer kok:Konkani ko:Korean ku:Kurdish kw:Cornish ky:Kyrgyz lg:Luganda lo:Lao lt:Lithuanian lv:Latvian mg:Malagasy ms:Malay ml:Malayalam mt:Maltese mi:Maori mk:Macedonian mn:Mongolian mr:Marathi ne:Nepali nl:Dutch nb:Norgwegian nn:Norwegian_Nynorsk no:Norwegian_Bokm oc:Occitan om:Oromo or:Oriya pa:Pashto pl:Polish pt:Portuguese pa:Punjabi quz:Quechua ro:Romania rs:Serbian ru:Russian rw:Kinyarwanda smn:Sami smj:Sami se:Sami sa:Sanskrit sma:Sami sms:Sami sq:Albanian sr:Srpski sl:Slovenian sw:Swahili sv:Swedish syr:Syriac ta:Tamil th:Thai tl:Tagalog tt:Tatar te:Telugu tr:Turkish uk:Ukrainian ur:Urdu uz:Uzbek vi:Vietnamese wa:Walloon xh:Xhosa yi:Yiddish zh:Chinese zu:Zulu'
  REGIONDESCR='AA:ArabicCountries AE:UAE AL:Yugoslavia AR:Argentina AT:Austria AU:Australia BE:Belgium BG:Bularia BH:Bahrain BN:Brunei BO:Bolvia BR:Brazil BZ:Belize CA:Canada CH:Switzerland CL:Chile CN:PeoplesRepublicChina CO:Columbia CR:CostaRica CY:Cyprus CZ:CzechRepublic DE:Germany DK:Denmark DO:DominicanRepublic EC:Ecuador EE:Estonia ES:Spain DO:Dominican DZ:Algeria EC:Ecuador EG:Egypt FI:Finland FR:France GB:GreatBritain GR:Greece GT:Guatemalia HK:HongKong HN:Honduras HR:Croatia HU:Hungary ID:Indonesia IE:Ireland IL:Israel IN:India IQ:Iraq IS:Iceland IT:Italy JM:Jamaica JO:Jordan JP:Japan KR:Korea KW:Kuwait KZ:Kazakhstan LB:Lebanon LI:Liechtenstein LU:Luxembourg LY:Libya MA:Morocco MC:Monaco MK:Macedonia MO:Macau MY:Malaysia MX:Mexico NI:Nicaragua NL:Netherlands NO:Norway NZ:NewZealand OM:Oman PA:Panama PE:Peru PH:Philippines PL:Poland PR:PuertoRico PT:Portugal PY:Paraguay QA:Qatar RO:Romania RU:Russia SA:SaudiArabia SE:Sweden SG:Singapore SK:Slovakia SY:Syria TH:Thailand TN:Tunisia TR:Turkey TW:Taiwan ZA:SouthAfrica TT:Trinidad US:USA PE:Peru SV:ElSalvador MX:Mexico NI:Nicaragua UY:Uruguay VE:Venezuela YE:Yemen YU:Yugoslavia ZA:SouthAfrica'
  #need sanity check, as format of these files has changed...
  SANITYFLAG='pass'
  [ ! -f /usr/share/i18n/dialog_table_x ] && SANITYFLAG='fail' #111113 precaution.
  [ -s /usr/share/i18n/dialog_table_cli ] && [ `cat /usr/share/i18n/dialog_table_cli | wc -l` -le 1 ] && SANITYFLAG='fail'
  [ -s /usr/share/i18n/dialog_table_x ] && [ `cat /usr/share/i18n/dialog_table_x | wc -l` -le 1 ] && SANITYFLAG='fail'
  if [ "$PARAM1" = "composeonly" -o "$SANITYFLAG" = "fail" ];then
   CHOICES_CLI=""; ON=""; OFF=""; XPID=""; CHOICES_X=""
   for ONELOCALE in `ls -1 /usr/share/i18n/locales | grep -v -E 'i18n|iso|translit|POSIX'`
   do
    STATUS="off"
    [ "$ONELOCALE" = "$BASELANG" ] && STATUS="on"
    LANGUAGE="`echo -n "$ONELOCALE" | cut -f 1 -d '_'`"
    REGION="`echo -n "$ONELOCALE" | cut -f 2 -d '_' | cut -f 1 -d '.' | cut -f 1 -d '@'`"
    lPATTERN="^${LANGUAGE}:"
    LANGUAGE="`echo "$LANGUAGEDESCR" | tr ' ' '\n' | grep "$lPATTERN" | head -n 1 | cut -f 2 -d ':'`"
    rPATTERN="^${REGION}:"
    REGION="`echo "$REGIONDESCR" | tr ' ' '\n' | grep "$rPATTERN" | head -n 1 | cut -f 2 -d ':'`"
    [ "$LANGUAGE" != "" ] && [ "$REGION" != "" ] && LANGUAGE="${LANGUAGE}, "
    DESCR="${LANGUAGE}${REGION}"
    if [ "$STATUS" = "on" ];then
     if [ "$CHOICES_X" = "" ];then #111113
      CHOICES_X="$ONELOCALE \"${DESCR}\" on"
     else
      CHOICES_X="$CHOICES_X
$ONELOCALE \"${DESCR}\" on"
     fi
     FIRSTLINE_CLI="$ONELOCALE \"${DESCR}\" "
    else
     if [ "$CHOICES_X" = "" ];then #111113
      CHOICES_X="$ONELOCALE \"${DESCR}\" off"
     else
      CHOICES_X="$CHOICES_X
$ONELOCALE \"${DESCR}\" off"
     fi
     if [ "$CHOICES_CLI" = "" ];then
      CHOICES_CLI="$ONELOCALE \"${DESCR}\" "
     else
      CHOICES_CLI="$CHOICES_CLI
$ONELOCALE \"${DESCR}\" "
     fi
    fi
   done
   echo "$CHOICES_X" > /usr/share/i18n/dialog_table_x
   CHOICES_CLI="${FIRSTLINE_CLI}
${CHOICES_CLI}"
   echo "$CHOICES_CLI" > /usr/share/i18n/dialog_table_cli
   [ "$PARAM1" = "composeonly" ] && exit
  fi

  #tables already exist, but may need to reselect 'on' item...
  onPTN="s%^${BASELANG} \"(.*)\" off$%${BASELANG} \"\1\" on%"
  sed -i -e 's% on$% off%' -r -e "$onPTN" /usr/share/i18n/dialog_table_x
  
  DEFAULTXML=""
  DEFAULT="`grep ' on$' /usr/share/i18n/dialog_table_x | sed -e 's% on$%%' -e 's%"%%g' -e "s% %  ${TABCHAR}%"`" #'geany
  #[ "$DEFAULT" ] && DEFAULTXML="<default>${DEFAULT}</default>"
  [ "$DEFAULT" ] && DEFAULTXML="<item>${DEFAULT}</item>" #111107 combobox does not support default tag.
  ITEMS="`sed -e 's% on$%%' -e 's% off$%%' -e 's%"%%g' -e "s% %  ${TABCHAR}%" -e 's%^%<item>%' -e 's%$%</item>%' /usr/share/i18n/dialog_table_x`" #'geany
  
  DEFAULT_UTF8='false'
  [ "$UTF8" ] && DEFAULT_UTF8='true'
  TT_utf8=$(gettext 'Tick checkbox to support UTF-8 encoding')
  T_utf8=$(gettext 'UTF-8 encoding')
  CHECKUTF8XML="<hbox><checkbox tooltip-text=\"${TT_utf8}\"><label>${T_utf8}</label>
<variable>CHECK_UTF8</variable><default>${DEFAULT_UTF8}</default></checkbox>
  <button>
   <input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input>
   <action type=\"launch\">DLG_HELP_UTF8</action>
  </button>
</hbox>"
 
  TT_locale=$(gettext "Choose main language")
  TT_mainlanguage=$(gettext "Main Language")
  LOCALEXML="
  <hbox>
   <pixmap tooltip-text=\"${TT_mainlanguage}\" icon_size=\"3\" ><input file>/usr/local/lib/X11/mini-icons/mini-font.xpm</input></pixmap>
   <combobox tooltip-text=\"${TT_locale}\" width-request=\"202\">
    ${DEFAULTXML}
    ${ITEMS}
    <variable>COMBO_LOCALE</variable>
   </combobox>
   <button>
    <input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input>
    <action type=\"launch\">DLG_HELP_LOCALE</action>
   </button>
  </hbox>
  ${CHECKUTF8XML}"
 fi #end SET_LOCALE

 ###Choose timezone###
 TIMEZONEXML=""
 if [ "$SET_TIMEZONE" ];then
 
  H_t1="`gettext 'Help: Time Zone'`"
  H_t2="`gettext 'This needs to be set to ensure that Puppy knows the correct time and date.
If you cannot find an entry for your location, choose one of the <b>GMT</b> entries. Finding the correct entry is best, as it automatically applies DST (Daylight Saving Time), whereas the GMT entries are fixed offsets from the GMT (UTC) reference.

<b>Technical</b>
After making a choice, /etc/localtime will point to the appropriate timezone file in /usr/share/zoneinfo. However, note that the GMT files (in /usr/share/zoneinfo/Etc) actually have the opposite sign from the GMT entry that you have chosen -- this is just a technical detail, it does not affect the user in any way.'`"
  export DLG_HELP_TIMEZONE="<window resizable=\"false\" title=\"${H_t1}\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${H_t2}\"</label><variable>VAR_HELP_TIMEZONE</variable></text><hbox><button><label>${M_close}</label><action type=\"closewindow\">VAR_HELP_TIMEZONE</action></button></hbox></vbox></window>"
  
  H_utc1="`gettext 'Help: UTC'`"
  H_utc2="`gettext 'All computers have a hardware clock that runs continuously from a battery, even when the computer is turned off. This clock can be set either to the local time or to UTC.

<b>UTC/GMT</b>
UTC is Coordinated Universal Time, which is basically the same as GMT, Greenwich Mean Time. The latter is the time at the Royal Observatory in Greenwich, London -- this is a time that does not have daylight saving or summer time as does the rest of the UK. It is said to simplify things if the computer hardware clock is set to UTC.

<b>Local time</b>
By default, Puppy Linux assumes that the hardware clock is set to local time, as this is what MS DOS and Windows systems normally use. If you were to change the hardware clock to UTC, you would also have to ensure that all operating systems recognise that, else they will show the wrong time/date.'`"
  export DLG_HELP_UTC="<window resizable=\"false\" title=\"${H_utc1}\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${H_utc2}\"</label><variable>VAR_HELP_UTC</variable></text><hbox><button><label>${M_close}</label><action type=\"closewindow\">VAR_HELP_UTC</action></button></hbox></vbox></window>"

  if [ -e /etc/localtime ];then
   CZONE="`readlink /etc/localtime 2>/dev/null`"
   [ "$CZONE" = "" ] && rm -f /etc/localtime
  fi
  if [ -e /etc/localtime ];then
   CZONE="`readlink /etc/localtime`"
   DEF_TIMEZONE="`readlink /etc/localtime | sed -e 's%/usr/share/zoneinfo/%%'`"
  else
   CZONE='/usr/share/zoneinfo/Australia/Perth'
   DEF_TIMEZONE='Australia/Perth'
  fi
  if [ "`echo -n "$DEF_TIMEZONE" | grep 'GMT' | grep '\+'`" = "" ];then #fix sign.
   DEF_TIMEZONE="`echo -n "$DEF_TIMEZONE" | sed -e 's%Etc/%%' | tr "\-" "\+"`"
  else
   DEF_TIMEZONE="`echo -n "$DEF_TIMEZONE" | sed -e 's%Etc/%%' | tr "\+" "\-"`"
  fi
  xDEF_TIMEZONE="`echo -n "$DEF_TIMEZONE" | sed 's%GMT%GMT\\\\%'`"  #the sign needs a \ in front. ex: GMT\+8
  #note, screen out UTC timezone, causes confusion... 111103 screen more...
  ZONEINFO="`find /usr/share/zoneinfo -type f | grep -v '\.tab$' | grep -v -E 'UTC|Greenwich|UCT|Universal|Zulu' | sed -e 's%/usr/share/zoneinfo/%%' | sed -e 's%Etc/%%' | tr ' ' '_' | sort | tr '\n' ' '`"
  if [ ! -f /var/local/quicksetup-timezone-table-x -o ! -f /var/local/quicksetup-timezone-table-cli ];then  
   echo -n "" > /var/local/quicksetup-timezone-table-x
   echo -n "" > /var/local/quicksetup-timezone-table-cli
   ZONECHOICES_CLI=""
   for ONEZONE in $ZONEINFO
   do
    ONEDESCR="."
    [ "$ONEZONE" = "GMT" ] && continue
    [ "$ONEZONE" = "GMT-0" ] && continue
    case $ONEZONE in
     GMT+0)     ONEDESCR='(London, Dublin, Edinburgh, Lisbon, Reykjavik, Casablanca)';;
     GMT-1)     ONEDESCR='(Azores, Cape Verdes)';;
     GMT+1)     ONEDESCR='(Paris, Berlin, Amsterdam, Brussels, Madrid, Stockholm Oslo)';;
     GMT-2)     ONEDESCR='(mid-Atlantic)';;
     GMT+2)     ONEDESCR='(Athens, Helsinki, Istanbul, Jerusalem, Harare)';;
     GMT-3)     ONEDESCR='(Brasilia, Buenos Aires, Georgetown)';;
     GMT+3)     ONEDESCR='(Kuwait, Nairobi, Riyadh, Moscow)';;
     GMT-4)     ONEDESCR='(Caracas, La Paz, Canada)';;
     GMT+4)     ONEDESCR='(Abu Dhabi, Muscat, Tblisi, Volgograd, Kabul)';;
     GMT-5)     ONEDESCR='(Bogota, Lima, New York)';;
     GMT+5)     ONEDESCR='(Islamabad, Karachi)';;
     GMT+5:30)  ONEDESCR='(India)';;
     GMT-6)     ONEDESCR='(Mexico City, Saskatchewan)';;
     GMT+6)     ONEDESCR='(Almaty, Dhaka)';;
     GMT+6:30)  ONEDESCR='(Cocos Islands)';;
     GMT-7)     ONEDESCR='(Alberta, Montana, Arizona)';;
     GMT+7)     ONEDESCR='(Bangkok, Jakarta)';;
     GMT-8)     ONEDESCR='(Los Angeles)';;
     GMT+8)     ONEDESCR='(Perth, Singapore, Hongkong)';;
     GMT-9)     ONEDESCR='(Alaska)';;
     GMT+9)     ONEDESCR='(Tokyo)';;
     GMT+9:30)  ONEDESCR='(Darwin, Adelaide)';;
     GMT-10)    ONEDESCR='(Alaska, Hawaii)';;
     GMT+10)    ONEDESCR='(Guam)';;
     GMT+10:30) ONEDESCR='(Lord Howe Island)';;
     GMT-11)    ONEDESCR='(Samoa)';;
     GMT+11)    ONEDESCR='(Magadan, Soloman Is.)';;
     GMT-12)    ONEDESCR='(Eniwetok)';;
     GMT+12)    ONEDESCR='(Wellington, Fiji, Marshall Islands)';;
     GMT+13)    ONEDESCR='(Rawaki Islands)';;
     GMT+14)    ONEDESCR='(Line Islands)';;
    esac
    #ZONECHOICES_CLI="${ZONECHOICES_CLI}${ONEZONE} \"${ONEDESCR}\" "
    echo -n "${ONEZONE} \"${ONEDESCR}\" " >> /var/local/quicksetup-timezone-table-cli #111113
    if [ "$DEF_TIMEZONE" = "${ONEZONE}" ];then
     echo "${ONEZONE} \"${ONEDESCR}\" on" >> /var/local/quicksetup-timezone-table-x
    else
     echo "${ONEZONE} \"${ONEDESCR}\" off" >> /var/local/quicksetup-timezone-table-x
    fi
   done
  fi
  ZONECHOICES_CLI="`cat /var/local/quicksetup-timezone-table-cli`" #111113

  #table already exist, but may need to reselect 'on' item...
  onPTN="s%^${xDEF_TIMEZONE} \"(.*)\" off$%${DEF_TIMEZONE} \"\1\" on%"
  sed -i -e 's% on$% off%' -r -e "$onPTN" /var/local/quicksetup-timezone-table-x

  DEFAULTXML=""
  DEFAULT="`grep ' on$' /var/local/quicksetup-timezone-table-x | sed -e 's% on$%%' -e 's%"%%g' -e "s% %${TABCHAR}%"`" #'geany
  #[ "$DEFAULT" ] && DEFAULTXML="<default>${DEFAULT}</default>"
  [ "$DEFAULT" ] && DEFAULTXML="<item>${DEFAULT}</item>" #111107 combobox does not support default tag.
  ITEMS="`sed -e 's% on$%%' -e 's% off$%%' -e 's%"%%g' -e "s% %${TABCHAR}%" -e 's%^%<item>%' -e 's%$%</item>%' /var/local/quicksetup-timezone-table-x`" #'geany
  
  DEFAULT_UTC="false"
  [ "$HWCLOCKTIME" = "utc" ] && DEFAULT_UTC="true" #see /etc/clock
  TT_utc=$(gettext 'Tick checkbox if hardware clock is set to UTC, untick if hardware clock set to local time')
  T_utc=$(gettext 'Hardware clock set to UTC')
  CHECKUTCXML="<hbox><checkbox tooltip-text=\"${TT_utc}\"><label>${T_utc}</label>
<variable>CHECK_UTC</variable><default>${DEFAULT_UTC}</default></checkbox>
  <button>
   <input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input>
   <action type=\"launch\">DLG_HELP_UTC</action>
  </button>
</hbox>"
 
  TT_tz1=$(gettext "Choose time zone")
  TT_tz2=$(gettext "Time Zone")
  TIMEZONEXML="
  <hbox>
   <pixmap tooltip-text=\"${TT_tz2}\" icon_size=\"3\" ><input file>/usr/local/lib/X11/mini-icons/mini-clock.xpm</input></pixmap>
   <combobox tooltip-text=\"${TT_tz1}\" width-request=\"202\">
    ${DEFAULTXML}
    ${ITEMS}
    <variable>COMBO_TIMEZONE</variable>
   </combobox>
   <button>
    <input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input>
    <action type=\"launch\">DLG_HELP_TIMEZONE</action>
   </button>
  </hbox>
  ${CHECKUTCXML}"
 fi #end SET_TIMEZONE
 
 ###keyboard layout###
 KEYBOARDXML=""
 if [ "$SET_KEYBOARD" ];then
 
  H_kb1="`gettext 'Help: Keyboard Layout'`"
  H_kb2="`gettext 'Computer keyboards have different layouts, depending on the country and language.

<b>Note:</b> After making a choice here, clicking the <b>OK</b> button will update the layout in X (graphical desktop) but not the console (when X not running) -- that requires a reboot.

<b>Technical</b>
The choice made here is saved in /etc/keymap. The value specifies a console layout, from the directory /lib/keymaps. When X starts, the startup script /usr/bin/xwin translates that to the equivalent for X, from directory /etc/X11/xkb/symbols -- note, if no match is found, X falls back to using <b>us</b> layout -- please report if that happens to you.'`"
  export DLG_HELP_KEYBOARD="<window resizable=\"false\" title=\"${H_kb1}\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${H_kb2}\"</label><variable>VAR_HELP_KEYBOARD</variable></text><hbox><button><label>${M_close}</label><action type=\"closewindow\">VAR_HELP_KEYBOARD</action></button></hbox></vbox></window>"
  
  H_n1="`gettext 'Help: Keyboard Numlock'`"
  H_n2="`gettext 'Most keyboards have a group of keys on the right side of the keyboard that are labeled <b>0</b> to <b>9</b>. These are intended for when heavy entry of numbers is required. They are dual-purpose, that is can also serve as arrow-keys, Home, End, PgUp, PgDn -- and the latter is usually the default. That is, numlock defaults to off.

If the checkbox is ticked, numlock will be on when X starts.

<b>Technical</b>
The file /root/Startup/numlockx specifies whether numlock is on or off. if the file attribute is executable, then it will execute when X starts. The file contains either <b>numlockx on</b> or <b>numlockx off</b>, and may be edited directly if desired.'`"
  export DLG_HELP_NUMLOCK="<window resizable=\"false\" title=\"${H_n1}\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${H_n2}\"</label><variable>VAR_HELP_NUMLOCK</variable></text><hbox><button><label>${M_close}</label><action type=\"closewindow\">VAR_HELP_NUMLOCK</action></button></hbox></vbox></window>"

  DEF_KMAP="us"
  [ -f /etc/keymap ] && DEF_KMAP="`cat /etc/keymap | sed -e 's/\..*//'`"
  [ ! "$DEF_KMAP" ] && DEF_KMAP="us" #precaution.
  if [ ! -f /var/local/quickset-keyboard-list ];then
   echo -n "" > /var/local/quickset-keyboard-list
   for AFILE in `ls /lib/keymaps/*`
   do
    AKMAP="`basename $AFILE .gz`" #us, fr, br, etc.
    case $AKMAP in
     us*) ACNTRY="(USA)";;
     fr*) ACNTRY="(France)";;
     it*) ACNTRY="(Italy)";;
     ba*) ACNTRY="(Bashkir)";;
     be*) ACNTRY="(Belgium)";;
     bg*) ACNTRY="(Bulgaria)";;
     br*) ACNTRY="(Brazil)";;
     by*) ACNTRY="(Byelorussian)";;
     cf*) ACNTRY="(French-Canadian)";;
     croat*) ACNTRY="(Croatia)";;
     cz*) ACNTRY="(Czech)";;
     de) ACNTRY="(Germany)";;
     de_*) ACNTRY="(Germany)";;
     de-*) ACNTRY="(Germany)";;
     dk*) ACNTRY="(Denmark)";;
     es*) ACNTRY="(Spain)";;
     fi*) ACNTRY="(Finland)";;
     hu*) ACNTRY="(Hungary)";;
     ka*) ACNTRY="(Kazakhstan)";;
     ky*) ACNTRY="(Kyrgyzstan)";;
     et*) ACNTRY="(Estonia)";;
     lt*) ACNTRY="(Lithuania)";;
     mk*) ACNTRY="(Macedonia)";;
     sr*) ACNTRY="(Serbia)";;
     tr*) ACNTRY="(Turkey)";;
     tt*) ACNTRY="(Tatar)";;
     sg*) ACNTRY="(Sango)";;
     ua*) ACNTRY="(Ukraine)";;
     gr*) ACNTRY="(Greece)";;
     il*) ACNTRY="(Israel)";;
     is*) ACNTRY="(Iceland)";;
     jp*) ACNTRY="(Japan)";;
     pc*) ACNTRY="(Japanese/English)";;
     la*) ACNTRY="(Latin_America)";;
     nl*) ACNTRY="(Netherlands)";;
     no*) ACNTRY="(Norway)";;
     pl*) ACNTRY="(Poland)";;
     pt*) ACNTRY="(Portugal)";;
     ro*) ACNTRY="(Romania)";;
     ru*) ACNTRY="(Russia)";;
     se*) ACNTRY="(Sweden)";;
     sv*) ACNTRY="(Sweden)";;
     sk*) ACNTRY="(Slovakia)";;
     sl*) ACNTRY="(Slovenia)";;
     uk*) ACNTRY="(UK)";;
     wangbe*) ACNTRY="(Belgium)";;
     azerty) ACNTRY="(Tandon)";;
     dvorak-r) ACNTRY="(Right_single-handed)";;
     dvorak-l) ACNTRY="(Left_single-handed)";;
     *)  ACNTRY="-";;
    esac
    if [ "$DEF_KMAP" = "$AKMAP" ];then
     echo "$AKMAP \"${ACNTRY}\" on" >> /var/local/quickset-keyboard-list
    else
     echo "$AKMAP \"${ACNTRY}\" off" >> /var/local/quickset-keyboard-list
    fi
   done
  fi
  
  #table already exist, but may need to reselect 'on' item...
  onPTN="s%^${DEF_KMAP} \"(.*)\" off$%${DEF_KMAP} \"\1\" on%"
  sed -i -e 's% on$% off%' -r -e "$onPTN" /var/local/quickset-keyboard-list

  DEFAULTXML=""
  DEFAULT="`grep ' on$' /var/local/quickset-keyboard-list | sed -e 's% on$%%' -e 's%"%%g' -e "s% %    ${TABCHAR}%"`" #'geany
  #[ "$DEFAULT" ] && DEFAULTXML="<default>${DEFAULT}</default>"
  [ "$DEFAULT" ] && DEFAULTXML="<item>${DEFAULT}</item>" #111107 combobox does not support default tag.
  ITEMS="`sed -e 's% on$%%' -e 's% off$%%' -e 's%"%%g' -e "s% %    ${TABCHAR}%" -e 's%^%<item>%' -e 's%$%</item>%' /var/local/quickset-keyboard-list`" #'geany

  DEFAULT_NUMLOCK="false"
  CHECKNUMLOCKXML=""
  if which numlockx >/dev/null;then
   [ -x /root/Startup/numlockx ] && [ "`grep '^numlockx on' /root/Startup/numlockx`" != "" ] && DEFAULT_NUMLOCK="true"
   TT_num=$(gettext 'Tick checkbox to turn on keyboard numlock')
   T_num=$(gettext 'Keyboard numlock')
   CHECKNUMLOCKXML="<hbox><checkbox tooltip-text=\"${TT_num}\"><label>${T_num}</label>
<variable>CHECK_NUMLOCK</variable><default>${DEFAULT_NUMLOCK}</default></checkbox>
  <button>
   <input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input>
   <action type=\"launch\">DLG_HELP_NUMLOCK</action>
  </button>
</hbox>"
  fi

  TT_kb1=$(gettext "Choose keyboard layout")
  TT_kb2=$(gettext "Keyboard Layout")
  KEYBOARDXML="
  <hbox>
   <pixmap tooltip-text=\"${TT_kb2}\" icon_size=\"3\" ><input file>/usr/local/lib/X11/mini-icons/mini-keyboard.xpm</input></pixmap>
   <combobox tooltip-text=\"${TT_kb1}\" width-request=\"202\">
    ${DEFAULTXML}
    ${ITEMS}
    <variable>COMBO_KEYBOARD</variable>
   </combobox>
   <button>
    <input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input>
    <action type=\"launch\">DLG_HELP_KEYBOARD</action>
   </button>
  </hbox>
  ${CHECKNUMLOCKXML}"
 fi #end SET_KEYBOARD

 COUNTRYXML="<vbox><frame ${COUNTRYFRAMETITLE}>
   ${LOCALEXML}
   ${TIMEZONEXML}
   ${KEYBOARDXML}
 </frame></vbox>"
fi #end SET_COUNTRY

###setup x###
if [ "$SET_X" ];then

 #try keep this message short, so renders in one line...
 M_xy="`gettext 'If the Wizard fails to set desired resolution, try this:'`" #used in SET_XRES, but maybe changed in SET_XWIZARD.
 #M_xy="`gettext 'If desired resolution fails with Wizard, try this:'`" #used in SET_XRES, but maybe changed in SET_XWIZARD.

 if [ "$SET_XWIZARD" ];then

  H_xw1=$(gettext 'Help: Xorg Wizards')
  H_xw2=$(gettext 'If you tick a checkbox, you are flagging your wish to run the Wizard, and it will happen after you click the <b>OK</b> button.

<b>Xorg Video Wizard</b>
This is a text-mode application (keyboard-driven, no mouse, and requires exiting from X (the graphical desktop) to run), that enables you to set the screen resolution, refresh frequency, correct mouse/touchpad, and find a correct hardware-specific driver. Note, the <b>vesa</b> driver is generic, for any video hardware, but is slow. In some cases there is more than one hardware-specific driver and you have to choose the best one -- for example:')
  H_xw3='

<i>Intel:  i810 intel
nVidia: nv nouveau</i>

'
  H_xw4=$(gettext '<b>Video Upgrade Wizard</b>
What this offers depends on the particular build of Puppy Linux. It may offer upgrade PETs for the commercial nVidia and ATI Xorg drivers. In the case of Wary Puppy, there is an offer to upgrade Xorg from version 7.3 to 7.6. Some builds of Puppy do not offer any upgrades via this Wizard, but may have upgrade PETs available elswhere, such as via the Puppy Package Manager or the Puppy Forum.

<b>Note 1:</b> If you need to run either of these Wizards later on, they are available via the <b>setup</b> icon on the desktop, or the <b>Setup</b> category in the menu. 
<b>Note 2:</b> The <b>Xorg Video Wizard</b> via the <b>setup</b> icon is a full graphical application, with many more options than the text-mode version, such as finetuning screen dimensions and adjusting brightness. You might want to run that afterward to further finetune your X configuration.')
  export DLG_HELP_XWIZARD="<window resizable=\"false\" title=\"${H_xw1}\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${H_xw2}${H_xw3}${H_xw4}\"</label><variable>VAR_HELP_XWIZARD</variable></text><hbox><button><label>${M_close}</label><action type=\"closewindow\">VAR_HELP_XWIZARD</action></button></hbox></vbox></window>"
  
  #note, quicksetup gets launched from /usr/sbin/delayedrun, but only for xorg, not xvesa.
  #put up a button to launch xorgwizard...
  if [ -f /var/log/Xorg.0.log ];then #log file created when X starts.
   XDRIVERSATTEMPTED="`grep -o 'Loading .*xorg/modules/drivers/.*_drv.so' /var/log/Xorg.0.log | rev | cut -f 1 -d '/' | rev | cut -f 1 -d '_' | sort -u`" #111027 fix multiple hits.
   XDRIVERSFAILED="`grep 'UnloadModule: ' /var/log/Xorg.0.log | cut -f 2 -d '"'`" #'geany
   echo -n "$XDRIVERSFAILED" > /tmp/quicksetup_xorg_driversfailed
   XDRIVERSUCCESS="`echo "$XDRIVERSATTEMPTED" | grep -w -v -f /tmp/quicksetup_xorg_driversfailed`"
   if [ "$XDRIVERSUCCESS" ];then #precaution.
    M_xdrv1=$(gettext 'The generic <b>vesa</b> video driver is currently being used. It is recommended that you run the Video Wizard to try and load a hardware-specific driver. Failing that, try the Video Upgrade Wizard:')
    M_xdrv2=$(gettext 'The')
    M_xdrv3=$(gettext 'video driver is currently being used. Good, but if you need to adjust screen resolution or displacement, run the Video Wizard:')
    TT_xorg1=$(gettext 'Run the Xorg Video Wizard')
    TT_xorg2=$(gettext 'Xorg Video Wizard')
    B_xwiz=$(gettext 'VideoWizard')
    B_xup=$(gettext 'UpgradeWizard')
    TT_xup1=$(gettext 'Run the Video Upgrade Wizard')
    TT_xup2=$(gettext 'Video Upgrade Wizard')
    if [ "$XDRIVERSUCCESS" = "vesa" ];then
     M_xy="`gettext 'If the Wizards fail to set desired resolution, try this:'`" #used in SET_XRES.
     XMSGXML="<text use-markup=\"true\"><label>\"${M_xdrv1}\"</label></text>"
     XWIZARDXML="<hbox><pixmap tooltip-text=\"${TT_xorg2}\"><input file>/usr/local/video_upgrade/xsettings24.xpm</input></pixmap><checkbox tooltip-text=\"${TT_xorg1}\"><variable>CHECK_XORGWIZARD</variable><label>${B_xwiz}</label><action>if true disable:CHECK_XUPGRADE</action><action>if false enable:CHECK_XUPGRADE</action></checkbox>
    <pixmap tooltip-text=\"${TT_xup2}\"><input file>/usr/local/video_upgrade/xupgrade24.xpm</input></pixmap><checkbox tooltip-text=\"${TT_xup1}\"><variable>CHECK_XUPGRADE</variable><label>${B_xup}</label><action>if true disable:CHECK_XORGWIZARD</action><action>if false enable:CHECK_XORGWIZARD</action></checkbox>
    <button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type=\"launch\">DLG_HELP_XWIZARD</action></button>
    </hbox>"
    else
     XMSGXML="<text use-markup=\"true\"><label>\"${M_xdrv2} <b>${XDRIVERSUCCESS}</b> ${M_xdrv3}\"</label></text>"
     XWIZARDXML="<hbox><pixmap tooltip-text=\"${TT_xorg2}\"><input file>/usr/local/video_upgrade/xsettings24.xpm</input></pixmap><checkbox tooltip-text=\"${TT_xorg1}\"><variable>CHECK_XORGWIZARD</variable><label>${B_xwiz}</label></checkbox>
     <button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type=\"launch\">DLG_HELP_XWIZARD</action></button>
     </hbox>"
    fi
   fi
  fi
 fi #end SET_XWIZARD
 
 if [ "$SET_XRES" ];then
  #a combobox to choose resolution...
  H_xy1="`gettext 'Help: Xrandr Screen Resolution'`"
  H_xy2="`gettext '<b>Screen resolution</b>
The choices are in the format, for example, <b>1024x768</b>, which means 1024 pixels (dots) horizontally and 768 pixels vertically.

<b>Refresh frequency</b>
Also listed is the vertical refresh frequency, for example <b>1024x768 60.0</b> means that the screen is refreshing (redrawing) 60 times per second. For older cathode-ray-tube monitors, a value of at least 75 is required to minimize flicker. For modern LCD screens, 60 is satisfactory, and even preferred in most cases.

<b>Warning 1</b>
After testing a resolution, you will be given the opportunity to make it permanent if you wish. <b>IF THE NEW RESOLUTION MESSES UP THE SCREEN, WAIT 60 SECONDS OR PRESS CTRL-ALT-BACKSPACE</b>

<b>Warning 2</b>
This resolution selection box uses the <b>xrandr</b> utility to set the resolution, and is intended for testing only, not for a permanent change, as this does not really change the default resolution, instead it switches resolutions after X has started, which causes a delay and flicker at startup and may have other undesirable side-effects. With some X drivers/hardware it may not work at all. Instead, run the Video Wizard to choose a permanent resolution.'`"
  export DLG_HELP_XYRES="<window resizable=\"false\" title=\"${H_xy1}\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${H_xy2}\"</label><variable>VAR_HELP_XYRES</variable></text><hbox><button><label>${M_close}</label><action type=\"closewindow\">VAR_HELP_XYRES</action></button></hbox></vbox></window>"
  
  FLAG_XYRES="enabled"

  #shinobar...
  NVIDIABUTTON=""
  if which nvidia-settings &>/dev/null  && NRATE=$(nvidia-settings -q RefreshRate | grep '[0-9]') ; then
   NVIDIABUTTON="<button tooltip-text=\"$(gettext 'Launch the NVIDIA X Server Settings.')\" icon_size=\"2\" ><input file>/usr/local/video_upgrade/nvidia48x32.png</input><label>$(gettext 'NVIDIA')</label><action>EXIT:NVIDIA</action></button>"
   FLAG_XYRES="disabled"
  fi
 
  XRANDR="`xrandr -q`"
  DEF_XYRES="`echo "$XRANDR" | tr -s ' ' | grep '^ [0-9]' | grep '\*' | cut -f 2 -d ' '`"
  LIST_XYRESES="`echo "$XRANDR" | tr -s ' ' | grep '^ [0-9]' | cut -f 2,3 -d ' ' | sed -e 's%$% "" off%'`"
  echo "$LIST_XYRESES" > /var/local/quickset-xrandr-list
  onPTN="s%^${DEF_XYRES} \"(.*)\" off$%${DEF_XYRES} \"\1\" on%"
  sed -i -e 's% on$% off%' -r -e "$onPTN" /var/local/quickset-xrandr-list

  DEFAULTXML=""
  DEFAULT="`grep ' on$' /var/local/quickset-xrandr-list | sed -e 's% on$%%' -e 's%"%%g' -e "s% % ${TABCHAR}%"`" #'geany
  #[ "$DEFAULT" ] && DEFAULTXML="<default>${DEFAULT}</default>"
  [ "$DEFAULT" ] && DEFAULTXML="<item>${DEFAULT}</item>" #111107 combobox does not support default tag.
  ITEMS="`sed -e 's% on$%%' -e 's% off$%%' -e 's%"%%g' -e "s% % ${TABCHAR}%" -e 's%^%<item>%' -e 's%$%</item>%' /var/local/quickset-xrandr-list`" #'geany

  TT_xy1="`gettext 'Xrandr Screen Resolution'`"
  TT_xy2="`gettext 'Set screen resolution with xrandr'`"
  [ "$SET_XWIZARD" ] && XRANDRWARNXML="<text><label>\" \"</label></text><text><label>${M_xy}</label></text>"
  XYRESXML="
  ${XRANDRWARNXML}
  <hbox>
   <pixmap tooltip-text=\"${TT_xy1}\" icon_size=\"3\" ><input file  stock=\"gtk-fullscreen\"></input></pixmap>
   <combobox tooltip-text=\"${TT_xy2}\" width-request=\"202\">
    ${DEFAULTXML}
    ${ITEMS}
    <variable>COMBO_XYRES</variable>
    <visible>${FLAG_XYRES}</visible>
   </combobox>
   <button>
    <input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input>
    <action type=\"launch\">DLG_HELP_XYRES</action>
   </button>
  </hbox>"
 fi #end SET_XRES

 #[ "$XYRESXML" = "" -a "$NVIDIABUTTON" = "" ] && XYRESXML="<text><label>nothing</label></text>" #precaution 
 XXML="<vbox>
  <frame ${XFRAMETITLE}>
   ${XMSGXML}
   ${XWIZARDXML}
   ${NVIDIABUTTON}
   ${XYRESXML}
  </frame>
 </vbox>"
fi

####main window####
###################
[ $XPID -ne 0 ] && kill $XPID 2> /dev/null
BACKTITLEXML=""
#[ "$SET_BACKTITLE" ] && BACKTITLEXML="<text use-markup=\"true\" wrap=\"false\"><label>\"<b>${BACKTITLE}</b>\"</label></text>"
[ "$SET_BACKTITLE" ] && BACKTITLEXML="<text use-markup=\"true\"><label>\"<big><b>${BACKTITLE}</b></big>\"</label></text>"
M_mouse=$(gettext 'Dead mouse? <b>TAB</b> key to select this button then press <b>ENTER</b> key:')
WINWIDTH=""
WINWIDTHPARAM=""
#WINWIDTHPARAM='width-request="644"' #"564"
#[ "$SET_X" = "" ] && WINWIDTHPARAM='width-request="282"'
#B_ok=$(gettext "OK, do not restart X")
#B_okrestart=$(gettext "OK, restart X now")
#    <button><label>${B_cancel}</label><input file>/usr/local/lib/X11/mini-icons/mini-cross.xpm</input><action>EXIT:cancel</action></button>
B_cancel=$(gettext "Cancel")
M_exit="`gettext 'Confirm the settings and click OK:'`"
B_ok=$(gettext "OK")
export QUICKSETUP_DIALOG="<window title=\"${WINTITLE}\" window_position=\"1\" icon-name=\"${WINICON}\" ${WINWIDTHPARAM} resizable=\"false\">
<vbox>
  <hbox>
    ${BACKTITLEXML}
    <text><label>\"         \"</label></text>
    <text use-markup=\"true\"><label>\"${M_mouse}\"</label></text>
    <vbox><button><input file>/usr/local/lib/X11/mini-icons/Mouse.xpm</input><action>mousecheck nowait</action></button></vbox>
  </hbox>
  <hbox>
    ${COUNTRYXML}
    ${XXML}
  </hbox>
  <hbox>
    <text><label>${M_exit}</label></text>
    <button><label>${B_ok}</label><input file>/usr/local/lib/X11/mini-icons/mini-tick.xpm</input><action>EXIT:OK</action></button>
  </hbox>
</vbox>
</window>"

###display main window###
if [ $DISPLAY ];then
 RETVALS="`${GTKDIALOGEXE} --program=QUICKSETUP_DIALOG`"
 eval "$RETVALS"
 [ "$EXIT" != "OK" -a "$EXIT" != "NVIDIA" ] && exit
else
 #replace the old single-purpose text-mode scripts...
 case $MYBASE in
  chooselocale)
   CHOICES="`cat /usr/share/i18n/dialog_table_cli | tr '\n' ' '`"
   echo "#!/bin/sh
dialog --aspect 10 --title \"Country setup\" --menu \"The locale setting provides money, date and font localization for your country. The current choice is ${BASELANG}. Make a choice to suit your country...\" 0 0 0 ${CHOICES} 2>/tmp/chooselocale-choice
exit \$?" > /tmp/dialog-chooselocale
   chmod 777 /tmp/dialog-chooselocale
   /tmp/dialog-chooselocale
   [ $? -ne 0 ] && exit
   COMBO_LOCALE="`cat /tmp/chooselocale-choice | head -n 1`"
   CHECK_UTF8="$DEFAULT_UTF8" #dialog box does not have a UTF-8 checkbox.
  ;;
  timezone-set)
   ZONEDLG="dialog --aspect 10 --title \"Puppy timezone selector\" --default-item $DEF_TIMEZONE --menu \"Please choose your timezone. If a city/region/country in your timezone is not listed, choose a GMT<number>\" 0 0 0 ${ZONECHOICES_CLI}"
   eval $ZONEDLG 2>/tmp/zoneretval
   [ $? -ne 0 ] && exit
   COMBO_TIMEZONE="`cat /tmp/zoneretval`"
   CHECK_UTC="$DEFAULT_UTC" #dialog box does not have a UTC checkbox.
  ;;
  *)
   exit
  ;;
 esac
fi

####process choices####
FLAG_CHANGED=""

if [ "$EXIT" = "NVIDIA" ];then
 nvidia-settings
fi

if [ "$SET_LOCALE" ];then
 #two variables, COMBO_LOCALE and CHECK_UTF8
 LANGCHOICE="`echo -n "$COMBO_LOCALE" | cut -f 1 -d ' ' | cut -f 1 -d '@'`" #nl_BE@euro, need to chop.
 UTF8=""
 [ "$CHECK_UTF8" = "true" ] && UTF8='.UTF-8'

 if [ "$LANGCHOICE" != "" -a "${LANGCHOICE}${UTF8}" != "$CURRLANG" ];then
  FLAG_CHANGED="${FLAG_CHANGED}${TT_mainlanguage}:restart|"
  # creates locale files in /usr/lib/locale...
  OLDLANGLINE="LANG=$CURRLANG"
  NEWLANGLINE="LANG=${LANGCHOICE}"
  xUTF8="$UTF8"
  if [ "$UTF8" != "" ];then #111022
   NEWLANGLINE="LANG=${LANGCHOICE}"'.UTF-8'
   xUTF8='.utf8'
  fi
  if [ "`locale -a | grep "${LANGCHOICE}${xUTF8}"`" = "" ];then
   if [ "$UTF8" = "" ];then
    lcPATTERN='^'"${LANGCHOICE}"' '
    CHARMAP="`grep "$lcPATTERN" /usr/share/i18n/SUPPORTED | head -n 1 | cut -f 2 -d ' '`"
    if [ "$CHARMAP" != "" ];then #make sure have it...
     cPATTERN="$CHARMAP"'\.gz'
     [ "`ls -1 /usr/share/i18n/charmaps | grep '.gz$'`" = "" ] && cPATTERN="$CHARMAP"'$'
     [ "`ls -1 /usr/share/i18n/charmaps | grep "$cPATTERN"`" = "" ] && CHARMAP=""
    fi
    if [ "$CHARMAP" != "" ];then
     localedef -f $CHARMAP -i $LANGCHOICE --no-archive ${LANGCHOICE} > /dev/null
     NEWLANGLINE="LANG=${LANGCHOICE}"
    else
     #no match, i think forced to use utf8... 111022 change name back to .utf8...
     localedef -f UTF-8 -i $LANGCHOICE --no-archive ${LANGCHOICE}.utf8 > /dev/null
     NEWLANGLINE="LANG=${LANGCHOICE}.UTF-8"
     UTF8='.UTF-8'
    fi
   else
    localedef -f UTF-8 -i $LANGCHOICE --no-archive ${LANGCHOICE}.utf8 > /dev/null #111022
    NEWLANGLINE="LANG=${LANGCHOICE}.UTF-8"
   fi
  fi
  if [ "$OLDLANGLINE" != "$NEWLANGLINE" ];then
   #langPATTERN="s/${OLDLANGLINE}/${NEWLANGLINE}/"
   langPATTERN="s%^LANG=.*%${NEWLANGLINE}%" #111022
   sed -i -e "$langPATTERN" /etc/profile
  fi
 fi
fi #end SET_LOCALE

if [ "$SET_TIMEZONE" ];then
 #two variables, COMBO_TIMEZONE and CHECK_UTC
 ZONERETVAL="`echo -n "$COMBO_TIMEZONE" | cut -f 1 -d ' ' | cut -f 1 -d "$TABCHAR"`"
 NEW_HWCLOCKTIME="localtime"
 [ "$CHECK_UTC" = "true" ] && NEW_HWCLOCKTIME="utc"
 [ ! -e /etc/localtime ] && DEF_TIMEZONE="" #111027 precaution.
 if [ "$DEF_TIMEZONE" != "$ZONERETVAL" -o "$HWCLOCKTIME" != "$NEW_HWCLOCKTIME" ];then
  FLAG_CHANGED="${FLAG_CHANGED}${TT_tz2}:yes|"
  if [ "`echo -n "$ZONERETVAL" | grep 'GMT' | grep '\+'`" = "" ];then
   ZONERETVAL="`echo -n "$ZONERETVAL" | tr "\-" "\+"`"
  else
   ZONERETVAL="`echo -n "$ZONERETVAL" | tr "\+" "\-"`"
  fi
  [ "`echo "$ZONERETVAL" | grep 'GMT'`" != "" ] && ZONERETVAL="Etc/$ZONERETVAL"
  #111103 these are also in Etc dir...
  [ "$ZONERETVAL" = "Greenwich" ] && ZONERETVAL="Etc/$ZONERETVAL"
  [ "$ZONERETVAL" = "UCT" ] && ZONERETVAL="Etc/$ZONERETVAL"
  [ "$ZONERETVAL" = "Universal" ] && ZONERETVAL="Etc/$ZONERETVAL"
  [ "$ZONERETVAL" = "UTC" ] && ZONERETVAL="Etc/$ZONERETVAL"
  [ "$ZONERETVAL" = "Zulu" ] && ZONERETVAL="Etc/$ZONERETVAL"
  ln -snf /usr/share/zoneinfo/$ZONERETVAL /etc/localtime
  which xset &>/dev/null && xset s noblank s noexpose -dpms  #shinobar 30jan11: avoid the screen go to blank

  [ -f /etc/TZ ] && rm -f /etc/TZ #don't think need this anymore. also removed from /etc/profile.
  #.../etc/profile now reads /etc/localtime and exports TZ variable.
 
  #need to set Linux system time/date, from hardware clock...
  hwclock --hctosys --${NEW_HWCLOCKTIME} #NEW_HWCLOCKTIME=localtime or utc
  #...--hctosys reads cmos clock to system, referencing /usr/share/zoneinfo/localtime
  echo "#this is read/written by /usr/sbin/quicksetup, timezone-set
HWCLOCKTIME=${NEW_HWCLOCKTIME}" > /etc/clock
 fi
fi #end SET_TIMEZONE

if [ "$SET_KEYBOARD" ];then
 #two variables COMBO_KEYBOARD and CHECK_NUMLOCK
 NEW_KMAP="`echo -n "$COMBO_KEYBOARD" | cut -f 1 -d ' ' | cut -f 1 -d "$TABCHAR"`"
 FONTMAP=""; CODEPAGE=""
 if [ "$DEF_KMAP" != "$NEW_KMAP" ];then
  FLAG_CHANGED="${FLAG_CHANGED}${TT_kb2}:yes|" #111020 no need to restart X.
  case $NEW_KMAP in #note, same code in /etc/rc.d/rc.country, init, and input-wizard.
   de*|be*|br*|dk*|es*|fi*|fr*|it*|no*|se*|sv*|pt*)
    #FONTMAP="lat1-12.psfu"
    modprobe nls_cp850
    CODEPAGE="850"
   ;;
   cz*|hu*|pl*|ro*|sk*|croat*|slovene*)
    modprobe nls_cp852
    modprobe nls_iso8859-2
    #FONTMAP="lat2-12.psfu"
    CODEPAGE="852"
   ;;
  esac
  echo -n "$NEW_KMAP" > /etc/keymap
  echo -n "$FONTMAP" > /etc/fontmap
  echo -n "$CODEPAGE" > /etc/codepage
  
  keymap-set --load #111020 script by shinobar.
#  gzip -dcf /lib/keymaps/$NEW_KMAP.gz | loadkmap
#  [ "$FONTMAP" ] && gzip -dcf /lib/consolefonts/${FONTMAP}.gz | loadfont
#  #this code also in /usr/bin/xwin and /usr/sbin/xorgwizard...
#  if [ -e /etc/X11/xorg.conf ];then
#   xCONSKEYMAP="`cat /etc/keymap | cut -c 1-2`"
#   [ "$xCONSKEYMAP" = "" ] && xCONSKEYMAP="us"
#   case $xCONSKEYMAP in
#    az) XKEYMAP="fr" ;;     #azerty
#    wa) XKEYMAP="fr" ;;     #wangbe
#    dv) XKEYMAP="dvorak" ;; #dvorak
#    cr) XKEYMAP="cz" ;;     #croat
#    sl) XKEYMAP="si" ;;     #slovene (note: sk is slovakia)
#    sv) XKEYMAP="se" ;;     #sweden
#    uk) XKEYMAP="gb" ;;     #united kingdom
#    *)  XKEYMAP="$xCONSKEYMAP" ;;
#   esac
#   if [ -d /etc/X11/xkb/symbols/pc ];then
#    if [ ! -f /etc/X11/xkb/symbols/pc/${XKEYMAP} ];then
#     if [ ! -f /etc/X11/xkb/symbols/${XKEYMAP} ];then
#      #echo "ERROR: Console keyboard `cat /etc/keymap` no matching Xorg layout. PLEASE REPORT TO BK"
#      XKEYMAP='us' #fallback.
#     fi
#    fi
#   fi
#   currXKEYMAP="`grep '#xkeymap0' /etc/X11/xorg.conf | tr '\t' ' ' | tr -s ' ' | cut -f 4 -d '"'`" #'geany fix
#   if [ "$currXKEYMAP" != "$XKEYMAP" ];then
#    skPATTERN="s%.*#xkeymap0%	Option      \"XkbLayout\" \"${XKEYMAP}\" #xkeymap0%"
#    sed -i -e "${skPATTERN}" /etc/X11/xorg.conf
#   fi
#  fi
  
 fi
 if [ "$DEFAULT_NUMLOCK" != "$CHECK_NUMLOCK" ];then
  FLAG_CHANGED="${FLAG_CHANGED}${T_num}:yes|"
  STATUS_NUMLOCK=off
  [ "$CHECK_NUMLOCK" = "true" ] && STATUS_NUMLOCK=on
  echo -e "#!/bin/sh\nnumlockx ${STATUS_NUMLOCK}" > /root/Startup/numlockx
  chmod 755 /root/Startup/numlockx
  numlockx ${STATUS_NUMLOCK} #do it now.
 fi
fi #end SET_KEYBOARD

if [ "$SET_XRES" ];then
 #one variable COMBO_XYRES
 #note, similar code in xrandshell.
 NEW_XYRES="`echo -n "$COMBO_XYRES" | cut -f 1 -d ' ' | cut -f 1 -d "$TABCHAR"`"
 if [ "$DEF_XYRES" != "$NEW_XYRES" ];then
  FLAG_CHANGED="${FLAG_CHANGED}${TT_xy1}:yes|"
  T_yesno="`gettext 'Change resolution to'`"
  M_yesno1="`gettext 'Click the OK button to change the resolution.'`"
  M_yesno2="`gettext 'If the new resolution does not work, wait 60 seconds, or hit the CTRL-ALT-BACKSPACE key combination to kill X.'`"
  pupdialog --background yellow --backtitle "${T_yesno}  ${NEW_XYRES}" --yes-label "$B_ok" --no-label "$B_cancel" --yesno "${M_yesno1}.\n${M_yesno2}" 0 0
  if [ $? -eq 0 ];then
   sync
   xrandr -s $NEW_XYRES #this changes the screen resolution.
   XRANDR="`xrandr -q`"
   TESTLINE="`echo "$XRANDR" | tr -s " " | grep "^ [0-9]" | grep '\*'`"
   TESTX="`echo -n "$TESTLINE" | cut -f 2 -d " " | cut -f 1 -d 'x'`"
   TESTY="`echo -n "$TESTLINE" | cut -f 2 -d " " | cut -f 2 -d 'x'`"
   TESTVR="`echo -n "$TESTLINE" | cut -f 3 -d ' ' | cut -f 1 -d '*'`"

   M_y0=$(gettext 'Can you see this?')
   M_y1=$(gettext "Click <b>Permanent</b> button to keep this resolution permanently.
Click <b>Session</b> button to keep this resolution for current session only.
Click <b>Cancel</b> button to revert to default resolution.")
   M_y2=$(gettext "<b>Warning</b>
It is NOT recommended to choose <b>Permanent</b> here, as the default resolution is not really changed, instead it switches resolutions after X has started, which causes a delay and flicker at startup and may have other undesirable side-effects. Instead, run the Video Wizard to choose a permanent resolution.")
   B_permanent=$(gettext 'Permanent')
   B_session=$(gettext 'Session')
   STEP=6	# timeout is x10sec
   fontsize="x-large" # small, medium, large, x-large
   export XY_DIALOG="<window title=\"$WINTITLE\" icon-name=\"gtk-preferences\"><vbox>
    <text use-markup=\"true\"><label>\"<span size=\"${fontsize}\">${M_y0}</span>\"</label></text>
    <text use-markup=\"true\"><label>\"${M_y1}\"</label></text>
    <text use-markup=\"true\"><label>\"${M_y2}\"</label></text>
	<progressbar><input>for i in \$(seq 0 10 100); do echo \$i; sleep $STEP; done;echo 100</input>
	  <label>$(gettext 'Or, it will be canceled in 60 seconds.')</label>
      <action type=\"exit\">TIMEOUT</action></progressbar>
	<hbox>
	 <button><label>${B_permanent}</label><action>EXIT:permanent</action></button> 
	 <button><label>${B_session}</label><action>EXIT:session</action></button> 
	 <button><label>${B_cancel}</label><action>EXIT:cancel</action></button> 
	</hbox>
	</vbox></window>" 
   eval $(${GTKDIALOGEXE} --program=XY_DIALOG --center)
   case $EXIT in
    permanent)
     echo -n "${TESTX}x${TESTY}" > /etc/xrandrindex #so will be set in .xinitrc at next X start.
    ;;
    session)
     rm -f /etc/xrandrindex
    ;;
    *)
     rm -f /etc/xrandrindex
     xrandr -s $DEF_XYRES #restore to what it was before.
    ;;
   esac
   
  fi
 fi
fi #end SET_XRES

if [ "$SET_XWIZARD" ];then

 if [ "$CHECK_XUPGRADE" = "true" ];then
  #FLAG_CHANGED="${FLAG_CHANGED}${TT_xup2}:yes|" #"Video Upgrade Wizard"
  /usr/sbin/video_upgrade_wizard
 fi
 
 if [ "$CHECK_XORGWIZARD" = "true" ];then
  FLAG_CHANGED="${FLAG_CHANGED}${TT_xorg2}:restart|" #"Xorg Video Wizard"
  sed -i -e "s%^DISTRO_XORG_AUTO.*%DISTRO_XORG_AUTO='no'%" /etc/DISTRO_SPECS #/usr/bin/xwin reads this when X starts.
  mv -f /etc/X11/xorg.conf /etc/X11/xorg.conf.prev 2>/dev/null #/usr/bin/xwin will then run xorgwizard.
 fi

fi #end SET_XWIZARD


[ ! $DISPLAY ] && exit

if [ "`echo -n "$FLAG_CHANGED" | grep "restart"`" != "" ];then

 F_restart="`gettext 'restart'`"
 rPTN="s%:restart% <b><big>${F_restart}</big></b>%"
 CHANGEDMARKUP="`echo "$FLAG_CHANGED" | tr '|' '\n' | sed -e "$rPTN" | cut -f 1 -d ':'`"
 H_t1="`gettext 'Quick Setup: finished'`"
 B_restart="`gettext 'Restart X'`"
 B_exit="`gettext 'Exit'`"
 M_fc0="`gettext 'These are the changed items:'`"
 M_fc1="`gettext 'Those marked with <b>restart</b> require a restart of X (the graphical desktop) to take effect. Recommend, if it is ok to continue without restarting X for now, choose that option (<b>Exit</b> button).'`"
 M_fc2="`gettext 'Make sure no other applications are running, and click the <b>Restart X</b> button, which will exit from the graphical desktop and restart it.'`"
 M_fc3="`gettext 'Or, if the <b>Exit</b> button is clicked, the desktop will be retained, and changes marked with <b>restart</b> will not take effect. However, they will take effect the next time that X is started.'`"
#    <button><label>${B_restart}</label><input file>/usr/local/lib/X11/mini-icons/mini-turn.xpm</input><action>EXIT:OK</action></button>
#    <button><label>${B_exit}</label><input file>/usr/local/lib/X11/mini-icons/adblock.xpm</input><action>EXIT:cancel</action></button>
 export FC_DIALOG="<window title=\"${H_t1}\" window_position=\"1\" icon-name=\"${WINICON}\">
<vbox>
  <text use-markup=\"true\"><label>\"${M_fc0}\"</label></text>
  <text use-markup=\"true\"><label>\"<i>${CHANGEDMARKUP}</i>\"</label></text>
  <text use-markup=\"true\"><label>\"${M_fc1}\"</label></text>
  <text use-markup=\"true\"><label>\"${M_fc2}\"</label></text>
  <text use-markup=\"true\"><label>\"${M_fc3}\"</label></text>
  <hbox>
    <button><label>${B_restart}</label><input file stock=\"gtk-redo\"></input><action>EXIT:OK</action></button>
    <button><label>${B_exit}</label><input file stock=\"gtk-quit\"></input><action>EXIT:cancel</action></button>
  </hbox>
</vbox>
</window>"
 RETVALS="`${GTKDIALOGEXE} --program=FC_DIALOG`"
 eval "$RETVALS"
 if [ "$EXIT" = "OK" ];then
  rm -rf /tmp/.X0-lock
  sync
  exec restartwm `cat /etc/windowmanager`
 fi
fi  

###END###
