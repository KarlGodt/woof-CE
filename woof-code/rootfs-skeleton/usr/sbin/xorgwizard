#!/bin/ash
#(c) Copyright Barry Kauler 2006,2007 www.puppylinux.com
#2007 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
## Abused by Dougal, Feb 2007
## Update: March 16th: fixed "OK" button when testing X
## Update: April 15th: fixed problem with MONTYPES format, added touchpad code
## Update: April 16th: removed MONTYPES, using a case-structure to set params
#v2.21 BK 9sept2007 bug fix: serial mouse setting was wrong.
#v3.93 BK 1dec2007: updated for dingo.
#v3.93 BK 2dec2007: bugfixes from Dougal and rerwin.
#v3.94 BK 24dec2007: recognise Classmate PC laptop.
#v3.95 BK 4jan2008: recognise eeepc laptop.
#v3.95 BK 8jan2008: bug that caused xorgwizard to run at every boot.
#v3.96 BK 22jan2008: special case submitted by rerwin.
#v3.97 BK 2feb2008: improved detection of Classmate laptop.
#v3.98 RE 7mar2008: added preferred mode parameter; corrected & added special cases submitted by rerwin.
#v3.99 BK 15apr2008: have restored the xrandrshell utility to the main GUI menu.
#v3.99 BK 15apr2008: workaround for xrandr and dual monitors.
#v3.99 RE 7apr2008: improve user interface for any Xvesa-hanging video adapters.
#v405 BK 22jul08: added support for 1024x600.
#v408 BK k2.6.25.16 serial mouse driver now a module 'sermouse'.
#v411 rerwin: mouse improvements.
#v411 moved choosemousefunc() to /etc/rc.d/functions4puppy4, want call from rc.sysinit.
#w000 path /usr/X11R7 no longer used.
#w002 no longer offering xvesa.
#w005 restored EXIT button in first dlg.
#w007 fix X if it is not a symlink.
#w019 april2009: restored Xvesa.
#w460 fixed X test screen, proper exit.
#w468 modify mouse detection message.
#w478 fix prevent 2 instances of xwin, do not 'exec xwin'.
#w480 bugfix, serial mouse choice lost if choose to tweak refresh.
#w482 allow switch between intel_drv.so and i810OLD_drv.so.

VERSION=1.5.0

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || . /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="Advanced X setup script for X11 Xorg and Xvesa servers."
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap
}

########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.34.7-i486
# SATADRIVES='·sda'
# USB_SATAD='·sdb'
# PUP_HOME='/'
# Linux·puppypc·2.6.34.7-i486·#1·SMP·Mon·Dec·20·16:26:36·GMT-8·2010·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xorg
# $LANG=en_US
# today=Thu·Oct·27·17:06:25·CEST·2011
# TODO1 : add iconwipe
# TODO2 : add 2>/dev/null to ls -l
#
#
#
########################################################################

# VARIABLES
      if test -d /usr/lib/xorg/modules/drivers; then
 XORG_DRIVER_DIR=/usr/lib/xorg/modules/drivers
    elif test -d /usr/X11/lib/xorg/modules/drivers; then
 XORG_DRIVER_DIR=/usr/X11/lib/xorg/modules/drivers #needed by i810OLD_drv.so, nouveau and nvidia
 fi
 XORG_DRIVER_DIR=`realpath "$XORG_DRIVER_DIR"`
test -d "$XORG_DRIVER_DIR" || _warn "Could not set XORG_DRIVER_DIR"

REC_VIDEO_MODE="800x600x16" #default recommended mode.

tmpDir='/tmp/xorgwizard'
rm $VERB -rf "$tmpDir"/*.conf
mkdir $VERB -p "$tmpDir"
echo "
`date`" >>"$tmpDir"/xorgwizard.messages

#[ "`tty`" = "not a tty" -o "`tty`" = '?' ] && { sleep 2s; chvt 1; }
tty >>$OUT
case $? in
0) :;;      # info tty has exit codes
1) sleep 2s; chvt 1;;
2) _warn "given incorrect arguments";;
3) _warn "write error occurs";;
*) _err  "Unhandled return code by tty command";;
esac

##+++2012-01-30
if [ "`whoami`" = 'root' ]; then
XORGCONFFILE=/etc/X11/xorg.conf
else
XORGCONFFILE=xorg.conf
fi
##+++2012-01-30
for f in "$XORGCONFFILE".d/*.conf
do
rm $VERB -f "$f"
done

alias modprobe='modprobe -b' #+++2012-02-03

# redirect errors to file (to help debug):
#exec 2>"$tmpDir"/xorgwizard-errors.log

PSFND=`ps`
CURRENTX=`readlink /usr/bin/X`
if [ "$CURRENTX" = "" ]; then #w007 fix if not a symlink.
 if [ -x /usr/bin/Xorg ]; then
  ln $VERB -sf Xorg /usr/bin/X
  CURRENTX='Xorg'
 elif [ -x /usr/bin/Xvesa ]; then
  ln $VERB -sf Xvesa /usr/bin/X
  CURRENTX='Xvesa'
 elif [ -x /usr/bin/Xfbdev ]; then
  ln $VERB -sf Xfbdev /usr/bin/X
  CURRENTX='Xfbdev'
 #TODO more Xerver here
 else
  _exit 4 "No Xorg Xvesa Xfbdev in /usr/bin executable."
 fi
fi

. /etc/rc.d/functions4puppy4 #v411 has choosemousefunc().

#v2.0.0
#read the console keymap (country layout), apply to xkb...
CONSKEYMAP=`cat /etc/keymap | cut -b 1-2`
[ "$CONSKEYMAP" = "" ] && CONSKEYMAP="us"
case $CONSKEYMAP in
 az) #azerty
  XKEYMAP="fr"
  ;;
 wa) #wangbe
  XKEYMAP="fr" #v2.13
  ;;
 dv) #dvorak
  XKEYMAP="dvorak"
  ;;
 cr) #croat
  XKEYMAP="cz"
  ;;
 sl) #slovene v2.12 bugfix, changed from 'sk' to 'si' (sk is slovakia)
  XKEYMAP="si"
  ;;
 uk) #united kingdom
  XKEYMAP="gb"
  ;;
 *)
  XKEYMAP="$CONSKEYMAP"
  ;;
esac



MAIN1="
<wtitle>Xorg Video Wizard</wtitle>
<hbox>
 <vbox>
  <text><label>\"Welcome to the Puppy Linux
Xorg Video Wizard!\"</label></text>
  <text><label>\"The behaviour of Xorg is controlled
by a configuration file, /etc/X11/
xorg.conf. You have a choice here,
either to completely reconstruct
the $XORGCONFFILE file, or
to modify the existing file.\"</label></text>
 </vbox>
 <vbox>
  <frame XorgWizard>
  <hbox>
   <text><label>XorgWizard completely reconstructs the $XORGCONFFILE file, and Xorg must not be running to do this. An exit to prompt is required, and the Wizard should be run in text mode, before X is launched.</label></text>
   <vbox>
    <button>
     <input file>/usr/local/lib/X11/mini-icons/wizard16.xpm</input>
     <action>EXIT:11</action>
    </button>
   </vbox>
  </hbox>
  </frame>

  <frame Edit xorg.conf>
   <hbox>
    <text><label>You can manually edit $XORGCONFFILE, but note that you will need to exit from X afterward then restart X (see Shutdown menu). Click button to edit:</label></text>
    <vbox>
     <button>
      <input file>/usr/local/lib/X11/mini-icons/mini-x.xpm</input>
      <action>EXIT:15</action>
     </button>
    </vbox>
   </hbox>
  </frame>

  <frame xvidtune>
   <hbox>
    <text><label>If the screen is displaced or the width/height are wrong, xvidtune can get it right. This will modify the existing xorg.conf file. Use with caution:</label></text>
    <vbox>
     <button>
      <input file>/usr/local/lib/X11/mini-icons/mini-x.xpm</input>
      <action>EXIT:13</action>
     </button>
    </vbox>
   </hbox>
  </frame>

  <frame Mouse/keyboard Wizard>
   <hbox>
    <text><label>$XORGCONFFILE has generic settings for mouse and keyboard and in most cases it is recommended to leave it as-is. Instead, use the MouseKeyboardWizard:</label></text>
    <vbox>
     <button>
      <input file>/usr/local/lib/X11/mini-icons/wizard16.xpm</input>
      <action>EXIT:16</action>
     </button>
    </vbox>
   </hbox>
  </frame>

  <frame Monitor gamma calibration>
   <hbox>
    <text><label>This will adjust the monitor colors, including brightness. Note, cannot save settings -- a project here for someone -- see /usr/share/doc/tkgamma.txt</label></text>
    <vbox>
     <button>
      <input file>/usr/local/lib/X11/mini-icons/mini-x.xpm</input>
      <action>EXIT:17</action>
     </button>
    </vbox>
   </hbox>
  </frame>

  <frame Resolution changer>
   <hbox>
    <text><label>It is possible to change screen resolutions without exiting from X:</label></text>
    <vbox>
     <button>
      <input file>/usr/local/lib/X11/mini-icons/mini-x.xpm</input>
      <action>EXIT:18</action>
     </button>
    </vbox>
   </hbox>
  </frame>

 </vbox>
</hbox>
"


#do this code block if X is running...
if [ "`echo -n "$PSFND" | grep "\\.xinitrc"`" != "" ]; then

 RETSTR=`echo "$MAIN1" | gtkdialog2 --stdin`
 RETVAL=`echo "$RETSTR" | grep 'EXIT:' | cut -f 2 -d ':'`

 case $RETVAL in
  11) #xorgwizard.
   #rm /etc/mousedevice # Dougal: any reason for this?
   mv $VERB -f "$XORGCONFFILE" "$XORGCONFFILE".prev #this should force xwin to run xorgwizard
   [ -e /usr/bin/Xvesa ] && ln $VERB -sf Xvesa /usr/bin/X
   read NEXTWM </etc/windowmanager
   echo "$NEXTWM" > /etc/windowmanager #this makes change permanent.
   echo "$NEXTWM" > /tmp/wmexitmode.txt
   echo "$NEXTWM" > /tmp/xwin/wmexitmode.txt
   echo 'ICONWIPE' > /tmp/pup_event_change_icons.flg  ##+++2011-10-30
   _sync
   exec killall X
   ;;
  12) #xorgconfig
   which xorgcfg || exit $((12+128))
   xorgcfg || rxvt -e xorgcfg -textmode
   [ $? = 0 ] && {
    xmessage -bg "#ff8080" -center -title "xorgcfg" "Changes to $XORGCONFFILE will only take effect after X is restarted.

Click OK button to restart X..."
    exec restartwm
   }
   ;;
  13) #xvidtune
   which xvidtune || exit $((13+128))
   xmessage -bg violet -title "Xvidtune IMPORTANT HELP" "If you click the 'Show' button, the adjusted settings will be what
you want permanently. After hitting the 'Quit' button, you will be
given one last chance not to make the change permanent.
Thus:
'Show' to record the settings (for later inclusion into xorg.conf)
'Quit' to exit Xvidtune.

Please note that Xvidtune does not work with all video hardware, meaning
that changing the settings will cause no change on the screen." &
   XMSGPID=$!
   MODELINE0=`xvidtune | grep '^"[0-9]'`  ##"'geany
   kill $XMSGPID
   if [ "$MODELINE0" != "" ]; then
    xmessage -bg orange -title "Xvidtune: Modeline" -buttons Write:10,Quit:11 "The new modeline is:
$MODELINE0

Note, you will have to restart X for it to take effect. If it messes
up X, edit from commandline 'mp $XORGCONFFILE' and comment-out
the 'UseModes' line (do not delete it) in the Monitor section.

To insert this into $XORGCONFFILE, click 'Write' button...
To exit without changing xorg.conf, click 'Quit' button..."
    if [ $? -eq 10 ]; then
     PATTERNA="s/.*#modes0modeline0/ ModeLine $MODELINE0 #modes0modeline0/g"
     cat "$XORGCONFFILE" | sed -e "$PATTERNA" > "$tmpDir"/xorg.conf.new
     _sync
     echo "sed #.*UseModes/UseModes to $XORGCONFFILE :Step 1" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
     cat "$tmpDir"/xorg.conf.new | sed -e 's/#.*UseModes/UseModes/g' > "$XORGCONFFILE"
     _sync
    fi
   fi
   exit
   ;;
  15) #edit xorg.conf
   which defaulttexteditor || exit $((15+128))
   exec defaulttexteditor "$XORGCONFFILE"
   ;;
  16) #mouse/keyboard wizard
   which input-wizard || exit $((16+128))
   exec input-wizard
   ;;
  17) #tkgamma
   which tkgamma || exit $((17+128))
   exec tkgamma
   ;;
  18) #resolution changer
   which xrandrshell || exit $((18+128))
   exec xrandrshell
   ;;
 esac
 exit 0
fi

#come here when X is not running,
#comes here first time boot puppy, or whenever bootup
#and xorg.conf has been removed.

#v3.99 begin
echo "Lowlevel probing the video card and monitor..."
_do_ddcprobe(){
_edebug $Red0"_do_ddcprobe";

# +++2014-11-11 strace seems to help segfauting ddcprobe
 if [ "`which strace`" ]; then
  DDCPROBE=`strace -o "$tmpDir"/ddcprobe.strace_o ddcprobe`
 else
  DDCPROBE=`ddcprobe`
 fi
 echo "$DDCPROBE" > "$tmpDir"/ddcprobe.txt

##+++2012-09-16 2014-11-11
[ -s "$tmpDir"/ddcprobe.txt ] || { sleep 2;
 if [ "`which strace`" ]; then
  strace -o "$tmpDir"/ddcprobe.strace_o2 ddcprobe >"$tmpDir"/ddcprobe.txt
   else
  ddcprobe >"$tmpDir"/ddcprobe.txt;
 fi
}
[ "`grep '[[:alnum:]]' "$tmpDir"/ddcprobe.txt`" ] || { sleep 2;
 if [ "`which strace`" ]; then
  strace -o "$tmpDir"/ddcprobe.strace_o2 ddcprobe >"$tmpDir"/ddcprobe.txt
   else
  ddcprobe >"$tmpDir"/ddcprobe.txt
 fi
}
##+++2012-09-16 2014-11-11

  sleep 2s
  case "`cat "$tmpDir"/ddcprobe.txt`" in *edidfail*)
   _notice "ddcprobe failed to determine the video";
   _info "Trying again..";
   sleep 1
   DDCPROBE=`ddcprobe`
   echo "$DDCPROBE" > "$tmpDir"/ddcprobe.txt
   sleep 1s
   ;;
  esac

 _get_edid(){
    which get-edid >>$OUT || return 0
 which edid-decode >>$OUT || return 0
 if [ ! -s "$tmpDir"/ddcprobe.txt ]; then
 get-edid 1>"$tmpDir"/get-edid.out 2>"$tmpDir"/get-edid-2.txt
 [ "$?" = 0 ] || return 0
 edid-decode "$tmpDir"/get-edid.out >"$tmpDir"/ddcprobe.txt
 fi
 }
 _get_edid

if [ -n "`grep -i 'edidfail' "$tmpDir"/ddcprobe.txt`" ]; then
echo -e $Red1"ddcprobe still failed to determine the video.."$Res
echo -e "Exiting $0 now."
exit 20
fi
}
_do_ddcprobe

_add_to_xorgoverrides(){
#v3.93 rerwin: For some Tecra and Portege laptops, avoid an Xvesa hang by skipping "listmodes"
#v3.96 added trident line...
#v3.98 added more CYBER lines & corrected case
XVESALISTOK="yes"
TIMINGOK="yes"
if [ -s "$tmpDir"/ddcprobeoem.txt ]; then   #v3.99 begin
 if [ ! -f /etc/xorgoverrides ] || ! grep $Q -f "$tmpDir"/ddcprobeoem.txt /etc/xorgoverrides; then
  echo "`cat "$tmpDir"/ddcprobeoem.txt`" >> /etc/xorgoverrides  #append new signature if user canceled out from hung Xvesa
  _sync
 fi
fi
}
_add_to_xorgoverrides

_add_xorgoverrides_to_ddcprobe(){
if [ -f /etc/xorgoverrides ] && grep $Q -f /etc/xorgoverrides "$tmpDir"/ddcprobe.txt; then   #v3.99 end
 #HORIZSYNC=""
 #VERTREFRESH=""
 XVESALISTOK="no" #'Xvesa -listmodes' hangs.
 TIMINGOK="no"    #ddcprobe returns incomplete 'timing:' info (res's missing).
 [ "`grep 'mode: 640x480x64k' $tmpDir/ddcprobe.txt`" ]  || echo 'mode: 640x480x64k' >> "$tmpDir"/ddcprobe.txt
 [ "`grep 'mode: 640x480x16m' $tmpDir/ddcprobe.txt`" ]  || echo 'mode: 640x480x16m' >> "$tmpDir"/ddcprobe.txt
 [ "`grep 'mode: 800x600x64k' $tmpDir/ddcprobe.txt`" ]  || echo 'mode: 800x600x64k' >> "$tmpDir"/ddcprobe.txt
 [ "`grep 'mode: 800x600x16m' $tmpDir/ddcprobe.txt`" ]  || echo 'mode: 800x600x16m' >> "$tmpDir"/ddcprobe.txt
 [ "`grep 'mode: 1024x768x64k' $tmpDir/ddcprobe.txt`" ] || echo 'mode: 1024x768x64k' >> "$tmpDir"/ddcprobe.txt
 [ "`grep 'mode: 1024x768x16m' $tmpDir/ddcprobe.txt`" ] || echo 'mode: 1024x768x16m' >> "$tmpDir"/ddcprobe.txt
fi   #v3.93 end
}
_add_xorgoverrides_to_ddcprobe

_special_screens(){
#v3.97 improved method: CM=Classmate, 915=chip 10=generation#...
[ "`dmidecode -s bios-version | grep '^CM91510'`" ] && echo 'timing: 800x480@60' >> "$tmpDir"/ddcprobe.txt
#v3.95 recognise more special screens...
DMIDECODE=`dmidecode`
#recognise EeePC Asus laptop...
[ "`echo "$DMIDECODE" | grep 'Product Name: 701'`" ] && [ "`echo "$DMIDECODE" | grep 'Serial Number: EeePC'`" ] && echo 'timing: 800x480@60' >> "$tmpDir"/ddcprobe.txt
}
_special_screens

#If video adapter would hang Xvesa, tell user and allow only Xorg.
if [ -s "$tmpDir"/ddcprobeoem.txt ] || grep $Q -f /etc/xorgoverrides "$tmpDir"/ddcprobe.txt 2>>$ERR; then   #Xvesa hanger encountered
 dialog --colors --yes-label "Xorg" --no-label "Commandline" \
 --title "Puppy Video Wizard" --yesno "Welcome to the Puppy Video Wizard!

Puppy should have two X servers (to run Puppy in graphics mode):
\Z5Xvesa: A very small and simple \"Kdrive\" X server.
\Z4Xorg:  A very large and sophisticated X server.\Zn

\Z1Your video hardware could cause Xvesa to freeze or crash Puppy,
so your options are to use Xorg or exit to the command prompt.\Zn

\Z4It is recommended that you choose the\Zn \Zr\Zb\Z4<Xorg>\Zn \Z4button now,\Zn
but some quirky video hardware does not work with Xorg,
in which case you should operate from the command line.\Zn
\Z1Make sure you have at least 96 MB of RAM+swap\Zn, for Xorg to function.

Press \Z4ENTER\Zn for Xorg...
Press TAB (or right-arrow) key then \Z1E\Z0\ZbNTER\ZB key to use the command line...\Zn" 0 0
 [ $? -eq 0 ] || exit 0

else   #normal video adapter
#v3.99 end
 #offer to drop out to Xvesa...
 dialog --colors --backtitle "Puppy Video Wizard" --yes-label "Xorg" --no-label "Xvesa" \
 --title "Puppy Video Wizard" --yesno "Welcome to the Puppy Video Wizard!

Puppy should have two X servers installed (to run Puppy in graphics mode):
\Z5Xvesa: A very small and simple \"Kdrive\" X server.\Zn
\Z4Xorg:  A very large and sophisticated X server.\Zn

\Z5Xvesa works flawlessly on most pre 2007 video hardware,
simple to configure,\Zn
but one major disadvantage is that screen refresh rate is fixed.
Also, Xvesa has limited support for input devices, and lacks features
like hardware-acceleration (video may be jerky on slow PCs).

\Z4It is recommended that you choose the\Zn \Zr\Zb\Z4<Xorg>\Zn \Z4button now,\Zn
but some quirky video hardware does not work with Xorg,
in which case you can run this Wizard again
and choose the \Zb\Z0<\ZB\Z1X\Zb\Z0vesa>\Zn button.

Press ENTER for \Z4Xorg\Zn \Z1(probing will take several seconds)\Zn...
Press TAB (or right-arrow) key then ENTER key for \Z5Xvesa\Zn...

(pressing \Z7ESC\Zn key any dialog exits)" 0 0
 STATUS=$?  #v3.99
 [ "$STATUS" -eq '-1' -o "$STATUS" -eq '255' ] && exit 1   #v3.99 ESC to exit, same as above dialogs
 if [ "$STATUS" -eq 1 ];then   #v3.99 Xvesa selected
  ln $VERB -sf Xvesa /usr/bin/X #Xvesa becomming now the default X server ..
  #when start xorgwizard from commandline, it messes up xorg.conf...
  if [ -f "$XORGCONFFILE" ]; then
   if [ -f "$XORGCONFFILE".bak ]; then
    #basic test to see that file has right stuff in it...
    if [ -z "`grep -F 'VertRefresh' "$XORGCONFFILE" | grep -v '^[[:blank:]]*#'`" ]; then
     echo "Not found VertRefresh in xorg.conf.
 Copying $XORGCONFFILE.bak $XORGCONFFILE :Step 4" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s #DBG
     cp $VERB -f "$XORGCONFFILE".bak "$XORGCONFFILE"
    fi
   fi
  fi
  #exec xwin
  #....Xvesa Wizard will run automatically if no /etc/videomode.
  echo "Linked /usr/bin/X to Xvesa , type 'xwin' to start X 5" #KRG
  exit 0 #w478
 fi
fi   #v3.99

#resolution changer uses this. it must be removed here...
rm $VERB -f /etc/xrandrindex

#need to create xorg.conf so that at subsequent boots, xwin will not run xorgwizard...
echo "Copying ${XORGCONFFILE}0 $XORGCONFFILE :Step 3" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
cp $VERB "${XORGCONFFILE}0" "$XORGCONFFILE"
ln $VERB -sf Xorg /usr/bin/X

_say_dialog_msgbox_error(){
test "$*" && MSG_TEXT="$*" || MSG_TEXT='Some Error occurred. Press OK to proceed, ESC to exit.'
GMSG_TEXT=`gettext "$MSG_TEXT"`
test "${GMSG_TEXT//[[:blank:]]/}" && MSG_TEXT="$GMSG_TEXT"

TTEXT='ERROR'
GTTEXT=`gettext "$TTEXT"`
test "${GTTEXT//[[:blank:]]/}" && TTEXT=$GTTEXT

BTTEXT='ERROR'
GBTTEXT=`gettext "$BTTEXT"`
test "${GBTTEXT//[[:blank:]]/}" && BTTEXT=$GBTTEXT

dialog --colors --backtitle "$BTTEXT" --title "$TTEXT" --msgbox '\Z1'"$MSG_TEXT"'\Zn' 0 0
test $? = 0 || exit 253
}

while :
do

if test ! "$KEEP_XORG_CONF"; then
###completely rebuild xorg.conf...
if [ -f "$XORGCONFFILE" ]; then
echo "Moving $XORGCONFFILE $XORGCONFFILE.bak :Step 2" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
  mv $VERB -f "$XORGCONFFILE" "$XORGCONFFILE".bak
fi

# Dougal: moved echo to below xorg probing, since loop isn't slow anymore...
##clear
#34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
echo -e $Pink1"Probing video hardware 'Xorg -configure' , please wait.."$Res
#autoprobe...
Xorg -configure -logfile "$HOME"/Xorg_configure.log > "$tmpDir"/xorgprobe.txt 2>&1 #... config in $HOME/xorg.conf.new
XorgConfRV=$?
case $XorgConfRV in
0) :;; #OK
*) ERROR_MSG="Xorg -configure likely crashed!
Will will go on, but if the $XORGCONFFILE is incomplete,
the following dialogs may confuse you.
It is likely a problem with the kernel and the Xorg version.
We will go on now though"
GERROR_MSG=`gettext "$ERROR_MSG"`
test "${GERROR_MSG//[[:blank:]]/}" && ERROR_MSG=$GERROR_MSG
_say_dialog_msgbox_error "$ERROR_MSG"
;;
esac
##### Below commented out by Dougal:

#echo '.' #progress indicator completion.
# CARD0DRIVER=`cat "$tmpDir"/CARD0DRIVER`
# CARD0VENDOR=`cat "$tmpDir"/CARD0VENDOR`
#  CARD0BOARD=`cat "$tmpDir"/CARD0BOARD`
#  HORIZSYNC0=`cat "$tmpDir"/HORIZSYNC0`
#VERTREFRESH0=`cat "$tmpDir"/VERTREFRESH0`
##now have an almost-working xorg.conf, missing Screen section.
###############################END BIG ITERATION###########################

if test -f "$HOME"/xorg.conf.new && test -s "$HOME"/xorg.conf.new; then
### +++2015-12-07 problem macpup529 xorg v.1.11.3 ubuntu -configure
###               seems to delete /etc/X11/xorg.conf
test -f "$XORGCONFFILE" || cp $VERB "${XORGCONFFILE}0" "$XORGCONFFILE"
test -s "$XORGCONFFILE" || cp $VERB "${XORGCONFFILE}0" "$XORGCONFFILE"
## My (Dougal) alternate code:
######################################################################
#  Rather than pipe data to "while read", I use "here document" (at bottom),
#+ so that the loop doesn't run in a subshell -- hence variables
#+ (like HORIZSYNC0) are retained after the loop has ended...
while read aSECTION
do
 # this (outer) loop recieves a line containing **an entire section**
 # filter out entire sections we don't want
 case $aSECTION in
  *Section?\"Screen\"*0*)
   break #Screen 0 section is created further down.
  ;;
  *Section?\"Files\"*|*Section?\"Module\"*|*Section?\"ServerFlags\"*)
   continue #these sections pre-created in ${XORGCONFFILE}0
  ;;
 esac
 #  Params are retained for the entire aSECTION loop.
 #  I use TEMPSECTION since BASH is slow with file i/o -- so echo
 #+ only once for each section.
 #  Tabs at beginning of lines are lost when reading, so I add them
 #+ where appropriate (i.e. before every line except for Section borders).
 #+ ("\n"=newline ; "\t"=tab)
 IDENTIFIER=""; XSECTION=""; TEMPSECTION=""

 while read aLINE
 do
  case "$aLINE" in

   EndSection*)
    if [ "$XSECTION" = "InputDevice" -a "$IDENTIFIER" = "Keyboard0" ]; then
     TEMPSECTION="$TEMPSECTION
\tOption\t\"XkbRules\" \"xorg\"
\tOption\t\"XkbModel\" \"pc102\"
\tOption\t\"XkbLayout\" \"$XKEYMAP\" #xkeymap0"

    elif [ "$XSECTION" = "Monitor" -a "$IDENTIFIER" = "Monitor0" ]; then
     case $aLINE in
     *EndSection*) aLINE="$aLINE";;
     *)            aLINE="\t$aLINE";;
     esac
     TEMPSECTION="$TEMPSECTION
\tHorizSync\tHORIZSYNC0
\tVertRefresh\tVERTREFRESH0
\t#UseModes\t\"Modes0\" #monitor0usemodes
\tOption\t\"PreferredMode\" \"PREFERREDMODE0\"
$aLINE

Section \"Modes\"
\tIdentifier \"Modes0\"
\t#modes0modeline0
EndSection"
     #v3.98 rerwin - added preferredmode line, after usemodes line.
     continue # we added the line before the "Modes" section, so continue

    elif [ "$XSECTION" = "Monitor" ]; then
     #DBGecho "TEMPSECTION='$TEMPSECTION'" >/dev/console;sleep 9;#DBG
     NR=`echo $IDENTIFIER | tr -d '[[:alpha:][:punct:]]'`
     test "$NR" || NR=W

     case $aLINE in
     *EndSection*) aLINE="#$aLINE";;
     *)            aLINE="#\t$aLINE";;
     esac

     TEMPSECTION=`echo -e "$TEMPSECTION" | sed 's!^.*$!#&!;s!^#*\(.*\)!#\1!;s!^#*$!!'`
                                        #| sed 's!^[^#][[:alnum:][:punct:]]*!#!`
     # REM: Comment everything ...
     TEMPSECTION="$TEMPSECTION
#\tHorizSync    HORIZSYNC${NR}
#\tVertRefresh  VERTREFRESH${NR}
#\t#UseModes     \"Modes${NR}\" #monitor${NR}usemodes
#\tOption      \"PreferredMode\" \"PREFERREDMODE${NR}\"
$aLINE

#Section \"Modes\"
#\tIdentifier \"Modes${NR}\"
#\t#modes${NR}modeline${NR}
#EndSection"
     #v3.98 rerwin - added preferredmode line, after usemodes line.
     ADD_TAB=NO
     continue # we added the line before the "Modes" section, so continue

    elif [ "$XSECTION" = "Device" ]; then
     case $IDENTIFIER in
     Card0) :;;
     Card*) aLINE="#$aLINE";; #just for EndSection :)
     *) :;;
     esac
    fi

    TEMPSECTION="$TEMPSECTION\n$aLINE"
    continue # just added EndSection line -- no need to get to bottom
    ;;


   Section?\"*) XSECTION=${aLINE%\"*}; XSECTION=${XSECTION##*\"}
    TEMPSECTION="\n$aLINE"
    continue # just added line -- no need to get to bottom
    ;;

   *Screen*)
    case $aSECTION in
    Section*ServerLayout*)
     case $aLINE in
     Screen*0*Screen0*) :;;
     Screen*[1-9]*Screen[1-9]*) aLINE="#$aLINE";;
     *) :;;
     esac
     ;;
    *) :
    ;;
    esac
    ;;

   *Identifier*) IDENTIFIER=${aLINE%\"*}; IDENTIFIER=${IDENTIFIER##*\"}
    ;;
   *\"ZAxisMapping\"*) continue
    ;;
   *HorizSync*[0-9]*) set -- $aLINE; HORIZSYNC0="$2$3$4"; continue
    ;;
   *VertRefresh*[0-9]*) set -- $aLINE; VERTREFRESH0="$2$3$4"; continue
    ;;

   *Option*\"Protocol\"?\"auto\"*)
    case "`cat /etc/mousedevice 2>/dev/null`" in
     input/mice) TEMPSECTION="$TEMPSECTION
\tOption\t\"Protocol\" \"IMPS/2\" #mouse0protocol"
      continue
      ;;
     *ttyS*) TEMPSECTION="$TEMPSECTION
\tOption\t\"Protocol\" \"Microsoft\" #mouse0protocol"
      continue
      ;;
     *) TEMPSECTION="$TEMPSECTION
\tOption\t\"Protocol\" \"auto\" #mouse0protocol"
      continue
      ;;
    esac
    ;;

   */dev/mouse*|*/dev/input/mice*) #v2.21
    TEMPSECTION="$TEMPSECTION\n\t$aLINE"
    case "`cat /etc/xextraoptions`" in
     *2button*) BLA="" ;;
     *) BLA="#" ;;
    esac
    TEMPSECTION="$TEMPSECTION
\t${BLA}Option\t\"Emulate3Buttons\"
\t${BLA}Option\t\"Emulate3Timeout\" \"50\""
    if [ "`cat /etc/mousebuttons`" = "5" ]; then #scrollwheel
     BLA=""
    else
     BLA="#"
    fi
    TEMPSECTION="$TEMPSECTION
\t${BLA}Option\t\"ZAxisMapping\" \"4 5\" #scrollwheel"
    continue # we added the line at the beginning
    ;;
  esac

 if [ "$XSECTION" = "Device" ]; then
  case $IDENTIFIER in
    # REM: Only figure out Card0 ...
  Card0)
   FBODY=${aLINE%\"*}; FBODY=${FBODY##*\"}
    case "$aLINE" in
        *Driver*) CARD0DRIVER="$FBODY"; aLINE="$aLINE #card0driver" ;;
        *VendorName*) CARD0VENDOR="$FBODY"
         case "$CARD0VENDOR" in 'Unknown Vendor'|'')
          CARD0VENDOR="lscpi: `_command lspci | grep -i 'display controller' |rev|cut -f1 -d: |rev`"
          ;; esac
        ;;
        *BoardName*) CARD0BOARD="$FBODY"
         case "$CARD0BOARD" in 'Unknown Board'|'')
          CARD0BOARD="lscpi: `_command lspci | grep -i 'VGA compatible controller' |rev|cut -f1 -d: |rev`"
          ;; esac
        ;;
        *Screen[0-9]*Top?Of*Screen0*) aLINE="#$aLINE" ;;
        *Screen[0-9]*Left?Of*Screen0*) aLINE="#$aLINE" ;;
        *Screen[0-9]*Right?Of*Screen0*) aLINE="#$aLINE" ;;
        *Screen[0-9]*Bottom?Of*Screen0*) aLINE="#$aLINE" ;;
    esac
    ;;
    # REM: Disable all other cards for now...
  Card[1-9])
   ADD_TAB=NO
   #DBGecho -e "TEMPSECTION='$TEMPSECTION'" >/dev/console;sleep 1;#DBG
   #TEMPSECTION=`echo -e "$TEMPSECTION" | sed 's!^.*$!#&!; s!^[#]*\(.*\)!#\1!;s!^#*$! !;s!^#    \(#.*\)!\1!'`
    TEMPSECTION=`echo -e "$TEMPSECTION" | sed 's!^.*$!#&!; s!^#*\(.*\)!#\1! ; s!^#*$!!'`
   NR=`echo $IDENTIFIER | tr -d '[[:alpha:][:punct:]]'`
   test "$NR" || NR=W
   #FBODY=${aLINE%\"*} ; FBODY=${FBODY##*\"}
    case "$aLINE" in
     *Driver*)     aLINE="#\t$aLINE #card${NR}driver" ;;
     *VendorName*) aLINE="#\t$aLINE" ;;
     *BoardName*)  aLINE="#\t$aLINE" ;;
     # '#'*)         aLINE="$aLINE"    ;;
     *)            aLINE="#\t$aLINE" ;;
    esac
    ;;
  # REM: ??
  *) :;;
  esac
 fi

  [ "$DEBUG" ] && echo "ALINE='$aLINE'" >>"$HOME"/xorg.conf.new.ALINE;#DBG
  # add line to section (if we've come this far...)
  case $ADD_TAB in
  NO) TEMPSECTION="$TEMPSECTION\n$aLINE #YYY";;
  *)  TEMPSECTION="$TEMPSECTION\n\t$aLINE #XXX";;
  esac
  ADD_TAB='';

 done <<_END2
$(echo "$aSECTION" | sed 's!__XORGWIZARD__!\n!g')
_END2
echo -e "$TEMPSECTION" >> "$XORGCONFFILE"
_sync
done <<_END1
$(cat "$HOME"/xorg.conf.new | sed 's!$!__XORGWIZARD__!' | tr -d '\n' | sed 's/EndSection/EndSection\n/g' )
_END1
###################################################################
else
 echo -e $Red1"Xorg -configure failed to create some usable $$HOME/xorg.conf.new file."$Res
 echo -e $Red0"Please up- or downgrade the kernel or Xorg."$Res
 exit 252
fi

test "$CARD0VENDOR" || CARD0VENDOR="lscpi: `_command lspci | grep -i 'display controller' |rev|cut -f1 -d: |rev`"
test "$CARD0BOARD"  ||  CARD0BOARD="lscpi: `_command lspci | grep -i 'VGA compatible controller' |rev|cut -f1 -d: |rev`"
HORIZSYNC="$HORIZSYNC0"
VERTREFRESH="$VERTREFRESH0"

#v2.21 quick hack...
sed -e 's%/dev/input/mice%/dev/mouse%'  "$XORGCONFFILE" >"$tmpDir"/xorgconfmousefix
echo "Moving $tmpDir/xorgconfmousefix $XORGCONFFILE :Step 6" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
mv $VERB -f "$tmpDir"/xorgconfmousefix "$XORGCONFFILE"
fi

_add_alps_touchpad(){
test "$KEEP_XORG_CONF" && return 0
## Dougal (v2.16??):
## Kirk's code for adding synaptics touchpads (or my version of it...)
if grep -F $Q 'Alps' /proc/bus/input/devices; then
echo "Copied $XORGCONFFILE $XORGCONFFILE-without-synaptic :Step 9" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
 cp $VERB "$XORGCONFFILE" "$XORGCONFFILE"-without-synaptic
 modprobe $Q $VERB evdev
 if [ "`grep '^modprobe .*evdev' /etc/rc.d/rc.local`" = "" ]; then #v2.17
  echo 'modprobe $Q $VERB evdev' >> /etc/rc.d/rc.local
 fi
 # Where we want to insert new lines...
 OLD1='Section "Module"'
 OLD2='Section "ServerLayout"'
 OLD3='Section "Monitor"'

 # ...and the replacements
 NEW1='Section "Module"\
 \tLoad "synaptics"'

 NEW2='Section "ServerLayout"\
\tInputDevice "Synaptics Mouse" "AlwaysCore"'

 NEW3='Section "InputDevice"\
\tIdentifier "Synaptics Mouse"\
\tDriver "synaptics"\
\t#Option "Device" "/dev/psaux"\
\tOption "Protocol" "auto-dev"\
\tOption "LeftEdge" "120"\
\tOption "RightEdge" "930"\
\tOption "TopEdge" "120"\
\tOption "BottomEdge" "650"\
\tOption "FingerLow" "14"\
\tOption "FingerHigh" "15"\
\tOption "MaxTapTime" "0"\
\tOption "MaxTapMove" "110"\
\tOption "VertScrollDelta" "20"\
\tOption "MinSpeed" "0.3"\
\tOption "MaxSpeed" "0.75"\
\tOption "AccelFactor" "0.030"\
\tOption "EdgeMotionMinSpeed" "200"\
\tOption "EdgeMotionMaxSpeed" "200"\
\tOption "UpDownScrolling" "1"\
\tOption "CircularScrolling" "1"\
\tOption "CircScrollDelta" "0.1"\
\tOption "CircScrollTrigger" "2"\
EndSection\
\
Section "Monitor"'

 # now replace:
 echo "sed $NEW1 $NEW2 $NEW3
 $XORGCONFFILE-without-synaptic >$XORGCONFFILE :Step 10" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
 sed "s%$OLD1%$NEW1% ; s%$OLD2%$NEW2% ; s%$OLD3%$NEW3%" "$XORGCONFFILE"-without-synaptic >"$XORGCONFFILE"
fi
}
_add_alps_touchpad

_add_synaptics_touchpad(){
test "$KEEP_XORG_CONF" && return 0
if grep -F $Q 'Synaptics' /proc/bus/input/devices; then
 echo "Copying etc/X11/xorg.conf $XORGCONFFILE-without-synaptic :Step 11" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
 cp $VERB "$XORGCONFFILE" "$XORGCONFFILE"-without-synaptic
 modprobe $Q $VERB evdev
 echo 'modprobe $Q $VERB evdev' >> /etc/rc.d/rc.local
 # Where we want to insert new lines...
 OLD1='Section "Module"'
 OLD2='Section "ServerLayout"'
 OLD3='Section "Monitor"'

 # ...and the replacements
 NEW1='Section "Module"\
\tLoad "synaptics"'

 NEW2='Section "ServerLayout"\
\tInputDevice "Synaptics Mouse" "AlwaysCore"'

 NEW3='Section "InputDevice"\
\tIdentifier "Synaptics Mouse"\
\tDriver "synaptics"\
\t#Option "Device" "/dev/psaux"\
\tOption "Protocol" "auto-dev"\
\tOption "LeftEdge" "1700"\
\tOption "RightEdge" "5300"\
\tOption "TopEdge" "1700"\
\tOption "BottomEdge" "4200"\
\tOption "FingerLow" "25"\
\tOption "FingerHigh" "30"\
\tOption "MaxTapTime" "0"\
\tOption "MaxTapMove" "220"\
\tOption "VertScrollDelta" "100"\
\tOption "MinSpeed" "0.10"\
\tOption "MaxSpeed" "0.30"\
\tOption "AccelFactor" "0.0030"\
\tOption "SHMConfig" "on"\
\t#Option "Repeater" "/dev/ps2mouse"\
EndSection\
\
Section "Monitor"'

 # now replace:

 sed "s%$OLD1%$NEW1% ; s%$OLD2%$NEW2% ; s%$OLD3%$NEW3%" "$XORGCONFFILE"-without-synaptic >"$XORGCONFFILE"
fi
## end Kirk's code
}
_add_synaptics_touchpad

_do_xvesa_listmodes(){
test "$KEEP_XORG_CONF" && return 0
#modes supported by card...
CARDCHOICES=""
if [ -e /usr/bin/Xvesa -a "$XVESALISTOK" = "yes" ];then #format of each line: 1024x768x16
 echo -e '\nIf initialization freezes here, press ctrl-c and type "xorgwizard",\nselect "Xorg", choose monitor type and choose video mode.'   #v3.99
 grep '^oem:' "$tmpDir"/ddcprobe.txt > "$tmpDir"/ddcprobeoem.txt   #v3.99 current adapter signature
 Xvesa -listmodes 2>&1 | cut -f 2 -d ' ' | grep -E 'x16$|x24$' | sort -t x -n > "$tmpDir"/Xmodes.txt
 rm $VERB "$tmpDir"/ddcprobeoem.txt  #v3.99 didn't hang in Xvesa, so delete signature
else
 #the vesa 'mode:' lines returned by ddcprobe are very limited...
 grep '^mode:' "$tmpDir"/ddcprobe.txt | grep -E 'x64k|x16m'| cut -f 2 -d ' ' | sed -e 's/x64k/x16/g ; s/x16m/x24/g' > "$tmpDir"/Xmodes.txt
fi
_sync
CARDCHOICES=`cat "$tmpDir"/Xmodes.txt`
}
_do_xvesa_listmodes

#_video_resolution_choice(){

#code below is not distinguishing multiple cards/monitors...

#want to choose a resolution and color-depth...
##sometimes get bogus '1x' or '0x' pixel horiz resolution...

_check_xorg_configure(){
test "$KEEP_XORG_CONF" && return 0
#frequencies supported by monitor...
#Xorg probe may already have got this information...
if [ "$HORIZSYNC" = "" -o "$VERTREFRESH" = "" ];then
 #one or both no good, so set both no good...
   HORIZSYNC=""
 VERTREFRESH=""
else
 #both have values, but are they 'valid'? Xorg probe sometimes returns bogus values...
 BOGUSVAL="no"
 for oneVAL in `echo -n "$HORIZSYNC" | tr '\-' ' ' | tr ',' ' ' | tr -s ' '`
 do
  [ ${oneVAL%.*} -lt 10 ]  && BOGUSVAL="yes"
  [ ${oneVAL%.*} -gt 200 ] && BOGUSVAL="yes"
 done
 for oneVAL in `echo -n "$VERTREFRESH" | tr '\-' ' ' | tr ',' ' ' | tr -s ' '`
 do
  [ ${oneVAL%.*} -lt 10 ]  && BOGUSVAL="yes"
  [ ${oneVAL%.*} -gt 200 ] && BOGUSVAL="yes"
 done
 if [ "$BOGUSVAL" = "yes" ];then
  #one or both no good, so set both no good...
    HORIZSYNC=""
  VERTREFRESH=""
 fi
fi
}
#_check_xorg_configure

_get_horizsync_vertrefresh(){
test "$KEEP_XORG_CONF" && return 0
MONCHOICES=""
  MONCUTXY=""
if [ "$TIMINGOK" = "yes" ];then #v3.93
 #modes supported by monitor... format of each line: 1024x768@75
 #MONCHOICES=`echo "$DDCPROBE" | grep 'timing:' | cut -f 2 -d ' ' | grep -v 'Apple' | grep -v '8514A' | grep -v '(XGA2)' | sort -u`
 #get too many weird resolutions, maybe better just only allow these...

 #MONCHOICES=`grep -F 'timing:' $tmpDir/ddcprobe.txt | grep -E -v 'Apple|8514A|Mac II|\(XGA2\)' | grep -E ' 640x480@| 800x480@| 800x600@| 1024x600@| 1024x768@| 1280x768@| 1280x800@| 1280x1024@| 1360x768@| 1400x1050@| 1440x900@| 1600x1200@| 1680x1050@| 1920x1080@| 1920x1200@' | cut -f 2 -d ' ' | sort -u`
 MONCHOICES=`grep -o '[0-9]*x[0-9]*@[0-9]*' "$tmpDir"/ddcprobe.txt`

 #no, better if reject known weird resolutions...
 #MONCHOICES=`echo "$DDCPROBE" | grep 'timing:' | cut -f 2 -d ' ' | grep -vE 'Apple|8514A|XGA2|720x400|832x624|256x256|248x248|632x632|280x280' | sort -u`
 #...no, ddcprobe is buggy, returns random resolutions, cannot screen all out!
 MONCUTXY=`echo "$MONCHOICES" | cut -f 1 -d '@' | sort -u` #each line: 1024x768
fi

#if Xorg probe failed to determine monitor freq, try ddcprobe...
if [ "$HORIZSYNC" = "" -o "$VERTREFRESH" = "" ];then
 #MONFREQ=`grep -F 'monitorrange:' $tmpDir/ddcprobe.txt | cut -f 2-10 -d ' '`
 MONFREQ=`grep -m1 -iE 'monitorrange: |Monitor ranges .*: ' "$tmpDir"/ddcprobe.txt | cut -f2- -d ':'`
 #HORIZSYNC=`echo "$MONFREQ" | tr ' ' '\n' | while read line; do echo $line | grep -w -e '[0-9]*Hz'| grep -o -e '[0-9]*\-[0-9]*' ;done`
 HORIZSYNC=`echo "$MONFREQ" | tr ' ' '\n' |while read line; do echo $line | grep -w -e '[0-9]*-[0-9]*[[:alpha:]]Hz' | grep -oE -e '[0-9]+-[0-9]+' ;done`
 [ "$HORIZSYNC" ] || HORIZSYNC=`echo -n "$MONFREQ" | cut -f 1 -d ',' | tr -d '[[:space:]][[:alpha:]]'`
 #VERTREFRESH=`echo "$MONFREQ" | tr ' ' '\n' |while read line; do echo $line | grep -w -e '[0-9]*\-[0-9]*[[:alpha:]]Hz' | grep -o -e '[0-9]*\-[0-9]*' ;done`
 VERTREFRESH=`echo "$MONFREQ" | tr ' ' '\n' | while read line; do echo $line | grep -w -e '[0-9]*Hz'| grep -oE -e '[0-9]+-[0-9]+' ;done`
 [ "$VERREFRESH" ] || VERTREFRESH=`echo -n "$MONFREQ" | cut -f 2 -d ',' | tr -d '[[:space:]][[:alpha:]]'`
fi

#ddcprobe on my laptop returns one 'timing:' line but no 'monitorrange:', so
#can fall back to calculating freqs...
if [ "$MONCHOICES" != "" ]; then
 ##hmmm, maybe always use the freqs of the 'timing:' lines rather than the
 ##'monitorrange:' as it always seems to be too high...
 if [ "$HORIZSYNC" = "" -o "$VERTREFRESH" = "" ]; then
    UHORIZSYNC=32  #start with mediocre values.
  UVERTREFRESH=60  # /
    LHORIZSYNC=30  # /
  LVERTREFRESH=56  # /
  for oneCH in $MONCHOICES #format: 1024x768@75
  do
   oneVERT=${oneCH#*@}
   oneX=${oneCH%x*}
   oneY=${oneCH#*x}; oneY=${oneY%@*}
   oneHORIZ=`gtf $oneX $oneY $oneVERT | grep -o 'hsync:.*' | cut -f 2 -d ' ' | cut -f 1 -d '.'`
   test "$oneVERT" -a "$oneX" -a "$oneY" -a "$oneHORIZ" || continue
   [ $oneVERT -lt $LVERTREFRESH ] && LVERTREFRESH=$oneVERT
   [ $oneHORIZ -gt $UHORIZSYNC ]  &&   UHORIZSYNC=$oneHORIZ
   #it seems ddcprobe truncates any fractional part off vertrefresh...
   oneVERT=$((oneVERT + 1))
   oneHORIZ=`gtf $oneX $oneY $oneVERT | grep -o 'hsync:.*' | cut -f 2 -d ' ' | cut -f 1 -d '.'`
   test "$oneVERT" -a "$UVERTREFRESH" -a "$oneHORIZ" -a "$LHORIZSYNC" || continue
   [ $oneVERT -gt $UVERTREFRESH ] && UVERTREFRESH=$oneVERT
   [ $oneHORIZ -lt $LHORIZSYNC ]  &&   LHORIZSYNC=$oneHORIZ
  done
  #v3.93 hmmm, above still can round down too much, add 2...
  UHORIZSYNC=$((UHORIZSYNC + 2))
    HORIZSYNC="${LHORIZSYNC}-${UHORIZSYNC}"
  VERTREFRESH="${LVERTREFRESH}-${UVERTREFRESH}"
 fi
fi
}
#_get_horizsync_vertrefresh

_choose_resolution_fallback(){
test "$KEEP_XORG_CONF" && return 0
#if ddcprobe also failed, have to ask monitor type...
if [ "$HORIZSYNC" = "" -o "$VERTREFRESH" = "" ];then #"" if monitor not plug-n-play.
 ## Dougal: (v2.16??) removed MONTYPES param, added case-structure below
 ##  Dougal: modified formatting of list: old tag format used to give problems,
 ##+ since we had the same tag for different options! (eg. "h31.5-90v60")
 MONCHOICES=""
   MONCUTXY=""
 while :;do
  #need a dialog, ask generic monitor type...
  dialog --no-collapse --no-cancel --backtitle "Puppy Video Wizard" \
  --title "Puppy Video Wizard" --menu "Automatic probing of your monitor was unsuccessful, so you now need
to choose from a list of generic monitor types.
Choose the highest specification that describes your monitor.
LCD: Liquid Crystal Display.
CRT: Cathode Ray Tube (normal monitor).
Choose \"Z\" if you have the monitor user manual, and it has the
horizontal and vertical frequency specifications.
DOWN-ARROW to highlight choice, ENTER key to finish..."  0 0 0 \
 "A" "h31.5v40-70       LCD Panel 640x480" \
 "B" "h31.5-37v40-70    LCD Panel 800x600" \
 "B2" "h31.5-90v60      LCD Panel 1024x600" \
 "C" "h31.5-48.5v40-70  LCD Panel 1024x768" \
 "D" "h31.5-90v60       LCD Panel 1280x800" \
 "E" "h31.5-67v50-75    LCD Panel 1280x1024" \
 "F" "h31.5-90v60       LCD Panel 1360x768" \
 "G" "h31.5-90v59-75    LCD Panel 1400x1050" \
 "H" "h31.5-100v59-75   LCD Panel 1440x900" \
 "I" "h31.5-90v60       LCD Panel 1600x1200" \
 "J" "h31.5-90v60       LCD Panel 1680x1050" \
 "K" "h30-68v67         LCD HDTV  1920x1080" \
 "L" "h31.5-90v60       LCD Panel 1920x1200" \
 "M" "h31.5v50-61       CRT 640x480" \
 "N" "h31.5-35v50-61    CRT 800x600 (old 14inch monitor)" \
 "O" "h31.5-48.5v56-72  CRT 1024x768 (basic 15inch monitor)" \
 "P" "h31.5-79v50-90    CRT 1280x1024 (basic 17inch monitor)" \
 "Q" "h31.5-90v50-90    CRT 1400x1050" \
 "R" "h31.5-94v50-90    CRT 1600x1200" \
 "Z" "SELECT THIS IF YOU KNOW MONITOR FREQUENCY SPECS" \
  2>"$tmpDir"/taggen.txt
  RV1="$?";
  [ "$RV1" -eq -1 -o "$RV1" -eq 255 ] && exit 1
  CHOICE=`cat "$tmpDir"/taggen.txt 2>>$ERR | tail -n1`
  [ "$CHOICE" ] || continue
  ## Dougal: use case-structure for setting params -- safer than the old way
  ## (not sure why Barry only uses 16-bit, maybe worth improving?)
  case "$CHOICE" in
   A) # "h31.5v40-70        LCD Panel 640x480"
     REC_VIDEO_MODE="640x480x16"
     HORIZSYNC="31.5"
     VERTREFRESH="40-70"
     ;;
   B) # "h31.5-37v40-70     LCD Panel 800x600"
     REC_VIDEO_MODE="800x600x16"
     HORIZSYNC="31.5-37"
     VERTREFRESH="40-70"
     ;;
   B2) # "h31.5-90v60       LCD Panel 1024x600"
     REC_VIDEO_MODE="1024x600x16"
     HORIZSYNC="31.5-90"
     VERTREFRESH="60"
     ;;
   C) # "h31.5-48.5v40-70   LCD Panel 1024x768"
     REC_VIDEO_MODE="1024x768x16"
     HORIZSYNC="31.5-48.5"
     VERTREFRESH="40-70"
     ;;
   D) # "h31.5-90v60        LCD Panel 1280x800"
     REC_VIDEO_MODE="1280x800x16"
     HORIZSYNC="31.5-90"
     VERTREFRESH="60"
     ;;
   E) # "h31.5-67v50-75     LCD Panel 1280x1024"
     REC_VIDEO_MODE="1280x1024x16"
     HORIZSYNC="31.5-67"
     VERTREFRESH="50-75"
     ;;
   F) # "h31.5-90v60        LCD Panel 1360x768"
     REC_VIDEO_MODE="1360x768x16"
     HORIZSYNC="31.5-90"
     VERTREFRESH="60"
     ;;
   G) # "h31.5-90v59-75     LCD Panel 1400x1050"
     REC_VIDEO_MODE="1400x1050x16"
     HORIZSYNC="31.5-90"
     VERTREFRESH="59-75"
     ;;
   H) # "h31.5-100v59-75    LCD Panel 1440x900"
     REC_VIDEO_MODE="1440x900x16"
     HORIZSYNC="31.5-100"
     VERTREFRESH="59-75"
     ;;
   I) # "h31.5-90v60        LCD Panel 1600x1200"
     REC_VIDEO_MODE="1600x1200x16"
     HORIZSYNC="31.5-90"
     VERTREFRESH="60"
     ;;
   J) # "h31.5-90v60        LCD Panel 1680x1050"
     REC_VIDEO_MODE="1680x1050x16"
     HORIZSYNC="31.5-90"
     VERTREFRESH="60"
     ;;
   K) # "h30-68v67      LCD HDTV  1920x1080"
     REC_VIDEO_MODE="1920x1080x16"
     HORIZSYNC="30-68"
     VERTREFRESH="67"
     ;;
   L) # "h31.5-90v60        LCD Panel 1920x1200"
     REC_VIDEO_MODE="1920x1200x16"
     HORIZSYNC="31.5-90"
     VERTREFRESH="60"
     ;;
   M) # "h31.5v50-61        CRT 640x480"
     REC_VIDEO_MODE="640x480x16"
     HORIZSYNC="31.5"
     VERTREFRESH="50-61"
     ;;
   N) # "h31.5-35v50-61     CRT 800x600 (old 14inch monitor)"
     REC_VIDEO_MODE="800x600x16"
     HORIZSYNC="31.5-35"
     VERTREFRESH="50-61"
     ;;
   O) # "h31.5-48.5v56-72   CRT 1024x768 (basic 15inch monitor)"
     REC_VIDEO_MODE="1024x768x16"
     HORIZSYNC="31.5-48.5"
     VERTREFRESH="56-72"
     ;;
   P) # "h31.5-79v50-90     CRT 1280x1024 (basic 17inch monitor)"
     REC_VIDEO_MODE="1280x1024x16"
     HORIZSYNC="31.5-79"
     VERTREFRESH="50-90"
     ;;
   Q) # "h31.5-90v50-90     CRT 1400x1050"
     REC_VIDEO_MODE="1400x1050x16"
     HORIZSYNC="31.5-90"
     VERTREFRESH="50-90"
     ;;
   R) # "h31.5-94v50-90     CRT 1600x1200"
     REC_VIDEO_MODE="1600x1200x16"
     HORIZSYNC="31.5-94"
     VERTREFRESH="50-90"
     ;;
   Z) # "SELECT THIS IF YOU KNOW MONITOR FREQUENCY SPECS"
     dialog --title "Xorg Video Wizard" --inputbox "Please enter the horizontal frequency range of the monitor, in KHz. An example is given:" 0 0 "31.5-48.5" 2>"$tmpDir"/taghoriz.txt
     RV2="$?";
     [ "$RV2" -eq -1 -o "$RV2" -eq 255 ] && exit 1
     dialog --title "Xorg Video Wizard" --inputbox "Please enter the vertical frequency range of the monitor, in Hz. An example is given:" 0 0 "56-72" 2>"$tmpDir"/tagvert.txt
     RV3="$?";
     [ "$RV3" -eq -1 -o "$RV3" -eq 255 ] && exit 1
       HORIZSYNC=`cat "$tmpDir"/taghoriz.txt 2>>$ERR | tail -n1`
     VERTREFRESH=`cat "$tmpDir"/tagvert.txt 2>>$ERR | tail -n1`
     [ "$HORIZSYNC" ]   || continue
     [ "$VERTREFRESH" ] || continue
     # comment out -- it's the default from above
     #REC_VIDEO_MODE="800x600x16"
     ;;
  esac
  break
 done
fi
}
#_choose_resolution_fallback

_write_resolution_list(){
test "$KEEP_XORG_CONF" && return 0
#if have MONCHOICES, that's all i want to display (with warning if not in card list).
#if no MONCHOICES, then display card list only...
echo -n "" > "$tmpDir"/finalchoices.txt
if [ "$MONCHOICES" = "" ];then
 for oneCHOICE in $CARDCHOICES
 do
  if [ "$REC_VIDEO_MODE" = "$oneCHOICE" ];then
   echo "$oneCHOICE \"Unconfirmed MAXIMUM for monitor, OK for card\" \\" >> "$tmpDir"/finalchoices.txt
  else
   echo "$oneCHOICE \"Unconfirmed for monitor, OK for video card\" \\"   >> "$tmpDir"/finalchoices.txt
  fi
 done
 for oneCHOICE in 640x480x16 800x600x16 1024x600x16 1024x768x16 1280x800x16 1280x1024x16 1360x768x16 1400x1050x16 1440x900x16 1600x1200x16 1680x1050x16 1920x1080x16 1920x1200x16 640x480x24 800x600x24 1024x600x24 1024x768x24 1280x800x24 1280x1024x24 1360x768x24 1400x1050x24 1440x900x24 1600x1200x24 1680x1050x24 1920x1080x24 1920x1200x24
 do
  case "$CARDCHOICES" in *$oneCHOICE*) :;; *) # we've done CARDCHOICES above
   echo "$oneCHOICE \"Unconfirmed for monitor, maybe NOT OK for card\" \\" >> "$tmpDir"/finalchoices.txt ;;
  esac
 done
else
 #decide on a default... (already 800x600x16 earlier) no, reset...
 REC_VIDEO_MODE=""
 case "$MONCUTXY" in
  *1024x768*) REC_VIDEO_MODE="1024x768x16" ;;
  *800x600*)  REC_VIDEO_MODE="800x600x16" ;;
 esac
 for oneCUTXY in $MONCUTXY #1024x768
 do
  for oneCHOICE in ${oneCUTXY}x16 ${oneCUTXY}x24
  do
   case "$CARDCHOICES" in
    *$oneCHOICE*) echo "$oneCHOICE \"OK for monitor, OK for video card\" \\"     >> "$tmpDir"/finalchoices.txt ;;
    *)            echo "$oneCHOICE \"OK for monitor, maybe NOT OK for card\" \\" >> "$tmpDir"/finalchoices.txt ;;
   esac
  done
 done
fi
}
#_write_resolution_list

_choose_resolution(){
test "$KEEP_XORG_CONF" && return 0
FINALCHOICES=`cat "$tmpDir"/finalchoices.txt | sort -t x -n` #v3.93 rerwin
echo '#!/bin/sh' > "$tmpDir"/choosexmodedlg
#echo -n "dialog --colors --extra-button --aspect 11 --default-item $REC_VIDEO_MODE" >> "$tmpDir"/choosexmodedlg
echo -n "dialog --colors --aspect 11 --default-item $REC_VIDEO_MODE" >> "$tmpDir"/choosexmodedlg
#echo ' --no-collapse --title "Puppy Video Wizard" --ok-label "OK" --extra-label "TEST" --cancel-label "EXIT" --menu "Please use the UP/DOWN ARROW keys to select a #video mode. Choices are
#shown in the format WidthxHeightxBits, where Width and Height are
#screen resolution in pixels, 16/24 bits = 65,536/16,777,216 colors.
#' >> "$tmpDir"/choosexmodedlg
echo ' --no-collapse --ok-label "OK" --cancel-label "EXIT" --title "Puppy Video Wizard" --menu "Please use the UP/DOWN ARROW keys to select a video mode.
Choices are shown in the format WidthxHeightxBits,
where Width and Height are screen resolution in pixels,
16/24 bits = 65,536/16,777,216 colors.
' >> "$tmpDir"/choosexmodedlg
[ "$REC_VIDEO_MODE" ] && echo "CANNOT DECIDE? ...${REC_VIDEO_MODE} is suggested as a good choice."  >> "$tmpDir"/choosexmodedlg
#echo '\Z1RECOMMENDATION: Choose <TEST> button to verify it works!\Z0' >> "$tmpDir"/choosexmodedlg
#echo '
#OK:     Just press ENTER key to immediately use the selected mode...
#TEST: TAB key then ENTER to test and debug the mode before using it...
#EXIT: Exit to text-mode console, do not start X...\Zn" 0 0 0 \' >> "$tmpDir"/choosexmodedlg #'geanyfix.
echo '
OK:   Just press ENTER key to immediately use the selected mode...
EXIT: Exit to text-mode console, do not start X...\Zn" 0 0 0 \' >> "$tmpDir"/choosexmodedlg #'geanyfix.

echo "$FINALCHOICES" >> "$tmpDir"/choosexmodedlg
echo " 2>$tmpDir/tag.txt" >> "$tmpDir"/choosexmodedlg
echo 'exit $?' >> "$tmpDir"/choosexmodedlg

chmod $VERB 0755 "$tmpDir"/choosexmodedlg
"$tmpDir"/choosexmodedlg
XAUTO=$? #=0 for automatic.
[ "$XAUTO" = 0 ] || exit 3
#[ "$XAUTO" -ne 0 -a "$XAUTO" -ne 3 ] && exit 0 #drop out to console. w005 uncommented.

CHOSENRES=`cat "$tmpDir"/tag.txt 2>>$ERR | tail -n1`
[ "$CHOSENRES" ] || CHOSENRES="800x600x16" #default
FINALDEPTH=${CHOSENRES##*x}
FINALXY=${CHOSENRES%x*}
}
#_choose_resolution
##lcd panels usually work at one freq only...

_write_srceen_section(){
test "$KEEP_XORG_CONF" && return 0
#now write the Screen section...
SCRNSECTION="
Section \"Screen\"
\tIdentifier\t\"Screen0\"
\tDevice\t\"Card0\"
\tMonitor\t\"Monitor0\"
\tDefaultDepth\t$FINALDEPTH
\tSubsection\t\"Display\"
\t\tDepth\t$FINALDEPTH
\t\tModes\t\"${FINALXY}\"
\tEndSubsection
EndSection
"
echo -e "$SCRNSECTION" >> "$XORGCONFFILE"
echo "Echoed $SCRNSECTION to $XORGCONFFILE :Step 7" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
}
#_write_srceen_section

_lower_vert_refresh(){
#some monitors have a very high vertrefresh, and Xorg uses it, but it is too high...
#v2.13b2 was 95, make it 85...
##  Dougal: note that old code (line below) didn't work in my case: 50.0-160.0
##  + seems like the ".0" gave it problems, so ended up with MAXVERT=""
#MAXVERT=`echo -n "$VERTREFRESH" | grep -o '[ -,][0-9]*$' | sed -e 's/^[ -,]//g'`
MAXVERT=${VERTREFRESH#*-}; MAXVERT=${MAXVERT%.*}
if [ "$MAXVERT" -gt 85 ]; then
 #VPATTERN="s/${MAXVERT}$/85/g"
 #VERTREFRESH=`echo -n "$VERTREFRESH" | sed -e "$VPATTERN"`
 echo "MAXVERT='$MAXVERT' gt 85 , setting it to 85" >> "$tmpDir"/xorgwizard.messages
 VERTREFRESH=${VERTREFRESH/$MAXVERT/85}
elif [ "$MAXVERT" -gt 74 ] && [ "$MAXVERT" -lt 86 ]; then #want to cut down rating on modern LCD panels also...
   #and if manufactured in 2004 or later...
   #(so older CRTs in this range maxvert 75-85 will get rejected)
   if grep '^manufacture: ' "$tmpDir"/ddcprobe.txt | grep $Q -E ' 20[1-9][0-9]| 200[4-9]'; then
    let LCDMAXVERT=MAXVERT-4

    VERTREFRESH=${VERTREFRESH/$MAXVERT/$LCDMAXVERT}
    echo "MAXVERT='$MAXVERT' in range between 75-85
monitor manufactured later then year 2003
lowering it by 4 to '$VERTREFRESH'" >> "$tmpDir"/xorgwizard.messages
   fi
fi
}
#_lower_vert_refresh

_set_horizsync_vertrefresh(){
test "$KEEP_XORG_CONF" && return 0
PREFERREDMODE=$FINALXY   #v3.98 rerwin - set monitor preferred mode same as screen mode.
#horiz and vert sync ranges and preferred mode were found earlier but not written... v3.98
cp $VERB -f "$XORGCONFFILE" "$tmpDir"/xorg.conf.tmp

echo "sed $HORIZSYNC $VERTREFRESH $PREFERREDMODE from
$tmpDir/xorg.conf.tmp >$XORGCONFFILE :Step 8" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
sed -e "s/HORIZSYNC0/$HORIZSYNC/g ; s/VERTREFRESH0/$VERTREFRESH/g ; s/PREFERREDMODE0/$PREFERREDMODE/g" "$tmpDir"/xorg.conf.tmp >"$XORGCONFFILE"   #v3.98 rerwin - added update of preferredmode.
_sync
}
#_set_horizsync_vertrefresh

_do_915resolution(){
#v2.12
#note, this code will have to go into 'xwin' also.
#video bios may not offer the chosen resolution if it is widescreen.
#for intel video there is a way to patch the video bios, but this
#has to be run at every boot...
if grep -F 'oem:' "$tmpDir"/ddcprobe.txt | grep $Q -F 'Intel'; then
 #MYXYRES=`echo -n "$CHOSENRES" | cut -f 1-2 -d 'x'`
 MYXYRES=${CHOSENRES%x*}
 if ! grep $Q "$MYXYRES" "$tmpDir"/Xmodes.txt; then
  MYXRES=${CHOSENRES%%x*}
  MYYRES=${CHOSENRES%x*}; MYYRES=${MYYRES#*x}
  #this is an app that patches video-bios, but in ram only...
  915resolution 38 $MYXRES $MYYRES
  #...replaces mode 38 (1024x768).
  #create something for xwin to eecute...
  echo "915resolution 38 $MYXRES $MYYRES" > /etc/resolutionfix
 fi
else
 #in case plug usb or multisession-cd into different pc...
 [ -f /etc/resolutionfix ] && rm $VERB -f /etc/resolutionfix
fi
 }
#_do_915resolution
#}
#_video_resolution_choice

_keep_variables(){
#script also needs these max freqs later on in Tweak_refresh dialog
MAXHORIZ=${HORIZSYNC#*-}   #; MAXHORIZ=${MAXHORIZ%.*}
 MINVERT=${VERTREFRESH%-*} #; MINVERT=${MINVERT%.*}
MINHORIZ=${HORIZSYNC%-*}   #; MINHORIZ=${MINHORIZ%.*}
}
#_keep_variables

_write_hardware_profile(){
test "$KEEP_XORG_CONF" && return 0
#v2.13 want a hardware profile so can bootup on different PCs...
   PROFILECHIP=`grep -m1 '^oem: '     "$tmpDir"/ddcprobe.txt |cut -f2  -d ' ' | sed 's/[[:punct:]]/_/g'`  #was cut -f 2-4 -d ' '| tr ' ' '_' | sed -e 's/[^0-9a-zA-Z]/_/g'
 PROFILEVENDOR=`grep -m1 '^vendor: '  "$tmpDir"/ddcprobe.txt |cut -f2- -d ' ' | sed 's/[[:punct:]]/_/g'`
PROFILEPRODUCT=`grep -m1 '^product: ' "$tmpDir"/ddcprobe.txt |cut -f2- -d ' ' | sed 's/[[:punct:]]/_/g'`
   PROFILECHIP="${PROFILECHIP} ${PROFILEPRODUCT}"
[ "${PROFILECHIP// /}" ] || PROFILECHIP=`lspci | grep -m1 -iE 'graph|vga|display' |cut -f3 -d':' | tr -s '[[:blank:]]' | sed 's%^ *%%;s% *$%%;s%[^[:alnum:]]%_%g'`
## Dougal: maybe add "^monitorname: "??
#PROFILEMONITOR=`grep -E -m1 '^monitorrange: |^monitorid: |^eisa: ' "$tmpDir"/ddcprobe.txt | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#v3.95 'eisa:' and 'id:' return fluctuating values on some PCs, so search in this order...
 PROFILEMONITOR=`grep -iE '^monitorid: |^Monitor name: ' "$tmpDir"/ddcprobe.txt         | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
 [ "$PROFILEMONITOR" ] || PROFILEMONITOR=`grep '^monitorname: ' "$tmpDir"/ddcprobe.txt  | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
 [ "$PROFILEMONITOR" ] || PROFILEMONITOR=`grep '^monitorrange: ' "$tmpDir"/ddcprobe.txt | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#[ "$PROFILEMONITOR" ] || PROFILEMONITOR=`grep '^dtiming: ' "$tmpDir"/ddcprobe.txt      | tail -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
 [ "$PROFILEMONITOR" ] || PROFILEMONITOR=`grep '^manufacture: ' "$tmpDir"/ddcprobe.txt  | tail -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`
#[ "$PROFILEMONITOR" ] || PROFILEMONITOR=`grep '^eisa: ' "$tmpDir"/ddcprobe.txt         | head -n 1 | cut -f 2 -d ':' | tr -d ' ' | sed -e 's/[^0-9a-zA-Z]/_/g'`

KERNEL_RELEASE=`uname -r`
V=`Xorg -version 2>&1|sed '/^$/d'`
CV=`echo "$V" |sed 's|^|#|'`
version=`echo "$V" |head -n2 |grep -E -i -o 'date.*|version.*|x server [0-9].*' | tr '\n' ' '`
(
echo "#Linux Kernel : $KERNEL_RELEASE"
echo "#Xorg Server Version :"
echo "$CV"
echo "#PuppyHardwareProfile=${PROFILECHIP}-${PROFILEMONITOR}"
) >> "$XORGCONFFILE"
#create a copy of xorg.conf with the profile in the filename...
echo "Copyied $XORGCONFFILE $XORGCONFFILE.${PROFILECHIP}-${PROFILEMONITOR} :Step 12" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
/bin/cp $VERB -a --remove-destination "$XORGCONFFILE" "$XORGCONFFILE".${PROFILECHIP}-${PROFILEMONITOR}
card0driver=`grep -m1 '#card0driver' "$XORGCONFFILE" | awk -F '"' '{print $2}'`
[ "$card0driver" ] || card0driver=NONE
/bin/cp $VERB -a --remove-destination "$XORGCONFFILE" "$XORGCONFFILE".${CARD0DRIVER}-${card0driver}-${PROFILECHIP}-${PROFILEMONITOR}

#also write profile to the backup (used for tweaking vertrefresh)...
(
echo "#Linux Kernel : $KERNVERS"
echo "#Xorg Server Version :"
echo "$CV"
echo "#PuppyHardwareProfile=${PROFILECHIP}-${PROFILEMONITOR}"
) >> "$tmpDir"/xorg.conf.tmp
}
#_write_hardware_profile

_ask_srceen_mode(){

_check_xorg_configure

_get_horizsync_vertrefresh

_choose_resolution_fallback

_write_resolution_list

_choose_resolution

_write_srceen_section

_lower_vert_refresh

_set_horizsync_vertrefresh

_do_915resolution

_keep_variables

_write_hardware_profile

CHOSENVERT=""
test -f "$XORGCONFFILE" -a -s "$XORGCONFFILE"
}

_get_driver_description(){
unset DESCR
test "$*" || return $?
case $* in
apm)           DESCR='Alliance ProMotion video driver';;
ark)           DESCR='driver for ARK Logic chipset';;
ast)           DESCR='Driver for ASPEED Graphics Chipsets';;
ati)           DESCR='ATI video driver';;
chips)         DESCR='Chips and Technologies video driver';;
cirrus)        DESCR='Cirrus Logic video driver';;
cyrix)         DESCR='Cyrix video driver';;
dummy)         DESCR='Driver for Dummy chipsets';;
exa)           DESCR='new 2D acceleration architecture for X.Org'
# EXA  provides a simple API for video drivers to implement for 2D accel-
# eration.  It is a module loaded by drivers, and is not intended  to  be
# loaded  on  its  own.   See your driver's manual page for how to enable EXA.
;;
fbdev)         DESCR='video driver for framebuffer device';;
geode)         DESCR='Driver for AMD Geode Chipsets';;
glide)         DESCR='Glide video driver for Voodoo 1 and 2 boards';;
glint)         DESCR='GLINT/Permedia video driver';;
i128)          DESCR='Number 9 I128 Xorg video driver';;
i740)          DESCR='Intel i740 video driver';;
i810)          DESCR='Older Intel driver. Superseeded by "intel" driver';;
impact)        DESCR='Impact video driver for SGI Indigo2';;
imstt)         DESCR='Integrated Micro Solutions Twin Turbo 128 driver';;
intel)         DESCR='Intel integrated graphics chipsets';;
mach64)        DESCR='Driver for ATI Mach64 chipsets';;
mga)           DESCR='Matrox video driver';;
modesetting)   DESCR='video driver for framebuffer device';;
nested)        DESCR='Driver for nested servers';;
neomagic)      DESCR='Neomagic video driver';;
newport)       DESCR='Newport video driver';;
nsc)           DESCR='driver for National Semiconductors GEODE';;
nv)            DESCR='NVIDIA video driver';;
omap)          DESCR='OMAP SoC graphics';;
openchrome)    DESCR='video driver for VIA Unichromes';;
qlx)           DESCR='Driver for QXL virtual graphics';;
r128)          DESCR='ATI Rage 128 video driver';;
radeon)        DESCR='ATI RADEON video driver';;
radeonhd)      DESCR='AMD GPG (ATI) R5xx/R6xx video driver';;
rendition)     DESCR='Rendition video driver';;
s3)            DESCR='S3 video driver';;
s3virge)       DESCR='S3 ViRGE video driver';;
savage)        DESCR='S3 Savage video driver';;
siliconmotion) DESCR='Silicon Motion video driver';;
sis)           DESCR='SiS and XGI video driver';;
sisusb)        DESCR='SiS USB video driver';;
sunbw2)        DESCR='BW2 video driver';;
suncg3)        DESCR='CG3 video driver';;
suncg6)        DESCR='GX/Turbo GX video driver';;
suncg14)       DESCR='CG14 video driver';;
ffb|sunffb)    DESCR='SUNFFB video driver';;
sunleo)        DESCR='Leo ZX or T(urbo)ZX video driver';;
suntcx)        DESCR='TCX video driver';;
tdfx)          DESCR='3Dfx video driver';;
tga)           DESCR='driver for Digital chipsets';;
trident)       DESCR='Trident video driver';;
tseng)         DESCR='Tseng Labs video driver';;
v4l)           DESCR='video4linux driver'
# v4l  is  an Xorg driver for video4linux cards.  It provides a Xvideo extension port for video overlay.  Just add the driver to the module
# list within the module section of your xorg.conf file if you want to use it.  There are no config options.
;;
vermillion)    DESCR='Generic VERMILION video driver';;
vesa)          DESCR='Generic VESA video driver';;
vga)           DESCR='Generic VGA video driver';;
via)           DESCR='VIA unichrome graphics driver';;
vmware)        DESCR='VMware SVGA video driver';;
voodoo)        DESCR='Voodoo video driver';;
wsfb)          DESCR='video driver for wsdisplay framebuffer device';;
xgi)           DESCR='XGI video driver';;
xgixp)         DESCR='XGI XP video driver';;
*)             DESCR='Unknown Driver';;
esac

}

_adjust_card0_driver_entry(){
test "$*" || return $?
#test -f "$XORGCONFFILE".d/Card0.conf || return 4
test -f "$tmpDir"/Card0.conf || return 4

#for f in `ls -1 "$XORGCONFFILE".d/Card*.conf`
for f in `ls -1 "$tmpDir"/Card*.conf`
do
test "$f" = "${XORGCONFFILE}.d/Card0.conf" && continue
test "$f" = "$tmpDir/Card0.conf" && continue
#sed -i 's%^[^#]%#%' "$f"
sed -i 's%^\([^#].*\)%#\1%' "$f"
done
#sed -i 's%^#*%%' "$XORGCONFFILE".d/Card0.conf
sed -i 's%^#*%%' "$tmpDir"/Card0.conf

#p1=`grep -E 'Driver[[:blank:]]+".*"[[:blank:]]+#card[0-9]+driver' "$XORGCONFFILE".d/Card0.conf`
p1=`grep -E 'Driver[[:blank:]]+".*"[[:blank:]]+#card[0-9]+driver' "$tmpDir"/Card0.conf`
p2=`echo "$p1" | sed -r 's%(^.*)("[^"]*")(.*$)%\(\1\)\(\2\)\(\3\)%'`
_debug "'$p2'"
# TODO: Worked OK until now, but may need similar in Device.conf
#sed -i -r "s%$p2%\1\"$*\"\3%" "$XORGCONFFILE".d/Card0.conf
sed -i -r "s%$p2%\1\"$*\"\3%" "$tmpDir"/Card0.conf
#test $? = 0 && CARD0DRIVER1="$*"
test $? = 0 && CARD0DRIVER="$*"
#p1=`grep -E 'Driver[[:blank:]]+".*"[[:blank:]]+#card0driver' "$XORGCONFFILE"`
#p2=`echo "$p1" | sed -r 's%(^.*)("[^"]*")(.*$)%\(\1\)\(\2\)\(\3\)%'`
#_debug "'$p2'"
#sed -i -r "s%$p2%\1\"$*\"\3%" "$XORGCONFFILE"
#test $? = 0 && CARD0DRIVER="$*"
#test "$CARD0DRIVER1" = "$CARD0DRIVER"
test "${CARD0DRIVER//[[:blank:]]/}"
}

_show_all_drivers(){

[ "$DEBUG" ] && ls -1 "$XORG_DRIVER_DIR" && sleep 1
ALL_DRIVERS=`ls -1 "$XORG_DRIVER_DIR"/*_drv.so`
unset ALL_DRIVER_LIST
while read driver
do
[ "$driver" ] || continue
bn_driver=${driver##*/}
n_driver=${bn_driver%_drv*}

case $n_driver in exa|v4l|glamor) continue;; esac
_get_driver_description $n_driver
ALL_DRIVER_LIST="${ALL_DRIVER_LIST}${n_driver} \"$DESCR\" "

done <<EoI
`echo "$ALL_DRIVERS"`
EoI

_debug "$ALL_DRIVER_LIST" && sleep 1

test "$ALL_DRIVER_LIST" || ALL_DRIVER_LIST='WARNING "No drivers detected in '"$XORG_DRIVER_DIR"'"'

TTEXT='Select Driver for Card0'
GTTEXT=`gettext "$TTEXT"`
test "${GTTEXT//[[:blank:]]/}" && TTEXT=$GTTEXT

BTTEXT='Select Driver for Card0'
GBTTEXT=`gettext "$BTTEXT"`
test "${GBTTEXT//[[:blank:]]/}" && BTTEXT=$GBTTEXT

MENU_TEXT='Here is the list of all installed drivers.
If you want to test one of these, select it by pressing
arrow keys up and down.
Then press \Z4<O\Z3K\Z4>\Zn Enter.
If you want to go back to select one of the automatically
detected drivers, press TAB key to mark the <\Z1C\Z0\Zbancel\ZB> button
and then press Enter.'
GMENU_TEXT=`gettext "$MENU_TEXT"`
test "${GMENU_TEXT//[[:blank:]]/}" && MENU_TEXT=$GMENU_TEXT

#since descr contains space, needs workaround using eval..
rm $VERB -f "$tmpDir"/select_driver
set - $ALL_DRIVER_LIST
eval "dialog --colors --backtitle '$BTTEXT' --title '$TTEXT' --menu '$MENU_TEXT' 0 0 0 $@ 2>$tmpDir/select_driver"
case $? in
0) #OK
_debug "_show_all_drivers returned 0"
[ "$DEBUG" ] && { cat "$tmpDir"/select_driver; echo; } || true
DRIVER_SEL=`tail -n1 "$tmpDir"/select_driver`
test "$DRIVER_SEL" || _some_thing_wrong "Error reading selected video driver"
_adjust_card0_driver_entry $DRIVER_SEL
return $?;;
1) #Cancel
_debug "_show_all_drivers returned 1"
return 1;;
255|*) #ESC HELP EXTRA
_debug "_show_all_drivers returned 255 or OTHER"
exit 1;;
esac
}

_split_xorg_conf_file(){
#replacement for _split_sections()
test -f "$*" || return $?

rm $VERB -f "$tmpDir"/*.conf

while read -r aLINE
do

test "$aLINE" || continue

case $aLINE in
 Section*|'#Section'*) NEWSEC="$aLINE"; SEC=`echo "$aLINE" | cut -f2 -d'"'`;;
 EndSection|'#EndSection') NEWSEC="$NEWSEC
$aLINE\n"

echo -e "$NEWSEC" >>"$tmpDir"/"$SEC".conf
unset SEC NEWSEC
;;
 Subsection*|'#Subsection'*)
  HAVE_SUBSEC=1
  case $aLINE in
  '#'[[:blank:]]*) #TAB
   NEWSEC="$NEWSEC\n$aLINE"   ;;
   *)
   NEWSEC="$NEWSEC\n\t$aLINE"   ;;
  esac
 ;;
 EndSubsection|'#EndSubsection')
 case $aLINE in
 '#'[[:blank:]]*) #TAB
 NEWSEC="$NEWSEC\n$aLINE" ;;
 *)
 NEWSEC="$NEWSEC\n\t$aLINE" ;;
 esac
 unset HAVE_SUBSEC ;;
 *)
   if test "$HAVE_SUBSEC"; then
   case $aLINE in
   '#'[[:blank:]]*) #TAB
   NEWSEC="$NEWSEC\n$aLINE"   ;;
   *)
   NEWSEC="$NEWSEC\n\t\t$aLINE"   ;;
   esac
   elif test "$NEWSEC"; then
   case $aLINE in
   '#'[[:blank:]]*) #TAB
   NEWSEC="$NEWSEC\n$aLINE"   ;;
   *)
   NEWSEC="$NEWSEC\n\t$aLINE"   ;;
   esac
   else
     echo "$aLINE" >>"$tmpDir"/xorg.conf
   fi
;;
esac

done <"$*"

test -f "$tmpDir"/Device.conf
}

_split_sections(){

test -f "$XORGCONFFILE" || return $?

rm $VERB -rf "$XORGCONFFILE".d
mkdir $VERB -p "$XORGCONFFILE".d

for dev in "Files" "Module" "ServerFlags" "ServerLayout" "InputDevice" "Monitor" "Modes" "Device" "Screen"
 do
 rm $VERB -f "$tmpDir"/"$dev".conf
 sed "/./{H;d};x;/Section \"$dev\".*\".*\".*EndSection/!d" "$XORGCONFFILE" >"$tmpDir"/"$dev".conf
 test $? = 0 && {
 rm $VERB -f "$XORGCONFFILE".d/"$dev".conf
 sed "/./{H;d};x;/Section \"$dev\".*\".*\".*EndSection/!d" "$XORGCONFFILE" >"$XORGCONFFILE".d/"$dev".conf
 }

test -s "$tmpDir"/"$dev".conf && {
echo "
#SEDMARKER" >>"$tmpDir"/"$dev".conf; } || {
    rm $VERB -f "$tmpDir"/"$dev".conf; }

done

test -f "$tmpDir"/Device.conf
}

_split_cards(){
#replacement for _split_device_section()
test -f "$*" || return $?

while read -r aLINE
do
test "$aLINE" || continue
case $aLINE in
Section*|'#Section'*) NEWSEC="$aLINE"
;;
EndSection|'#EndSection') NEWSEC="$NEWSEC
$aLINE\n"
echo -e "$NEWSEC" >>"$tmpDir"/"$CARD".conf
unset NEWSEC CARD DRIVER
;;
*) case $aLINE in
   '#'*Identifier*Card[0-9]*) CARD=`echo "$aLINE" | cut -f2 -d'"'`
NEWSEC="$NEWSEC
$aLINE";;
   '#'*Driver*\"*\"*) DRIVER=`echo "$aLINE" | cut -f2 -d'"'`
NEWSEC="$NEWSEC
$aLINE";;
   '#'[[:blank:]]*) NEWSEC="$NEWSEC
$aLINE";; #TAB
    *Identifier*Card[0-9]*) CARD=`echo "$aLINE" | cut -f2 -d'"'`
NEWSEC="$NEWSEC
\t$aLINE";;
    *Driver*\"*\"*) DRIVER=`echo "$aLINE" | cut -f2 -d'"'`
NEWSEC="$NEWSEC
\t$aLINE";;
    *)   NEWSEC="$NEWSEC
\t$aLINE";;
   esac
;;
esac
done <"$*"

c=`ls -1 "$tmpDir"/Card*.conf | wc -l` || c=2
test -f "$tmpDir"/Card0.conf
}

_split_device_section(){
# split the device section
test -f "$tmpDir"/Device.conf || return $?
c=-1
while :
do
c=$((c+1))
 grep $Q -E "[[:blank:]]+\"Card$c\"[[:blank:]]+" "$tmpDir"/Device.conf || break

  rm $VERB -f "$tmpDir"/Card$c.conf
 #sed "/./{H;d};x;/^Section \"Device\".*\"Card$c\".*EndSection$/!d" "$tmpDir"/Device.conf >"$tmpDir"/Card$c.conf
 #sed -r "/./{H;d};x;/^Section \"Device\".*\"Card$c\".*EndSection/!d" "$tmpDir"/Device.conf >"$tmpDir"/Card$c.conf
  sed "/./{H;$!d};x;/Section \"Device\".*\"Card$c\".*EndSection$/!d" "$tmpDir"/Device.conf >"$tmpDir"/Card$c.conf
 test $? = 0 && {
  rm $VERB -f "$XORGCONFFILE".d/Card$c.conf
 #sed "/./{H;d};x;/^Section \"Device\".*\"Card$c\".*EndSection$/!d" "$tmpDir"/Device.conf >"$XORGCONFFILE".d/Card$c.conf
 #sed -r "/./{H;d};x;/^Section \"Device\".*\"Card$c\".*EndSection/!d" "$tmpDir"/Device.conf >"$XORGCONFFILE".d/Card$c.conf
  sed "/./{H;$!d};x;/Section \"Device\".*\"Card$c\".*EndSection$/!d" "$tmpDir"/Device.conf >"$XORGCONFFILE".d/Card$c.conf
 }
test -s "$XORGCONFFILE".d/Card$c.conf || rm $VERB -f "$XORGCONFFILE".d/Card$c.conf
test -s "$tmpDir"/Card.$c.conf        || rm $VERB -f "$tmpDir".d/Card$c.conf
done
test -f "$XORGCONFFILE".d/Card0.conf
}

_make_driver_list(){

unset DRIVERS DRIVERS_LIST0 DRIVERS_LIST
for n in `seq 0 1 $((c-1))`
do

test -f "$tmpDir"/Card$n.conf || continue
grep $Q "#card${n}driver" "$tmpDir"/Card$n.conf
DRIVERS="$DRIVERS
`grep \"#card${n}driver\" $tmpDir/Card$n.conf | cut -f2 -d'\"'`"

done

_debug "DRIVERS:$DRIVERS"
test "$DRIVERS" || DRIVERS_MSG='Error, no Drivers detected.'
_debug "DRIVERS:$DRIVERS"

BAD_DRIVERS=`echo "$DRIVERS" | grep -E 'fbdev|modesetting|vesa'`
_debugx "BAD_DRIVERS:$BAD_DRIVERS"
test "$BAD_DRIVERS" && BAD_DRIVERS_MSG='\Z4'`echo $BAD_DRIVERS`'\Zn' || BAD_DRIVERS_MSG='\Z1No simple video drivers detected.\Zn'
_debug "BAD_DRIVERS:$BAD_DRIVERS"

GOOD_DRIVERS=`echo "$DRIVERS" | grep -vE 'fbdev|modesetting|vesa'`
_debugx "GOOD_DRIVERS:$GOOD_DRIVERS"
test "$GOOD_DRIVERS" && GOOD_DRIVERS_MSG='\Z2'`echo $GOOD_DRIVERS`'\Zn' || GOOD_DRIVERS_MSG='\Z1Attention, no sophisticated video drivers detected.\Zn'
_debug "GOOD_DRIVERS:$GOOD_DRIVERS"

DRIVERS_LIST0=`grep -h -o 'Driver[[:blank:]]\+".*".*#.*' "$tmpDir"/Card*.conf | cut -f1 -d'#'`
test "$DEBUG" && {
echo
echo "$DRIVERS_LIST0" ; }

c=0
while read tag driver
do
[ "$tag" -a "$driver" ] || continue

DRIVERS_LIST="$DRIVERS_LIST
Card$c $driver"
c=$((c+1))
done <<EoI
`echo "$DRIVERS_LIST0"`
EoI

[ "$DEBUG" ] && echo "$DRIVERS_LIST" || true
test "${DRIVERS_LIST//[[:blank:]]/}"
}

_select_driver(){

CTEXT='Show all drivers'
GCTEXT=`gettext "$CTEXT"`
test "${GCTEXT//[[:blank:]]/}" && CTEXT=$GCTEXT

TTEXT='Select Driver'
GTTEXT=`gettext "$TTEXT"`
test "${GTTEXT//[[:blank:]]/}" && TTEXT=$GTTEXT

BTTEXT='Select Driver'
GBTTEXT=`gettext "$BTTEXT"`
test "${GBTTEXT//[[:blank:]]/}" && BTTEXT=$GBTTEXT

MENU_TEXT="Xorg -configure found out, that these installed userspace
video drivers are available.

Xorg -configure since version 1.7 creates more and more probably
usable Device Sections with drivers, that Xorg thinks, may work.

For recent hardware there should work one of these sophisticated
drivers : $GOOD_DRIVERS_MSG

There are alternate drivers possible if installed, but they may \Z1not\Zn work
currently : $BAD_DRIVERS_MSG

Now choose the one you would like to test.
But you can also choose out of all installed drivers for Card0:"
GMENU_TEXT=`gettext "$MENU_TEXT"`
test "${GMENU_TEXT//[[:blank:]]/}" && MENU_TEXT=$GMENU_TEXT

while :;
do
dialog --colors --cancel-label "$CTEXT" --backtitle "$BTTEXT" --title "$TTEXT" --menu "$MENU_TEXT" 0 0 5 $DRIVERS_LIST 2>"$tmpDir"/select_card
case $? in 0) _debug "_select_driver:0:OK"; break;; #OK
1) _debug "_select_driver returned 1";      #Cancel
  _show_all_drivers
  case $? in 0) return 9;; *) continue;; esac
  ;;
2) _debug "_select_driver returned 2";;  #Help
3) _debug "_select_driver returned 3";;  #Extra
255|*) _notice "_select_driver returned 255 or OTHER"; exit 1;;
esac
[ "$DEBBUG" ] && cat "$tmpDir"/select_card && echo
done
return 0
}

_some_thing_wrong(){

ADD_MSG='No additional message provided.'
test "$*" && ADD_MSG="$*"


TTEXT='Unknown error'
GTTEXT=`gettext "$TTEXT"`
test "${GTTEXT//[[:blank:]]/}" && TTEXT=$GTTEXT

BTTEXT='Unknown error'
GBTTEXT=`gettext "$BTTEXT"`
test "${GBTTEXT//[[:blank:]]/}" && BTTEXT=$GBTTEXT

MSG_TEXT='
\Z1 Some unkonwn error occurred.\Zn

Sorry for any inconvenience.

Additionally message given:'"

ADD_MSG
"
GMSG_TEXT=`gettext "$MSG_TEXT"`
test "${GMSG_TEXT//[[:blank:]]/}" && MSG_TEXT=$GMSG_TEXT

dialog --colors --backtitle "$BTTEXT" --title "$TTEXT" --msgbox "$MSG_TEXT" 0 0

exit 126
}

_enable_card_conf(){
#DEBUG=1; Q=; VERB=-v
test -f "$tmpDir"/select_card || return 3
test -s "$tmpDir"/select_card || return 4
SELECTED_CARD=`tail -n1 "$tmpDir"/select_card`
_debug "SELECTED_CARD='$SELECTED_CARD'"
test "$SELECTED_CARD" || _some_thing_wrong 'Error reading selected video card'

#CardFILE=`grep -H "Identifier[[:blank:]]\+\"$SELECTED_CARD\"" "$XORGCONFFILE".d/Card*.conf | cut -f1 -d':' | sort -u`
CardFILE=`grep -H "Identifier[[:blank:]]\+\"$SELECTED_CARD\"" "$tmpDir"/Card*.conf | cut -f1 -d':' | sort -u`
test "$DEBUG" && {
echo
echo "CardFILE='$CardFILE'"
echo ; }
test -f "$CardFILE" || return 5

#[ "$DEBUG" ] && ls -1s "$XORGCONFFILE".d/Card*.conf
#OTHER_CARDS_CONF=`ls -1 "$XORGCONFFILE".d/Card*.conf | grep -v "$CardFILE"`
[ "$DEBUG" ] && ls -1s "$tmpDir"/Card*.conf
OTHER_CARDS_CONF=`ls -1 "$tmpDir"/Card*.conf | grep -v "$CardFILE"`

test "$DEBUG" && {
echo
echo "$OTHER_CARDS_CONF" ; }

for f in $OTHER_CARDS_CONF
do
#sed -i 's%^%#%' "$f"
sed -i 's%^\([^#].*\)%#\1%' "$f"
done
#test -f "$CardFILE" || return 5
test -s "$CardFILE" || return 6
#need to reset CARD0DRIVER
CARD0DRIVER=`grep -E 'Driver[[:blank:]]+"[^"]+"[[:blank:]]+#card[0-9]+driver' "$CardFILE" | cut -f2 -d'"'`
#sed -i 's%^#*%%' "$CardFILE"
 sed -i 's%^\(#\+\)\([[:blank:]]\+\)\(.*\)%\2\3%' "$CardFILE"
 sedRV=$?
 sed -i 's%^\(#\+\)\(.*\)%\2%' "$CardFILE"
 sedRV=$((sedRV+$?))
test "$sedRV" = 0 -a "${CARD0DRIVER//[[:blank:]]/}"
}

_comment_all_section_device_in_xorg_conf(){
test -s "$XORGCONFFILE" || return $?

 tlnr=`wc -l "$XORGCONFFILE" | awk '{print $1}'`
 fcnr=`grep -n -m1 -E 'Driver[[:blank:]]+"[^"]*"[[:blank:]]+#card[0-9]+driver' "$XORGCONFFILE" | cut -f1 -d':'`
 lcnr=`grep -n -E 'Driver[[:blank:]]+"[^"]*"[[:blank:]]+#card[0-9]+driver' "$XORGCONFFILE" | tail -n1 | cut -f1 -d':'`

test "$fcnr" && fsdnr=`head -n $fcnr "$XORGCONFFILE" | grep -n "^[#'']*Section" | tail -n1 | cut -f1 -d':'`
test "$lcnr" && lsdnr=`head -n $lcnr "$XORGCONFFILE" | grep -n "^[#'']*Section" | tail -n1 | cut -f1 -d':'`

fes=$((tlnr - fcnr))
les=$((tlnr - lcnr))

test "$fes" && fesnr=`tail -n $fes "$XORGCONFFILE" | grep -m1 -n "^[#'']*EndSection" | cut -f1 -d':'`
test "$les" && lesnr=`tail -n $les "$XORGCONFFILE" | grep -m1 -n "^[#'']*EndSection" | tail -n1 | cut -f1 -d':'`

fesnr=$((fcnr + fesnr))
lesnr=$((lcnr + lesnr))

_debug tlnr=$tlnr
_debug "fsdnr=$fsdnr"
_debug " fcnr=$fcnr"
_debug "fesnr=$fesnr"
_debug "lsdnr=$lsdnr"
_debug " lcnr=$lcnr"
_debug "lesnr=$lesnr"

test "$fsdnr" -a "$lesnr" && sed -i "$fsdnr,$lesnr s%^\([^#].*\)%#\1%" "$XORGCONFFILE"
}

_rebuild_xorg_conf(){

rm $VERB -f "$tmpDir"/xorg.conf.new
for sec in Files Module ServerFlags ServerLayout InputDevice Monitor Modes Screen Device
do

case $sec in Device)
 for dev in "$tmpDir"/Card*.conf
 do
 test -f "$dev" || continue
 cat "$dev" >>"$tmpDir"/xorg.conf.new
 done
 continue
 ;;
esac


test -f "$tmpDir"/$sec.conf || continue
cat "$tmpDir"/$sec.conf >> "$tmpDir"/xorg.conf.new
done
test -f "$tmpDir"/xorg.conf && cat "$tmpDir"/xorg.conf >>"$tmpDir"/xorg.conf.new
test -s "$tmpDir"/xorg.conf.new && {
    cp $VERB "$tmpDir"/xorg.conf.new "$XORGCONFFILE"
    }
test -s "$XORGCONFFILE" && rm $VERB -f "$XORGCONFFILE".d/*.conf
}

_comment_all_section_device_in_xorg_conf_d_device(){
test -f "$XORGCONFFILE".d/Device.conf || return 0
sed -i 's%^\([^#].*\)%#\1%' "$XORGCONFFILE".d/Device.conf
}

_ask_driver(){

_split_xorg_conf_file "$XORGCONFFILE" || return 3

_split_cards "$tmpDir"/Device.conf || return 4

_make_driver_list     || return 5

_select_driver
 case $? in
 9)
    _rebuild_xorg_conf || return 10
    return 0;;
 0) :;;
 *) exit 1;;
 esac

_enable_card_conf; RV=$?
case $RV in
0) :;;
*) _err "_enable_card_conf returned $RV"; return 7;;
esac

_rebuild_xorg_conf || return 8
}

#[ "$XAUTO" = 0 -o "$XAUTO" = 3 ] || { echo "XAUTO='$XAUTO' ,exiting."; exit $?; } #drop out to console.

#code here to test the video...
#CHOSENVERT=""
#while [ "$XAUTO" -ne 0 ];do #testloop
while :  #testloop
do

if test ! "$HAVE_MOUSE_DIALOG" -a ! "$KEEP_XORG_CONF"; then
_ask_srceen_mode; aRV=$?
test "$aRV" = 0 || _exit $aRV "_ask_srceen_mode returned '$aRV'"
[ "$DEBUG" ] && sleep 10

_ask_driver; aRV=$?
test "$aRV" = 0 || _exit $aRV "_ask_driver returned '$aRV'"
[ "$DEBUG" ] && sleep 10
fi

unset HAVE_MOUSE_DIALOG KEEP_XORG_CONF
 case "`cat /etc/mousedevice 2>/dev/null`" in #w468
  #input/mice) MOUSETYPE="usb" ;;
  #psaux) MOUSETYPE="ps/2" ;;
  tty*)
   #MOUSETYPE="serial"
   MOUSEMSG="
Puppy thinks that you have a serial mouse. This type of mouse is
on ancient PCs. Most modern PCs use a usb or ps/2 mouse. If your
PC does not have a serial mouse, then you better choose the
'\Z1C\Z0\Zbhange_mouse\ZB' button now."
  ;;
  *)
   MOUSEMSG="
Puppy thinks that you have a usb or ps/2 mouse. This is okay for
most cases, but some old computers have a serial mouse. If you have
an ancient PC that you know has a serial mouse, then you better choose
the '\Z1C\Z0\Zbhange_mouse\ZB' button now."
  ;;
 esac

#V=`Xorg -version 2>&1|sed '/^$/d'`
#version=`echo "$V" |head -n2 |grep -E -i -o 'date.*|version.*' | tr '\n' ' '`

 dialog --no-shadow --colors --yes-label "TEST X NOW" --no-label "Change Mouse" \
 --title "Xorg Video Wizard" --yesno "Okay, just about to take the plunge.
${MOUSEMSG}

\Z4After choosing '\Z0TEST_X_NOW\Z4' button, \Z5if the next screen
shows the Puppy logo and a dialog box, then X started okay\Z4 .
If the screen is \Zbgarbage\ZB or, hum, \Z7blank\Z4, probably due to Xorg
inserting some kernel drivers or too old Xorg version
\Z0$version\Z4', it indicates failure .\Z0
\Zb(In such a case, just press again the ENTER key
to terminate the test, preferably within the 20 second test timeout)\ZB

\Z0IMPORTANT\Z4: If the \Z5ENTER\Z4 key does not terminate the test, press the
combination \ZbCTRL-ALT-BACKSPACE\ZB (some odd old PCs may even require
you to press CTRL-ALT-BACKSPACE twice to terminate the test)

Press \Z0ENTER\Z4 now to start test X graphics mode (may take a few secs)
TAB then \Z1E\Z0\ZbNTER\ZB\Z4 to change the mouse (afterward will return here).\Zn" 0 0
 RV4="$?";
 [ "$RV4" = '0' -o "$RV4" = '1' ] || { ERRORCODE=ESC;break 2; }
 if [ "$RV4" -eq 1 ];then
  #change the mouse... (then go back up to above dialog)
  choosemousefunc || { ERRORCODE=ESC;break 2; }
  #w480 bugfix, latter used if choose tweak refresh...
  cp $VERB -f "$XORGCONFFILE" "$tmpDir"/xorg.conf.tmp
  HAVE_MOUSE_DIALOG=1
  continue
 fi

 #w460 test Xorg...
 #xinit /usr/sbin/xinitrc_test -- /usr/bin/Xorg :0
  test "$DEBUG" && {
  echo "XORGCONFFILE='$XORGCONFFILE'"
  sleep 2
  less "$XORGCONFFILE"
  for f in "$XORGCONFFILE".d/*
  do
  test -f "$f" || continue
  less "$f"
  done
  sleep 2
  }

 ( busybox timeout -t 7 -s 15 /usr/bin/Xorg -ignoreABI -config "$XORGCONFFILE" -logfile "$tmpDir"/xinitrc_test.$$.log :0 ) &
 cc=0
 sleep 1
 while :; do
 pidof Xorg >>$OUT || break
 cc=$((cc+1))
 test "$cc" = 5 &&  break
 sleep 1
 done

if pidof Xorg >>$OUT; then
 killall -15 Xorg
 sleep 2
 rm $VERB -f "$tmpDir"/Xorg_xinitrc_test.log

 time xinit /usr/sbin/xinitrc_test -- /usr/bin/Xorg -logfile "$tmpDir"/xinitrc_test.$$.log -ignoreABI -config "$XORGCONFFILE" :0
  XTEST_ERR=$?
  if test "$XTEST_ERR" != 0; then
  echo "XTEST_ERR=$XTEST_ERR"
  sleep 5
  fi

else
 echo -e $Red1"Xorg may crashed. Check your configuration."$Res
 sleep 3
fi

#-modulepath paths      specify the module search path
#-logfile file          specify a log file name
#-configure             probe for devices and write an xorg.conf
#-config file           specify a configuration file, relative to the
#                       xorg.conf search path, only root can use absolute
#-probeonly             probe for devices, then exit
#-scanpci               execute the scanpci module and exit
#-verbose [n]           verbose startup messages
#-logverbose [n]        verbose log messages

if test -s "$tmpDir"/xorgwizard_initrc_test_results; then
 eval "`cat $tmpDir/xorgwizard_initrc_test_results`" #results from xinitrc_test
#...XTEST, YTEST, HSTEST, VRTEST.
else
 _err "xinitrc_test could not create an usable _results file."
 sleep 5
fi

test "$XTEST"  || XTEST=ERROR
test "$YTEST"  || YTEST=ERROR
test "$HSTEST" || HSTEST=ERROR
test "$VRTEST" || VRTEST=ERROR

_show_log(){
X=`cat "$tmpDir"/xinitrc_test.$$.log`
T=`echo "$X" | tail -n20`
W=`echo "$X" | grep -E '^(WW)|^\[[[:blank:][:digit:][:punct:]]+\]*(WW)'`
E=`echo "$X" | grep -E '^(EE)|^\[[[:blank:][:digit:][:punct:]]+\]*(EE)'`
L=`echo "$X" |wc -l`
C=`cat "$XORGCONFFILE"`

M="Showing Xorg.0.log for
xinit /usr/sbin/xinitrc_test -- /usr/bin/Xorg -ignoreABI -config $XORGCONFFILE :0
Press UP and DOWN arrow keys to scroll
Press 'Proceed' button to go on:
------------------------------------------------------------------------
Warnings:
$W
------------------------------------------------------------------------
ERRORS:
$E
-------------------------------------------------------------------------
TAIL:
$T
-------------------------------------------------------------------------
xorg.conf:
$C
-------------------------------------------------------------------------
The whole Xorg.0.log ($L lines long :-)P:
$X
-------------------------------------------------------------------------
"
echo "$M" >"$tmpDir"/xorglog.txt

dialog --exit-label "Proceed" --title "Summary of Xorg test" --textbox "$tmpDir"/xorglog.txt 0 0
}
_show_log

#less "$tmpDir"/xorgwizard-errors.log

 if [ -e /usr/bin/Xvesa ];then
  TWKMSG="\Z5Note\Z0: If you have tweaked away, to no avail, choose \"\Z4FINISHED\Z0\" and you
      will get one final chance to fall back to use the \Z1Xvesa server\Z0.
\Z6Note\Z0: If display has \Z4only minor\Z0 displacement or proportions errors,
      start \Z5xwin\Z0 (startx) and run (with care) the '\Z5Xvidtune\Z0' module
      in \Z5Xorg Wizard\Z0 within X (\Z5Setup menu\Z0) .

Press \Z4FINISHED\Z0 if test was \Z4okay\Z0, or to fall back to \Z1Xvesa Xserver\Z0"
 else
  TWKMSG="Press \Z4FINISHED\Z0 if test was \Z4okay\Z0"
 fi

 dialog --no-collapse --colors --ok-label "FINISHED" --cancel-label "Changes" \
 --extra-button --extra-label "Video Mode" \
 --title "Xorg Video Wizard X test report" --yesno "
                  \Z5Resolution           '${XTEST}'x'${YTEST}' pixels\Z0
                  Horizontal frequency '$HSTEST' KHz
                  \Z5Refresh frequency    '$VRTEST' Hz\Z0
                  Xorg video driver    '${CARD0DRIVER}'

\Z4If you are reporting success, \Z5great\Z4, but if the display was not quite
right, say either crashed or \Z3dis\Z0\Zbplaced\ZB or \Z3dist\Z0\Zborted\ZB\Z4,
you now have the \Z5options\Z4 to either
rerun selecting different video mode andor different card or driver,
or to tweak various parameters in the X configuration file '$XORGCONFFILE' ,
\Z3OR\Z4 to choose a \Zb\Z3different\Z0\ZB\Z4 driver like the Xorg driver '\Z3vesa\Zn' .

${TWKMSG}
or 'TAB TAB' key for \Z1C\Z0\Zbhanges\ZB
to alter xorg.conf or to choose driver & retest X\Zn" 0 0
 finRV=$?
 case $finRV in 0) break 2;;
     -1|255) ERRORCODE=ESC;break 2;;
 3) break;;
 esac

 #SPECVESA=`find -L /usr/lib -noleaf -xdev -type f -name vesa_drv.so | tail -n1`
 SPECVESA=`find -L /usr/lib -xdev -type f -name vesa_drv.so | tail -n1`
 DRVRSPATH=`dirname "$SPECVESA" 2>>$ERR`
 DRVRSNUM=`ls -1 "$DRVRSPATH" 2>>$ERR | wc -l | sed -e 's/ //g'`
  if [ "$DRVRSNUM" = "1" ];then
  dialog --no-collapse --title "Xorg Video Wizard" \
  --msgbox "IMPORTANT INFORMATION
Xorg currently only has the 'Generic driver' installed, called 'vesa'
(remember: this is different from the simple Xvesa X server!).
The Generic driver will work with most video hardware, however it lacks
some features, in particular has a limited selection of screen refresh
frequencies and is slow -- a factor if you wish to play DVD videos and
graphical games. However, you can easily install a Xorg driver specific
to your video hardware -- after Puppy is connected to the Internet, run
the Puppy Package Manager and install the 'xorg_servers' package.
After that, run the Xorg Video Wizard again and it will automatically
choose the best driver for your PC's video hardware
(PPM and Xorg Video Wizard are to be found in the 'Setup' menu).

A further note: for extra video speed, Xorg has what is called the
'Direct Rendering Interface' (DRI), which requires a special driver.
Some games can benefit from this. Also, some applications and games
need 'GLI', which is a special library for 3-dimensional rendering.
Again, the PPM may offer extra packages to add these capabilities.

For now, keep going with using the Generic driver
(for general PC use, this is proably all that you need anyway)..." 0 0
   RV5="$?";
   [ "$RV5" = '-1' -o "$RV5" = '255' ] && { ERRORCODE=ESC;break 2; }
  fi

 ##### INTEL OR NV #####

 #w482 allow switch between intel_drv.so and i810OLD_drv.so...
 # REM: Added nv/nvidia/nouveau switches
 EXTRABUTTON=""
 EXTRALABEL=""
 ALTERNATIVE_DRV_MSG=""
 TRYDRV=''
 NVIDIA_CARD='';INTEL_CARD=''

if [ "`grep -i 'NVIDIA' "$XORGCONFFILE" |grep -E 'Driver|VendorName|BoardName|PuppyHardwareProfile'`" ];then
 echo "Is NVIDIA card"  ##DEBUG
 NVIDIA_CARD=1
  NVIDIA_DRV=`find -L "$XORG_DRIVER_DIR" -type f -name nvidia_drv.so`
 NOUVEAU_DRV=`find -L "$XORG_DRIVER_DIR" -type f -name nouveau_drv.so`
 echo "
 NVIDIA_DRV='$NVIDIA_DRV'
 NOUVEAU_DRV='$NOUVEAU_DRV'" #DEBUG

# REM: Nvidia Menu is a choice menu
##     TODOs: vesa is provided as --extra-button, so could clean up here AND change to --menu
#     If vesa    provide nv
#     If nv      provide nouveau else nvidea else vesa
#     If nouveau provide nvidia  else vesa
#     If nvidia  provide nv
 if [ "${CARD0DRIVER}" = "vesa" ];then
   TRYDRV='nv'
   EXTRABUTTON='--extra-button'
   EXTRALABEL='--extra-label nv_drv'
   ALTERNATIVE_DRV_MSG='
ATTN: There is "nv" nvidia video driver for unbound kernel console'

 elif [ "${CARD0DRIVER}" = "nv" ];then

   if [ "$NOUVEAU_DRV" ];then
    TRYDRV='nouveau'
    EXTRABUTTON='--extra-button'
    EXTRALABEL='--extra-label nouveau_drv'
    ALTERNATIVE_DRV_MSG='
ATTN: There is "nouveau" nvidia video driver that might work better...'

   elif [ "$NVIDIA_DRV" ];then
    TRYDRV='nvidia'
    EXTRABUTTON='--extra-button'
    EXTRALABEL='--extra-label nouveau_drv'
    ALTERNATIVE_DRV_MSG='
ATTN: There is "nvidia" nvidia video driver that might work better...'

   else
    TRYDRV='fbdev'
    EXTRABUTTON='--extra-button'
    EXTRALABEL='--extra-label fbdev_drv'
    ALTERNATIVE_DRV_MSG='
ATTN: There is generic "fbdev" video driver for bound kernel console'
   fi

 elif [ "${CARD0DRIVER}" = "nvidia" ];then
   TRYDRV='nv'
   EXTRABUTTON='--extra-button'
   EXTRALABEL='--extra-label nv_drv'
   ALTERNATIVE_DRV_MSG='
ATTN: There is "nv" nvidia video driver that might work better...'

 elif [ "${CARD0DRIVER}" = "nouveau" ];then

   if [ "$NVIDIA_DRV" ];then
    TRYDRV='nvidia'
    EXTRABUTTON='--extra-button'
    EXTRALABEL='--extra-label nouveau_drv'
    ALTERNATIVE_DRV_MSG='
ATTN: There is "nvidia" nvidia video driver that might work better...'

   else
    TRYDRV='fbdev'
    EXTRABUTTON='--extra-button'
    EXTRALABEL='--extra-label fbdev_drv'
    ALTERNATIVE_DRV_MSG='
ATTN: There is generic "fbdev" video driver that might work better...'
   fi
 fi

# REM: INTEL
elif [ "`grep -i 'INTEL' "$XORGCONFFILE" |grep -E 'Driver|VendorName|BoardName|PuppyHardwareProfile'`" ];then
 echo "Is INTEL card" ##DEBUG
 INTEL_CARD=1
 I810OLD=`find -L "$XORG_DRIVER_DIR" -type l -name i810_drv.so`
 echo                       #DEBUG
 echo "I810OLD='$I810OLD'"  #DEBUG

 if [ "$I810OLD" != "" ]; then
  if [ "${CARD0DRIVER}" = "intel" ];then
   TRYDRV='i810'
   EXTRABUTTON='--extra-button'
   EXTRALABEL='--extra-label Old:i810_drv'
   ALTERNATIVE_DRV_MSG='
ATTN: There is an older Intel "i810" driver that might work better...'
  elif [ "${CARD0DRIVER}" = "i810" ];then
   TRYDRV='intel'
   EXTRABUTTON='--extra-button'
   EXTRALABEL='--extra-label New:intel_drv'
   ALTERNATIVE_DRV_MSG='
ATTN: There is a newer Intel "intel" video driver that might work better...'
  elif [ "${CARD0DRIVER}" = "vesa" ];then
   if [ "`grep -i 'intel' "$XORGCONFFILE" | grep -E 'Driver|VendorName|BoardName|PuppyHardwareProfile'`" ];then
   TRYDRV='intel'
   EXTRABUTTON='--extra-button'
   EXTRALABEL='--extra-label New:intel_drv'
   ALTERNATIVE_DRV_MSG='
ATTN: There is "intel" video driver that might work better...'
   fi #vesa||intel
  fi #i810|intel|vesa
 fi #i810old

fi #nvidia|intel|vesa

# REM: dialog has a bug
#       that switches yes-no label buttons to ok-cancel label buttons
#       if --extra-button provided
#        dialog --version Version: 1.0-20060221
# TESTLINE: dialog --extra-button --ok-label "Ja" --cancel-label "STORN" --extra-label "ANNERS" --yesno "Waehle" 0 0  #OK
# TESTLINE: dialog --extra-button --yes-label "Ja" --no-label "STORN" --extra-label "ANNERS" --yesno "Waehle" 0 0     #NOT OK
# TESTLINE: dialog --extra-button --yes-label "Ja" --no-label "STORN" --extra-label "ANNERS" --yesno "Waehle" 0 0     #OK
if [ "$EXTRABUTTON" = "" ]; then
  YES_LBL='--yes-label'
   NO_LBL='--no-label'
else
  YES_LBL='--ok-label'
   NO_LBL='--cancel-label'
fi

# REM: Now run dialog to ask to either
#       edit xorg.conf, use vesa driver or alternative driver
  dialog --colors --no-collapse ${YES_LBL} "tweak xorg.conf" \
  ${NO_LBL} "vesa" ${EXTRABUTTON} ${EXTRALABEL} \
  --title "Xorg Video Wizard" --yesno "
\Z4Before continuing to tweaking xorg.conf, one other thing to consider:
Xorg has a dozen or so drivers for particular video hardware, which
optimises performance for the matching hardware, but sometimes a
driver does not work right or there is no exact driver to match the
hardware. The workaround for this is that Xorg has a generic driver
called '\Z3vesa\Z4' (note, this is not the \Z1Xvesa X server\Z4!), that works with
most video hardware, but some performance may be lost.

The current driver being used by
Xorg is     '\Z5${CARD0DRIVER}\Z4', and your video
vendor is:  '\Z0${CARD0VENDOR}\Z4'
board info: '\Z5${CARD0BOARD}\Z4'

So, if you have already tried '\Zbtweaking\ZB' or you know that the Xorg
'\Z0${CARD0DRIVER}\Z4' driver does not work on your hardware, consider the
\Zbgeneric driver\ZB. Click '\Z1v\Z0\Zbesa\ZB\Z4' to change Xorg to using the
generic driver, otherwise press ahead and try tweaking...${ALTERNATIVE_DRV_MSG}\Zn" 0 0
  RV6=$?
  [ "$RV6" = "" -o "$RV6" = '-1' -o "$RV6" = 255 ] && { ERRORCODE=ESC;break 2; }
  _debug "RV6=$RV6"
  SUBSTDRV="$CARD0DRIVER"
  _debug "SUBSTDRV='$SUBSTDRV'"
  _debug "CARD0DRIVER='$CARD0DRIVER'"
  [ "$RV6" = '1' ] && SUBSTDRV='vesa'
  [ "$RV6" -eq 3 ] && SUBSTDRV="$TRYDRV" #w482 intel or i810
  CARD0DRIVER="$SUBSTDRV"
  _debug "SUBSTDRV='$SUBSTDRV'"
  _debug "CARD0DRIVER='$CARD0DRIVER'"
  oldCARD0DRIVER=$CARD0DRIVER
  [ "$DEBUG" ] && sleep 10
  if [ "$RV6" -ne 0 ];then

   #_ask_driver
   _split_xorg_conf_file "$XORGCONFFILE" || : return 3
   _split_cards "$tmpDir"/Device.conf || : return 4
   echo "Card0" > "$tmpDir"/select_card
   _enable_card_conf; RV=$? #_enable_card_conf (re)sets CARD0DRIVER
   case $RV in
   0) :;;
   *) _err "_enable_card_conf returned $RV"; exit 55;; # return 7;;
   esac
   _rebuild_xorg_conf || { echo "Error rebuilding xorg.conf"; exit 255; }
   [ "$DEBUG" ] && less /etc/X11/xorg.conf

   CARD0DRIVER=$oldCARD0DRIVER
   aPATTERN="s%.*#card0driver.*%\tDriver\t\t\"${CARD0DRIVER}\" #card0driver #set new%g"
   sed -e "$aPATTERN" "$XORGCONFFILE" > "$tmpDir"/xorg.conf.tmp2
                   [ "$DEBUG" ] && less "$tmpDir"/xorg.conf.tmp2
   _sync
   #echo "Copying $tmpDir/xorg.conf.tmp2 $XORGCONFFILE :Step 13" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
    if [ "$TRYDRV" ];then
    if [ "INTEL_CARD" ];then
     rm $VERB "$XORG_DRIVER_DIR"/i810_drv.so
      if [ "$TRYDRV" == "intel" ];then
       ln $VERB -s intel_drv.so "$XORG_DRIVER_DIR"/i810_drv.so
      else
       ln $VERB -s i810OLD_drv.so "$XORG_DRIVER_DIR"/i810_drv.so
      fi
    fi #INTEL_CARD
    fi #TRYDRV
  # [ "$DEBUG" ] && less /etc/X11/xorg.conf
  # [ "$DEBUG" ] && less "$tmpDir"/xorg.conf.tmp2
   echo "Copying $tmpDir/xorg.conf.tmp2 $XORGCONFFILE :Step 13" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
    cp $VERB -f "$tmpDir"/xorg.conf.tmp2 "$XORGCONFFILE"
   [ "$DEBUG" ] && less xorg.conf
   KEEP_XORG_CONF=1
   continue
  fi

 #tweak...
 dialog --colors --no-collapse --yes-label "tweak refresh" \
 --no-label "edit xorg.conf" --title "Xorg Video Wizard"  \
 --yesno "\Z4If the graphics mode display was \Z1distorted, displaced, or a complete
mess\Z4, the simplest option now is to adjust the vertical screen refresh
frequency up or down slightly.
However, if you are more experienced with Linux and X, you may prefer
to open xorg.conf in a text editor and change whatever you wish.

Press \Z0ENTER\Z4 key for the easy option to tweak refresh frequency...
Press TAB then \Z1E\Z0\ZbNTER\ZB\Z4 to open xorg.conf in a text editor...\Zn" 0 0
 RV7="$?";
 [ "$RV7" = '0' -o "$RV7" = '1' ] || { ERRORCODE=ESC;break 2; }
 if [ "$RV7" -eq 0 ]; then
  if [ "$MONCHOICES" = "" ]; then
   #not plug-n-play.
   MSGPNP="\Z1WARNING\Z0: Your monitor is not plug-and-play so this Wizard cannot
         determine its max allowable refresh frequency. A very cheap old
         CRT monitor may not handle more than 70Hz, better quality, 85Hz."
  else
   MSGPNP="\Z1WARNING\Z0: the maximum screen refresh frequency is specified
         as ${MAXVERT}Hz (times per second). Do not choose any entry
         in the list below that exceeds this."
  fi
  MSGGEN="\Z2Note1\Z0: It is unwise to push a monitor too hard. Just go high enough so
       that there is no flicker. 72Hz-85Hz for CRT, 60Hz for LCD.
\Z2Note2\Z0: Display displaced to right is often due to frequency too high."
  #just offer standard freqs...
  VERT0=56; MSGV0="Very noticeable flicker on CRT screens"
  VERT1=60; MSGV1="Okay for most LCD screens, flicker on CRT"
  VERT2=72; MSGV2="Sensitive eyes may notice flicker on CRT"
  VERT3=75; MSGV3="Sensitive eyes may notice flicker on CRT"
  VERT4=80; MSGV4="Usually no flicker on CRT"
  VERT5=85; MSGV5="No flicker on CRT"

  dialog --colors --no-cancel --title "Xorg Video Wizard" \
  --menu "Xorg is currently set to refresh the screen $VRTEST times per second.
  Taking this up or down may remove distortion etc., but \Z2note\Z0,
  that the choices here are \Z4only suggested upper limits\Z0 and
  \Z1Xorg may not use exactly the frequency chosen\Z0 here.

$MSGGEN

$MSGPNP" 0 0 0 \
 "$VERT0" "$MSGV0" \
 "$VERT1" "$MSGV1" \
 "$VERT2" "$MSGV2" \
 "$VERT3" "$MSGV3" \
 "$VERT4" "$MSGV4" \
 "$VERT5" "$MSGV5" \
 2>"$tmpDir"/tagvert.txt
 RV8="$?";
 [ "$RV8" = '-1' -o "$RV8" = '255' ] && { ERRORCODE=ESC;break 2; }
  #FUTURE: use xrandr above, to determine alternative lower frequencies.

  CHOSENVERT=`cat "$tmpDir"/tagvert.txt 2>>$ERR | tail -n1`
   NEEDHORIZ=`gtf $XTEST $YTEST $CHOSENVERT | grep -o 'hsync: .*' | cut -f 2 -d ' ' | cut -f 1 -d '.'`
  let NEEDHORIZ=NEEDHORIZ+1 #compensate for rounding off error.
  aPATTERN="s/HORIZSYNC0/${HORIZSYNC}/g"
  if [ "$NEEDHORIZ" -gt ${MAXHORIZ%.*} ];then
   if [ "$MONCHOICES" = "" ];then
    #monitor not plug and play.
    aPATTERN="s/HORIZSYNC0/${MINHORIZ}\\-${NEEDHORIZ}/g"
   fi
  fi
  sed -e "$aPATTERN" "$tmpDir"/xorg.conf.tmp > "$tmpDir"/xorg.conf.tmp2
  bPATTERN="s/VERTREFRESH0/${MINVERT}\\-${CHOSENVERT}/g"
  _sync
  echo "sed $bPATTERN $tmpDir/xorg.conf.tmp2 to $XORGCONFFILE : Step 14" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
  sed -e "$bPATTERN" "$tmpDir"/xorg.conf.tmp2 > "$XORGCONFFILE"
  _sync
  [ "$DEBUG" ] || rm $VERB -f "$tmpDir"/xorg.conf.tmp2
  KEEP_XORG_CONF=1
 else
  dialog --colors --no-collapse --title "Xorg Video Wizard" \
  --msgbox "Before editing xorg.conf, consider this:

/etx/X11/xorg.conf has these lines in the Monitor section :

  \Z5HorizSync    '$HORIZSYNC'\Z0
  VertRefresh    '$VERTREFRESH'

\Z4For the resolution that you want to run at, you many want to narrow
-down the specs in xorg.conf . For example, say you want 1024x768@85,
but xorg.conf has a 'VertRefresh 50-160' entry -- maybe narrow that to 50-85...

Press \Z4ENTER\Z0 key to edit xorg.conf...\Zn" 0 0
  [ "$?" = '-1' -o "$?" = '255' ] && { ERRORCODE=ESC;break 2; }
  #edit xorg.conf...
  mp "$XORGCONFFILE"
  carddriver=`grep '#card[0-9]\+driver' "$XORGCONFFILE" | grep -vE '^[[:blank:]]*#' | head -n1 | awk '{print $2}' | tr -d '"'`
  [ "$carddriver" = "$CARD0DRIVER" ] || CARD0DRIVER=$carddriver
  KEEP_XORG_CONF=1
 fi
sleep 1
done #testloop
RVL1=$?
_debug RVL1=$RVL1
done #whole loop
RVL2=$?
_debug RVL1=$RVL1
_debug RVL2=$RVL2

 if [ -e /usr/bin/Xvesa ];then
  dialog --colors --yes-label "DONE" --no-label "Xvesa" --title "Xorg Video Wizard" \
  --yesno "\Z4Just press \Z0ENTER\Z4 key if all is fine and you are ready to run
Puppy with Xorg.

If you cannot get Xorg to work, press TAB then ENTER to choose
the \"\Z1X\Z0\Zbvesa\ZB\Z4\" button.
This will start Puppy with the simple driverless \Z1Xvesa graphics server\Z4
that runs on most kernel driver unbound (old) video hardware.\Zn" 0 0
 RV9="$?";
 [ "$RV9" = '0' -o "$RV9" = '1' ] || exit $RV9
  if [ "$RV9" != 0 ];then
   ln $VERB -sf Xvesa /usr/bin/X && echo "Linked 'Xvesa' towards '/usr/bin/X'"
  else
   #prevent Xvesa video wizard from running after X has started...
   rm $VERB -f "$tmpDir"/videomode
  fi
 fi
#prevent Xvesa video wizard from running after X has started...
 rm $VERB -f "$tmpDir"/videomode

#move it so people ain't confused seeing it in /root...?
#mv $VERB -f $HOME/xorg.conf.new "$tmpDir"/xorg.conf.new
cp $VERB -a "$HOME"/xorg.conf.new "$tmpDir"/xorg.conf.new

if [ "$ERRORCODE" != "ESC" ]; then
 #need to do this here again in case of tweaking made some changes...
 #create a copy of xorg.conf with the profile in the filename...
 echo "Copyied $XORGCONFFILE $XORGCONFFILE.${PROFILECHIP}-${PROFILEMONITOR} :Step 15" >> "$tmpDir"/xorgwizard.messages && sleep 1s #9s
 /bin/cp $VERB -a --remove-destination "$XORGCONFFILE" "$XORGCONFFILE".${PROFILECHIP}-${PROFILEMONITOR}
 /bin/cp $VERB -a --remove-destination "$XORGCONFFILE" "$XORGCONFFILE".${PROFILECHIP}-${PROFILEMONITOR}-${CARD0DRIVER}
 ##clear
 if test -s "$XORGCONFFILE"; then
 echo -e $Green1"Xorg Video Wizard completed. Type 'xwin' +Enter to start X..."$Res
 else
 echo -e $Red1"Xorg Video Wizard completed. You may need to try again."$Res
 fi
fi

COLOUR=$Green0
test "$ERRORCODE" = ESC && COLOUR=$Red1
 #user chose the <OK> button, so going directly into X without testing.
 echo -en $COLOUR #34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black.
 echo "If X did not work, type 'xorgwizard' to run the Video Wizard again."
 echo "After that, type 'xwin' to run X graphics mode."
 echo "Note, if X works but needs minor adjustment to the display, run the"
 echo "Video Wizard from within X 'in the Setup menu' -- module 'Xvidtune'"
 echo -n "may be used, with caution, to finetune the display dimensions."
 echo -e $Res

#v3.99 begin
[ -z "$tmpDir"/ddcprobeoem.txt ] && rm $VERB "$tmpDir"/ddcprobeoem.txt  #empty
#If started from command line after hang, delete new Xvesa hanger indication and go to xwin - no need to have user type it in.
#[ -f "$tmpDir"/ddcprobeoem.txt ] && rm $VERB "$tmpDir"/ddcprobeoem.txt && exec xwin
#3.99 end
[ -f "$tmpDir"/ddcprobeoem.txt ] && rm $VERB "$tmpDir"/ddcprobeoem.txt #w478
echo 'ICONWIPE' > /tmp/pup_event_change_icons.flg  ##+++2011-10-30
exit 0

###END###
