#!/bin/bash
##############  ROX app.: Click image files to mount & unmount. by: Terry Becker    aka: SunBurnt
##############  File types = ".2fs, .3fs, .sfs, .iso, & initrd.gz".
#v423 detect wrong squashfs version 3.x or 4.x.
#v424 advise of sfs-version-converter.

__old_header__(){
###KRG Fr 31. Aug 23:34:58 GMT+1 2012

trap "exit 1" HUP INT QUIT KILL TERM

deprecated(){
OUT=/dev/null;ERR=$OUT
[ "$DEBUG" ] && { OUT=/dev/stdout;ERR=/dev/stderr; }
[ "$DEBUG" = "2" ] && set -x

Version='1.1'

usage(){
USAGE_MSG="
$0 [ PARAMETERS ]

-V|--version : showing version information
-H|--help : show this usage information

*******  *******  *******  *******  *******  *******  *******  *******  *******
$2
"
echo "$USAGE_MSG"
exit $1
}

[ "`echo "$1" | grep -wE "\-help|\-H"`" ] && usage 0
[ "`echo "$1" | grep -wE "\-version|\-V"`" ] && { echo "$0 -version $Version";exit 0; }
}
###KRG Fr 31. Aug 23:34:58 GMT+1 2012
}

########################################################################
#
# CHANGES by Karl Reimer Godt
# 01.0 : added xmessage dialog if already mounted to choose actions :
#        Quit,ROX-Filer,console,Unmount,Unmountall,MountAnotherTime
# 02.0 : position of removal of $mntPT changed in code
# 03.0 : double quoted all $imgFILE AND $mntPT in case of spaces
# 04.0 : added support for these extensions :
#        .squashfs, .sqfs, .squashfs.img -> .sfs
#        .ext3fs.img -> ext3
#        .iso -> iso9660 || udf || * ( using 'disktype' command )
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430            #481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"  #"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"      #"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"     #"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.7-KRG-i586
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.7-KRG-i586·#2·SMP·Tue·Jan·4·15:42:45·CET·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Thu·Oct·27·11:44:41·CEST·2011
# TODO1 : cleanup my code
# TODO2 : cleanup original code
# TODO3 : observe fuser -c and fuser -m
# TODO4 : Kernel 3.x.x ready ~FIXED
# TODO5 : create grepPatternMntPt
# TODO6 : both fuser parts into one func
# TODO7 : adopt the code from npierce
#
########################################################################

Version='1.1-getopts Macpup_Foxy_3-Puppy-Linux-430/2 KRG'
usage (){
MSG="
$0 [-V|-v|-d|-h|-l] FILENAME.sfs
Script to mount and unmount
loop image, iso and squashfs files
[ by simple left click ] .

-V) show version
-v) verbose
-d) debug
-h) show this usage
-l) log to /tmp/filemnt.log
"
echo "$MSG"
[ "$DISPLAY" ] && xmessage -bg lightgreen "$MSG"
exit $1
}
[[ "$1" =~ 'help' ]] && usage 0
[[ "$1" =~ 'version' ]] && { echo -e "\n$0: Version '$Version'\n";exit 0; }
OUT=/dev/null;ERR=$OUT
while getopts Vvdhl opt;do
case $opt in
V) echo -e "\n$0: Version '$Version'\n";exit 0;;
v) VERBOSE=1;VERB=-v;L_VERB=--verbose;A_VERB=-verbose;ERR=/dev/stderr;OUT=/dev/stdout;shift;;
d) DEBUG=1;set -x;shift;;
h) usage 0;;
l) shift;exec 1>>/tmp/filemnt.log 2>&1;;
*) :;;
esac;done

echo
echo '----------------------------------------------------------------------'
#v423...
KERNELVER=`uname -r`
KERNEL_MAJ=${KERNELVER:0:1}
KERNELSUBVER=`echo -n "$KERNELVER" | cut -f 3 -d '.' | cut -f 1 -d '-'`
SFSSTR='squashfs, version 4'
if [ "$KERNEL_MAJ" -lt 3 ] ; then
[ "$KERNELSUBVER" -lt 29 ] && SFSSTR='squashfs, version 3'
fi

imgFILE="$1"
if [ -z "$imgFILE" ];then usage 1 ;fi
[ -f "$imgFILE" ] || { echo "'$imgFILE' seems not to be here . Exit .";exit 1; }

if [ "`basename "$imgFILE"`" = 'initrd' ] ; then
 if [ "`file "$imgFILE" | grep -i 'cpio'`" ] ; then
  cd `dirname "$imgFILE"`
  rm -rf initrd-tree
  mkdir initrd-tree
  cd initrd-tree
  cat ../initrd |cpio -i -d
  exit $?
 else
  gzip -9 "$imgFILE" ;fi
  exit $?
fi

if [ "`basename "$imgFILE"`" = 'initrd.gz' ] ; then
 if [ "`file "$imgFILE" | grep -i 'cpio'`" ] ; then
  cd `dirname "$imgFILE"`
  rm -rf initrd-tree
  mkdir initrd-tree
  cd initrd-tree
  zcat ../initrd.gz |cpio -i -d
  exit $?
 else
  gunzip "$imgFILE" ;fi
  exit $?
fi

if [ "`basename "$imgFILE"`" = 'initrd.xz' ] ; then
 if [ "`file "$imgFILE" | grep -i 'cpio'`" ] ; then
  cd `dirname "$imgFILE"`
  rm -rf initrd-tree
  mkdir initrd-tree
  cd initrd-tree
  xzcat ../initrd.xz |cpio -i -d
  exit $?
 else
   xz -d  "$imgFILE" ;fi
   exit $?
fi

if [ "`dirname "$imgFILE"`" = '\.' ] ;then # 2
      imgFILE=`pwd``echo "$imgFILE" |sed 's/^\.//'`
fi # 2


#mntPT='/mnt/'`echo "$imgFILE" |sed "s#^\.##g" |sed "s#/#+#g"`
mntPT='/mnt/'`basename "$imgFILE"`.$$  ##my change
grepPatternMntPt=`echo "$mntPT" | sed 's#\([[:punct:]]\)#\\\1#g'`
grepPatternImgFile=`echo "$imgFILE" | sed 's#\([[:punct:]]\)#\\\1#g'`

if [ 1 -eq 2 ] ;then    ##############################################  JUMP OVER this SECTION.

 loMnts=`mount |grep '/dev/loop' |awk '{print $1}'`
 echo "$loMnts" |while read LOOP                    ### test if file's mounted
 do
   loFile=`losetup-FULL $LOOP |sed 's/^.*(//' |sed 's/).*$//'`
   if [ "$loFile" = "$imgFILE" ] ;then
    echo -e "\n ### Loop File: $loFile"
    break
   fi
   i=`expr $i + 1`
 done

fi          ##############################################  END of JUMP SECTION.


                            ### file's not mounted, mount it
# if [ $i -eq 16 ] ;then

imgFileBASE=`basename "$imgFILE"` #BK  ##only for yaf/xmessage message not too long

if [ ! -d "$mntPT" ] ;then # 5

check_already_mounted_func(){

  #BK check if already mounted elsewhere...
  for ONELOOP in `mount | grep '^/dev/loop' | cut -f 1 -d ' ' | tr '\n' ' '`
  do

   MNTDIMG=`losetup-FULL $ONELOOP | cut -f 2 -d '(' | cut -f 1 -d ')'`
   IMGBASE=`basename "$MNTDIMG"`
    #TODO 64 chars
    #bash-3.2# losetup-FULL /dev/loop1
    #/dev/loop1: [0700]:2579 (/mnt/xubuntu-11.10-desktop-i386.iso.29782/casper/filesystem.sq*)
                            #1234567890123456789012345678901234567890123456789012345678901234

    echo "IMGBASE='$IMGBASE' imgFileBASE='$imgFileBASE'" #TEST
    #not perfect, but paths may be symlinks...

    if [ "$IMGBASE" = "$imgFileBASE" ];then #if [ "$MNTDIMG" = "$imgFILE" ];then #6

     if [ -n "$DISPLAY" ] ; then #66
xmessage -buttons "Quit:190,ROX-Filer:191,console:192,Unmount:193,Unmount all $IMGBASE:194,Mount another time:199" "$imgFILE
is already mounted and in-use by Puppy .
Do you want to unmount it or mount it to another mount point ?"
RETVAL=$?
if [ "$RETVAL" = "190" ] ; then #666  ##Quit
     exit

elif [ "$RETVAL" = "191" ] ; then #666  ##ROX-Filer
       mntPT=`busybox mount | grep "$IMGBASE" | head -n 1 | cut -f 3 -d ' '`
       rox "$mntPT"
       exit

elif [ "$RETVAL" = "192" ] ; then #666  ##console
       mntPT=`busybox mount | grep "$IMGBASE" | head -n 1 | cut -f 3 -d ' '`
       cd "$mntPT"
       pwd
       rxvt &
       exit

elif [ "$RETVAL" = "193" ] ; then #666  ##umount
       UNMOUNT='yes'
       mntPT=`busybox mount | grep "$IMGBASE" | head -n 1 | cut -f 3 -d ' '`
       return

elif [ "$RETVAL" = "194" ] ; then #666  ##umount ALL $IMGBASE
       UNMOUNT='yes'
       mntPT=`busybox mount | grep "$IMGBASE" | cut -f 3 -d ' '`
       echo 1 "$mntPT"
       MntPt2=`echo "$mntPT" | sed "1 d"` ##only umount all others exect one
       echo 2 "$MntPt2"
       for i in $MntPt2 ; do
       GREP=`echo "$i" | sed 's#\.#\\\.#g;s#\+#\\\+#g;s#-#\\\-#g'`
       echo "$GREP"
       LOOPD=$(busybox mount | grep "$GREP" | cut -f 1 -d ' ')
       echo "$LOOPD"
       #USEapps=`fuser -c $LOOPD`     ##---2011-10-27
       USEapps=`fuser -m "$MntPt2"`   ##+++2011-10-27
       echo 3 "$USEapps"
       USEapps=`echo "$USEapps" | sed 's/[[:alpha:]]//g'`
       echo 4 "$USEapps"
       for j in $USEapps ; do
       echo $i
       kill -1 $j
       done
       [ -n "$DISPLAY" ] && rox -D $i
       umount $i
       sleep 2
       rmdir $i
       done
       mntPT=`busybox mount | grep "$IMGBASE" | cut -f 3 -d ' '`
       return

else #666
     MOUNT='again'
     return
fi   ###666
else ##66      ##+++2011-10-27 to fix call from without X running
UNMOUNT='yes'  ##+++2011-10-27
fi ##66
fi #6
done

}
check_already_mounted_func

fi # 5

if [ -z "$UNMOUNT" ] ; then #55 == yes || [ -n "$MOUNT" ] == again

  Ext=`echo "$imgFILE" |sed 's/^.*\.//'`    # get file type from extention
  if [ "$Ext" = '2fs' ] ;then #7
   Type='ext2'
  elif [ "$Ext" = '3fs' ] ;then
   Type='ext3'
  elif [  "$imgFileBASE" = 'ext3fs.img' ];then
   Type='ext3'
  elif [ "$Ext" = '4fs' ] ;then #v423 planning for the future!
   Type='ext4'
  elif [ "$Ext" = 'sfs' -o "$Ext" = 'squashfs' -o "$Ext" = 'sqfs' ] ;then
   Type='squashfs'
  elif [ "$imgFileBASE" = 'squashfs.img' ];then
   Type='squashfs'
  elif [ "$Ext" = 'iso' ] ;then
   #Fatdog fat16 first and iso9660 second  ###+++2013-03-02
   TYPES=`disktype "$imgFILE" |grep 'file system'`
   if [ "`echo "$TYPES" |head -n1 |awk '{print $1}' |tr '[A-Z]' '[a-z]' | grep -i 'UDF'`" ];then
    Type=udf
   else
    Type=iso9660
   fi
   else
   Type=`disktype "$imgFILE" |grep 'file system' |head -n1 |awk '{print $1}' |tr '[A-Z]' '[a-z]'` ##+++2012-06-04 udf or iso9660
   #Type='iso9660' ##---2012-06-04
  # BK
  #elif [ "$imgFILE" = 'initrd.gz' ] ;then
  # Type='ext2'
  # gunzip $imgFILE             # handle gzip image file
  # imgFILE="echo "$imgFILE" |sed 's/.gz$//'"
  fi #7

  #v423 detect wrong squashfs version...
  if [ "$Type" = "squashfs" ];then #8
   DISK_TYPE=`disktype "${imgFILE}"`
   if [ "`echo "${DISK_TYPE}" | grep "$SFSSTR"`" = "" ];then #8.1
    xmessage -bg orange1 "$DISK_TYPE"
    if [ $KERNELSUBVER -gt 28 ];then #8.1.1
     [ -n "$DISPLAY" ] && xmessage -center -bg '#FFC0C0' "NOTICE: This may be an older version 3.x squashfs file, not usable.
All Linux kernels 2.6.29 or later require version 4.x squashfs files.
Note, there is an SFS-version-converter in the Utility menu, run that first."
    else #8.1.1
     [ -n "$DISPLAY" ] && xmessage -center -bg '#FFC0C0' "NOTICE: This is a newer version 4.x squashfs file, not usable.
All Linux kernels 2.6.28 or earlier require version 3.x squashfs files.
Note, there is an SFS-version-converter in the Utility menu, run that first."
    fi #8.1.1
    exit
   fi #8.1
  fi #8

#  echo -e "\nimgFile = $imgFILE\t\tExt  = $Ext"
#  echo -e "mntPT   = $mntPT\t\tType = $Type\n"
  echo -e "\n$0 : Mount: $imgFILE\n"
  mkdir -p "$mntPT"
  echo '-------------'
  mount $VERB -t $Type -o loop "$imgFILE" "$mntPT"
  Err=$?     ##+++2011-10-27
  echo '-------------'
  sleep 2s
  #Err=$?    ##---2011-10-27
  if [ $Err -eq 0 ] || [ -n "`mount | grep "$mntPT"`" ];then #9
   if [ -n "$DISPLAY" ] ; then #99
    rox -d "$mntPT" # mount good, run rox filer
   ##[ -n "$DISPLAY" ] && yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg green -text "SUCCESS! Click $imgFileBASE icon again to unmount it" & #BK
    yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg green -text "SUCCESS! Click $imgFileBASE icon again to unmount it" & #BK
   fi #99
  fi #9

 else #55   [ -n "$UNMOUNT" ]                   ### file's mounted, unmount it

   [ -n "$DISPLAY" ] && rox -D "$mntPT" #BK

       GREP=`echo "$mntPT" | sed 's#\.#\\\.#g;s#\+#\\\+#g;s#-#\\\-#g'`
       echo 1 "$GREP"
       LOOPD=$(busybox mount | grep "$GREP" | cut -f 1 -d ' ')
       echo 2 "$LOOPD"
       #USEapps=`fuser -c $LOOPD`  ##---2011-10-27
       USEapps=`fuser -m "$mntPT"`  ##---2011-10-27
       echo 3 "$USEapps"
       USEapps=`echo "$USEapps" | sed 's/[[:alpha:]]//g;s/[[:punct:]]//g'`
       echo 4 "$USEapps"
       for j in $USEapps ; do
       echo $i
       kill -1 $j
       done

  sleep 2s
  echo '------------'
  umount "$mntPT"
  Err=$?
  echo '------------'
  #yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg orange -text "$Err"
  #sleep 2s  ##+-2011-10-27
  #rmdir $mntPT
  #yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg orange -text "$mntPT"


  [ -n "$DISPLAY" ] && yaf-splash -timeout 3 -font "8x16" -outline 0 -margin 4 -bg orange -text "Unmounting $imgFileBASE" #BK
   sleep 2s  ##+++2011-10-27
  #Xdialog --title " Notice..." --no-button \
  #        --infobox "
  #UnMounting: $imgFILE
  #" 0 0 2000

  echo -e "\n$0 UnMount: $imgFILE\n"

  #[ -d "$mntPT" -a "`busybox mount | grep "$mntPT"`" = "" ] && rmdir "$mntPT"  #=-2011-10-27
   [ -d "$mntPT" ] && [ -z "`ls "$mntPT" 2>/dev/null`" ] && rmdir "$mntPT"
 fi #55

 if [ "$Err" -gt 0 ] ;then          # ERROR: mount/unmount # 9999
  [ -n "$DISPLAY" ] && xmessage -bg red -title "ERROR..." "Returned <$Err> ... mounting or unmounting $mntPT"
  [ -d "$mntPT" ] && [ -z "`ls "$mntPT" 2>/dev/null`" ] && rmdir "$mntPT"  ##+++2011-10-27
 fi # 9999



