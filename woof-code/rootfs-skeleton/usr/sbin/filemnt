#!/bin/ash
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_filemnt"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/usr/sbin/filemnt"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP=''; TWO_VERSION=''; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
# ROX app.: Click image files to mount & unmount.
# by: Terry Becker  aka: SunBurnt
# File types = ".2fs, .3fs, .sfs, .iso, & old  ext2 initrd.gz".

trap "exit" HUP INT QUIT ABRT KILL TERM

#v423 detect wrong squashfs version 3.x or 4.x.
#v424 advise of sfs-version-converter.

# KRG code clean up, resurrect initrd check and mount if disktype can get a fs inside
# KRG some sanity checks, usage and options, UDF support for .iso, simple GUI for mount flavours
# KRG better error message for wrong squashfs, .squashfs and .sqfs extensions
# TODO much, kernel 3.x, support more filesystems, port npierce improvements, port encryption mounting

Version='1.1-getopts Macpup_Opera_2-Puppy_Linux_431 KRG'
Version='1.2-getopts Macpup_Opera_2-Puppy_Linux_431 KRG'  ## Added lots of remarks
                                                          ## reordere the code a little (sleep, rmdir mountPT, yaf-splash, few if)
Version='1.3-getopts Macpup_Opera_2-Puppy_Linux_431 KRG'  ## Create MOUNT_EXE and UMOUNT_EXE variables
                                                          ## and some functions to let mount.sh handle
                                                          ##  creation and deletion of mountpoint directories
                                                          ##  and close/open ROX-Filer windows
usage (){
MSG="
$0 [-h -V -l ] FILENAME.EXT

-h) show this usage message
-V) emitt version information
-l) log to /tmp/filemnt.log
-d) debug with 'set -x'
-v) verbose output
"
echo "$MSG"
[ "$DISPLAY" ] && xmessage -bg green3 "$MSG"
exit $1
}

OUT=/dev/null;ERR=/dev/null
while getopts lhV opt;do
case $opt in
h) usage 0;;
V) echo -e "\n$0 : Version '$Version'\n";exit 0;;
l) exec 1>>/tmp/filemnt.log 2>&1;;
d) DEBUG=1;set -x;;
v) VERBOSE=1;VERB=-v;L_VERB=--verbose;A_VERB=-verbose;OUT=/dev/stdout;ERR=/dev/stderr;;
*) :;;
esac;done


# REM: Need to know about the kernel version
#     because since around kernel 2.6.29
#     squashfs version became version 4.x
#     Older squashfs version was 3.x
#     and introduced around kernel version 2.4.20

# REM: Since the kernel version and squashfs version
#      are used in other scripts ( bootmanager ),
#      I use a function from f4puppy5 .
_kernel_version4

_kernel_version_filemnt(){
#v423...
KERNELVER=`uname -r`
KERNEL_MAJOR=`echo -n "$KERNELVER" | cut -f 1 -d '.'`
KERNELSUBVER=`echo -n "$KERNELVER" | cut -f 3 -d '.' | cut -f 1 -d '-'`
SFSSTR='squashfs, version 4'
if [ "$KERNEL_MAJOR" -lt 3 ] ; then
[ $KERNELSUBVER -lt 29 ] && SFSSTR='squashfs, version 3'
fi
}

# REM: INFO, DEBUG, DEBUGX unset by default in f4puppy5
INFO=1
DEBUG=1
DEBUGX=1

# REM: Some more global variables
#      MOUNT_EXE : either /bin/mount, busybox mount, mount-FULL .
#       Since it does not need to update any partition icons,
#       would not need to use mount script.
#       mount script could manage ROX-Filer windows,
#       mkdir mountpoint directory
#      UMOUNT_EXE : either /bin/umount. busybox umount, umount-FULL
#       umount script coulfd take care of file-system users,
#        ROX-Filer windows and rmdir mountpoint directory
MOUNT_EXE='busybox mount'
UMOUNT_EXE='busybox umount'

# REM: kill file-system users reported by fuser tool
#      unset it in case of mount.sh (interferes with function
#      _close_rox_window)
KILL_FS_USERS='YES'
case $UMOUNT_EXE in
/bin/umount) KILL_FS_USERS='NO';;
esac

# REM: mount.sh should take care of ROX-Filer windows
_open_rox_window(){
[ "$*" ]       || return 1
[ "$DISPLAY" ] || return 0
case $MOUNT_EXE in
/bin/mount) return 0;;
esac
rox -d "$@"
return $?
}
_close_rox_window(){
[ "$*" ]       || return 1
[ "$DISPLAY" ] || return 0
case $UMOUNT_EXE in
/bin/umount) return 0;;
esac
rox -D "$@"
return $?
}
# REM: mount.sh should take care of creating mountpoint directory
_create_mountpoint(){
[ "$*" ] || return 1
case $MOUNT_EXE in
/bin/mount) return 0;;
esac
mkdir $VERB -p "$@"
return $?
}
# REM: mount.sh should take care of removing mountpoint directory
_remove_mountpoint(){
sleep 2
[ -d "$@" ]             || { _return 0 "$@ is not a directory"; return $?; }
mountpoint $Q "$@"      && { _return 1 "$@ is recognized as mountpoint"; return $?; }
[ "`ls -A "$@"`" ]      && { _return 1 "$@ has content"; return $?; }

if [ "$UNMOUNT" ]; then
 case $UMOUNT_EXE in
 /bin/umount) return 0;;
 esac
else
 case $MOUNT_EXE in
 /bin/mount) return 0;;
 esac
fi
rmdir $VERB "$@"
return $?
}



# REM: Main parameter to this script is a filename .
#      Absolute path preferred
 imageFILE="$1"
 _info "imageFILE='$imageFILE'"
 if [ -z "$imageFILE" ];then echo "Need parameter or filename. Try -h for little more info.";exit 1 ;fi
 [ -f "$imageFILE" ] || { echo "'$imageFILE' seems not to exist (in $PWD)";exit 1; }
 #if [ "`basename "$imageFILE"`" = 'initrd' ] ;then gzip -9 $imageFILE;imageFILE="${imageFILE}.gz";WoExt=Y;fi #2012-06-02

# REM: But if not absolute /path/to/filename,
#      add pwd to it to make it absolute
#      insead could use realpath or readlink -f|-e for this...
 if [ "`dirname "$imageFILE"`" = '\.' ] ;then  #2012-06-02
  imageFILE=`pwd``echo "$imageFILE" |sed 's/^\.//'` #2012-06-02
 fi

# REM: Need a mountpoint directory name
 mountPT='/mnt/'`echo "$imageFILE" |sed "s#^\.##g" |sed "s#/#+#g"`
 _debug "old mountpoint would be: '$mountPT'"
 ##NEW##
 mountPT='/mnt/'`basename "$imageFILE"`.$$
 _info "new mountpoint is '$mountPT'"
 mountPTBASE="${mountPT%%\.*}"
 _debug "mountPTBASE='$mountPTBASE'"
 ##NEW##

# REM: imageFILEBASE is used to compare if that file is already
#      mounted with another loop device further down
imageFILEBASE=`basename "$imageFILE"` #BK

# REM: Crude logic if the mountpoint is not a directory
#      Todo test -e beforehand ...
#if [ ! -d "$mountPT" ] ;then #! -d mountPT

check_already_mounted_func(){

  #BK check if already mounted elsewhere...
  # REM: Had mount quoting output like lspci -m
  for oneLOOP in `mount | grep ^[\'\"/]\\\+dev/loop | cut -f 1 -d ' '`
  do

   _debug "ONELOOP='$oneLOOP'" #DEBUG

   # REM: Care for the quoted output and get rid of enclosing quotes
   oneLOOP=`echo "$oneLOOP" |sed s,^[\"\'],,| sed s,[\"\']$,,`

   # REM: Don't know why we use losetup-FULL for this,
   #      busybox losetup does it right too and without enclosing parenthesis ...
   oneMNTDIMG=`losetup-FULL "$oneLOOP" | cut -f 2 -d '(' | cut -f 1 -d ')'`

   # REM: A loop mount could be loaded into the current frugal OS
   #      or be just mounted.
   #     If it is loaded, add some extra message
   unset ANDINUSEBYPUPPY
   case "$oneMNTDIMG" in
   /initrd/*) ANDINUSEBYPUPPY='and in use by Puppy';;
   esac

   # REM: Now compare bot base names ...
   oneIMGBASE=`basename "$oneMNTDIMG"`

    _debug "oneIMGBASE='$oneIMGBASE' imageFILEBASE='$imageFILEBASE'" #DEBUG
    #not perfect, but paths may be symlinks...

    if [ "$oneIMGBASE" = "$imageFILEBASE" ];then #MOUNTED ELSEWHERE # if [ "$MNTDIMG" = "$imageFILE" ];then

     if [ -n "$DISPLAY" ] ; then #DISPLAY
xmessage -buttons "Quit:190,ROX-Filer:191,console:192,Unmount:193,Unmount all $oneIMGBASE:194,Mount another time:199" "$imageFILE
is already mounted $ANDINUSEBYPUPPY .
Do you want to unmount it or mount it to another mount point ?"
RETVAL=$?
if [ "$RETVAL" = "190" ] ; then #BUTTONS
     exit 0

 elif [ "$RETVAL" = "191" ] ; then #BUTTONS
     mountPT=`busybox mount | grep "$oneIMGBASE" | head -n 1 | cut -f 3 -d ' '`
     _debug "ROX-Filer: mountPT='$mountPT'"
     rox "$mountPT"
     exit $?

 elif [ "$RETVAL" = "192" ] ; then #BUTTONS
     mountPT=`busybox mount | grep "$oneIMGBASE" | head -n 1 | cut -f 3 -d ' '`
     cd "$mountPT"
     _info "`pwd`"
     rxvt &
     exit $?

 elif [ "$RETVAL" = "193" ] ; then #BUTTONS
       UNMOUNT='yes'
       mountPT=`busybox mount | grep "$oneIMGBASE" | head -n 1 | cut -f 3 -d ' '`
       _debug "mountPT='$mountPT'"
       return 0

 elif [ "$RETVAL" = "194" ] ; then #BUTTONS
       UNMOUNT='yes'
       mountPT=`busybox mount | grep "$oneIMGBASE" | cut -f 3 -d ' '`
       _debug "mountPY='$mountPT'"
       mountPT2=`echo "$mountPT" | sed "1 d"`
       _debug "mountPT2='$mountPT2'"

       for i in $mountPT2 ; do

       # REM: make killing optional
       if [ "$KILL_FS_USERS" = "YES" ]; then
       # REM: Close ROX-Filer windows before they are detected by fuser
       #       kill window pid would kill ROX-Filer completely (black pinboard)
       [ "$DISPLAY" ] && rox -D "$i"
       #_close_rox_window "$i"
        GREP=`echo "$i" | sed 's#\.#\\\.#g;s#\+#\\\+#g;s#-#\\\-#g'`
        _debug "$GREP"
        LOOPD=$(busybox mount | grep "$GREP" | cut -f 1 -d ' ')
        _debug "$LOOPD"
        USEapps=`_command fuser -c $LOOPD`
        _debugx "_command fuser -c $LOOPD claims these pids: '$USEapps'"
        USEapps=`echo "$USEapps" | sed 's/[[:alpha:]]//g'`
        _debug "USEapps='$USEapps'"
         for j in $USEapps ; do
         _debugx "$i: $j"
         kill -1 $j
         done
        fi

       _debug "'$i'"
       #[ -n "$DISPLAY" ] && rox -D "$i"
       $UMOUNT_EXE "$i"
       [ "$?" = 0 ] || continue
       #  REM: Refresh rox
       #[ "$DISPLAY" ] && rox -x "${mountPT%/*}"
       #sleep 2
       #rmdir "$i"
       _remove_mountpoint "$i"
       done

       mountPT=`busybox mount | grep "$oneIMGBASE" | cut -f 3 -d ' '`
       _debug "mountPT='$mountPT'"
       return 0

 else #BUTTONS 199
     # REM: If mount on another mountpoint
     #       mount-FULL uses a new available loop device,
     #       busybox mount fails because it uses the same loop device for the imgFILE
     #       busybox mount would need losetup /dev/loopY imgFILE beforehand
     MOUNT='again'
     return 0
 fi #BUTTONS

else
  # REM: DISPLAY unset so assuming tty terminal
  #      No select right now
  #      Unmount it
  UNMOUNT='yes'
fi #DISPLAY

else
# REM: not mounted elsewhere, so continue
: continue
fi #MOUNTED ELSEWHERE

done

}

unset UNMOUNT
[ -d "$mountPT" ] || check_already_mounted_func

#fi #! -d mountPT

# REM: Simple UNMOUNT variable: If not set to anything
#      start mount procedure
if [ -z "$UNMOUNT" ] ; then #UNMOUNT

  # REM: Probaly a good idea to pass file-system-type to mount
  #      The code now uses extension MIME-Type (noted in /usr/share/mime/globs) .
  #      TODO: Better use disktype first and if that fails fall back using
  #       extension or mount without passing -t option to let mount guess f.s.-type...
  #     TODO2 : Better use case instead if test
  Ext=`echo "$imageFILE" |sed 's/^.*\.//'`    # get file type from extention
  if [ "$Ext" = '2fs' ] ;then #Ext
   Type='ext2'
  elif [ "$Ext" = '3fs' ] ;then #Ext
   Type='ext3'
  elif [ "$Ext" = '4fs' ] ;then  #Ext #v423 planning for the future!
   Type='ext4'
  elif [ "$Ext" = 'sfs' -o "$Ext" = 'squashfs' -o "$Ext" = 'sqfs' ] ;then #Ext
   Type='squashfs'
  elif [ "$Ext" = 'iso' ] ;then #Ext
   Type=`disktype "$imageFILE" | grep -m1 'file system' |awk '{print $1}' |tr '[[:upper:]]' '[[:lower:]]'`
   [ "$Type" ] || Type='iso9660'  #fallback

  # REM: Older initrds were a simple ext2 fs container that needed root=/dev/ram0
  #      kernel parameter. init is /sbin/init in such containers.
  #      With cpio archive support init is on rootfs-top :
  #      TODO : handle other copressions ...
  elif [ "$imageFILEBASE" = 'initrd.gz' -o "$imageFILEBASE" = 'initrd' ] ;then

   # REM: gunzip removes the .gz extension
   if [ "$imageFILEBASE" = 'initrd.gz' ];then
    gunzip "$imageFILE"               # handle gzip image file
    imageFILE=`echo "$imageFILE" |sed 's/.gz$//'`
   fi

   # REM : Do not attempt to mount it if no f.s. inside (cpio archive)
   Type=`disktype "$imageFILE" | grep -m1 'file system' |awk '{print $1}' |tr '[[:upper:]]' '[[:lower:]]'`
   if [ ! "$Type" ];then #! TYPE
    [ "$DISPLAY" ] && xmessage -bg red "Sorry, no file system inside initrd." &
    echo "Sorry, no file system inside initrd."
    # REM: For now gzip it back again.
    #      Todo: Could unpack it ...
    if [ "$imageFILEBASE" = 'initrd' ];then
     gzip -9 "$imageFILE"
    fi
    exit 1
   fi #! TYPE
  fi #Ext

  #v423 detect wrong squashfs version...
  if [ "$Type" = "squashfs" ];then #squashfs
   DISK_TYPE=`disktype "${imageFILE}" 2>&1`
    if [ "`echo "$DISK_TYPE" | grep -i permission`" ];then #DISK_TYPE
     xmessage -bg red2 "CHECK Permissions :
`ls -l $imageFILE`
"
     exit 1

    elif [ ! "`echo "$DISK_TYPE" | grep "$SFSSTR"`" ];then #DISK_TYPE
     if [ $KERNELSUBVER -gt 28 ];then #KERNEL 2.6.29+
      [ -n "$DISPLAY" ] && xmessage -center -bg '#FFC0C0' "NOTICE: This seems to be an older version 3.x squashfs file, not usable.
All Linux kernels 2.6.29 or later require version 4.x squashfs files.
Note, there is an SFS-version-converter in the Utility menu, run that first."
     else #KERNEL 2.6.29-
      [ -n "$DISPLAY" ] && xmessage -center -bg '#FFC0C0' "NOTICE: This seems to be a newer version 4.x squashfs file, not usable.
All Linux kernels 2.6.28 or earlier require version 3.x squashfs files.
Note, there is an SFS-version-converter in the Utility menu, run that first."
     fi #KERNEL 2.6.28/29
     exit $?
    fi #DISK_TYPE
  fi #squashfs

 # REM: Older kernels before 3.1 need check if loopdevice available :

 # REM: just could tell user that it is not possible to mount more than Y loop devices ...
  # if [ "`losetup -a |wc -l`" -ge 8 ];then #loopdevice count
   # xmessage -bg red3 "Sorry, all loopdevices in use.
   #Please unmount some and try again."

  # else #loopdevice count

  LAST_LOOP=`losetup -a |cut -f1 -d: |grep -o -e '[0-9]\+' | sort -n |tail -n1`
  NEW_LOOP=$((LAST_LOOP+1))
  if [ ! -b /dev/loop$NEW_LOOP ] ; then
  mknod /dev/loop$NEW_LOOP b 7 $NEW_LOOP
  fi

  _info "about to $MOUNT_EXE '$imageFILE' on '$mountPT'"
  #mkdir -p "$mountPT" ##2012-06-02
  _create_mountpoint "$mountPT"

  # REM: Type or not Type ...
  # REM: If mount on another mountpoint
  #       mount-FULL uses a new available loop device,
  #       busybox mount fails because it uses the same loop device for the imgFILE
  #       busybox mount would need losetup /dev/loop imgFILE beforehand
  case $MOUNT_EXE in
  *mount-FULL*)
  if [ "$Type" ]; then
   $MOUNT_EXE -t $Type -o loop "$imageFILE" "$mountPT" ##2012-06-02
  else
   $MOUNT_EXE -o loop "$imageFILE" "$mountPT" ##2014-12-01
  fi
  Err=$?  # if should pass error code of last commands here ...
  ;;
  *)
    newLOOP=`losetup -f`
    _debug "newLOOP='$newLOOP'"
    if [ -b "$newLOOP" ]; then
    losetup $newLOOP "$imageFILE"
    fi
    if [ $? = 0 ]; then
    _notice "about to $MOUNT_EXE '$newLOOP' on '$mountPT'"
   if [ "$Type" ]; then
    $MOUNT_EXE -t $Type -o loop "$newLOOP" "$mountPT" ##2012-06-02
   else
    $MOUNT_EXE -o loop "$newLOOP" "$mountPT" ##2014-12-01
   fi
    Err=$?
    else  # REM: fallback though should error 255 ...
   if [ "$Type" ]; then
    $MOUNT_EXE -t $Type -o loop "$imageFILE" "$mountPT" ##2012-06-02
   else
    $MOUNT_EXE -o loop "$imageFILE" "$mountPT" ##2014-12-01
   fi
    Err=$?   # if should pass error code of last commands here ..
    fi

  ;;
  esac

  # REM: If error code 0 reported or mountPT in mount output, pop up a message
  if [ "$Err" -eq 0 ] || [ -n "`mount | grep "$mountPT"`" ];then #MOUNT OK
   if [ -n "$DISPLAY" ] ; then #DISPLAY
    #rox -d "$mountPT" # mount good, run rox filer
    _open_rox_window "$mountPT"
    yaf-splash -timeout 3 -font "8x16" -outline 0 -margin 4 -bg green -text "SUCCESS! Click $imageFILEBASE icon again to unmount it" & #BK
   fi #DISPLAY
  fi #MOUNT OK

 # REM: Some sleep neccessary because rmdir might fail if too
 #      soon after mount/umount finished - especially on SMP systems
 #sleep 2s

 if [ "$Err" -gt 0 ] ;then  #MOUNT FAIL     # ERROR: mount/unmount
  [ -n "$DISPLAY" ] && xmessage -bg red -title "ERROR..." "mounting '$mountPT' returned '$Err'"

  # REM: check to remove created directory
  #      grep needs some backslash escaping unfortunately (\+, \? expression - see man grep)
  #      So simply escape all :punct: -- should work
  #grepP=`echo "$mountPT" |sed 's|\([[:punct:]]\)|\\\\\1|g'`
  #[ -d "$mountPT" -a "`busybox mount | grep "$grepP"`" = "" ] && rmdir "$mountPT"
  _remove_mountpoint "$mountPT"
 fi #MOUNT FAIL

#fi  #loopdevice count

else #UNMOUNT               ### file's mounted, unmount it
INFO=1
DEBUG=1
DEBUGX=1

   [ -n "$DISPLAY" ] && yaf-splash -timeout 3 -font "8x16" -outline 0 -margin 4 -bg orange -text "Unmounting  $imageFILEBASE" & #BK

   # REM: Close ROX-Filer windows to avoid unmount failure
   #      because the window keeps the mountpoint busy
   _close_rox_window "$mountPT"

     # REM: Some crude code to kill f.s users ...
     # REM: Make it optional
     if [ "$KILL_FS_USERS" = "YES" ]; then
       [ -n "$DISPLAY" ] && rox -D "$mountPT" #BK

       GREP=`echo "$mountPT" | sed 's#\.#\\\.#g;s#\+#\\\+#g;s#-#\\\-#g'`
       _debug "$GREP"
       LOOPD=$(busybox mount | grep "$GREP" | cut -f 1 -d ' ')
       _debug "$LOOPD"
       USEapps=`_command fuser -c $LOOPD`
       _debugx "_command fuser -c claims these pids '$USEapps' are using '$LOOPD'"
       # REM: Want numbers only ...
       USEapps=`echo "$USEapps" | sed 's/[[:alpha:]]//g;s/[[:punct:]]//g'`
       _debug "f.s users: $USEapps"
       for j in $USEapps ; do
       _debugx "$j "
       kill -1 $j
       done

      # REM: Some sleep here beforehand of umount to let dust settle
      sleep 2s
     fi

  _info "$UMOUNT_EXE: $imageFILE"
  $UMOUNT_EXE -d "$mountPT" ##2012-06-02
  Err=$?

 # REM: Error handling...
 if [ "$Err" -gt 0 ] ;then  #UMOUNT FAIL # ERROR: mount/unmount
  [ -n "$DISPLAY" ] && xmessage -bg red -title "ERROR..." "Returned '$Err' ... unmounting '$mountPT'"
 fi #UMOUNT FAIL


  # REM: remove mountPT directory if not anymore in mount output
  # REM: Some sleep again beforehand...
  #sleep 2s
  #grepP=`echo "$mountPT" |sed 's|\([[:punct:]]\)|\\\\\1|g'`
  #[ -d "$mountPT" -a "`busybox mount | grep "$grepP"`" = "" ] && rmdir "$mountPT"
  _remove_mountpoint "$mountPT"

fi #UNMOUNT


exit $Err

### END ###
