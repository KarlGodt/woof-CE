#!/bin/ash
##############  ROX app.: Click image files to mount & unmount. by: Terry Becker    aka: SunBurnt
##############  File types = ".2fs, .3fs, .sfs, .iso, & initrd.gz".
#v423 detect wrong squashfs version 3.x or 4.x.
#v424 advise of sfs-version-converter.

########################################################################
#
# CHANGES by Karl Reimer Godt
# 01.0 : added xmessage dialog if already mounted to choose actions :
#        Quit,ROX-Filer,console,Unmount,Unmountall,MountAnotherTime
# 02.0 : position of removal of $MntPt changed in code
# 03.0 : doubble quoted all $imgFile AND $MntPt in case of spaces
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.7-KRG-i586
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.7-KRG-i586·#2·SMP·Tue·Jan·4·15:42:45·CET·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Thu·Oct·27·11:44:41·CEST·2011
# TODO1 : cleanup my code
# TODO2 : cleanup original code
# TODO3 : observe fuser -c and fuser -m
# TODO4 : Kernel 3.x.x ready
# TODO5 : create grepPatternMntPt
# TODO6 : both fuser parts into one func
# TODO7 : adopt the code from npierce
#
########################################################################


exec 1>>/tmp/filemnt.log 2>&1
echo
echo '----------------------------------------------------------------------'
#v423...

KERNELVER="`uname -r`"

case $KERNELVER in
3.*) SFSSTR='squashfs, version 4';;
2.6.*)
KERNELSUBVER=`echo -n "$KERNELVER" | cut -f 3 -d '.' | cut -f 1 -d '-'`
SFSSTR='squashfs, version 3'
[ "$KERNELSUBVER" -gt 28 ] && SFSSTR='squashfs, version 4'
;;
*)
 echo UNHANDLED KERNEL RELEASE "'$KERNELVER'"
;;
esac

imgFile="$1"
if [ -z "$imgFile" ] ;then exit 1 ;fi #1

if [ "`basename "$imgFile"`" = 'initrd' ] ;then gzip -9 "$imgFile" ;fi # 11
if [ "`basename "$imgFile"`" = 'initrd.gz' ] ;then gunzip -9 "$imgFile" ;fi # 111  ##+2011_10_27 changed gzip to gunzip


if [ "`dirname "$imgFile"`" = '\.' ] ;then # 2
      imgFile="`pwd``echo "$imgFile" |sed 's/^\.//'`"
fi # 2


#MntPt='/mnt/'`echo "$imgFile" |sed "s#^\.##g" |sed "s#/#+#g"`
MntPt='/mnt/'`basename "$imgFile"`.$$  ##my change
grepPatternMntPt=`echo "$MntPt" | sed 's#\([[:punct:]]\)#\\\1#g'`
grepPatternImgFile=`echo "$imgFile" | sed 's#\([[:punct:]]\)#\\\1#g'`

if [ 1 -eq 2 ] ;then    ##############################################  JUMP OVER this SECTION.

 loMnts="`mount |grep '/dev/loop' |awk '{print $1}'`"
 echo "$loMnts" |while read LOOP                    ### test if file's mounted
 do
   loFile="`losetup-FULL $LOOP |sed 's/^.*(//' |sed 's/).*$//'`"
   if [ "$loFile" = "$imgFile" ] ;then
    echo -e "\n ### Loop File: $loFile"
    break
   fi
   i=`expr $i + 1`
 done

fi          ##############################################  END of JUMP SECTION.


                            ### file's not mounted, mount it
# if [ $i -eq 16 ] ;then

imgFileBASE="`basename "$imgFile"`" #BK  ##only for yaf/xmessage message not too long

#if [ ! -d "$MntPt" ] ;then # 5
if ! mountpoint "$MntPt" ; then  ##+++2013-06-23

check_already_mounted_func(){

  #BK check if already mounted elsewhere...
  for ONELOOP in `mount | grep '^/dev/loop' | cut -f 1 -d ' ' | tr '\n' ' '`
  do

   MNTDIMG="`losetup-FULL $ONELOOP | cut -f 2 -d '(' | cut -f 1 -d ')'`"
   IMGBASE="`basename "$MNTDIMG"`"
    #TODO 64 chars
    #bash-3.2# losetup-FULL /dev/loop1
    #/dev/loop1: [0700]:2579 (/mnt/xubuntu-11.10-desktop-i386.iso.29782/casper/filesystem.sq*)
                            #1234567890123456789012345678901234567890123456789012345678901234

    echo "IMGBASE='$IMGBASE' imgFileBASE='$imgFileBASE'" #TEST
    #not perfect, but paths may be symlinks...

    if [ "$IMGBASE" = "$imgFileBASE" ];then #if [ "$MNTDIMG" = "$imgFile" ];then #6

     if [ -n "$DISPLAY" ] ; then #66
xmessage -buttons "Quit:190,ROX-Filer:191,console:192,Unmount:193,Unmount all $IMGBASE:194,Mount another time:199" "$imgFile
is already mounted and in-use by Puppy .
Do you want to unmount it or mount it to another mount point ?"
RETVAL=$?
if [ "$RETVAL" = "190" ] ; then #666  ##Quit
     exit

elif [ "$RETVAL" = "191" ] ; then #666  ##ROX-Filer
       MntPt=`busybox mount | grep "$IMGBASE" | head -n 1 | cut -f 3 -d ' '`
       rox "$MntPt"
       exit

elif [ "$RETVAL" = "192" ] ; then #666  ##console
       MntPt=`busybox mount | grep "$IMGBASE" | head -n 1 | cut -f 3 -d ' '`
       cd "$MntPt"
       pwd
       rxvt &
       exit

elif [ "$RETVAL" = "193" ] ; then #666  ##umount
       UNMOUNT='yes'
       MntPt=`busybox mount | grep "$IMGBASE" | head -n 1 | cut -f 3 -d ' '`
       return

elif [ "$RETVAL" = "194" ] ; then #666  ##umount ALL $IMGBASE
       UNMOUNT='yes'
       MntPt=`busybox mount | grep "$IMGBASE" | cut -f 3 -d ' '`
       echo 1 "$MntPt"
       MntPt2=`echo "$MntPt" | sed "1 d"` ##only umount all others exect one
       echo 2 "$MntPt2"
       for i in $MntPt2 ; do
       GREP=`echo "$i" | sed 's#\.#\\\.#g;s#\+#\\\+#g;s#-#\\\-#g'`
       echo "$GREP"
       LOOPD=$(busybox mount | grep "$GREP" | cut -f 1 -d ' ')
       echo "$LOOPD"
       #USEapps=`fuser -c $LOOPD`    ##---2011_10_27
       USEapps=`fuser -m "$MntPt2"`   ##+++2011_10_27
       echo 3 "$USEapps"
       USEapps=`echo "$USEapps" | sed 's/[[:alpha:]]//g'`
       echo 4 "$USEapps"
       for j in $USEapps ; do
       echo $i
       kill -1 $j
       done
       [ -n "$DISPLAY" ] && rox -D $i
       umount $i
       sleep 2
       rmdir $i
       done
       MntPt=`busybox mount | grep "$IMGBASE" | cut -f 3 -d ' '`
       return

else #666
     MOUNT='again'
     return
fi   ###666
else ##66      ##+++2011_10_27 to fix call from without X running
UNMOUNT='yes'  ##+++2011_10_27
fi ##66
fi #6
done

}
check_already_mounted_func

fi # 5

if [ -z "$UNMOUNT" ] ; then #55 == yes || [ -n "$MOUNT" ] == again

  Ext=`echo "$imgFile" |sed 's/^.*\.//'`    # get file type from extention
  if [ "$Ext" = '2fs' -o "$Ext" = 'ext2' ] ;then #7
   Type='ext2'
  elif [ "$Ext" = '3fs' ] ;then
   Type='ext3'
  elif [  "$imgFileBASE" = 'ext3fs.img' ];then
   Type='ext3'
  elif [ "$Ext" = '4fs' ] ;then #v423 planning for the future!
   Type='ext4'
  elif [ "$Ext" = 'sfs' -o "$Ext" = 'squashfs' -o "$Ext" = 'sqfs' ] ;then
   Type='squashfs'
  elif [ "$imgFileBASE" = 'squashfs.img' ];then
   Type='squashfs'
  elif [ "$Ext" = 'iso' ] ;then
   Type='iso9660'
  # BK
  #elif [ "$imgFile" = 'initrd.gz' ] ;then
  # Type='ext2'
  # gunzip $imgFile             # handle gzip image file
  # imgFile="echo "$imgFile" |sed 's/.gz$//'"
  fi #7

  #v423 detect wrong squashfs version...
  if [ "$Type" = "squashfs" ];then #8
   if [ "`disktype "${imgFile}" | grep "$SFSSTR"`" = "" ];then #8.1
    if [ $KERNELSUBVER -gt 28 ];then #8.1.1
     [ -n "$DISPLAY" ] && xmessage -center -bg '#FFC0C0' "NOTICE: This is an older version 3.x squashfs file, not usable.
All Linux kernels 2.6.29 or later require version 4.x squashfs files.
Note, there is an SFS-version-converter in the Utility menu, run that first."
    else #8.1.1
     [ -n "$DISPLAY" ] && xmessage -center -bg '#FFC0C0' "NOTICE: This is a newer version 4.x squashfs file, not usable.
All Linux kernels 2.6.28 or earlier require version 3.x squashfs files.
Note, there is an SFS-version-converter in the Utility menu, run that first."
    fi #8.1.1
    exit
   fi #8.1
  fi #8

#  echo -e "\nimgFile = $imgFile\t\tExt  = $Ext"
#  echo -e "MntPt   = $MntPt\t\tType = $Type\n"
  echo -e "\n$0 : Mount: $imgFile\n"
  mkdir -p "$MntPt"
  echo '-------------'
  mount -t $Type -o loop "$imgFile" "$MntPt"
  Err=$?     ##+++2011_10_27
  echo '-------------'
  sleep 2s
  #Err=$?    ##---2011_10_27
  if [ $Err -eq 0 ] || [ -n "`mount | grep "$MntPt"`" ];then #9
   if [ -n "$DISPLAY" ] ; then #99
    rox -d "$MntPt" # mount good, run rox filer
   ##[ -n "$DISPLAY" ] && yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg green -text "SUCCESS! Click $imgFileBASE icon again to unmount it" & #BK
    yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg green -text "SUCCESS! Click $imgFileBASE icon again to unmount it" & #BK
   fi #99
  fi #9

 else #55   [ -n "$UNMOUNT" ]                   ### file's mounted, unmount it

   [ -n "$DISPLAY" ] && rox -D "$MntPt" #BK

       GREP=`echo "$MntPt" | sed 's#\.#\\\.#g;s#\+#\\\+#g;s#-#\\\-#g'`
       echo 1 "$GREP"
       LOOPD=$(busybox mount | grep "$GREP" | cut -f 1 -d ' ')
       echo 2 "$LOOPD"
       #USEapps=`fuser -c $LOOPD`  ##---2011_10_27
       USEapps=`fuser -m "$MntPt"`  ##---2011_10_27
       echo 3 "$USEapps"
       USEapps=`echo "$USEapps" | sed 's/[[:alpha:]]//g;s/[[:punct:]]//g'`
       echo 4 "$USEapps"
       for j in $USEapps ; do
       echo $i
       kill -1 $j
       done

  sleep 2s
  echo '------------'
  umount "$MntPt"
  Err=$?
  echo '------------'
  #yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg orange -text "$Err"
  #sleep 2s  ##+-2011_10_27
  #rmdir $MntPt
  #yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg orange -text "$MntPt"


  [ -n "$DISPLAY" ] && yaf-splash -timeout 3 -font "8x16" -outline 0 -margin 4 -bg orange -text "Unmounting $imgFileBASE" #BK
   sleep 2s  ##+++2011_10_27
  #Xdialog --title " Notice..." --no-button \
  #        --infobox "
  #UnMounting: $imgFile
  #" 0 0 2000

  echo -e "\n$0 UnMount: $imgFile\n"

  #[ -d "$MntPt" -a "`busybox mount | grep "$MntPt"`" = "" ] && rmdir "$MntPt"  #=-2011_10_27
   [ -d "$MntPt" -a -z "`ls "$MntPt" 2>/dev/null`" ] && rmdir "$MntPt"
 fi #55

 if [ "$Err" -gt 0 ] ;then          # ERROR: mount/unmount # 9999
  [ -n "$DISPLAY" ] && xmessage -bg red -title "ERROR..." "Returned <$Err> ... mounting or unmounting $MntPt"
  [ -d "$MntPt" -a -z "`ls "$MntPt" 2>/dev/null`" ] && rmdir "$MntPt"  ##+++2011_10_27
 fi # 9999



