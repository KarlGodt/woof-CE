#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_mount-old"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/bin/mount-old"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in 1; do shift; done; }

_trap

}
# End new header
#
#BK 2006 www.puppylinux.com
#2007 Lesser GPL licence v2 (http://www.fsf.org/licensing/licenses/lgpl.html)
#v407 fix for floppy drive icon.
#v409 gparted create ext3 part. failed, fixed by making /etc/mtab a symlink.
#mount-FULL, umount-FULL, losetup-FULL are the full versions.
#The Busybox versions of mount and umount are available but only by:
# # busybox mount ...
# # busybox umount ...
#mount and umount are now scripts.
#if an ntfs partition, puppy uses user-mode ntfs-3g driver.
#the mount and umount scripts allow seamless mounting and unmounting of ntfs f.s.


########################################################################
#
#
#
#
#
# /dev/sda5:
# LABEL="MacPup430_F3"
# UUID="07443de5-1fab-4656-a3ab-7b1c14ccc8c8"
# TYPE="ext3"
# DISTRO_VERSION=430·#481·#416·#218·#478······#####change·this·as·required#####
# DISTRO_BINARY_COMPAT="puppy"·#"ubuntu"·#"puppy"·#####change·this·as·required#####
# case·$DISTRO_BINARY_COMPAT·in
# ubuntu)
# DISTRO_NAME="Jaunty·Puppy"
# DISTRO_FILE_PREFIX="upup"
# DISTRO_COMPAT_VERSION="jaunty"
# ;;
# debian)
# DISTRO_NAME="Lenny·Puppy"
# DISTRO_FILE_PREFIX="dpup"
# DISTRO_COMPAT_VERSION="lenny"
# ;;
# slackware)
# DISTRO_NAME="Slack·Puppy"
# DISTRO_FILE_PREFIX="spup"
# DISTRO_COMPAT_VERSION="12.2"
# ;;
# arch)
# DISTRO_NAME="Arch·Puppy"
# DISTRO_FILE_PREFIX="apup"
# DISTRO_COMPAT_VERSION="200904"
# ;;
# t2)
# DISTRO_NAME="T2·Puppy"
# DISTRO_FILE_PREFIX="tpup"
# DISTRO_COMPAT_VERSION="puppy5"
# ;;
# puppy)·#built·entirely·from·Puppy·v2.x·or·v3.x·or·4.x·pet·pkgs.
# DISTRO_NAME="Puppy"
# DISTRO_FILE_PREFIX="pup"·#"ppa"·#"ppa4"·#"pup2"··#pup4··###CHANGE·AS·REQUIRED,·recommend·limit·four·characters###
# DISTRO_COMPAT_VERSION="4"·#"2"··#4·····###CHANGE·AS·REQUIRED,·recommend·single·digit·5,·4,·3,·or·2###
# ;;
# esac
# PUPMODE=2
# KERNVER=2.6.30.6-KRG-i486
# ATADRIVES='·sda'
# USB_SATAD=''
# PUP_HOME='/'
# Linux·puppypc·2.6.30.6-KRG-i486·#1·SMP·Sun·Jan·2·20:32:12·GMT-1·2011·i686·GNU/Linux
# Xserver=/usr/X11R7/bin/Xvesa_stripped_upx9
# $LANG=en_US
# today=Mon·Oct·24·22:55:49·CEST·2011
#
#
#
#
#
########################################################################


LANG=C

[ "$1" ] || exec busybox mount

##################### usage version part ################################
#Version='1.1-simple Puppy-Linux-4.3.0 KRG'
Version='1.1-getopts Macpup_Foxy_3-Puppy-Linux-4.3.0 KRG'

#[ ! "$2" -a "$1" = "-q" ] && { busybox mount |sed "s|\(.*\) \(on\) \(.*\) \(type\) \(.*\) \(.*\)|'\1' \2 '\3' \4 '\5' \6|";exit $?; }
#[ ! "$2" -a "$1" = '-Q' ] && { busybox mount |sed -r 's|(.*)( on )(.*)( type )(.*)( \(.*\))|"\1"\2"\3"\4"\5"\6|'; exit $?; }
[ ! "$2" ] && { [ "$1" = '-q' ] && { busybox mount |sed "s|\(.*\) \(on\) \(.*\) \(type\) \(.*\) \(.*\)|'\1' \2 '\3' \4 '\5' \6|";exit $?; }; }
[ ! "$2" ] && { [ "$1" = '-Q' ] && { busybox mount |sed -r 's|(.*)( on )(.*)( type )(.*)( \(.*\))|"\1"\2"\3"\4"\5"\6|'; exit $?; }; }

##mount -q | grep -e "^[/']*dev/"
##'/dev/root' on '/' type 'ext3' (rw,relatime,errors=continue,data=writeback)
##mount -Q | grep -e '^[/"]*dev/'
##"/dev/root" on "/" type "ext3" (rw,relatime,errors=continue,data=writeback)

##mount -Q | grep -e ^[\/\"\']*dev/
##"/dev/root" on "/" type "ext3" (rw,relatime,errors=continue,data=writeback)
##mount -q | grep -e ^[\/\"\']*dev/
##'/dev/root' on '/' type 'ext3' (rw,relatime,errors=continue,data=writeback)
##mount | grep -e ^[\/\"\']*dev/
##/dev/root on / type ext3 (rw,relatime,errors=continue,data=writeback)

##mount | grep -e ^[\"\']*/dev/
##/dev/root on / type ext3 (rw,relatime,errors=continue,data=writeback)
##mount -q | grep -e ^[\"\']*/dev/
##'/dev/root' on '/' type 'ext3' (rw,relatime,errors=continue,data=writeback)
##mount -Q | grep -e ^[\"\']*/dev/
##"/dev/root" on "/" type "ext3" (rw,relatime,errors=continue,data=writeback)



usage(){
MSG="
$0 [ pup options ] [ mount options ] DEVICE [DIR/]
Script to fork different mount clis for the appropriate
filesystem (ie ntfs-3g, mount-FULL, busybox mount) and
manage the drive icons on the desktop.
-H) this usage
-P) show version information

Puppy Options (must be first option and only Puppy option)
-D) debug set -x
-C) codecheck set -n

Normal Mount Option used additionally :
-v) verbose

Special Puppy only Option:
-q) show mounts with single quoted output
-Q) show mounts with double quoted output

For the appropriate mount binaries options,
like mount-FULL, ntfs-3g, busybox mount,
run BINARY --help|-h or man BINARY.
"
echo "$MSG"
[ "$DISPLAY" ] && xmessage -bg orange2 "$MSG"
exit $?
}
##################### usage version part ################################


############# getopts part #####################
OPTERR=0
OUT=/dev/null;ERR=$OUT
while getopts HPDv opt;do
case $opt in
H) usage 0;;
P) echo -e "\n$0: Version '$Version'\n";exit 0;;
D) DEBUG=1;set -x;shift;;
v) VERBOSE=1;VERB=-v;L_VERB=--verbose;A_VERB=-verbose;OUT=/dev/stdout;ERR=/dev/stderr;;
C) set -n;shift;;
*) :;;
esac;done
############# getopts part #####################


############# create mountdir part ##################
#if [ "$DEBUG" -o "$VERBOSE" ];then

#echo 'if #0'
#FOLDERS=`echo "$@" | grep -w '/.* ' | grep -v /dev/`
#for i in $FOLDERS; do#
#[ ! -d $i ] && echo 'Folder '"$i"' does not exists. Creating now ...' && mkdir $i
#done

j=0
for i in `seq 1 $#` ; do
j=$((j+1))
PARAM=`echo "$*" | cut -f $i -d ' '`
[ "$DEBUG" -o "$VERBOSE" ] && echo '$'$j' ='"$PARAM"
eval PARAME$j="${PARAM}"  ##+--2012-05-01 was eval PARAME$j='\\'"${PARAM}"
[ "$DEBUG" -o "$VERBOSE" ] && eval echo "\$PARAME$j"    ##+--           showed as \/mnt/sda11
if [ -n "`echo $PARAM | grep '/' | grep -v /dev/`" ] ; then
[ -e "$PARAM" ] || { [ "$DEBUG" -o "$VERBOSE" ] && echo "Folder '$PARAM' does not exists. Creating now ...";mkdir -p "$PARAM"; }
fi
done

#if [ -n "$DISPLAY" ] ; then #DBG
#IFS='|'
#for i in * @ \# ? - $ ! 0 _ ; do
#echo $*
#echo "$*"
#echo $@
#echo "$@"
#done
#unset IFS

#fi
############# create mountdir part ##################


#i realised this script has to allow reentrancy. So, all temp file now unique,
#using ${$} which is pid of script.
MYPID=${$}
. /etc/rc.d/functions4puppy4 #v4.02


############# simple mount /dev/sda# part ######
#MOUNTAT="$@"
ALREADYMOUNTED=`busybox mount | cut -f 1 -d ' '`
SIMPLEMOUNT=''
[ "$DEBUG" ] && echo 'Simple mount begin'
if [[ -n "`echo $1 | grep -E '/dev/|/mnt/'`" ]] && [[ "`echo "$@"`" = "$1" ]] && [[ -z "$2" ]] ; then
#GREPPARAM=`echo "$1" | sed 's#-#\\\-#g'`
#GREPPARAM=`echo "$1" | sed 's/\([[:punct:]]\)/\\\\\1/g; s/\\\\\\\\\\\/\\\/g'`
## from /sbin/init      sed 's/\([[:punct:]]\)/\\\\\1/g; s/\\\\/\\/g ; s#\ #\\\ #g ; s/ $// ; s/\\$//'
GREPPARAM=$(echo "$1" | sed 's/\([[:punct:]]\)/\\\\\1/g ; s/\(\\\\\\\)*$//' | tr -s '\\')
[ "$DEBUG" ] && echo 'if #1'
[ "$DEBUG" ] && echo GREPPARAM="$GREPPARAM"
if [ ! -f /etc/fstab ] || [ -z "`grep -w "$GREPPARAM" /etc/fstab | grep -v -E -e '^#|^[[:blank:]]*#'`" ] ; then
[ "$DEBUG" ] && echo 'if #2'
simpledriveandpartitionname=`echo "$1" | sed 's#^/dev/## ; s#^/mnt/##'`
#[ -d /mnt/$simpledriveandpartitionname ] || mkdir /mnt/$simpledriveandpartitionname
mkdir -p /mnt/$simpledriveandpartitionname

SIMPLEMOUNT="/dev/$simpledriveandpartitionname /mnt/$simpledriveandpartitionname"

FS_TYPE=`guess_fstype /dev/$simpledriveandpartitionname`

if [ "$FS_TYPE" = 'ntfs' ];then
NTFS=1;fi

elif [ "`grep -w "$GREPPARAM" /etc/fstab | grep -v -E -e '^#|^[[:blank:]]*#'`" ] ; then
MOUNT_POINT=`grep -w "$GREPPARAM" /etc/fstab | grep -v -E -e '^#|^[[:blank:]]*#' |head -n1 |awk '{print $2}'`
mkdir -p "$MOUNT_POINT"

fi
fi
############# simple mount /dev/sda# part ##########################################


############# manual alternative -a part ##############################################################################
#PARAMSCOMPLETE=`echo "$@" | sed 's#^# # ; s#$# #'`
[ "$DEBUG" ] && echo 'Part -a begin:'
[ "$DEBUG" ] && echo ':'"$@"':'
#opt_a_PATTERN=`echo " $@" | grep -w -E -e '\ \-[a-z]*a[a-z]*|\ \-a[a-z]*|\ \-[a-z]*a|\ \-a' | sed 's#^ *##' | tr -s ' '`
opt_a_PATTERN=`echo " $@" | grep -w -E -e '\ \-[[:alpha:]]*a[[:alpha:]]*|\ \-a[[:alpha:]]*|\ \-[[:alpha:]]*a|\ \-a' | sed 's#^ *##' | tr -s ' '`
[ "$DEBUG" ] && echo "opt_a_PATTERN='$opt_a_PATTERN'"
############# manual alternative -a part ##############################################################################
if [[ -n "$opt_a_PATTERN" ]] ; then
### option -a given
### filer other params
[ "$DEBUG" ] && echo "$LINENO"
count_PARAMS=$(( $(echo "$opt_a_PATTERN" | wc -c) - 2 ))
[ "$DEBUG" ] && echo "count_PARAMS='$count_PARAMS'"

for i in `seq 0 $count_PARAMS` ; do
[ "$DEBUG" ] && echo "$i"
PARAM=${opt_a_PATTERN:$i:1}
[ "$PARAM" = " " ] && PARAM=''
[ "$DEBUG" ] && echo ':'"$PARAM"':'
[ -z "${PARAM}" ] || [ "${PARAM}" = "a" ] && continue
PARAMETERLINE="$PARAMETERLINE ${PARAM}"
done

PARAMETERLINE=`echo "$PARAMETERLINE" | sed 's# ##g ; s#-##g ; s#^#-#'`
[ "$PARAMETERLINE" = "-" ] && PARAMETERLINE=''
[ "$DEBUG" ] && echo "PARAMETERLINE='$PARAMETERLINE'"
[ "$DEBUG" ] && echo 'if #3'

if [ -n `readlink -f /etc/fstab` ] ; then
[ "$DEBUG" ] && echo 'if #4'
FSTAB=`cat $(readlink -f /etc/fstab) | grep -E '^/dev/|^no' | grep -v -E -e 'noauto|^#|^[[:blank:]]*#' | tr '\t' ' ' | tr -s ' ' | sed 's/^[[:blank:]]*//'`
MOUNTDIRS=`echo "$FSTAB" | cut -f 2 -d ' '`
for i in $MOUNTDIRS ; do
[ ! -d "$i" ] && { [ "$DEBUG" ] && echo 'if #5';mkdir -p "$i"; }
done

###first simple attempt###
FSTYPES=`echo "$FSTAB" | cut -f 3 -d ' '`
[ -n "`echo "$FSTYPES" | grep 'ntfs'`" ] && { [ "$DEBUG" ] && echo 'if #6'; SPECIALOPT='1'; }

###second loop attempt###
for i in $MOUNTDIRS ; do
DEVICE=`echo "$FSTAB" | grep "$i" | cut -f 1 -d ' '`
[ ! "$DEVICE" ] && echo -e "\e[31mError , no device specified for $i\e[39m" && continue
FSTYPE=`echo "$FSTAB" | grep "$i" | cut -f 3 -d ' '`
[ ! "$FSTYPE" ] && echo -e "\e[31mError , no file system type  specified for $i\e[39m" && continue
OPTION=`echo "$FSTAB" | grep "$i" | cut -f 4 -d ' '`
[ ! "$OPTION" ] && echo -e "\e[31mError , no option(s) specified for $i\e[39m" && continue

MOUNTLINE="${PARAMETERLINE} -t ${FSTYPE} -o ${OPTION} ${DEVICE} $i"

if [ -n "`busybox mount | grep "$i"`" ] ; then
mount-FULL $MOUNTLINE  #no double quotes at least for ash here ; this seems to sqeeze multiple following spaces into one space
RETVAL=$?
if [ "$RETVAL" != "0" ] ; then
echo 'ERROR mounting' "$MOUNTLINE"
fi
#mount-FULL "$PARAMETERLINE" "$DEVICE" "$i" -t "$FSTYPE" -o "$OPTION"
fi
done
else
echo -e "\\033[0;31m""Error , option '-a' given but fstab does not exists""\\033[0;39m"
exit 1
fi
############# manual alternative -a part ##############################################################################
echo $LINENO

####### original mount part : ##################################################################
else
[ "$DEBUG" ] && echo 'if #3 else'
#v2.12 discovered difference between $@ and $*. Replaced all $@ with $* in this script...

#extract all the '-' options, on separate lines... do NOT use $@!!!!...
#v3.93 eliminate ' -- ' and all past it...
DASHOPTS=`echo -n " $*" | tr '\t' ' ' | tr -s '[[:blank:]]' | sed 's/\(  *\)--\(  *\)/\1\2/g ; s#--$##' | tr ' ' '\n' | grep '^\-'`  ##  ; s# *-- *##g## NOT needed anymore
[ "$DEBUG" -o "$VERBOSE" ] && echo "DASHOPTS='$DASHOPTS'"
#needs an explicit '-t ntfs', does not work with /etc/fstab...

######################## mount non-NTFS part #################################
if [ "`echo "$*" | grep 'ntfs'`" = "" ];then
[ "$DEBUG" ] && echo 'if #7'
 #v3.93 always use full mount, in case of params not understood by bb-mount...
 ##v2.10 hack for T2, scripts have '--bind'...
 #if [ "`echo -n "$*" | grep '\-\-bind'`" = "" ];then
 # busybox mount $@
 # RETVAL=$?
 #else
 # #busybox mount does not support '--bind'
 # #as have mtab file (see below), can now use full mount...
  #v409 put in '-n' option as now have /etc/mtab symlink to /proc/mounts...
  if test -n "$SIMPLEMOUNT" ; then
  [ "$DEBUG" ] && echo 'if #8'
   if [ "$NTFS" ];then
    ntfs-3g $SIMPLEMOUNT
    RETVAL=$?
    read UPtime RUNtime </proc/uptime
    dmesg | tail | grep -w "$UPtime"
   else
    mount-FULL -n $SIMPLEMOUNT  ## does not work within double quotes
    RETVAL=$?
    IFS='. ' read UPtime restU RUNtime restR </proc/uptime
    dmesg | tail | grep -w "$UPtime"
   fi
  [ "$DEBUG" -o "$VERBOSE" ] && echo "mount-FULLsimplemount$RETVAL='$RETVAL'" #DBG
  else
  [ "$DEBUG" ] && echo 'if #8 else'
  mount-FULL -n "${@}"
  RETVAL=$?
  IFS='. ' read UPtime restU RUNtime restR </proc/uptime
  dmesg | tail | grep -w "$UPtime"
  [ "$DEBUG" -o "$VERBOSE" ] && echo "mount-FULLnormal$RETVAL='$RETVAL'" #DBG
 #fi
 fi
######################## mount non-NTFS part #################################


######################### mount ntfs with ntfs-3g #########################################
else
 #screen out all the options...
 CMDPRMS=`echo -n "$*" | tr '\t' ' ' | tr -s ' ' | tr ' ' '\n' | grep '^/' | tr '\n' ' '`
 #kirk advised these options so Rox will not complain about file
 #permissions when copy a file to a ntfs partition...
 [ -f /tmp/ntfsmnterr${MYPID}.txt ] && rm -f /tmp/ntfsmnterr${MYPID}.txt
 [ "$DEBUG" -o "$VERBOSE" ] && echo "CMDPRMS='$CMDPRMS'"
 ntfs-3g $CMDPRMS -o umask=0,no_def_opts 2>/tmp/ntfsmnterr${MYPID}.txt
 RETVAL=$?
 [ "$DEBUG" -o "$VERBOSE" ] && echo "ntfs-3g$RETVAL='$RETVAL'"

 #v2.16 ntfs-3g v1.417, part. scheduled for check, failed with value 10...
 #v4.00 ntfs-3g v1.2412 does not have 4,10, has 15 for dirty f.s., 14 hiberneted...
####################### ntfs-3g force option ########################################################
 if [ $RETVAL -eq 4 -o $RETVAL -eq 10 -o $RETVAL -eq 15 -o $RETVAL -eq 14 ];then  #try to force it...
  if [ $RETVAL -eq 14 ];then
   #ntfs-3g $CMDPRMS -o umask=0,no_def_opts,remove_hiberfile 2>/tmp/ntfsmnterr${MYPID}.txt
   #RETVAL=$?
   #echo > /dev/null
  :
  else
   ntfs-3g $CMDPRMS -o force,umask=0,no_def_opts 2>/tmp/ntfsmnterr${MYPID}.txt
   RETVAL=$?
   ERRMSG1=`cat /tmp/ntfsmnterr${MYPID}.txt`
   [ "$DEBUG" -o "$VERBOSE" ] && echo "ntfs-3gretval#4,10,15#$RETVAL='$RETVAL'"
   [ "$DEBUG" -o "$VERBOSE" ] && echo "$ERRMSG1"
   if [ $RETVAL -eq 0 ];then
    echo "WARNING: NTFS f.s. mounted read/write but corrupted."
    [ ! "`pidof X`" = "" ] && nohup gxmessage -bg red -center -title "NTFS WARNING" "The ntfs-3g driver was able to mount the NTFS
partition but returned this error message:
$ERRMSG1

It is mounted read/write, but advice is only write
to it in emergency situation. Recommendation is
boot Windows and fix the filesystem first!!!" &
   fi
  fi
 fi
####################### ntfs-3g force option ########################################################

 [ "$DEBUG" -o "$VERBOSE" ] && echo "ntfs-3g_after_check_error_code$RETVAL='$RETVAL'"

##################### ntfs mount with error ###################
 #ntfs-3g plays very safe and will not mount if thinks anything
 #wrong with ntfs f.s. But, we may want to recover files from a
 #damaged windows. So, fall back to the kernel ntfs driver...

#################### busybox mount ntfs ro ############################################
 if [ ! $RETVAL -eq 0 ];then
  #mount read-only...
  busybox mount -r -t ntfs $CMDPRMS
  RETVAL=$?
  [ "$DEBUG" -o "$VERBOSE" ] && echo "ntfs-3g switch to busybox mount$RETVAL='$RETVAL'"
  ERRMSG1=`cat /tmp/ntfsmnterr${MYPID}.txt`
  [ "$DEBUG" -o "$VERBOSE" ] && echo "$ERRMSG1"

################### present ro message ###########
  if [ $RETVAL -eq 0 ];then
   echo "WARNING: NTFS f.s. mounted read-only."
   [ ! "`pidof X`" = "" ] && nohup gxmessage -bg red -center -title "NTFS WARNING" "The ntfs-3g driver was unable to mount the NTFS
partition and returned this error message:
$ERRMSG1

So, the inbuilt kernel NTFS driver has been used
to mount the partition read-only." &
  fi
################### present ro message ###########
 fi
#################### busybox mount ntfs ro ############################################
fi
######################### mount ntfs with ntfs-3g #########################################
fi
#######original mount part : ##################################################################


[ "$DEBUG" -o "$VERBOSE" ] && echo "final$RETVAL='$RETVAL'"
[ "$DEBUG" -o "$VERBOSE" ] && echo "$DISPLAY    ='$DISPLAY'"


###################### DISPLAY and pup_event_frontend_d ####################################
#v4.02 if there is a desktop icon (see pup_eventd), then refresh it...
##if [ "$RETVAL" -eq 0 -a "$DISPLAY" != "" ];then
if [ -n "$DISPLAY" -a "`pidof pup_event_frontend_d`" ] ; then  ##1
 ##DEVNAME=`busybox mount | tail -n 1 | grep '^/dev/' | cut -f 1 -d ' ' | cut -f 3 -d '/'`
 DEVNAMES=`busybox mount | cut -f 1 -d " " | grep -v -w "$ALREADYMOUNTED"`
 [ "$DEBUG" -o "$VERBOSE" ] && echo "$DEVNAMES   ='$DEVNAMES'"
 ##if [ "$DEVNAME" != "" ];then  ##2
  for i in $DEVNAMES ; do
  DEVNAME=`basename $i`
  DRVNAME=`echo -n "$DEVNAME" | cut -c 1-3`
  [ "$DEBUG" -o "$VERBOSE" ] && echo "DRVNAME     ='$DRVNAME'"
  #special case, SD card /dev/mmcblk0p1...
  [ "$DRVNAME" = "mmc" ] && DRVNAME=`echo -n "$DEVNAME" | sed -e 's/p[0-9]$//'`
  xDRVNAME="$DRVNAME" #v404
  [ "$DEBUG" -o "$VERBOSE" ] && echo "xDRVNAME    ='$xDRVNAME'"
  [ -d /root/.pup_event/drive_${DEVNAME} ] && DRVNAME="$DEVNAME" #icon for each partition.
  [ "$DEBUG" -o "$VERBOSE" ] && echo "DRVNAME     ='$DRVNAME'"
  if [ -d /root/.pup_event/drive_${DRVNAME} ];then  ##3
   [ "$DEBUG" -o "$VERBOSE" ] && echo "/root/.pup_event/drive_'$DRVNAME' exists"
   case $DRVNAME in #v407
    fd*)
     DRV_CATEGORY="floppy"
     [ "$DEBUG" -o "$VERBOSE" ] && echo "DRV_CATEGORY='$DRV_CATEGORY'"
    ;;
    *)
     dnPATTERN='/dev/'"${xDRVNAME}"'|'
     DRV_CATEGORY=`probedisk2 | grep "$dnPATTERN" | cut -f 2 -d '|'`
     [ "$DEBUG" -o "$VERBOSE" ] && echo "dnPATTERN='$dnPATTERN' DRV_CATEGORY='$DRV_CATEGORY'"
    ;;
   esac
   [ "$DEBUG" -o "$VERBOSE" ] && echo 'starting icon_mounted_func ...'
   icon_mounted_func $DRVNAME $DRV_CATEGORY #see functions4puppy4
   [ "$DEBUG" -o "$VERBOSE" ] && echo '... returned from icon mounted func'
  fi  ##3
 done
## fi  ##2
fi  ##1
###################### DISPLAY and pup_event_frontend_d ####################################


#################### mtab part #################################################
#v409 now have /etc/mtab a symlink to /proc/mounts so this section not needed...
##v2.10 do not update /etc/mtab if '-n' option...
#[ "`echo " $DASHOPTS" | grep '^\-n$'`" != "" ] && exit $RETVAL
##busybox does not support /etc/mtab, but some apps (ex: eject
##and the full mount,umount, mke2fs) need it...
#[ $RETVAL -eq 0 ] && busybox mount | sed -e 's/ on / /g' | sed -e 's/ type / /g' | sed -e 's/ (/ /g' | sed -e 's/)$/ 0 0/g' > /etc/mtab
##note, it is a long story here. Busybox can be configured to
##support /etc/mtab, however the information it writes to mtab
##is incomplete, different, and breaks my scripts.

#v409, instead just make sure the symlink stays there...
if [ ! -L /etc/mtab ];then
 rm -f /etc/mtab
 ln -s /proc/mounts /etc/mtab
fi
#################### mtab part #################################################


################### tail part ##################################################
if [ "$DEBUG" -o "$VERBOSE" ];then
    echo "finishing now '$0' ..."
    echo "RETVAL='$RETVAL'"
    stamp=`dmesg |tail -n1 |grep -o '\[.*\]' |tr -d '\[\]' |cut -f1 -d'.'`
    if [ "$stamp" ];then
    echo "time:$stamp"
    dmesg |grep -E "^[\[$stamp|\^<[0-7]>\[$stamp"
    else
    dmesg |tail -n5
    echo
    dmesg |tail -n1
    fi
echo "... '$0' finished"
else
##dmesg |tail -n1 |grep -iE 'sd|fs|mount|dev'
#[ "$FS_TYPE" ] || FS_TYPE=NONE
#[ "$DRVNAME" ] || DRVNAME=NONE
#dmesg |tail -n1 |grep -iE "${FS_TYPE}|${DRVNAME}"
IFS='. ' read UPtime restU RUNtime restR </proc/uptime
dmesg | tail | grep -w "$UPtime"
fi
################### tail part ##################################################

exit $RETVAL
# Very End of this file 'bin/mount-old' #
###END###
