#!/bin/sh
#
# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_df"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/bin/df"
MY_PID=$$

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || source /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP='1'; TWO_VERSION='1'; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
#(c) Barry Kauler 2009, licence GPL2
#w482 fix for /dev/root.

__old_intro_header__(){  #BEGIN
#************
#KRG

OUT=/dev/null;ERR=$OUT
[ "$DEBUG" ] && { OUT=/dev/stdout;ERR=/dev/stderr; }
[ "$DEBUG" = 2 ] && set -x

Version=1.1-KRG-MacPup_O2

usage(){
MSG="
$0 [ help | version ]
"
echo "$MSG
$2"
exit $1
}
[ "`echo "$1" | grep -Ei "help|\-h"`" ] && usage 0
[ "`echo "$1" | grep -Ei "version|\-V"`" ] && { echo "$0: $Version";exit 0; }

trap "exit" HUP INT QUIT ABRT KILL TERM

#KRG
#************
}  ##__old_intro_header__(){  #END

DF="busybox df"
[ "`which df-FULL`" != "" ] && DF="df-FULL"

RETSTUFF=`$DF $@`
RETVAL=$?

#hack to remove two conflicting entries mounted on / ...
#if [ "`echo "$RETSTUFF" | grep '^rootfs '`" != "" ];then
# if [ "`echo "$RETSTUFF" | grep '^/dev/root '`" != "" ];then
#  RETSTUFF=`echo "$RETSTUFF" | grep -v '^rootfs '`
# fi
#fi
RETSTUFF=`echo "$RETSTUFF" | grep -v '^rootfs '`

#replace /dev/root with correct root partition...
#rdev is a busybox applet...
ROOTPARTITION=`$(which rdev) | grep ' /$' | cut -f 1 -d ' ' | grep -E '/dev/sd|/dev/hd|/dev/mmc'`
[ "$DEBUG" ] && echo "ROOTPARTITION='${ROOTPARTITION##*/}'" >&2
_debug "ROOTPARTITION='${ROOTPARTITION##*/}'"               >&2
if [ -e /sys/class/block/${ROOTPARTITION##*/} ];then

:

else

MAJh=`stat -c %t $ROOTPARTITION`
MAJd=$(( 16#$MAJh ))
MINh=`stat -c %T $ROOTPARTITION`
MINd=$(( 16#$MINh ))
POSSIBLE=`LANG=C ls -l /dev |awk '{print $5" "$6" "$10}' |grep "${MAJd}, ${MINd}" |awk '{print $3}'`
for p_ in $POSSIBLE;do
[ "$DEBUG" ] && echo "POSSIBLE='$p_'"                       >&2
[ -e /sys/class/block/$p_ ] && {
    [ -r /sys/class/block/$p_/uevent ] || continue
    unset MAJOR MINOR
    source /sys/class/block/$p_/uevent || continue
    test $MAJOR = $MAJd -a $MINOR = $MINd || continue
    ROOTPARTITION=/dev/$p_ ; break ; }
done

fi
[ "$DEBUG" ] && echo "ROOTPARTITION='${ROOTPARTITION##*/}'" >&2
_debug "ROOTPARTITION='${ROOTPARTITION##*/}'"               >&2
nPATTERN="s%^/dev/root %${ROOTPARTITION} %"
[ "$ROOTPARTITION" ] && RETSTUFF=`echo "$RETSTUFF" | sed -e "$nPATTERN"`

echo "$RETSTUFF"
exit $RETVAL

###END###
