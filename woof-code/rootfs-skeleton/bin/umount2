#!/bin/bash
# Needs bash ARGV and ARGC , uses (( c-- )), uses array
# Karl Reimer Godt July 2013 initial script
# Karl Reimer Godt August 2016 bugfixes fuser -m does not like device (anymore)
#  function_rox_n_fuser() main overhaul to prevent wrong fuser outputs
#    and add killing of fs users if provided -l or -f option

# New header by Karl Reimer Godt, September 2014
  _TITLE_="Puppy_umount2"
_VERSION_=1.0omega
_COMMENT_="$_TITLE_:Puppy Linux shell script [to TODO here]"

MY_SELF="/bin/umount2"
MY_PID=$$

DEBUG=1

test -f /etc/rc.d/f4puppy5 && {
[ "$HAVE_F4PUPPY5" ] || . /etc/rc.d/f4puppy5

ADD_PARAMETER_LIST=""
ADD_PARAMETERS=""
_provide_basic_parameters

TWO_HELP='1'; TWO_VERSION='1'; TWO_VERBOSE=''; TWO_DEBUG=''; ## Set to anything
# if code requires further down (ie. custom usage or version message)
ADD_HELP_MSG="$_COMMENT_"
_parse_basic_parameters "$@"
[ "$DO_SHIFT" ] && [ ! "${DO_SHIFT//[[:digit:]]/}" ] && {
  for oneSHIFT in `seq 1 1 $DO_SHIFT`; do shift; done; }

_trap

}
# End new header
#
#

[ "$*" ] || exec busybox umount
# pidof needs proc directory available to suppress error message
# and better mounted otherwise finds no pid and delivers incorrect result.
#pidof sync >>$OUT || sync

USE_FULL='';

ARGS=`set | grep -E 'ARGV|ARGC'`
ARGSV=`echo "$ARGS" | grep -m1 ARGV | grep -o '(.*)$' | sed 's|^(||;s|)$||' `
ARGSC=`echo "$ARGS" | grep -m1 ARGC | cut -f2 -d'"'`
c=$ARGSC


# here document needs writable /tmp ...
# but /proc may be umounted ...
if test -e /proc/mounts; then
:
else
 _warn "/proc not mounted"
 _notice "Attempting to mount procfs .."
test -e /proc && { busybox mount -t proc none /proc; RETVAL=$?; } || {
 _info "Attempting to remount rw of '/' to ensure it is writable .."
 busybox mount -o remount,rw /dev/root /
 mkdir /proc && { busybox mount -t proc none /proc; RETVAL=$?; } || {
 _err "Failed to mount procfs"
 }
}
fi
if cut -f2 -d' ' /proc/mounts | grep $Q '^/tmp$'; then
 _info "Attempting to remount rw /tmp to ensure it is writable .."
 busybox mount -o remount,rw tmpfs /tmp
else
 _info "Attempting to remount rw of '/' to ensure it is writable .."
 busybox mount -o remount,rw /dev/root /
fi
[ "$RETVAL" = 0 ] && { NEED_PROC_MOUNT=YES; _notice "Had to mount /proc"; }
[ "$DEBUG" ] && echo RETVAL=$RETVAL
pidof sync >>$OUT || sync

while read p
do
[ "$DEBUG" ] && echo $p >&2
p="${p#*=}"
p="${p/#\"/}"
p="${p/%\"/}"
[ "$DEBUG" ] && echo $p >&2
test "$p" = '-l' && HAVE_LAZY=YES   # used to kill fs users
test "$P" = '-f' && HAVE_FORCE=YES  # used to kill fs users
P[$c]="$p"
(( c-- ))
done<<EOI
$(echo "$ARGSV" | sed 's|" \[|"\n\[|g')
EOI

function_rox_n_fuser(){
 [ "$DEBUG" ] && echo "'${*}'" >&2
 [ -e "${*}" ] || return 0
 # early return if not mountpoint since fuser -m would consider same as '/'
 mountpoint $Q "${*}" || { echo "${*} not mounted" >&2; return 1; } #return value not used
 (pidof ROX-Filer || pidof rox) >>$OUT && rox -D "${*}"
 sleep 0.02 #change if req
 FUSERS=`busybox fuser -m "${*}"`
 if test "$FUSERS"; then
 FUSERS_PS=`for fsu in $FUSERS; do ps | grep -w "$fsu"| grep -v grep; echo; done`
 (
 echo "Warning: File system has running programs.."
 echo "$FUSERS_PS"
 echo
 ) >&2
  if test "$HAVE_FORCE" -o "$HAVE_LAZY"; then
  for fsu in $FUSERS; do kill $fsu; done
  fi
 fi
 #handle submounts like bound /proc in a chroot partition
 HAVE_SUBMOUNTS=`cut -f2 -d' ' /proc/mounts | grep "^${*}/"`
 if test "$HAVE_SUBMOUNTS"; then
  (
  echo "Notice: ${*} has submounts:"
  echo "$HAVE_SUBMOUNTS"
  ) >&2
  if test "$HAVE_FORCE" -o "$HAVE_LAZY"; then
  for sub in $HAVE_SUBMOUNTS; do busybox umount -l -f "$sub"; done
  fi
 fi
 sleep 0.02 #change if req
}

for k in `seq 1 1 $ARGSC`
do
case "${P[$k]}"
in
/*)
if [ -d "${P[$k]}" ] ; then
 ##function_rox_n_fuser "${P[$k]}"
 MNTPTS_ALL=`awk '{print $1"+++"$2}' /proc/mounts`
 MNTPTS_ALL=`busybox echo -e "$MNTPTS_ALL"`
 DEVNAMEP=`echo "$MNTPTS_ALL" | grep -m1 -w "${P[$k]}"`
 DEVNAMEP="${DEVNAMEP%%+++*}"
 MNTPT_M="${P[$k]}"
 #function_rox_n_fuser "$DEVNAMEP"
 [ -d "$MNTPT_M" ] && function_rox_n_fuser "$MNTPT_M"
elif [ -b "${P[$k]}" ] ; then
 #function_rox_n_fuser "${P[$k]}"
 MNTPTS_ALL=`awk '{print $1"+++"$2}' /proc/mounts`
 MNTPTS_ALL=`busybox echo -e "$MNTPTS_ALL"`
 MNTPT_D=`echo "$MNTPTS_ALL" | grep -m1 -w "${P[$k]}"`
 MNTPT_D="${MNTPT_D#*+++}"
 DEVNAMEP="${P[$k]}"
 [ -d "$MNTPT_D" ] && function_rox_n_fuser "$MNTPT_D"
fi
;;
--version)
echo "$0 : Puppy Linux Wrapper bash shell script:"
busybox umount --help
echo "$0 : defaults using -dr"
echo "$0 : OR switches to /bin/umount-FULL if --long-options:"
USE_FULL=YES
;;
--*) #exec umount-FULL ${P[@]} ;;
USE_FULL=YES
;;
esac
done

[ "$MNTPT_M" -o "$MNTPT_D" ] || MOUNTEDSB=`tac /proc/mounts`

[ "$USE_FULL" ] && {
umount-FULL "${P[@]}"
RETVAL=$?
} || {
busybox umount -dr "${P[@]}"
RETVAL=$?
}

sleep 0.02s #change if req
if test -f /proc/uptime; then
IFS='. ' read UPtime restU RUNtime restR </proc/uptime
fi
[ "$DEBUG" ] && dmesg | tail | grep -w "$UPtime" >&2

[ "$DEBUG" ] && echo RETVAL=$RETVAL >&2
[ $RETVAL = 0 ] || exit $RETVAL

  if [ "$MNTPT_M" ] ; then OLDMOUNTPT="$MNTPT_M"
elif [ "$MNTPT_D" ] ; then OLDMOUNTPT="$MNTPT_D"
else
sleep 0.02s #change if req
MOUNTEDSA=`tac /proc/mounts`
OLDMOUNTS=`echo "$MOUNTEDSB" | grep -v "$MOUNTEDSA"`
OLDMOUNTPT=`echo "$OLDMOUNTS" | awk '{print $2}'`
OLDMOUNTPT=`echo -e "$OLDMOUNTPT" | head -n1`
  fi

[ "$MNTPT_M" -o "$MNTPT_D" ] || {
[ "$MOUNTEDSB" -a "$MOUNTEDSA" -a "$MOUNTEDSB" = "$MOUNTEDSA" ] && {
echo "NO CHANGES in mtab.";exit $RETVAL; } || {
[ "$MOUNTEDSB" -a "$MOUNTEDSA" -a "$MOUNTEDSB" != "$MOUNTEDSA" ] || {
echo "NO CHANGES in mtab.";exit $RETVAL; }; }; }
# ls hangs on fuse.gphotofs ... up to 2 minutes ..
case $OLDMOUNTPT in */dev|*/dev/*|*/proc|*/proc/*|*/sys|*/sys/*|*/tmp) :;; #keep these dirs ...
*) [ "$OLDMOUNTPT" -a -d "$OLDMOUNTPT" -a ! "`ls -A "$OLDMOUNTPT"`" ] && rmdir $VERB "$OLDMOUNTPT"
;;
esac

[ "$DISPLAY" ] || { echo "NO DISPLAY.";exit $RETVAL; }

#. /etc/eventmanager
#[ "$ICONDESK" = true ] || exit $RETVAL
#[ "$ICONPARTITIONS" = true ] || exit $RETVAL

[ "$DEVNAMEP" ] || {
DEVNAMEP=`echo "$OLDMOUNT" | awk '{print $1}'`
DEVNAMEP=`echo -e "$DEVNAMEP"`
}
[ "$DEBUG" ] && echo "${DEVNAMEP##*/}" >&2
[ -d /root/.pup_event/drive_"${DEVNAMEP##*/}" ] || { echo "NO drive_${DEVNAMEP##*/} Directory.";exit $RETVAL ; }

( pidof ROX-Filer || pidof rox ) >>$OUT || { echo "ROX-Filer or rox not running.";exit $RETVAL ; }
pidof pup_event_frontend_d >>$OUT || { echo "pup_event_frontend_d not running.";exit $RETVAL ; }

case ${DEVNAMEP##*/} in
fd*)      CATEGORY=floppy  ;;
scd*|sr*) CATEGORY=optical ;;
mmc*|sd*|hd*)
DEVNAME=`echo "$DEVNAMEP" | sed 's%p[0-9]*$%%;s%[0-9]*$%%'`
PROBEDISK2=`probedisk2`
CATEGORY=`echo "$PROBEDISK2" | grep -m1 -w "$DEVNAME" | cut -f2 -d'|'`
;;
*) echo "Not a block device for pup_event* ICONDESK.";exit $RETVAL ;;
esac

DISK_FREE=`df`

. /etc/rc.d/functions4puppy4
echo "$DISK_FREE" | grep -w "^$DEVNAMEP" | grep -E ' /initrd/| /$' &&
{
      icon_mounted_func "${DEVNAMEP##*/}" $CATEGORY; } || {  #see functions4puppy4
      icon_unmounted_func "${DEVNAMEP##*/}" $CATEGORY;
}

exit $RETVAL
# Very End of this file 'bin/umount2' #
###END###
